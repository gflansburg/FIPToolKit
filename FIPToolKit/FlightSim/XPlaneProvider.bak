using FIPToolKit.Threading;
using FIPToolKit.Tools;
using System;
using System.CodeDom;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Web.UI.Design.WebControls;
using Unosquare.Swan;

namespace FIPToolKit.FlightSim
{
    public class Rpos
    {
        public double Longitude { get; set; }
        public double Latitude { get; set; }
        public double AltitudeMSLMeters { get; set; }
        public double AltitudeAGLMeters { get; set; }
        public float Pitch { get; set; }
        public float HeadingTrue { get; set; }
        public float Roll { get; set; }
        public float SpeedEast { get; set; }
        public float SpeedVertical { get; set; }
        public float SpeedSouth { get; set; }
        public float RollRate { get; set; }
        public float PitchRate { get; set; }
        public float YawRate { get; set; }
    }

    public class XPlaneProvider : FlightSimProviderBase, IDisposable
    {
        public static readonly XPlaneProvider Instance;

        private const string AIRSPEED_INDICATED = "sim/flightmodel/position/indicated_airspeed";
        private const string ACF_NAME = "sim/aircraft/view/acf_ui_name";
        private const string KOHLSMAN = "sim/weather/barometer_current_inhg";
        private const string IS_AIRLINER = "sim/aircraft2/metadata/is_airliner";
        private const string AIRSPEED_TRUE = "sim/flightmodel/position/true_airspeed";
        private const string IS_ONGROUND = "sim/flightmodel2/gear/on_ground";
        private const string GROUNDSPEED = "sim/flightmodel2/position/groundspeed";
        private const string HEADING_TRUE = "sim/flightmodel2/position/true_psi";
        private const string HEADING_MAG = "sim/flightmodel2/position/mag_psi";
        private const string AMBIENT_TEMP = "sim/weather/aircraft/temperature_ambient_deg_c";
        private const string IS_SEAPLANE = "sim/aircraft2/metadata/is_seaplane";
        private const string WIND_DIRECTION = "sim/weather/wind_direction_degt";
        private const string WIND_SPEED = "sim/weather/wind_speed_kt";
        private const string IS_HELICOPTER = "sim/aircraft2/metadata/is_helicopter";
        private const string NAV1_RADIAL = "sim/cockpit/radios/nav1_dir_degt";
        private const string NAV2_RADIAL = "sim/cockpit/radios/nav2_dir_degt";
        private const string NAV1_FREQUENCY = "sim/cockpit/radios/nav1_freq_hz";
        private const string NAV2_FREQUENCY = "sim/cockpit/radios/nav2_freq_hz";
        private const string HEADING_BUG = "sim/cockpit/autopilot/heading";
        private const string ADF_BEARING = "sim/cockpit/radios/adf1_dir_degt";
        private const string GPS_COURSE_TRUE = "sim/cockpit2/radios/indicators/gps_relative_bearing_deg";
        private const string GPS_COURSE_MAG = "sim/cockpit2/radios/indicators/gps_bearing_deg_mag";
        private const string HANDSHAKE = "sim/network/misc/connection_handshake";
        private const string IS_GLIDER = "sim/aircraft2/metadata/is_glider";
        private const string IS_MILITARY = "sim/aircraft2/metadata/is_military";
        private const string IS_GENERAL_AVIATION = "sim/aircraft2/metadata/is_general_aviation";
        private const string ENGINETYPE = "sim/aircraft/prop/acf_en_type[0]";
        private const string AIRCRAFTID = "sim/aircraft/view/acf_modeS_id";
        private const string DESTINATION_INDEX = "sim/cockpit/gps/destination_index";
        private const string PRESSURE_ALTITUDE = "sim/flightmodel2/position/pressure_altitude";
        private const string COM1_ACTIVE = "sim/atc/com1_active";
        private const string COM2_ACTIVE = "sim/atc/com2_active";
        private const string COM1_RECEIVE = "sim/atc/com1_rx";
        private const string COM2_RECEIVE = "sim/atc/com2_rx";
        private const string COM1_TRANSMIT = "sim/atc/com1_tx";
        private const string COM2_TRANSMIT = "sim/atc/com2_tx";
        private const string COM1_FREQUENCY = "sim/cockpit/radios/com1_freq_hz";
        private const string COM2_FREQUENCY = "sim/cockpit/radios/com2_freq_hz";
        private const string TRANSPONDER = "sim/cockpit/radios/transponder_code";
        private const string BATTERY_ON = "sim/cockpit/electrical/battery_on";
        private const string AVIONICS_ON = "sim/cockpit/electrical/avionics_on";

        private enum XPLANE_ENGINETYPE
        {
            RecipCarb = 0,
            RecipInjected = 1,
            Electric = 3,
            SingleSpoolJet = 5,
            Rocket = 6,
            MultiSpoolJet = 7,
            FreeTurborpop = 9,
            FixedTurboprop = 10
        }

        private readonly IPEndPoint localEP = new IPEndPoint(IPAddress.Any, 49003);
        private IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 49000);

        private UdpClient ServerSocket { get; set; }

        protected AbortableBackgroundWorker _timer;
        private bool _stop = false;

        private List<XPlaneCrossref> Crossref = new List<XPlaneCrossref>();

        public bool IsGlider { get; set; }
        public bool IsMilitary { get; set; }
        public bool IsGeneralAviation { get; set; }
        public int XPlaneAircraftId { get; set; }

        private bool _com1Active;
        public bool Com1Active => _com1Active;

        private bool _com2Active;
        public bool Com2Active => _com2Active;

        private double _nav1Frequency;
        public override double Nav1Frequency => _nav1Frequency;

        private double _nav2Frequency;
        public override double Nav2Frequency => _nav2Frequency;

        public override string Name => "X-Plane";

        private Dictionary<string, Aircraft> _traffic = new Dictionary<string, Aircraft>();
        public override Dictionary<string, Aircraft> Traffic => _traffic;

        private int _aircraftId = 0;
        public override int AircraftId => _aircraftId;

        private string _aircraftName = string.Empty;
        public override string AircraftName => _aircraftName;

        public double _altitudeMSL;
        public override double AltitudeMSL => _altitudeMSL;

        public double _altitudeAGL;
        public override double AltitudeAGL => _altitudeAGL;

        private double _headingMagneticDegrees;
        public override double HeadingMagneticDegrees => _headingMagneticDegrees;

        private double _headingTrueDegrees;
        public override double HeadingTrueDegrees => _headingTrueDegrees;

        public override double HeadingMagneticRadians => _headingMagneticDegrees * (Math.PI / 180);

        public override double HeadingTrueRadians => _headingTrueDegrees * (Math.PI / 180);

        private bool _isConnected;
        public override bool IsConnected => _isConnected;

        private string _atcIdentifier = string.Empty;
        public override string ATCIdentifier => _atcIdentifier;

        private string _atcModel = string.Empty;
        public override string ATCModel => _atcModel;

        private string _atcType = string.Empty;
        public override string ATCType => _atcType;

        private bool _isHeavy;
        public override bool IsHeavy => _isHeavy;

        private bool _isGearFloats;
        public override bool IsGearFloats => _isGearFloats;

        private bool _isHelo;
        public override bool IsHelo => _isHelo;

        private EngineType _engineType;
        public override EngineType EngineType => _engineType;

        private bool _onGround;
        public override bool OnGround => _onGround;

        private double _groundSpeedKnots;
        public override double GroundSpeedKnots => _groundSpeedKnots;

        private double _airspeedIndicatedKnots;
        public override double AirSpeedIndicatedKnots => _airspeedIndicatedKnots;

        private double _airspeedTrueKnots;
        public override double AirSpeedTrueKnots => _airspeedTrueKnots;

        private double _ambientTemperatureCelcius;
        public override double AmbientTemperatureCelcius => _ambientTemperatureCelcius;

        private double _ambientWindDirectionDegrees;
        public override double AmbientWindDirectionDegrees => _ambientWindDirectionDegrees;

        private double _ambientWindSpeedKnots;
        public override double AmbientWindSpeedKnots => _ambientWindSpeedKnots;

        private double _kohlsmanInchesMercury;
        public override double KohlsmanInchesMercury => _kohlsmanInchesMercury;

        private ReadyToFly _isReadyToFly;
        public override ReadyToFly IsReadyToFly => _isReadyToFly;

        private double _gpsRequiredMagneticHeadingRadians;
        public override double GPSRequiredMagneticHeadingRadians => _gpsRequiredMagneticHeadingRadians;

        private double _gpsRequiredTrueHeadingRadians;
        public override double GPSRequiredTrueHeadingRadians => _gpsRequiredTrueHeadingRadians;

        private bool _hasActiveWaypoint;
        public override bool HasActiveWaypoint => _hasActiveWaypoint;

        private double _gpsCrossTrackErrorMeters;
        public override double GPSCrossTrackErrorMeters => _gpsCrossTrackErrorMeters;

        private double _nav1Radial;
        public override double Nav1Radial => _nav1Radial;

        private double _nav2Radial;
        public override double Nav2Radial => _nav2Radial;

        public override bool Nav1Available => Nav1Frequency != 0;

        public override bool Nav2Available => Nav2Frequency != 0;

        private double _adfRelativeBearing;
        public override double AdfRelativeBearing => _adfRelativeBearing;

        private double _headingBug;
        public override double HeadingBug => _headingBug;

        private double _latitude;
        public override double Latitude => _latitude;

        public double _longitude;
        public override double Longitude => _longitude;

        public double _altitudePressure;
        public override double AltitudePressure => _altitudePressure;

        private List<string> Changed = new List<string>();

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct RREFREQUEST
        {
            public int FREQUENCY;
            public int ID;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 400)]
            public string DATAREF;
        }

        public class Rref
        {
            public int Id;
            public float Value;
        }

        public class RrefString
        {
            public int Id;
            public string Value;
        }

        private enum EVENT_ID : int
        {
            AIRSPEED_INDICATED,
            KOHLSMAN,
            ACF_NAME_0,
            ACF_NAME_1,
            ACF_NAME_2,
            ACF_NAME_3,
            ACF_NAME_4,
            ACF_NAME_5,
            ACF_NAME_6,
            ACF_NAME_7,
            ACF_NAME_8,
            ACF_NAME_9,
            ACF_NAME_10,
            ACF_NAME_11,
            ACF_NAME_12,
            ACF_NAME_13,
            ACF_NAME_14,
            ACF_NAME_15,
            ACF_NAME_16,
            ACF_NAME_17,
            ACF_NAME_18,
            ACF_NAME_19,
            ACF_NAME_20,
            ACF_NAME_21,
            ACF_NAME_22,
            ACF_NAME_23,
            ACF_NAME_24,
            ACF_NAME_25,
            ACF_NAME_26,
            ACF_NAME_27,
            ACF_NAME_28,
            ACF_NAME_29,
            ACF_NAME_30,
            ACF_NAME_31,
            ACF_NAME_32,
            ACF_NAME_33,
            ACF_NAME_34,
            ACF_NAME_35,
            ACF_NAME_36,
            ACF_NAME_37,
            ACF_NAME_38,
            ACF_NAME_39,
            IS_AIRLINER,
            AIRSPEED_TRUE,
            GROUNDSPEED,
            IS_ONGROUND,
            HEADING_TRUE,
            HEADING_MAG,
            AMBIENT_TEMP,
            IS_SEAPLANE,
            IS_HELICOPTER,
            WIND_DIRECTION,
            WIND_SPEED,
            NAV1_RADIAL,
            NAV2_RADIAL,
            NAV1_FREQUENCY,
            NAV2_FREQUENCY,
            HEADING_BUG,
            ADF_BEARING,
            GPS_COURSE_TRUE,
            GPS_COURSE_MAG,
            HANDSHAKE,
            IS_GLIDER,
            IS_MILITARY,
            IS_GENERAL_AVIATION,
            ENGINETYPE,
            AIRCRAFTID,
            DESTINATION_INDEX,
            PRESSURE_ALTITUDE,
            COM1_ACTIVE,
            COM2_ACTIVE,
            COM1_RECEIVE,
            COM2_RECEIVE,
            COM1_TRANSMIT,
            COM2_TRANSMIT,
            COM1_FREQUENCY,
            COM2_FREQUENCY,
            TRANSPONDER,
            BATTERY_ON,
            AVIONICS_ON
        }

    static XPlaneProvider()
        {
            Instance = new XPlaneProvider();
        }

        XPlaneProvider()
        {
            Initialize();
        }

        private void Initialize()
        {
            _timer = new AbortableBackgroundWorker();
            _timer.DoWork += UDPDataReceive_DoWork;
            _timer.RunWorkerAsync();
            ThreadPool.QueueUserWorkItem(_ =>
            {
                Crossref = XPlaneCrossref.GetXPlaneCrossref();
            });
        }

        public void Dispose()
        {
            if (ServerSocket != null)
            {
                UnsubscribeFromData();
                ServerSocket.Close();
                ServerSocket.Dispose();
                ServerSocket = null;
            }
        }

        private byte[] CreateMessage(string message, string value)
        {
            byte[] data = new byte[message.Length + value.Length + 2];
            Buffer.BlockCopy(Encoding.ASCII.GetBytes(message + "\0"), 0, data, 0, message.Length + 1);
            Buffer.BlockCopy(Encoding.ASCII.GetBytes(value + "\0"), 0, data, message.Length + 1, value.Length + 1);
            return data;
        }

        private byte[] BuildRPOSRequest(int frequencyPerSecond = 0)
        {
            string s = frequencyPerSecond.ToString(CultureInfo.CurrentCulture);
            byte[] bytes = new byte[6 + s.Length];
            Buffer.BlockCopy(ASCIIEncoding.ASCII.GetBytes("RPOS\0"), 0, bytes, 0, 5);
            Buffer.BlockCopy(ASCIIEncoding.ASCII.GetBytes(s), 0, bytes, 5, s.Length);
            bytes[bytes.Length - 1] = 0x00;
            return bytes;
        }

        private byte[] BuildRREFRequest(EVENT_ID id, string dataref, int frequencyPerSecond = 0)
        {
            byte[] bytes = new byte[5 + Marshal.SizeOf(typeof(RREFREQUEST))];
            RREFREQUEST request = new RREFREQUEST()
            {
                FREQUENCY = frequencyPerSecond,
                ID = (int)id,
                DATAREF = dataref
            };
            Buffer.BlockCopy(ASCIIEncoding.ASCII.GetBytes("RREF\0"), 0, bytes, 0, 5);
            Buffer.BlockCopy(GetBytes(request), 0, bytes, 5, Marshal.SizeOf(typeof(RREFREQUEST)));
            return bytes;
        }

        private byte[] GetBytes(RREFREQUEST str)
        {
            int size = Marshal.SizeOf(str);
            byte[] arr = new byte[size];
            IntPtr ptr = IntPtr.Zero;
            try
            {
                ptr = Marshal.AllocHGlobal(size);
                Marshal.StructureToPtr(str, ptr, true);
                Marshal.Copy(ptr, arr, 0, size);
            }
            finally
            {
                Marshal.FreeHGlobal(ptr);
            }
            return arr;
        }

        private Rref FromBytes(byte[] arr)
        {
            Rref rref = new Rref()
            {
                Id = BitConverter.ToInt32(arr, 0),
                Value = BitConverter.ToSingle(arr, 4)
            };
            return rref;
        }

        private RrefString RREFToString(byte[] arr)
        {
            RrefString rref = new RrefString()
            {
                Id = BitConverter.ToInt32(arr, 0),
                Value = BitConverter.ToString(arr, 4, 250)
            };
            return rref;
        }

        private Rpos ParseRposPacket(byte[] bytes)
        {
            return new Rpos()
            {
                Longitude = BitConverter.ToDouble(bytes, 5),
                Latitude = BitConverter.ToDouble(bytes, 13),
                AltitudeMSLMeters = BitConverter.ToDouble(bytes, 21),
                AltitudeAGLMeters = BitConverter.ToSingle(bytes, 29),
                Pitch = BitConverter.ToSingle(bytes, 33),
                HeadingTrue = BitConverter.ToSingle(bytes, 37),
                Roll = BitConverter.ToSingle(bytes, 41),
                SpeedEast = BitConverter.ToSingle(bytes, 45),
                SpeedVertical = BitConverter.ToSingle(bytes, 49),
                SpeedSouth = BitConverter.ToSingle(bytes, 53),
                RollRate = BitConverter.ToSingle(bytes, 57),
                PitchRate = BitConverter.ToSingle(bytes, 61),
                YawRate = BitConverter.ToSingle(bytes, 65)
            };
        }

        private Rpos ParseRposPacket2(byte[] bytes)
        {
            return new Rpos()
            {
                Longitude = BitConverter.ToDouble(bytes, 0),
                Latitude = BitConverter.ToDouble(bytes, 8),
                AltitudeMSLMeters = BitConverter.ToDouble(bytes, 16),
                AltitudeAGLMeters = BitConverter.ToSingle(bytes, 24),
                Pitch = BitConverter.ToSingle(bytes, 28),
                HeadingTrue = BitConverter.ToSingle(bytes, 32),
                Roll = BitConverter.ToSingle(bytes, 36),
                SpeedEast = BitConverter.ToSingle(bytes, 40),
                SpeedVertical = BitConverter.ToSingle(bytes, 44),
                SpeedSouth = BitConverter.ToSingle(bytes, 48),
                RollRate = BitConverter.ToSingle(bytes, 52),
                PitchRate = BitConverter.ToSingle(bytes, 56),
                YawRate = BitConverter.ToSingle(bytes, 60)
            };
        }

        private int SendCommand(byte[] bytes)
        {
            try
            {
                return ServerSocket.Send(bytes, bytes.Length, remoteEP);
            }
            catch(Exception)
            {
                return 0;
            }
        }

        private int SubscribeToData(int frequencyPerSecond = 30)
        {
            int sent = 0;
            //sent += SendCommand(BuildRPOSRequest(frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.AIRSPEED_INDICATED, AIRSPEED_INDICATED, frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_0, ACF_NAME + "[0]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_1, ACF_NAME + "[1]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_2, ACF_NAME + "[2]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_3, ACF_NAME + "[3]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_4, ACF_NAME + "[4]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_5, ACF_NAME + "[5]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_6, ACF_NAME + "[6]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_7, ACF_NAME + "[7]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_8, ACF_NAME + "[8]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_9, ACF_NAME + "[9]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_10, ACF_NAME + "[10]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_11, ACF_NAME + "[11]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_12, ACF_NAME + "[12]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_13, ACF_NAME + "[13]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_14, ACF_NAME + "[14]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_15, ACF_NAME + "[15]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_16, ACF_NAME + "[16]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_17, ACF_NAME + "[17]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_18, ACF_NAME + "[18]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_19, ACF_NAME + "[19]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_20, ACF_NAME + "[20]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_21, ACF_NAME + "[21]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_22, ACF_NAME + "[22]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_23, ACF_NAME + "[23]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_24, ACF_NAME + "[24]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_25, ACF_NAME + "[25]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_26, ACF_NAME + "[26]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_27, ACF_NAME + "[27]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_28, ACF_NAME + "[28]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_29, ACF_NAME + "[29]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_30, ACF_NAME + "[30]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_31, ACF_NAME + "[31]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_32, ACF_NAME + "[32]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_33, ACF_NAME + "[33]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_34, ACF_NAME + "[34]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_35, ACF_NAME + "[35]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_36, ACF_NAME + "[36]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_37, ACF_NAME + "[37]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_38, ACF_NAME + "[38]", frequencyPerSecond));
            sent += SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_39, ACF_NAME + "[39]", frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.KOHLSMAN, KOHLSMAN, frequencyPerSecond));
            //sent = +SendCommand(BuildRREFRequest(EVENT_ID.IS_AIRLINER, IS_AIRLINER, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.AIRSPEED_TRUE, AIRSPEED_TRUE, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.IS_ONGROUND, IS_ONGROUND, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.GROUNDSPEED, GROUNDSPEED, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.HEADING_MAG, HEADING_MAG, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.AMBIENT_TEMP, AMBIENT_TEMP, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.IS_SEAPLANE, IS_SEAPLANE, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.WIND_DIRECTION, WIND_DIRECTION, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.WIND_SPEED, WIND_SPEED, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.IS_HELICOPTER, IS_HELICOPTER, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.NAV1_FREQUENCY, NAV1_FREQUENCY, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.NAV2_FREQUENCY, NAV2_FREQUENCY, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.NAV1_RADIAL, NAV1_RADIAL, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.NAV2_RADIAL, NAV2_RADIAL, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.HEADING_BUG, HEADING_BUG, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.ADF_BEARING, ADF_BEARING, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.GPS_COURSE_TRUE, GPS_COURSE_TRUE, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.GPS_COURSE_MAG, GPS_COURSE_MAG, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.IS_GLIDER, IS_GLIDER, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.IS_MILITARY, IS_MILITARY, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.IS_GENERAL_AVIATION, IS_GENERAL_AVIATION, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.ENGINETYPE, ENGINETYPE, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.AIRCRAFTID, AIRCRAFTID, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.DESTINATION_INDEX, DESTINATION_INDEX, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.PRESSURE_ALTITUDE, PRESSURE_ALTITUDE, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.COM1_ACTIVE, COM1_ACTIVE, frequencyPerSecond));
            //sent += SendCommand(BuildRREFRequest(EVENT_ID.COM2_ACTIVE, COM2_ACTIVE, frequencyPerSecond));
            return sent;
        }

        private void UnsubscribeFromData()
        {
            SendCommand(BuildRPOSRequest());
            SendCommand(BuildRREFRequest(EVENT_ID.AIRSPEED_INDICATED, AIRSPEED_INDICATED, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_0, ACF_NAME + "[0]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_1, ACF_NAME + "[1]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_2, ACF_NAME + "[2]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_3, ACF_NAME + "[3]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_4, ACF_NAME + "[4]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_5, ACF_NAME + "[5]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_6, ACF_NAME + "[6]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_7, ACF_NAME + "[7]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_8, ACF_NAME + "[8]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_9, ACF_NAME + "[9]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_10, ACF_NAME + "[10]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_11, ACF_NAME + "[11]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_12, ACF_NAME + "[12]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_13, ACF_NAME + "[13]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_14, ACF_NAME + "[14]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_15, ACF_NAME + "[15]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_16, ACF_NAME + "[16]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_17, ACF_NAME + "[17]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_18, ACF_NAME + "[18]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_19, ACF_NAME + "[19]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_20, ACF_NAME + "[20]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_21, ACF_NAME + "[21]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_22, ACF_NAME + "[22]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_23, ACF_NAME + "[23]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_24, ACF_NAME + "[24]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_25, ACF_NAME + "[25]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_26, ACF_NAME + "[26]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_27, ACF_NAME + "[27]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_28, ACF_NAME + "[28]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_29, ACF_NAME + "[29]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_30, ACF_NAME + "[30]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_31, ACF_NAME + "[31]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_32, ACF_NAME + "[32]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_33, ACF_NAME + "[33]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_34, ACF_NAME + "[34]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_35, ACF_NAME + "[35]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_36, ACF_NAME + "[36]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_37, ACF_NAME + "[37]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_38, ACF_NAME + "[38]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ACF_NAME_39, ACF_NAME + "[39]", 0));
            SendCommand(BuildRREFRequest(EVENT_ID.KOHLSMAN, KOHLSMAN, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.IS_AIRLINER, IS_AIRLINER, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.AIRSPEED_TRUE, AIRSPEED_TRUE, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.IS_ONGROUND, IS_ONGROUND, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.GROUNDSPEED, GROUNDSPEED, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.HEADING_MAG, HEADING_MAG, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.AMBIENT_TEMP, AMBIENT_TEMP, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.IS_SEAPLANE, IS_SEAPLANE, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.WIND_DIRECTION, WIND_DIRECTION, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.WIND_SPEED, WIND_SPEED, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.IS_HELICOPTER, IS_HELICOPTER, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.NAV1_FREQUENCY, NAV1_FREQUENCY, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.NAV2_FREQUENCY, NAV2_FREQUENCY, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.NAV1_RADIAL, NAV1_RADIAL, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.NAV2_RADIAL, NAV2_RADIAL, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.HEADING_BUG, HEADING_BUG, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ADF_BEARING, ADF_BEARING, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.GPS_COURSE_TRUE, GPS_COURSE_TRUE, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.GPS_COURSE_MAG, GPS_COURSE_MAG, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.IS_GLIDER, IS_GLIDER, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.IS_MILITARY, IS_MILITARY, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.IS_GENERAL_AVIATION, IS_GENERAL_AVIATION, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.ENGINETYPE, ENGINETYPE, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.AIRCRAFTID, AIRCRAFTID, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.DESTINATION_INDEX, DESTINATION_INDEX, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.PRESSURE_ALTITUDE, PRESSURE_ALTITUDE, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.COM1_ACTIVE, COM1_ACTIVE, 0));
            SendCommand(BuildRREFRequest(EVENT_ID.COM2_ACTIVE, COM2_ACTIVE, 0));
        }

        private void UDPDataReceive_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            byte[] buffer = new byte[0];
            DateTime? lastReadTime = null;
            while (!_stop)
            {
                if (!IsConnected)
                {
                    try
                    {
                        ServerSocket = new UdpClient();
                        ServerSocket.ExclusiveAddressUse = false;
                        ServerSocket.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);
                        ServerSocket.Client.Bind(localEP);
                        buffer = new byte[0];
                        lastReadTime = null;
                        if (SubscribeToData() > 0)
                        {
                            Thread.Sleep(10);
                            if (ServerSocket.Available > 1)
                            {
                                _isConnected = true;
                                Connected();
                                _isReadyToFly = (XPlaneAircraftId != 0 ? FlightSim.ReadyToFly.Ready : FlightSim.ReadyToFly.Loading);
                                ReadyToFly(_isReadyToFly);
                            }
                            else
                            {
                                ServerSocket.Dispose();
                                ServerSocket = null;
                            }
                        }
                        else
                        {
                            ServerSocket.Dispose();
                            ServerSocket = null;
                        }
                    }
                    catch (Exception)
                    {
                    }
                }
                if (lastReadTime.HasValue && ServerSocket != null && (DateTime.Now - lastReadTime.Value).TotalSeconds > 5)
                {

                    buffer = new byte[0];
                    lastReadTime = null;
                    _aircraftId = 0;
                    XPlaneAircraftId = 0;
                    if (_isReadyToFly != FlightSim.ReadyToFly.Loading)
                    {
                        _isReadyToFly = FlightSim.ReadyToFly.Loading;
                        ReadyToFly(_isReadyToFly);
                    }
                }
                if (ServerSocket != null && ServerSocket.Available > 1)
                {
                    byte[] data;
                    try
                    {
                        IPEndPoint client = new IPEndPoint(IPAddress.Any, 0);
                        data = ServerSocket.Receive(ref client);
                        lastReadTime = DateTime.Now;
                    }
                    catch (Exception)
                    {
                        try
                        {
                            ServerSocket.Dispose();
                            ServerSocket = null;
                        }
                        catch(Exception)
                        {
                        }
                        _isConnected = false;
                        buffer = new byte[0];
                        lastReadTime = null;
                        _aircraftId = 0;
                        XPlaneAircraftId = 0;
                        _isReadyToFly = FlightSim.ReadyToFly.Loading;
                        ReadyToFly(_isReadyToFly);
                        Quit();
                        continue;
                    }
                    if (buffer.Length > 0 && data != null && data.Length > 0)
                    {
                        byte[] temp = new byte[buffer.Length + data.Length];
                        Buffer.BlockCopy(buffer, 0, temp, 0, buffer.Length);
                        Buffer.BlockCopy(data, 0, temp, buffer.Length, data.Length);
                        buffer = new byte[0];
                        data = temp;
                    }
                    Changed.Clear();
                    while (true)
                    {
                        if (data.Length < 5)
                        {
                            buffer = data;
                            break;
                        }
                        data = ProcessData(data);
                    }
                    TimeSpan elapsed = DateTime.Now - lastReadTime.Value;
                    if (elapsed.TotalSeconds >= 5)
                    {
                        foreach (string changed in Changed)
                        {
                            Debug.WriteLine(changed);
                        }
                        Debug.WriteLine(string.Format("Finished: {0} bytes {1}", data.Length, elapsed.ToReadableString()));
                    }
                    lastReadTime = DateTime.Now;
                }
                Thread.Sleep(1);
            }
        }

        private byte[] ProcessData(byte[] data)
        {
            string command = Encoding.ASCII.GetString(data, 0, 4).ToUpper(CultureInfo.CurrentCulture);
            byte[] temp2 = new byte[data.Length - 5];
            Buffer.BlockCopy(data, 5, temp2, 0, data.Length - 5);
            data = temp2;
            switch(command)
            {
                case "RPOS":
                    data = ProcessRPOS(data);
                    break;
                case "RREF":
                    data = ProcessRREF(data);
                    break;
                case "DREF":
                    data = ProcessDREF(data);
                    break;
                default:
                    Debug.WriteLine(string.Format("Received unknown command: {0}", command));
                    break;
            }
            if (Changed.Count > 0)
            {
                FlightDataReceived();
            }
            return data;
        }

        private int FindNull(byte[] data)
        {
            for(int i = data.Length - 1; i >= 0 ; i--)
            {
                if (data[i] != 0)
                {
                    return i + 1;
                }
            }
            return -1;
        }

        private byte[] ProcessDREF(byte[] data)
        {
            float var = BitConverter.ToSingle(data, 0);
            byte[] name = new byte[500];
            Buffer.BlockCopy(data, 4, name, 0, name.Length);
            int terminator = FindNull(name);
            string path = ASCIIEncoding.ASCII.GetString(name, 0, terminator == - 1 ? name.Length : terminator);
            byte[] temp = new byte[data.Length - 504];
            Buffer.BlockCopy(data, 504, temp, 0, temp.Length);
            return temp;
        }

        private byte[] ProcessRPOS(byte[] data)
        {
            if (data.Length >= 64)
            {
                double lat = Latitude;
                double lng = Longitude;
                Rpos rpos = ParseRposPacket2(data);
                if (_latitude != rpos.Latitude)
                {
                    _latitude = rpos.Latitude;
                    Changed.Add(nameof(Latitude));
                }
                if (_longitude != rpos.Longitude)
                {
                    _longitude = rpos.Longitude;
                    Changed.Add(nameof(Longitude));
                }
                if (_altitudeMSL != rpos.AltitudeAGLMeters * 3.28084)
                {
                    _altitudeMSL = rpos.AltitudeMSLMeters * 3.28084;
                    Changed.Add(nameof(AltitudeMSL));
                }
                if (_altitudeAGL != rpos.AltitudeAGLMeters * 3.28084)
                {
                    _altitudeAGL = rpos.AltitudeAGLMeters * 3.28084;
                    Changed.Add(nameof(AltitudeAGL));
                }
                if (_headingTrueDegrees != rpos.HeadingTrue)
                {
                    _headingTrueDegrees = rpos.HeadingTrue;
                    Changed.Add(nameof(HeadingTrueDegrees));
                }
                double distance = Tools.DistanceTo(lat, lng, Latitude, Longitude);
                //Have we moved more than 500M in 33.3 milliseconds?
                if (Location.IsEmpty() && IsReadyToFly == FlightSim.ReadyToFly.Ready)
                {
                    _isReadyToFly = FlightSim.ReadyToFly.Loading;
                    ReadyToFly(IsReadyToFly);
                }
                else if (distance >= 500)
                {
                    ReadyToFly(IsReadyToFly);
                }
                data = RemoveRPOS(data);
            }
            return data;
        }

        private byte[] ProcessRREF(byte[] buffer)
        {
            byte[] data = buffer;
            while (true)
            {
                if (data.Length < 8)
                {
                    break;
                }
                Rref result = FromBytes(data);
                EVENT_ID id = (EVENT_ID)result.Id;
                switch (id)
                {
                    case EVENT_ID.AIRSPEED_INDICATED:
                        if (_airspeedIndicatedKnots != result.Value)
                        {
                            _airspeedIndicatedKnots = result.Value;
                            Changed.Add(nameof(AirSpeedIndicatedKnots));
                        }
                        break;
                    case EVENT_ID.AIRSPEED_TRUE:
                        if (_airspeedTrueKnots != result.Value)
                        {
                            _airspeedTrueKnots = result.Value;
                            Changed.Add(nameof(AirSpeedTrueKnots));
                        }
                        break;
                    case EVENT_ID.GROUNDSPEED:
                        if (_groundSpeedKnots != result.Value)
                        {
                            _groundSpeedKnots = result.Value;
                            Changed.Add(nameof(GroundSpeedKnots));
                        }
                        break;
                    case EVENT_ID.KOHLSMAN:
                        if (_kohlsmanInchesMercury != result.Value)
                        {
                            _kohlsmanInchesMercury = result.Value;
                            Changed.Add(nameof(KohlsmanInchesMercury));
                        }
                        break;
                    case EVENT_ID.HEADING_MAG:
                        if (_headingMagneticDegrees != result.Value)
                        {
                            _headingMagneticDegrees = result.Value;
                            Changed.Add(nameof(HeadingMagneticDegrees));
                        }
                        break;
                    case EVENT_ID.AMBIENT_TEMP:
                        if (_ambientTemperatureCelcius != result.Value)
                        {
                            _ambientTemperatureCelcius = result.Value;
                            Changed.Add(nameof(AmbientTemperatureCelcius));
                        }
                        break;
                    case EVENT_ID.WIND_SPEED:
                        if (_ambientWindSpeedKnots != result.Value * 1.943844)
                        {
                            _ambientWindSpeedKnots = result.Value * 1.943844;
                            Changed.Add(nameof(AmbientWindSpeedKnots));
                        }
                        break;
                    case EVENT_ID.WIND_DIRECTION:
                        if (_ambientWindDirectionDegrees != result.Value)
                        {
                            _ambientWindDirectionDegrees = result.Value;
                            Changed.Add(nameof(AmbientWindDirectionDegrees));
                        }
                        break;
                    case EVENT_ID.HEADING_BUG:
                        if (_headingBug != result.Value)
                        {
                            _headingBug = result.Value;
                            Changed.Add(nameof(HeadingBug));
                        }
                        break;
                    case EVENT_ID.PRESSURE_ALTITUDE:
                        if (_altitudePressure != result.Value)
                        {
                            _altitudePressure = result.Value;
                            Changed.Add(nameof(AltitudePressure));
                        }
                        break;
                    case EVENT_ID.ADF_BEARING:
                        if (_adfRelativeBearing != result.Value)
                        {
                            _adfRelativeBearing = result.Value;
                            Changed.Add(nameof(AdfRelativeBearing));
                        }
                        break;
                    case EVENT_ID.GPS_COURSE_TRUE:
                        if (_gpsRequiredTrueHeadingRadians != result.Value)
                        {
                            _gpsRequiredTrueHeadingRadians = result.Value;
                            Changed.Add(nameof(GPSRequiredTrueHeadingRadians));
                        }
                        break;
                    case EVENT_ID.GPS_COURSE_MAG:
                        if (_gpsRequiredMagneticHeadingRadians != result.Value)
                        {
                            _gpsRequiredMagneticHeadingRadians = result.Value;
                            Changed.Add(nameof(_gpsRequiredMagneticHeadingRadians));
                        }
                        break;
                    case EVENT_ID.HANDSHAKE:
                        break;
                    case EVENT_ID.NAV1_RADIAL:
                        if (_nav1Radial != result.Value)
                        {
                            _nav1Radial = result.Value;
                            Changed.Add(nameof(Nav1Radial));
                        }
                        break;
                    case EVENT_ID.NAV2_RADIAL:
                        if (_nav2Radial != result.Value)
                        {
                            _nav2Radial = result.Value;
                            Changed.Add(nameof(Nav2Radial));
                        }
                        break;
                    case EVENT_ID.NAV1_FREQUENCY:
                        if (_nav1Frequency != result.Value)
                        {
                            _nav1Frequency = result.Value;
                            Changed.Add(nameof(Nav1Frequency));
                        }
                        break;
                    case EVENT_ID.NAV2_FREQUENCY:
                        if (_nav2Frequency != result.Value)
                        {
                            _nav2Frequency = result.Value;
                            Changed.Add(nameof(Nav2Frequency));
                        }
                        break;
                    case EVENT_ID.DESTINATION_INDEX:
                        if (_hasActiveWaypoint != (Convert.ToInt32(result.Value) != -1))
                        {
                            _hasActiveWaypoint = Convert.ToInt32(result.Value) != -1;
                            Changed.Add(nameof(HasActiveWaypoint));
                        }
                        break;
                    case EVENT_ID.ENGINETYPE:
                        if (_aircraftId == 0)
                        {
                            XPLANE_ENGINETYPE engineType = (XPLANE_ENGINETYPE)Convert.ToInt32(result.Value);
                            if (!_isHelo && !IsGlider)
                            {
                                switch (engineType)
                                {
                                    case XPLANE_ENGINETYPE.FixedTurboprop:
                                    case XPLANE_ENGINETYPE.FreeTurborpop:
                                        if (_engineType != EngineType.Turboprop)
                                        {
                                            _engineType = EngineType.Turboprop;
                                            Changed.Add(nameof(EngineType));
                                        }
                                        break;
                                    case XPLANE_ENGINETYPE.MultiSpoolJet:
                                    case XPLANE_ENGINETYPE.SingleSpoolJet:
                                        if (_engineType != EngineType.Jet)
                                        {
                                            _engineType = EngineType.Jet;
                                            Changed.Add(nameof(EngineType));
                                        }
                                        break;
                                    case XPLANE_ENGINETYPE.RecipCarb:
                                    case XPLANE_ENGINETYPE.RecipInjected:
                                        if (_engineType != EngineType.Piston)
                                        {
                                            _engineType = EngineType.Piston;
                                            Changed.Add(nameof(EngineType));
                                        }
                                        break;
                                    case XPLANE_ENGINETYPE.Electric:
                                        if (_engineType != EngineType.Electric)
                                        {
                                            _engineType = EngineType.Electric;
                                            Changed.Add(nameof(EngineType));
                                        }
                                        break;
                                    case XPLANE_ENGINETYPE.Rocket:
                                        if (_engineType != EngineType.Rocket)
                                        {
                                            _engineType = EngineType.Rocket;
                                            Changed.Add(nameof(EngineType));
                                        }
                                        break;
                                }
                            }
                        }
                        break;
                    case EVENT_ID.AIRCRAFTID:
                        {
                            int aircraftId = Convert.ToInt32(result.Value);
                            if (aircraftId != XPlaneAircraftId && Crossref != null && Crossref.Count > 0)
                            {
                                XPlaneAircraftId = aircraftId;
                                XPlaneCrossref crossref = Crossref.FirstOrDefault(x => x.XPlaneAircraftId == aircraftId);
                                if (crossref != null)
                                {
                                    AircraftData aircraft = Tools.LoadAircraft(crossref.AircraftId);
                                    _aircraftId = aircraft.AircraftId;
                                    _aircraftName = aircraft.FriendlyName;
                                    _atcType = aircraft.FriendlyType;
                                    _atcModel = aircraft.FriendlyModel;
                                    _engineType = aircraft.EngineType;
                                    _isHeavy = aircraft.Heavy;
                                    _isHelo = aircraft.Helo;
                                    _atcIdentifier = aircraft.FriendlyName;
                                    AircraftChange(_aircraftId);
                                }
                                else
                                {
                                    _aircraftId = 0;
                                    _aircraftName = string.Empty;
                                    _atcType = string.Empty;
                                    _atcModel = string.Empty;
                                    _engineType = FlightSim.EngineType.Piston;
                                    _isHeavy = false;
                                    _isHelo = false;
                                    _atcIdentifier = string.Empty;
                                    AircraftChange(_aircraftId);
                                }
                                Changed.Add(nameof(AircraftId));
                                FlightSim.ReadyToFly readyToFly = (XPlaneAircraftId != 0 ? FlightSim.ReadyToFly.Ready : FlightSim.ReadyToFly.Loading);
                                if (readyToFly != _isReadyToFly)
                                {
                                    _isReadyToFly = readyToFly;
                                    ReadyToFly(_isReadyToFly);
                                    Changed.Add(nameof(ReadyToFly));
                                }
                            }
                        }
                        break;
                    case EVENT_ID.COM1_ACTIVE:
                        if (_com1Active != Convert.ToBoolean(result.Value))
                        {
                            _com1Active = Convert.ToBoolean(result.Value);
                            Changed.Add(nameof(Com1Active));
                        }
                        break;
                    case EVENT_ID.COM2_ACTIVE:
                        if (_com2Active != Convert.ToBoolean(result.Value))
                        {
                            _com2Active = Convert.ToBoolean(result.Value);
                            Changed.Add(nameof(Com2Active));
                        }
                        break;
                    case EVENT_ID.IS_AIRLINER:
                        if (_aircraftId == 0)
                        {
                            if (_isHeavy != Convert.ToBoolean(result.Value))
                            {
                                _isHeavy = Convert.ToBoolean(result.Value);
                                Changed.Add(nameof(IsHeavy));
                            }
                        }
                        break;
                    case EVENT_ID.IS_SEAPLANE:
                        if (_isGearFloats != Convert.ToBoolean(result.Value))
                        {
                            _isGearFloats = Convert.ToBoolean(result.Value);
                            Changed.Add(nameof(IsGearFloats));
                        }
                        break;
                    case EVENT_ID.IS_GLIDER:
                        bool isGlider = Convert.ToBoolean(result.Value);
                        if (isGlider != IsGlider && AircraftId == 0)
                        {
                            IsGlider = isGlider;
                            if (isGlider)
                            {
                                _engineType = EngineType.Sailplane;
                            }
                            Changed.Add(nameof(IsGlider));
                        }
                        break;
                    case EVENT_ID.IS_GENERAL_AVIATION:
                        bool isGeneralAviation = Convert.ToBoolean(result.Value);
                        if (isGeneralAviation !=  IsGeneralAviation)
                        {
                            IsGeneralAviation = isGeneralAviation;
                            Changed.Add(nameof(IsGeneralAviation));
                        }
                        break;
                    case EVENT_ID.IS_MILITARY:
                        bool isMilitary = Convert.ToBoolean(result.Value);
                        if (isMilitary != IsMilitary)
                        {
                            IsMilitary = isMilitary;
                            Changed.Add(nameof(IsMilitary));
                        }
                        break;
                    case EVENT_ID.IS_HELICOPTER:
                        bool isHelo = Convert.ToBoolean(result.Value);
                        if (_isHelo != isHelo && AircraftId == 0)
                        {
                            if (isHelo)
                            {
                                _engineType = EngineType.Helo;
                            }
                            Changed.Add(nameof(IsHeavy));
                        }
                        break;
                    case EVENT_ID.IS_ONGROUND:
                        if (_onGround != Convert.ToBoolean(result.Value))
                        {
                            _onGround = Convert.ToBoolean(result.Value);
                            Changed.Add(nameof(OnGround));
                        }
                        break;
                    case EVENT_ID.ACF_NAME_0:
                        UpdateACFName(0, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_1:
                        UpdateACFName(1, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_2:
                        UpdateACFName(2, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_3:
                        UpdateACFName(3, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_4:
                        UpdateACFName(4, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_5:
                        UpdateACFName(5, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_6:
                        UpdateACFName(6, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_7:
                        UpdateACFName(7, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_8:
                        UpdateACFName(8, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_9:
                        UpdateACFName(9, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_10:
                        UpdateACFName(10, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_11:
                        UpdateACFName(11, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_12:
                        UpdateACFName(12, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_13:
                        UpdateACFName(13, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_14:
                        UpdateACFName(14, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_15:
                        UpdateACFName(15, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_16:
                        UpdateACFName(16, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_17:
                        UpdateACFName(17, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_18:
                        UpdateACFName(18, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_19:
                        UpdateACFName(19, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_20:
                        UpdateACFName(20, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_21:
                        UpdateACFName(21, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_22:
                        UpdateACFName(22, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_23:
                        UpdateACFName(23, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_24:
                        UpdateACFName(24, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_25:
                        UpdateACFName(25, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_26:
                        UpdateACFName(26, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_27:
                        UpdateACFName(27, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_28:
                        UpdateACFName(28, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_29:
                        UpdateACFName(29, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_30:
                        UpdateACFName(30, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_31:
                        UpdateACFName(31, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_32:
                        UpdateACFName(32, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_33:
                        UpdateACFName(33, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_34:
                        UpdateACFName(34, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_35:
                        UpdateACFName(35, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_36:
                        UpdateACFName(36, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_37:
                        UpdateACFName(37, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_38:
                        UpdateACFName(38, result.Value);
                        break;
                    case EVENT_ID.ACF_NAME_39:
                        UpdateACFName(39, result.Value);
                        break;
                }
                data = RemoveRREF(data);
            }
            return data;
        }

        private void UpdateACFName(int index, double value)
        {
            byte letter = (byte)Convert.ToInt32(value);
            byte[] data = ASCIIEncoding.ASCII.GetBytes(_atcIdentifier);
            byte[] buffer = new byte[40];
            Buffer.BlockCopy(data, 0, buffer, 0, data.Length);
            buffer[index] = letter;
            int terminator = FindNull(buffer);
            _atcIdentifier = ASCIIEncoding.ASCII.GetString(buffer, 0, terminator == -1 ? 0 : terminator);
        }
        private byte[] RemoveRREF(byte[] data)
        {
            byte[] ret = new byte[data.Length - 8];
            Buffer.BlockCopy(data, 8, ret, 0, data.Length - 8);
            return ret;
        }

        private byte[] RemoveRPOS(byte[] data)
        {
            byte[] ret = new byte[data.Length - 64];
            Buffer.BlockCopy(data, 64, ret, 0, data.Length - 64);
            return ret;
        }

        private byte[] RemoveRREFString(byte[] data)
        {
            byte[] ret = new byte[data.Length - 254];
            Buffer.BlockCopy(data, 254, ret, 0, data.Length - 254);
            return ret;
        }

        public override void SendControlToFS(string control, int value)
        {
        }

        public override void SendSimControlToFS(string control, int value)
        {
        }

        public override void SendAutoPilotControlToFS(string control, int value)
        {
        }

        public override void SendAxisControlToFS(string control, int value)
        {
        }
    }
}
