using System;
using System.Collections.Generic;

namespace XPlaneConnect
{
    public sealed class DataRefs
    {
        public static readonly DataRefs Instance;

        private DateTime revDate = new DateTime(2020, 11, 23, 19, 30, 15);
        private int revBuild = 1151;
        public DateTime RevDate { get { return revDate; } }
        public int RevBuild { get { return revBuild; } }
        private int DefaultFrequency = 5;

        static DataRefs()
        {
            Instance = new DataRefs();
        }

        DataRefs()
        {
            DataRefList.Add(AircraftViewAcfTailnum.Id, AircraftViewAcfTailnum);
            DataRefList.Add(AircraftViewAcfUiName.Id, AircraftViewAcfUiName);
            DataRefList.Add(AircraftViewAcfAuthor.Id, AircraftViewAcfAuthor);
            DataRefList.Add(AircraftViewAcfDescrip.Id, AircraftViewAcfDescrip);
            DataRefList.Add(AircraftViewAcfNotes.Id, AircraftViewAcfNotes);
            DataRefList.Add(AircraftViewAcfICAO.Id, AircraftViewAcfICAO);
            DataRefList.Add(AircraftViewAcfLiveryPath.Id, AircraftViewAcfLiveryPath);
            DataRefList.Add(VersionSimBuildString.Id, VersionSimBuildString);
            DataRefList.Add(VersionXplmBuildString.Id, VersionXplmBuildString);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1NavId.Id, Cockpit2RadiosIndicatorsNav1NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2NavId.Id, Cockpit2RadiosIndicatorsNav2NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf1NavId.Id, Cockpit2RadiosIndicatorsAdf1NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf2NavId.Id, Cockpit2RadiosIndicatorsAdf2NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsNavId.Id, Cockpit2RadiosIndicatorsGpsNavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2NavId.Id, Cockpit2RadiosIndicatorsGps2NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsDmeNavId.Id, Cockpit2RadiosIndicatorsDmeNavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav3NavId.Id, Cockpit2RadiosIndicatorsNav3NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav4NavId.Id, Cockpit2RadiosIndicatorsNav4NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav5NavId.Id, Cockpit2RadiosIndicatorsNav5NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav6NavId.Id, Cockpit2RadiosIndicatorsNav6NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav7NavId.Id, Cockpit2RadiosIndicatorsNav7NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav8NavId.Id, Cockpit2RadiosIndicatorsNav8NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav9NavId.Id, Cockpit2RadiosIndicatorsNav9NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav10NavId.Id, Cockpit2RadiosIndicatorsNav10NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav11NavId.Id, Cockpit2RadiosIndicatorsNav11NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav12NavId.Id, Cockpit2RadiosIndicatorsNav12NavId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1DmeId.Id, Cockpit2RadiosIndicatorsNav1DmeId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2DmeId.Id, Cockpit2RadiosIndicatorsNav2DmeId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav3DmeId.Id, Cockpit2RadiosIndicatorsNav3DmeId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav4DmeId.Id, Cockpit2RadiosIndicatorsNav4DmeId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav5DmeId.Id, Cockpit2RadiosIndicatorsNav5DmeId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav6DmeId.Id, Cockpit2RadiosIndicatorsNav6DmeId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav7DmeId.Id, Cockpit2RadiosIndicatorsNav7DmeId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav8DmeId.Id, Cockpit2RadiosIndicatorsNav8DmeId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav9DmeId.Id, Cockpit2RadiosIndicatorsNav9DmeId);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav10DmeId.Id, Cockpit2RadiosIndicatorsNav10DmeId);
            DataRefList.Add(Cockpit2TcasTargetsFlightId.Id, Cockpit2TcasTargetsFlightId);
            DataRefList.Add(Cockpit2TcasTargetsIcaoType.Id, Cockpit2TcasTargetsIcaoType);

            DataRefList.Add(AircraftAutopilotVviStepFt.Id, AircraftAutopilotVviStepFt);
            DataRefList.Add(AircraftAutopilotAltStepFt.Id, AircraftAutopilotAltStepFt);
            DataRefList.Add(AircraftAutopilotRadioAltimeterStepFt.Id, AircraftAutopilotRadioAltimeterStepFt);
            DataRefList.Add(AircraftAutopilotPreconfiguredApType.Id, AircraftAutopilotPreconfiguredApType);
            DataRefList.Add(AircraftAutopilotSingleAxisAutopilot.Id, AircraftAutopilotSingleAxisAutopilot);
            DataRefList.Add(AircraftAutopilotAhSource.Id, AircraftAutopilotAhSource);
            DataRefList.Add(AircraftAutopilotDgSource.Id, AircraftAutopilotDgSource);
            DataRefList.Add(AircraftViewAcfModesId.Id, AircraftViewAcfModesId);
            DataRefList.Add(AircraftViewAcfSizeX.Id, AircraftViewAcfSizeX);
            DataRefList.Add(AircraftViewAcfSizeZ.Id, AircraftViewAcfSizeZ);
            DataRefList.Add(AircraftViewAcfAsiKts.Id, AircraftViewAcfAsiKts);
            DataRefList.Add(AircraftViewAcfCockpitType.Id, AircraftViewAcfCockpitType);
            DataRefList.Add(AircraftViewAcfHasSCFd.Id, AircraftViewAcfHasSCFd);
            DataRefList.Add(AircraftViewAcfHasStallwarn.Id, AircraftViewAcfHasStallwarn);
            DataRefList.Add(AircraftViewAcfPex.Id, AircraftViewAcfPex);
            DataRefList.Add(AircraftViewAcfPey.Id, AircraftViewAcfPey);
            DataRefList.Add(AircraftViewAcfPez.Id, AircraftViewAcfPez);
            DataRefList.Add(AircraftViewAcfVso.Id, AircraftViewAcfVso);
            DataRefList.Add(AircraftViewAcfVs.Id, AircraftViewAcfVs);
            DataRefList.Add(AircraftViewAcfVfe.Id, AircraftViewAcfVfe);
            DataRefList.Add(AircraftViewAcfVno.Id, AircraftViewAcfVno);
            DataRefList.Add(AircraftViewAcfVne.Id, AircraftViewAcfVne);
            DataRefList.Add(AircraftViewAcfMmo.Id, AircraftViewAcfMmo);
            DataRefList.Add(AircraftViewAcfGneg.Id, AircraftViewAcfGneg);
            DataRefList.Add(AircraftViewAcfGpos.Id, AircraftViewAcfGpos);
            DataRefList.Add(AircraftViewAcfYawstringx.Id, AircraftViewAcfYawstringx);
            DataRefList.Add(AircraftViewAcfYawstringy.Id, AircraftViewAcfYawstringy);
            DataRefList.Add(AircraftViewAcfHUDCntry.Id, AircraftViewAcfHUDCntry);
            DataRefList.Add(AircraftViewAcfHUDDelx.Id, AircraftViewAcfHUDDelx);
            DataRefList.Add(AircraftViewAcfHUDDely.Id, AircraftViewAcfHUDDely);
            DataRefList.Add(AircraftViewAcfDoorX.Id, AircraftViewAcfDoorX);
            DataRefList.Add(AircraftViewAcfDoorY.Id, AircraftViewAcfDoorY);
            DataRefList.Add(AircraftViewAcfDoorZ.Id, AircraftViewAcfDoorZ);
            DataRefList.Add(AircraftViewAcfHasHOOPSHUD.Id, AircraftViewAcfHasHOOPSHUD);
            DataRefList.Add(AircraftViewAcfLiveryIndex.Id, AircraftViewAcfLiveryIndex);
            DataRefList.Add(AircraftForcefeedbackAcfFfHydraulic.Id, AircraftForcefeedbackAcfFfHydraulic);
            DataRefList.Add(AircraftForcefeedbackAcfFfStickshaker.Id, AircraftForcefeedbackAcfFfStickshaker);
            DataRefList.Add(AircraftElectricalNumBatteries.Id, AircraftElectricalNumBatteries);
            DataRefList.Add(AircraftElectricalNumGenerators.Id, AircraftElectricalNumGenerators);
            DataRefList.Add(AircraftElectricalNumInverters.Id, AircraftElectricalNumInverters);
            DataRefList.Add(AircraftElectricalNumBuses.Id, AircraftElectricalNumBuses);
            DataRefList.Add(AircraftEngineAcfNumEngines.Id, AircraftEngineAcfNumEngines);
            DataRefList.Add(AircraftEngineAcfAutoFeathereq.Id, AircraftEngineAcfAutoFeathereq);
            DataRefList.Add(AircraftEngineAcfPropFailMode.Id, AircraftEngineAcfPropFailMode);
            DataRefList.Add(AircraftEngineAcfThrotmaxFWD.Id, AircraftEngineAcfThrotmaxFWD);
            DataRefList.Add(AircraftEngineAcfThrotmaxREV.Id, AircraftEngineAcfThrotmaxREV);
            DataRefList.Add(AircraftEngineAcfRSCMingovEng.Id, AircraftEngineAcfRSCMingovEng);
            DataRefList.Add(AircraftEngineAcfRSCIdlespeedEng.Id, AircraftEngineAcfRSCIdlespeedEng);
            DataRefList.Add(AircraftEngineAcfRSCRedlineEng.Id, AircraftEngineAcfRSCRedlineEng);
            DataRefList.Add(AircraftEngineAcfRSCMingreenEng.Id, AircraftEngineAcfRSCMingreenEng);
            DataRefList.Add(AircraftEngineAcfRSCMaxgreenEng.Id, AircraftEngineAcfRSCMaxgreenEng);
            DataRefList.Add(AircraftEngineAcfPmax.Id, AircraftEngineAcfPmax);
            DataRefList.Add(AircraftEngineAcfTmax.Id, AircraftEngineAcfTmax);
            DataRefList.Add(AircraftEngineAcfBurnerinc.Id, AircraftEngineAcfBurnerinc);
            DataRefList.Add(AircraftEngineAcfCritalt.Id, AircraftEngineAcfCritalt);
            DataRefList.Add(AircraftEngineAcfMpmax.Id, AircraftEngineAcfMpmax);
            DataRefList.Add(AircraftEngineAcfGearRat.Id, AircraftEngineAcfGearRat);
            DataRefList.Add(AircraftEngineAcfFaceJet.Id, AircraftEngineAcfFaceJet);
            DataRefList.Add(AircraftEngineAcfFaceRocket.Id, AircraftEngineAcfFaceRocket);
            DataRefList.Add(AircraftEngineAcfSpooltimeJet.Id, AircraftEngineAcfSpooltimeJet);
            DataRefList.Add(AircraftEngineAcfSpooltimeProp.Id, AircraftEngineAcfSpooltimeProp);
            DataRefList.Add(AircraftEngineAcfSpooltimeTurbine.Id, AircraftEngineAcfSpooltimeTurbine);
            DataRefList.Add(AircraftEngineAcfFuelIntroTimeProp.Id, AircraftEngineAcfFuelIntroTimeProp);
            DataRefList.Add(AircraftEngineFuelIntroTimeJet.Id, AircraftEngineFuelIntroTimeJet);
            DataRefList.Add(AircraftEngineAcfMaxMachEff.Id, AircraftEngineAcfMaxMachEff);
            DataRefList.Add(AircraftEngineAcfFmaxSl.Id, AircraftEngineAcfFmaxSl);
            DataRefList.Add(AircraftEngineAcfFmaxOpt.Id, AircraftEngineAcfFmaxOpt);
            DataRefList.Add(AircraftEngineAcfFmaxVac.Id, AircraftEngineAcfFmaxVac);
            DataRefList.Add(AircraftEngineAcfHOpt.Id, AircraftEngineAcfHOpt);
            DataRefList.Add(AircraftEngineAacfTipMachDes50.Id, AircraftEngineAacfTipMachDes50);
            DataRefList.Add(AircraftEngineAacfTipMachDes100.Id, AircraftEngineAacfTipMachDes100);
            DataRefList.Add(AircraftEngineAacfRotorMiRat.Id, AircraftEngineAacfRotorMiRat);
            DataRefList.Add(AircraftEngineAacfTipWeight.Id, AircraftEngineAacfTipWeight);
            DataRefList.Add(AircraftEngineAcfMaxITT.Id, AircraftEngineAcfMaxITT);
            DataRefList.Add(AircraftEngineAcfMaxEGT.Id, AircraftEngineAcfMaxEGT);
            DataRefList.Add(AircraftEngineAcfMaxCHT.Id, AircraftEngineAcfMaxCHT);
            DataRefList.Add(AircraftEngineAcfMaxOILP.Id, AircraftEngineAcfMaxOILP);
            DataRefList.Add(AircraftEngineAcfMaxOILT.Id, AircraftEngineAcfMaxOILT);
            DataRefList.Add(AircraftEngineAcfOiltIsC.Id, AircraftEngineAcfOiltIsC);
            DataRefList.Add(AircraftEngineAcfITTIsC.Id, AircraftEngineAcfITTIsC);
            DataRefList.Add(AircraftEngineAcfEGTIsC.Id, AircraftEngineAcfEGTIsC);
            DataRefList.Add(AircraftEngineAcfCHTIsC.Id, AircraftEngineAcfCHTIsC);
            DataRefList.Add(AircraftEngineAcfMaxFUELP.Id, AircraftEngineAcfMaxFUELP);
            DataRefList.Add(AircraftEngineAcfStarterTorqueRatio.Id, AircraftEngineAcfStarterTorqueRatio);
            DataRefList.Add(AircraftEngineAcfStarterMaxRpmRatio.Id, AircraftEngineAcfStarterMaxRpmRatio);
            DataRefList.Add(AircraftEngineBoostRatio.Id, AircraftEngineBoostRatio);
            DataRefList.Add(AircraftEngineBoostMaxSeconds.Id, AircraftEngineBoostMaxSeconds);
            DataRefList.Add(AircraftEngineAcfAPUDoorTime.Id, AircraftEngineAcfAPUDoorTime);
            DataRefList.Add(AircraftEngineAcfAPUCooldownTime.Id, AircraftEngineAcfAPUCooldownTime);
            DataRefList.Add(AircraftEngineAcfAPUSpoolupTime.Id, AircraftEngineAcfAPUSpoolupTime);
            DataRefList.Add(AircraftEngineAcfAPUSpooldnTime.Id, AircraftEngineAcfAPUSpooldnTime);
            DataRefList.Add(AircraftLimitsGreenLoMP.Id, AircraftLimitsGreenLoMP);
            DataRefList.Add(AircraftLimitsGreenHiMP.Id, AircraftLimitsGreenHiMP);
            DataRefList.Add(AircraftLimitsYellowLoMP.Id, AircraftLimitsYellowLoMP);
            DataRefList.Add(AircraftLimitsYellowHiMP.Id, AircraftLimitsYellowHiMP);
            DataRefList.Add(AircraftLimitsRedLoMP.Id, AircraftLimitsRedLoMP);
            DataRefList.Add(AircraftLimitsRedHiMP.Id, AircraftLimitsRedHiMP);
            DataRefList.Add(AircraftLimitsGreenLoEPR.Id, AircraftLimitsGreenLoEPR);
            DataRefList.Add(AircraftLimitsGreenHiEPR.Id, AircraftLimitsGreenHiEPR);
            DataRefList.Add(AircraftLimitsYellowLoEPR.Id, AircraftLimitsYellowLoEPR);
            DataRefList.Add(AircraftLimitsYellowHiEPR.Id, AircraftLimitsYellowHiEPR);
            DataRefList.Add(AircraftLimitsRedLoEPR.Id, AircraftLimitsRedLoEPR);
            DataRefList.Add(AircraftLimitsRedHiEPR.Id, AircraftLimitsRedHiEPR);
            DataRefList.Add(AircraftLimitsGreenLoTRQ.Id, AircraftLimitsGreenLoTRQ);
            DataRefList.Add(AircraftLimitsGreenHiTRQ.Id, AircraftLimitsGreenHiTRQ);
            DataRefList.Add(AircraftLimitsYellowLoTRQ.Id, AircraftLimitsYellowLoTRQ);
            DataRefList.Add(AircraftLimitsYellowHiTRQ.Id, AircraftLimitsYellowHiTRQ);
            DataRefList.Add(AircraftLimitsRedLoTRQ.Id, AircraftLimitsRedLoTRQ);
            DataRefList.Add(AircraftLimitsRedHiTRQ.Id, AircraftLimitsRedHiTRQ);
            DataRefList.Add(AircraftLimitsGreenLoFF.Id, AircraftLimitsGreenLoFF);
            DataRefList.Add(AircraftLimitsGreenHiFF.Id, AircraftLimitsGreenHiFF);
            DataRefList.Add(AircraftLimitsYellowLoFF.Id, AircraftLimitsYellowLoFF);
            DataRefList.Add(AircraftLimitsYellowHiFF.Id, AircraftLimitsYellowHiFF);
            DataRefList.Add(AircraftLimitsRedLoFF.Id, AircraftLimitsRedLoFF);
            DataRefList.Add(AircraftLimitsRedHiFF.Id, AircraftLimitsRedHiFF);
            DataRefList.Add(AircraftLimitsGreenLoITT.Id, AircraftLimitsGreenLoITT);
            DataRefList.Add(AircraftLimitsGreenHiITT.Id, AircraftLimitsGreenHiITT);
            DataRefList.Add(AircraftLimitsYellowLoITT.Id, AircraftLimitsYellowLoITT);
            DataRefList.Add(AircraftLimitsYellowHiITT.Id, AircraftLimitsYellowHiITT);
            DataRefList.Add(AircraftLimitsRedLoITT.Id, AircraftLimitsRedLoITT);
            DataRefList.Add(AircraftLimitsRedHiITT.Id, AircraftLimitsRedHiITT);
            DataRefList.Add(AircraftLimitsGreenLoEGT.Id, AircraftLimitsGreenLoEGT);
            DataRefList.Add(AircraftLimitsGreenHiEGT.Id, AircraftLimitsGreenHiEGT);
            DataRefList.Add(AircraftLimitsYellowLoEGT.Id, AircraftLimitsYellowLoEGT);
            DataRefList.Add(AircraftLimitsYellowHiEGT.Id, AircraftLimitsYellowHiEGT);
            DataRefList.Add(AircraftLimitsRedLoEGT.Id, AircraftLimitsRedLoEGT);
            DataRefList.Add(AircraftLimitsRedHiEGT.Id, AircraftLimitsRedHiEGT);
            DataRefList.Add(AircraftLimitsGreenLoCHT.Id, AircraftLimitsGreenLoCHT);
            DataRefList.Add(AircraftLimitsGreenHiCHT.Id, AircraftLimitsGreenHiCHT);
            DataRefList.Add(AircraftLimitsYellowLoCHT.Id, AircraftLimitsYellowLoCHT);
            DataRefList.Add(AircraftLimitsYellowHiCHT.Id, AircraftLimitsYellowHiCHT);
            DataRefList.Add(AircraftLimitsRedLoCHT.Id, AircraftLimitsRedLoCHT);
            DataRefList.Add(AircraftLimitsRedHiCHT.Id, AircraftLimitsRedHiCHT);
            DataRefList.Add(AircraftLimitsGreenLoOilt.Id, AircraftLimitsGreenLoOilt);
            DataRefList.Add(AircraftLimitsGreenHiOilt.Id, AircraftLimitsGreenHiOilt);
            DataRefList.Add(AircraftLimitsYellowLoOilt.Id, AircraftLimitsYellowLoOilt);
            DataRefList.Add(AircraftLimitsYellowHiOilt.Id, AircraftLimitsYellowHiOilt);
            DataRefList.Add(AircraftLimitsRedLoOilt.Id, AircraftLimitsRedLoOilt);
            DataRefList.Add(AircraftLimitsRedHiOilt.Id, AircraftLimitsRedHiOilt);
            DataRefList.Add(AircraftLimitsGreenLoOilp.Id, AircraftLimitsGreenLoOilp);
            DataRefList.Add(AircraftLimitsGreenHiOilp.Id, AircraftLimitsGreenHiOilp);
            DataRefList.Add(AircraftLimitsYellowLoOilp.Id, AircraftLimitsYellowLoOilp);
            DataRefList.Add(AircraftLimitsYellowHiOilp.Id, AircraftLimitsYellowHiOilp);
            DataRefList.Add(AircraftLimitsRedLoOilp.Id, AircraftLimitsRedLoOilp);
            DataRefList.Add(AircraftLimitsRedHiOilp.Id, AircraftLimitsRedHiOilp);
            DataRefList.Add(AircraftLimitsGreenLoFuelp.Id, AircraftLimitsGreenLoFuelp);
            DataRefList.Add(AircraftLimitsGreenHiFuelp.Id, AircraftLimitsGreenHiFuelp);
            DataRefList.Add(AircraftLimitsYellowLoFuelp.Id, AircraftLimitsYellowLoFuelp);
            DataRefList.Add(AircraftLimitsYellowHiFuelp.Id, AircraftLimitsYellowHiFuelp);
            DataRefList.Add(AircraftLimitsRedLoFuelp.Id, AircraftLimitsRedLoFuelp);
            DataRefList.Add(AircraftLimitsRedHiFuelp.Id, AircraftLimitsRedHiFuelp);
            DataRefList.Add(AircraftLimitsGreenLoGenAmp.Id, AircraftLimitsGreenLoGenAmp);
            DataRefList.Add(AircraftLimitsGreenHiGenAmp.Id, AircraftLimitsGreenHiGenAmp);
            DataRefList.Add(AircraftLimitsYellowLoGenAmp.Id, AircraftLimitsYellowLoGenAmp);
            DataRefList.Add(AircraftLimitsYellowHiGenAmp.Id, AircraftLimitsYellowHiGenAmp);
            DataRefList.Add(AircraftLimitsRedLoGenAmp.Id, AircraftLimitsRedLoGenAmp);
            DataRefList.Add(AircraftLimitsRedHiGenAmp.Id, AircraftLimitsRedHiGenAmp);
            DataRefList.Add(AircraftLimitsGreenLoBatAmp.Id, AircraftLimitsGreenLoBatAmp);
            DataRefList.Add(AircraftLimitsGreenHiBatAmp.Id, AircraftLimitsGreenHiBatAmp);
            DataRefList.Add(AircraftLimitsYellowLoBatAmp.Id, AircraftLimitsYellowLoBatAmp);
            DataRefList.Add(AircraftLimitsYellowHiBatAmp.Id, AircraftLimitsYellowHiBatAmp);
            DataRefList.Add(AircraftLimitsRedLoBatAmp.Id, AircraftLimitsRedLoBatAmp);
            DataRefList.Add(AircraftLimitsRedHiBatAmp.Id, AircraftLimitsRedHiBatAmp);
            DataRefList.Add(AircraftLimitsMaxBatAmp.Id, AircraftLimitsMaxBatAmp);
            DataRefList.Add(AircraftLimitsGreenLoBatVolt.Id, AircraftLimitsGreenLoBatVolt);
            DataRefList.Add(AircraftLimitsGreenHiBatVolt.Id, AircraftLimitsGreenHiBatVolt);
            DataRefList.Add(AircraftLimitsYellowLoBatVolt.Id, AircraftLimitsYellowLoBatVolt);
            DataRefList.Add(AircraftLimitsYellowHiBatVolt.Id, AircraftLimitsYellowHiBatVolt);
            DataRefList.Add(AircraftLimitsRedLoBatVolt.Id, AircraftLimitsRedLoBatVolt);
            DataRefList.Add(AircraftLimitsRedHiBatVolt.Id, AircraftLimitsRedHiBatVolt);
            DataRefList.Add(AircraftLimitsMaxBatVoltStandard.Id, AircraftLimitsMaxBatVoltStandard);
            DataRefList.Add(AircraftLimitsGreenLoVac.Id, AircraftLimitsGreenLoVac);
            DataRefList.Add(AircraftLimitsGreenHiVac.Id, AircraftLimitsGreenHiVac);
            DataRefList.Add(AircraftLimitsYellowLoVac.Id, AircraftLimitsYellowLoVac);
            DataRefList.Add(AircraftLimitsYellowHiVac.Id, AircraftLimitsYellowHiVac);
            DataRefList.Add(AircraftLimitsRedLoVac.Id, AircraftLimitsRedLoVac);
            DataRefList.Add(AircraftLimitsRedHiVac.Id, AircraftLimitsRedHiVac);
            DataRefList.Add(AircraftLimitsMaxVac.Id, AircraftLimitsMaxVac);
            DataRefList.Add(AircraftLimitsGreenLoN1.Id, AircraftLimitsGreenLoN1);
            DataRefList.Add(AircraftLimitsGreenHiN1.Id, AircraftLimitsGreenHiN1);
            DataRefList.Add(AircraftLimitsYellowLoN1.Id, AircraftLimitsYellowLoN1);
            DataRefList.Add(AircraftLimitsYellowHiN1.Id, AircraftLimitsYellowHiN1);
            DataRefList.Add(AircraftLimitsRedLoN1.Id, AircraftLimitsRedLoN1);
            DataRefList.Add(AircraftLimitsRedHiN1.Id, AircraftLimitsRedHiN1);
            DataRefList.Add(AircraftLimitsGreenLoN2.Id, AircraftLimitsGreenLoN2);
            DataRefList.Add(AircraftLimitsGreenHiN2.Id, AircraftLimitsGreenHiN2);
            DataRefList.Add(AircraftLimitsYellowLoN2.Id, AircraftLimitsYellowLoN2);
            DataRefList.Add(AircraftLimitsYellowHiN2.Id, AircraftLimitsYellowHiN2);
            DataRefList.Add(AircraftLimitsRedLoN2.Id, AircraftLimitsRedLoN2);
            DataRefList.Add(AircraftLimitsRedHiN2.Id, AircraftLimitsRedHiN2);
            DataRefList.Add(AircraftPropAcfEnType.Id, AircraftPropAcfEnType);
            DataRefList.Add(AircraftPropAcfRevthrustEq.Id, AircraftPropAcfRevthrustEq);
            DataRefList.Add(AircraftPropAcfPropType.Id, AircraftPropAcfPropType);
            DataRefList.Add(AircraftPropAcfPropGearRat.Id, AircraftPropAcfPropGearRat);
            DataRefList.Add(AircraftPropAcfPropDir.Id, AircraftPropAcfPropDir);
            DataRefList.Add(AircraftPropAcfNumBlades.Id, AircraftPropAcfNumBlades);
            DataRefList.Add(AircraftPropAcfMinPitch.Id, AircraftPropAcfMinPitch);
            DataRefList.Add(AircraftPropAcfMaxPitch.Id, AircraftPropAcfMaxPitch);
            DataRefList.Add(AircraftPropAcfReversedPitch.Id, AircraftPropAcfReversedPitch);
            DataRefList.Add(AircraftPropAcfSidecant.Id, AircraftPropAcfSidecant);
            DataRefList.Add(AircraftPropAcfVertcant.Id, AircraftPropAcfVertcant);
            DataRefList.Add(AircraftPropAcfPropMass.Id, AircraftPropAcfPropMass);
            DataRefList.Add(AircraftPropAcfMipropRpm.Id, AircraftPropAcfMipropRpm);
            DataRefList.Add(AircraftPropAcfDiscarea.Id, AircraftPropAcfDiscarea);
            DataRefList.Add(AircraftPropAcfRingarea.Id, AircraftPropAcfRingarea);
            DataRefList.Add(AircraftPropAcfDesRpmPrp.Id, AircraftPropAcfDesRpmPrp);
            DataRefList.Add(AircraftPropAcfDesKtsAcf.Id, AircraftPropAcfDesKtsAcf);
            DataRefList.Add(AircraftPropAcfPartEq.Id, AircraftPropAcfPartEq);
            DataRefList.Add(AircraftPartsAcfRafl0.Id, AircraftPartsAcfRafl0);
            DataRefList.Add(AircraftPartsAcfRafl1.Id, AircraftPartsAcfRafl1);
            DataRefList.Add(AircraftPartsAcfTafl0.Id, AircraftPartsAcfTafl0);
            DataRefList.Add(AircraftPartsAcfTafl1.Id, AircraftPartsAcfTafl1);
            DataRefList.Add(AircraftPartsAcfEls.Id, AircraftPartsAcfEls);
            DataRefList.Add(AircraftPartsAcfXarm.Id, AircraftPartsAcfXarm);
            DataRefList.Add(AircraftPartsAcfYarm.Id, AircraftPartsAcfYarm);
            DataRefList.Add(AircraftPartsAcfZarm.Id, AircraftPartsAcfZarm);
            DataRefList.Add(AircraftPartsAcfXBodyAero.Id, AircraftPartsAcfXBodyAero);
            DataRefList.Add(AircraftPartsAcfYBodyAero.Id, AircraftPartsAcfYBodyAero);
            DataRefList.Add(AircraftPartsAcfZBodyAero.Id, AircraftPartsAcfZBodyAero);
            DataRefList.Add(AircraftPartsAcfCroot.Id, AircraftPartsAcfCroot);
            DataRefList.Add(AircraftPartsAcfCtip.Id, AircraftPartsAcfCtip);
            DataRefList.Add(AircraftPartsAcfDihed1.Id, AircraftPartsAcfDihed1);
            DataRefList.Add(AircraftPartsAcfSweep1.Id, AircraftPartsAcfSweep1);
            DataRefList.Add(AircraftPartsAcfSweep2.Id, AircraftPartsAcfSweep2);
            DataRefList.Add(AircraftPartsAcfSemilenSEG.Id, AircraftPartsAcfSemilenSEG);
            DataRefList.Add(AircraftPartsAcfSemilenJND.Id, AircraftPartsAcfSemilenJND);
            DataRefList.Add(AircraftPartsAcfE.Id, AircraftPartsAcfE);
            DataRefList.Add(AircraftPartsAcfAR.Id, AircraftPartsAcfAR);
            DataRefList.Add(AircraftPartsAcfDeltaFac.Id, AircraftPartsAcfDeltaFac);
            DataRefList.Add(AircraftPartsAcfS.Id, AircraftPartsAcfS);
            DataRefList.Add(AircraftPartsAcfMac.Id, AircraftPartsAcfMac);
            DataRefList.Add(AircraftPartsAcfAnginc.Id, AircraftPartsAcfAnginc);
            DataRefList.Add(AircraftPartsAcfFlapeq.Id, AircraftPartsAcfFlapeq);
            DataRefList.Add(AircraftPartsAcfSlateq.Id, AircraftPartsAcfSlateq);
            DataRefList.Add(AircraftPartsAcfSbrkeq.Id, AircraftPartsAcfSbrkeq);
            DataRefList.Add(AircraftPartsAcfAil1.Id, AircraftPartsAcfAil1);
            DataRefList.Add(AircraftPartsAcfAil2.Id, AircraftPartsAcfAil2);
            DataRefList.Add(AircraftPartsAcfSplr.Id, AircraftPartsAcfSplr);
            DataRefList.Add(AircraftPartsAcfFlap.Id, AircraftPartsAcfFlap);
            DataRefList.Add(AircraftPartsAcfFlap2.Id, AircraftPartsAcfFlap2);
            DataRefList.Add(AircraftPartsAcfSlat.Id, AircraftPartsAcfSlat);
            DataRefList.Add(AircraftPartsAcfSbrk.Id, AircraftPartsAcfSbrk);
            DataRefList.Add(AircraftPartsAcfDrud.Id, AircraftPartsAcfDrud);
            DataRefList.Add(AircraftPartsAcfElev.Id, AircraftPartsAcfElev);
            DataRefList.Add(AircraftPartsAcfRudd.Id, AircraftPartsAcfRudd);
            DataRefList.Add(AircraftPartsAcfRudd2.Id, AircraftPartsAcfRudd2);
            DataRefList.Add(AircraftPartsAcfBodyR.Id, AircraftPartsAcfBodyR);
            DataRefList.Add(AircraftPartsAcfGearType.Id, AircraftPartsAcfGearType);
            DataRefList.Add(AircraftPartsAcfGearLate.Id, AircraftPartsAcfGearLate);
            DataRefList.Add(AircraftPartsAcfGearLone.Id, AircraftPartsAcfGearLone);
            DataRefList.Add(AircraftPartsAcfGearAxie.Id, AircraftPartsAcfGearAxie);
            DataRefList.Add(AircraftPartsAcfGearLatr.Id, AircraftPartsAcfGearLatr);
            DataRefList.Add(AircraftPartsAcfGearLonr.Id, AircraftPartsAcfGearLonr);
            DataRefList.Add(AircraftPartsAcfGearAxir.Id, AircraftPartsAcfGearAxir);
            DataRefList.Add(AircraftPartsAcfGearLatn.Id, AircraftPartsAcfGearLatn);
            DataRefList.Add(AircraftPartsAcfGearLonn.Id, AircraftPartsAcfGearLonn);
            DataRefList.Add(AircraftPartsAcfGearAxin.Id, AircraftPartsAcfGearAxin);
            DataRefList.Add(AircraftPartsAcfGearLeglen.Id, AircraftPartsAcfGearLeglen);
            DataRefList.Add(AircraftPartsAcfGearTirrad.Id, AircraftPartsAcfGearTirrad);
            DataRefList.Add(AircraftPartsAcfGearcon.Id, AircraftPartsAcfGearcon);
            DataRefList.Add(AircraftPartsAcfGeardmp.Id, AircraftPartsAcfGeardmp);
            DataRefList.Add(AircraftPartsAcfGearstatdef.Id, AircraftPartsAcfGearstatdef);
            DataRefList.Add(AircraftPartsAcfGearDeploy.Id, AircraftPartsAcfGearDeploy);
            DataRefList.Add(AircraftPartsAcfGearXnodef.Id, AircraftPartsAcfGearXnodef);
            DataRefList.Add(AircraftPartsAcfGearYnodef.Id, AircraftPartsAcfGearYnodef);
            DataRefList.Add(AircraftPartsAcfGearZnodef.Id, AircraftPartsAcfGearZnodef);
            DataRefList.Add(AircraftBodiesAcfFuseCd.Id, AircraftBodiesAcfFuseCd);
            DataRefList.Add(AircraftBodiesAcfFuseCdArray.Id, AircraftBodiesAcfFuseCdArray);
            DataRefList.Add(AircraftControlsAcfAil1Crat.Id, AircraftControlsAcfAil1Crat);
            DataRefList.Add(AircraftControlsAcfAil1Up.Id, AircraftControlsAcfAil1Up);
            DataRefList.Add(AircraftControlsAcfAil1Dn.Id, AircraftControlsAcfAil1Dn);
            DataRefList.Add(AircraftControlsAcfRSCMingovPrp.Id, AircraftControlsAcfRSCMingovPrp);
            DataRefList.Add(AircraftControlsAcfRSCIdlespeedPrp.Id, AircraftControlsAcfRSCIdlespeedPrp);
            DataRefList.Add(AircraftControlsAcfRSCRedlinePrp.Id, AircraftControlsAcfRSCRedlinePrp);
            DataRefList.Add(AircraftControlsAcfAil2Crat.Id, AircraftControlsAcfAil2Crat);
            DataRefList.Add(AircraftControlsAcfAil2Up.Id, AircraftControlsAcfAil2Up);
            DataRefList.Add(AircraftControlsAcfAil2Dn.Id, AircraftControlsAcfAil2Dn);
            DataRefList.Add(AircraftControlsAcfRSCMingreenPrp.Id, AircraftControlsAcfRSCMingreenPrp);
            DataRefList.Add(AircraftControlsAcfRSCMaxgreenPrp.Id, AircraftControlsAcfRSCMaxgreenPrp);
            DataRefList.Add(AircraftControlsAcfElevCrat.Id, AircraftControlsAcfElevCrat);
            DataRefList.Add(AircraftControlsAcfElevUp.Id, AircraftControlsAcfElevUp);
            DataRefList.Add(AircraftControlsAcfElevDn.Id, AircraftControlsAcfElevDn);
            DataRefList.Add(AircraftControlsAcfTrqMaxEng.Id, AircraftControlsAcfTrqMaxEng);
            DataRefList.Add(AircraftControlsAcfTrqMaxPrp.Id, AircraftControlsAcfTrqMaxPrp);
            DataRefList.Add(AircraftControlsAcfRuddCrat.Id, AircraftControlsAcfRuddCrat);
            DataRefList.Add(AircraftControlsAcfRuddLr.Id, AircraftControlsAcfRuddLr);
            DataRefList.Add(AircraftControlsAcfRuddRr.Id, AircraftControlsAcfRuddRr);
            DataRefList.Add(AircraftControlsAcfRud2Crat.Id, AircraftControlsAcfRud2Crat);
            DataRefList.Add(AircraftControlsAcfRud2Lr.Id, AircraftControlsAcfRud2Lr);
            DataRefList.Add(AircraftControlsAcfRud2Rr.Id, AircraftControlsAcfRud2Rr);
            DataRefList.Add(AircraftControlsAcfSplrCrat.Id, AircraftControlsAcfSplrCrat);
            DataRefList.Add(AircraftControlsAcfSplrUp.Id, AircraftControlsAcfSplrUp);
            DataRefList.Add(AircraftControlsAcfSbrkCrat.Id, AircraftControlsAcfSbrkCrat);
            DataRefList.Add(AircraftControlsAcfSbrk2Crat.Id, AircraftControlsAcfSbrk2Crat);
            DataRefList.Add(AircraftControlsAcfSbrkUp.Id, AircraftControlsAcfSbrkUp);
            DataRefList.Add(AircraftControlsAcfSbrk2Up.Id, AircraftControlsAcfSbrk2Up);
            DataRefList.Add(AircraftControlsAcfFlapCrat.Id, AircraftControlsAcfFlapCrat);
            DataRefList.Add(AircraftControlsAcfFlap2Crat.Id, AircraftControlsAcfFlap2Crat);
            DataRefList.Add(AircraftControlsAcfFlapDn.Id, AircraftControlsAcfFlapDn);
            DataRefList.Add(AircraftControlsAcfFlap2Dn.Id, AircraftControlsAcfFlap2Dn);
            DataRefList.Add(AircraftControlsAcfHstbTrimUp.Id, AircraftControlsAcfHstbTrimUp);
            DataRefList.Add(AircraftControlsAcfHstbTrimDn.Id, AircraftControlsAcfHstbTrimDn);
            DataRefList.Add(AircraftControlsAcfFlapType.Id, AircraftControlsAcfFlapType);
            DataRefList.Add(AircraftControlsAcfFlap2Type.Id, AircraftControlsAcfFlap2Type);
            DataRefList.Add(AircraftControlsAcfFlapCl.Id, AircraftControlsAcfFlapCl);
            DataRefList.Add(AircraftControlsAcfFlapCd.Id, AircraftControlsAcfFlapCd);
            DataRefList.Add(AircraftControlsAcfFlapCm.Id, AircraftControlsAcfFlapCm);
            DataRefList.Add(AircraftControlsAcfFlap2Cl.Id, AircraftControlsAcfFlap2Cl);
            DataRefList.Add(AircraftControlsAcfFlap2Cd.Id, AircraftControlsAcfFlap2Cd);
            DataRefList.Add(AircraftControlsAcfFlap2Cm.Id, AircraftControlsAcfFlap2Cm);
            DataRefList.Add(AircraftControlsAcfFlapDetents.Id, AircraftControlsAcfFlapDetents);
            DataRefList.Add(AircraftControlsAcfFlapDeftime.Id, AircraftControlsAcfFlapDeftime);
            DataRefList.Add(AircraftControlsAcfSlatInc.Id, AircraftControlsAcfSlatInc);
            DataRefList.Add(AircraftControlsAcfBlownFlapMinEngag.Id, AircraftControlsAcfBlownFlapMinEngag);
            DataRefList.Add(AircraftControlsAcfTakeoffTrim.Id, AircraftControlsAcfTakeoffTrim);
            DataRefList.Add(AircraftControlsAcfMinTrimElev.Id, AircraftControlsAcfMinTrimElev);
            DataRefList.Add(AircraftControlsAcfMaxTrimElev.Id, AircraftControlsAcfMaxTrimElev);
            DataRefList.Add(AircraftControlsAcfElevTrimSpeedrat.Id, AircraftControlsAcfElevTrimSpeedrat);
            DataRefList.Add(AircraftControlsAcfElevTab.Id, AircraftControlsAcfElevTab);
            DataRefList.Add(AircraftControlsAcfMinTrimAiln.Id, AircraftControlsAcfMinTrimAiln);
            DataRefList.Add(AircraftControlsAcfMaxTrimAiln.Id, AircraftControlsAcfMaxTrimAiln);
            DataRefList.Add(AircraftControlsAcfAilnTrimSpeedrat.Id, AircraftControlsAcfAilnTrimSpeedrat);
            DataRefList.Add(AircraftControlsAcfAilnTab.Id, AircraftControlsAcfAilnTab);
            DataRefList.Add(AircraftControlsAcfMinTrimRudd.Id, AircraftControlsAcfMinTrimRudd);
            DataRefList.Add(AircraftControlsAcfMaxTrimRudd.Id, AircraftControlsAcfMaxTrimRudd);
            DataRefList.Add(AircraftControlsAcfRuddTrimSpeedrat.Id, AircraftControlsAcfRuddTrimSpeedrat);
            DataRefList.Add(AircraftControlsAcfRuddTab.Id, AircraftControlsAcfRuddTab);
            DataRefList.Add(AircraftControlsAcfElevDefTime.Id, AircraftControlsAcfElevDefTime);
            DataRefList.Add(AircraftControlsAcfAilnDefTime.Id, AircraftControlsAcfAilnDefTime);
            DataRefList.Add(AircraftControlsAcfRuddDefTime.Id, AircraftControlsAcfRuddDefTime);
            DataRefList.Add(AircraftControlsAcfElevTrimTime.Id, AircraftControlsAcfElevTrimTime);
            DataRefList.Add(AircraftControlsAcfAilnTrimTime.Id, AircraftControlsAcfAilnTrimTime);
            DataRefList.Add(AircraftControlsAcfRuddTrimTime.Id, AircraftControlsAcfRuddTrimTime);
            DataRefList.Add(AircraftControlsAcfSpeedbrakeExtTime.Id, AircraftControlsAcfSpeedbrakeExtTime);
            DataRefList.Add(AircraftControlsAcfSpeedbrakeRetTime.Id, AircraftControlsAcfSpeedbrakeRetTime);
            DataRefList.Add(AircraftGearAcfGearRetract.Id, AircraftGearAcfGearRetract);
            DataRefList.Add(AircraftGearAcfGearIsSkid.Id, AircraftGearAcfGearIsSkid);
            DataRefList.Add(AircraftGearAcfNwSteerdeg1.Id, AircraftGearAcfNwSteerdeg1);
            DataRefList.Add(AircraftGearAcfNwSteerdeg2.Id, AircraftGearAcfNwSteerdeg2);
            DataRefList.Add(AircraftGearAcfWaterRudLongarm.Id, AircraftGearAcfWaterRudLongarm);
            DataRefList.Add(AircraftGearAcfWaterRudArea.Id, AircraftGearAcfWaterRudArea);
            DataRefList.Add(AircraftGearAcfWaterRudMaxdef.Id, AircraftGearAcfWaterRudMaxdef);
            DataRefList.Add(AircraftGearAcfHEqlbm.Id, AircraftGearAcfHEqlbm);
            DataRefList.Add(AircraftGearAcfTheEqlbm.Id, AircraftGearAcfTheEqlbm);
            DataRefList.Add(AircraftGearAcfGearDoorAngNow.Id, AircraftGearAcfGearDoorAngNow);
            DataRefList.Add(AircraftWeightAcfCgyOriginal.Id, AircraftWeightAcfCgyOriginal);
            DataRefList.Add(AircraftWeightAcfCgzOriginal.Id, AircraftWeightAcfCgzOriginal);
            DataRefList.Add(AircraftWeightAcfJxxUnitmass.Id, AircraftWeightAcfJxxUnitmass);
            DataRefList.Add(AircraftWeightAcfJyyUnitmass.Id, AircraftWeightAcfJyyUnitmass);
            DataRefList.Add(AircraftWeightAcfJzzUnitmass.Id, AircraftWeightAcfJzzUnitmass);
            DataRefList.Add(AircraftWeightAcfMEmpty.Id, AircraftWeightAcfMEmpty);
            DataRefList.Add(AircraftWeightAcfMDisplaced.Id, AircraftWeightAcfMDisplaced);
            DataRefList.Add(AircraftWeightAcfMMax.Id, AircraftWeightAcfMMax);
            DataRefList.Add(AircraftWeightAcfMFuelTot.Id, AircraftWeightAcfMFuelTot);
            DataRefList.Add(AircraftWeightAcfMJettison.Id, AircraftWeightAcfMJettison);
            DataRefList.Add(AircraftWeightAcfMDisplacedY.Id, AircraftWeightAcfMDisplacedY);
            DataRefList.Add(AircraftSpecialcontrolsAcfJatoTheta.Id, AircraftSpecialcontrolsAcfJatoTheta);
            DataRefList.Add(AircraftSpecialcontrolsAcfJatoThrust.Id, AircraftSpecialcontrolsAcfJatoThrust);
            DataRefList.Add(AircraftSpecialcontrolsAcfJatoDur.Id, AircraftSpecialcontrolsAcfJatoDur);
            DataRefList.Add(AircraftSpecialcontrolsAcfJatoSfc.Id, AircraftSpecialcontrolsAcfJatoSfc);
            DataRefList.Add(AircraftSpecialcontrolsAcfJatoY.Id, AircraftSpecialcontrolsAcfJatoY);
            DataRefList.Add(AircraftSpecialcontrolsAcfJatoZ.Id, AircraftSpecialcontrolsAcfJatoZ);
            DataRefList.Add(AircraftSpecialcontrolsAcfChuteArea.Id, AircraftSpecialcontrolsAcfChuteArea);
            DataRefList.Add(AircraftSpecialcontrolsAcfChuteY.Id, AircraftSpecialcontrolsAcfChuteY);
            DataRefList.Add(AircraftSpecialcontrolsAcfChuteZ.Id, AircraftSpecialcontrolsAcfChuteZ);
            DataRefList.Add(AircraftSpecialcontrolsAcfAil1pitch.Id, AircraftSpecialcontrolsAcfAil1pitch);
            DataRefList.Add(AircraftSpecialcontrolsAcfAil1flaps.Id, AircraftSpecialcontrolsAcfAil1flaps);
            DataRefList.Add(AircraftSpecialcontrolsAcfAil2pitch.Id, AircraftSpecialcontrolsAcfAil2pitch);
            DataRefList.Add(AircraftSpecialcontrolsAcfAil2flaps.Id, AircraftSpecialcontrolsAcfAil2flaps);
            DataRefList.Add(AircraftSpecialcontrolsAcfStabroll.Id, AircraftSpecialcontrolsAcfStabroll);
            DataRefList.Add(AircraftSpecialcontrolsAcfStabhdng.Id, AircraftSpecialcontrolsAcfStabhdng);
            DataRefList.Add(AircraftSpecialcontrolsAcfTvecPtch.Id, AircraftSpecialcontrolsAcfTvecPtch);
            DataRefList.Add(AircraftSpecialcontrolsAcfTvecRoll.Id, AircraftSpecialcontrolsAcfTvecRoll);
            DataRefList.Add(AircraftSpecialcontrolsAcfTvecHdng.Id, AircraftSpecialcontrolsAcfTvecHdng);
            DataRefList.Add(AircraftSpecialcontrolsAcfDiffThroWithHdng.Id, AircraftSpecialcontrolsAcfDiffThroWithHdng);
            DataRefList.Add(AircraftSpecialcontrolsAcfTksCapLiter.Id, AircraftSpecialcontrolsAcfTksCapLiter);
            DataRefList.Add(AircraftSpecialcontrolsAcfWarn1eq.Id, AircraftSpecialcontrolsAcfWarn1eq);
            DataRefList.Add(AircraftSpecialcontrolsAcfGearhorneq.Id, AircraftSpecialcontrolsAcfGearhorneq);
            DataRefList.Add(AircraftSpecialcontrolsAcfAutosbrkeq.Id, AircraftSpecialcontrolsAcfAutosbrkeq);
            DataRefList.Add(AircraftSpecialcontrolsAcfAutofbrkeq.Id, AircraftSpecialcontrolsAcfAutofbrkeq);
            DataRefList.Add(AircraftSpecialcontrolsAcfAutosweepeq.Id, AircraftSpecialcontrolsAcfAutosweepeq);
            DataRefList.Add(AircraftSpecialcontrolsAcfAutoslateq.Id, AircraftSpecialcontrolsAcfAutoslateq);
            DataRefList.Add(AircraftVtolcontrolsAcfVecteq.Id, AircraftVtolcontrolsAcfVecteq);
            DataRefList.Add(AircraftVtolcontrolsAcfVectarmz.Id, AircraftVtolcontrolsAcfVectarmz);
            DataRefList.Add(AircraftVtolcontrolsAcfCyclicElev.Id, AircraftVtolcontrolsAcfCyclicElev);
            DataRefList.Add(AircraftVtolcontrolsAcfCyclicAiln.Id, AircraftVtolcontrolsAcfCyclicAiln);
            DataRefList.Add(AircraftVtolcontrolsAcfDelta3.Id, AircraftVtolcontrolsAcfDelta3);
            DataRefList.Add(AircraftVtolcontrolsAcfPuffl.Id, AircraftVtolcontrolsAcfPuffl);
            DataRefList.Add(AircraftVtolcontrolsAcfPuffm.Id, AircraftVtolcontrolsAcfPuffm);
            DataRefList.Add(AircraftVtolcontrolsAcfPuffn.Id, AircraftVtolcontrolsAcfPuffn);
            DataRefList.Add(AircraftVtolcontrolsAcfTailWithColl.Id, AircraftVtolcontrolsAcfTailWithColl);
            DataRefList.Add(AircraftVtolcontrolsAcfDiffCollWithRoll.Id, AircraftVtolcontrolsAcfDiffCollWithRoll);
            DataRefList.Add(AircraftVtolcontrolsAcfDiffCollWithHdng.Id, AircraftVtolcontrolsAcfDiffCollWithHdng);
            DataRefList.Add(AircraftVtolcontrolsAcfDiffCyclWithHdngLon.Id, AircraftVtolcontrolsAcfDiffCyclWithHdngLon);
            DataRefList.Add(AircraftVtolcontrolsAcfAutoRpmWithTvec.Id, AircraftVtolcontrolsAcfAutoRpmWithTvec);
            DataRefList.Add(AircraftVtolcontrolsAcfRotorTrimMaxFwd.Id, AircraftVtolcontrolsAcfRotorTrimMaxFwd);
            DataRefList.Add(AircraftVtolcontrolsAcfRotorTrimMaxAft.Id, AircraftVtolcontrolsAcfRotorTrimMaxAft);
            DataRefList.Add(AircraftArtstabilityAcfAshiv.Id, AircraftArtstabilityAcfAshiv);
            DataRefList.Add(AircraftArtstabilityAcfAslov.Id, AircraftArtstabilityAcfAslov);
            DataRefList.Add(AircraftArtstabilityAcfAsmaxpLo.Id, AircraftArtstabilityAcfAsmaxpLo);
            DataRefList.Add(AircraftArtstabilityAcfAspLoRate.Id, AircraftArtstabilityAcfAspLoRate);
            DataRefList.Add(AircraftArtstabilityAcfAsmaxpHi.Id, AircraftArtstabilityAcfAsmaxpHi);
            DataRefList.Add(AircraftArtstabilityAcfAspHiPos.Id, AircraftArtstabilityAcfAspHiPos);
            DataRefList.Add(AircraftArtstabilityAcfAsmaxhLo.Id, AircraftArtstabilityAcfAsmaxhLo);
            DataRefList.Add(AircraftArtstabilityAcfAshLoRate.Id, AircraftArtstabilityAcfAshLoRate);
            DataRefList.Add(AircraftArtstabilityAcfAsmaxhHi.Id, AircraftArtstabilityAcfAsmaxhHi);
            DataRefList.Add(AircraftArtstabilityAcfAshHiPos.Id, AircraftArtstabilityAcfAshHiPos);
            DataRefList.Add(AircraftArtstabilityAcfAsmaxrLo.Id, AircraftArtstabilityAcfAsmaxrLo);
            DataRefList.Add(AircraftArtstabilityAcfAsrLoRate.Id, AircraftArtstabilityAcfAsrLoRate);
            DataRefList.Add(AircraftArtstabilityAcfAsmaxrHi.Id, AircraftArtstabilityAcfAsmaxrHi);
            DataRefList.Add(AircraftArtstabilityAcfAsrHiRate.Id, AircraftArtstabilityAcfAsrHiRate);
            DataRefList.Add(AircraftArtstabilityAcfHasClutch.Id, AircraftArtstabilityAcfHasClutch);
            DataRefList.Add(AircraftOverflowAcfStabDelincToVne.Id, AircraftOverflowAcfStabDelincToVne);
            DataRefList.Add(AircraftOverflowAcfVmca.Id, AircraftOverflowAcfVmca);
            DataRefList.Add(AircraftOverflowAcfVyse.Id, AircraftOverflowAcfVyse);
            DataRefList.Add(AircraftOverflowAcfFlapArm.Id, AircraftOverflowAcfFlapArm);
            DataRefList.Add(AircraftOverflowAcfCgzFwd.Id, AircraftOverflowAcfCgzFwd);
            DataRefList.Add(AircraftOverflowAcfCgzAft.Id, AircraftOverflowAcfCgzAft);
            DataRefList.Add(AircraftOverflowAcfGearCycTime.Id, AircraftOverflowAcfGearCycTime);
            DataRefList.Add(AircraftOverflowAcfRefuelX.Id, AircraftOverflowAcfRefuelX);
            DataRefList.Add(AircraftOverflowAcfRefuelY.Id, AircraftOverflowAcfRefuelY);
            DataRefList.Add(AircraftOverflowAcfRefuelZ.Id, AircraftOverflowAcfRefuelZ);
            DataRefList.Add(AircraftOverflowAcfGearSteers.Id, AircraftOverflowAcfGearSteers);
            DataRefList.Add(AircraftOverflowAcfDihed2.Id, AircraftOverflowAcfDihed2);
            DataRefList.Add(AircraftOverflowJettX.Id, AircraftOverflowJettX);
            DataRefList.Add(AircraftOverflowJettY.Id, AircraftOverflowJettY);
            DataRefList.Add(AircraftOverflowJettZ.Id, AircraftOverflowJettZ);
            DataRefList.Add(AircraftOverflowAcfPuffx.Id, AircraftOverflowAcfPuffx);
            DataRefList.Add(AircraftOverflowAcfPuffy.Id, AircraftOverflowAcfPuffy);
            DataRefList.Add(AircraftOverflowAcfPuffz.Id, AircraftOverflowAcfPuffz);
            DataRefList.Add(AircraftOverflowAcfVle.Id, AircraftOverflowAcfVle);
            DataRefList.Add(AircraftOverflowAcfAspHiRate.Id, AircraftOverflowAcfAspHiRate);
            DataRefList.Add(AircraftOverflowAcfAshHiRate.Id, AircraftOverflowAcfAshHiRate);
            DataRefList.Add(AircraftOverflowAcfElevflaps.Id, AircraftOverflowAcfElevflaps);
            DataRefList.Add(AircraftOverflowAcfTankX.Id, AircraftOverflowAcfTankX);
            DataRefList.Add(AircraftOverflowAcfTankY.Id, AircraftOverflowAcfTankY);
            DataRefList.Add(AircraftOverflowAcfTankZ.Id, AircraftOverflowAcfTankZ);
            DataRefList.Add(AircraftOverflowAcfTankXFull.Id, AircraftOverflowAcfTankXFull);
            DataRefList.Add(AircraftOverflowAcfTankYFull.Id, AircraftOverflowAcfTankYFull);
            DataRefList.Add(AircraftOverflowAcfTankZFull.Id, AircraftOverflowAcfTankZFull);
            DataRefList.Add(AircraftOverflowAcfTankRat.Id, AircraftOverflowAcfTankRat);
            DataRefList.Add(AircraftOverflowAcfStallWarnAlpha.Id, AircraftOverflowAcfStallWarnAlpha);
            DataRefList.Add(AircraftOverflowAcfMassShift.Id, AircraftOverflowAcfMassShift);
            DataRefList.Add(AircraftOverflowAcfMassShiftDx.Id, AircraftOverflowAcfMassShiftDx);
            DataRefList.Add(AircraftOverflowAcfMassShiftDz.Id, AircraftOverflowAcfMassShiftDz);
            DataRefList.Add(AircraftOverflowAcfFeatheredPitch.Id, AircraftOverflowAcfFeatheredPitch);
            DataRefList.Add(AircraftOverflowAcfAsmaxgHi.Id, AircraftOverflowAcfAsmaxgHi);
            DataRefList.Add(AircraftOverflowAcfAsgHiPos.Id, AircraftOverflowAcfAsgHiPos);
            DataRefList.Add(AircraftOverflowAcfAsgHiRate.Id, AircraftOverflowAcfAsgHiRate);
            DataRefList.Add(AircraftOverflowAcfWingTiltPtch.Id, AircraftOverflowAcfWingTiltPtch);
            DataRefList.Add(AircraftOverflowAcfWingTiltRoll.Id, AircraftOverflowAcfWingTiltRoll);
            DataRefList.Add(AircraftOverflowAcfMaxPressDiff.Id, AircraftOverflowAcfMaxPressDiff);
            DataRefList.Add(AircraftOverflowAcfO2BottleCapLiters.Id, AircraftOverflowAcfO2BottleCapLiters);
            DataRefList.Add(AircraftOverflowAcfDiffCollWithPtch.Id, AircraftOverflowAcfDiffCollWithPtch);
            DataRefList.Add(AircraftOverflowAcfFlapRoll.Id, AircraftOverflowAcfFlapRoll);
            DataRefList.Add(AircraftOverflowAcfFlapPtch.Id, AircraftOverflowAcfFlapPtch);
            DataRefList.Add(AircraftOverflowAcfDiffCyclWithHdngLat.Id, AircraftOverflowAcfDiffCyclWithHdngLat);
            DataRefList.Add(AircraftOverflowAcfPhaseTvectOutAt90.Id, AircraftOverflowAcfPhaseTvectOutAt90);
            DataRefList.Add(AircraftOverflowAcfRollCo.Id, AircraftOverflowAcfRollCo);
            DataRefList.Add(AircraftOverflowAcfBrakeCo.Id, AircraftOverflowAcfBrakeCo);
            DataRefList.Add(AircraftOverflowAcfDriveByWire.Id, AircraftOverflowAcfDriveByWire);
            DataRefList.Add(AircraftOverflowAcfIsGlossy.Id, AircraftOverflowAcfIsGlossy);
            DataRefList.Add(AircraftOverflowAcfNumTanks.Id, AircraftOverflowAcfNumTanks);
            DataRefList.Add(AircraftOverflowAcfHasRefuel.Id, AircraftOverflowAcfHasRefuel);
            DataRefList.Add(AircraftOverflowAcfJettIsSlung.Id, AircraftOverflowAcfJettIsSlung);
            DataRefList.Add(AircraftOverflowAcfEngMass.Id, AircraftOverflowAcfEngMass);
            DataRefList.Add(AircraftOverflowAcfPhaseTvectOutAt00.Id, AircraftOverflowAcfPhaseTvectOutAt00);
            DataRefList.Add(AircraftOverflowAcfAutoTrimeq.Id, AircraftOverflowAcfAutoTrimeq);
            DataRefList.Add(AircraftOverflowAcfHasDCFd.Id, AircraftOverflowAcfHasDCFd);
            DataRefList.Add(AircraftOverflowAcfFlapsWithGeareq.Id, AircraftOverflowAcfFlapsWithGeareq);
            DataRefList.Add(AircraftOverflowAcfRevOnTouchdown.Id, AircraftOverflowAcfRevOnTouchdown);
            DataRefList.Add(AircraftOverflowAcfFlapsWithVeceq.Id, AircraftOverflowAcfFlapsWithVeceq);
            DataRefList.Add(AircraftOverflowAcfWarn2eq.Id, AircraftOverflowAcfWarn2eq);
            DataRefList.Add(AircraftOverflowAcfNumThrustpoints.Id, AircraftOverflowAcfNumThrustpoints);
            DataRefList.Add(AircraftOverflowAcfCusRndUse.Id, AircraftOverflowAcfCusRndUse);
            DataRefList.Add(AircraftOverflowAcfCusRndLoVal.Id, AircraftOverflowAcfCusRndLoVal);
            DataRefList.Add(AircraftOverflowAcfCusRndHiVal.Id, AircraftOverflowAcfCusRndHiVal);
            DataRefList.Add(AircraftOverflowAcfCusRndLoAng.Id, AircraftOverflowAcfCusRndLoAng);
            DataRefList.Add(AircraftOverflowAcfCusRndHiAng.Id, AircraftOverflowAcfCusRndHiAng);
            DataRefList.Add(AircraftOverflowAcfHasBeta.Id, AircraftOverflowAcfHasBeta);
            DataRefList.Add(AircraftOverflowAcfCusRndMirror.Id, AircraftOverflowAcfCusRndMirror);
            DataRefList.Add(AircraftOverflowAcfCusRndLabel.Id, AircraftOverflowAcfCusRndLabel);
            DataRefList.Add(AircraftOverflowAcfCusDigUse.Id, AircraftOverflowAcfCusDigUse);
            DataRefList.Add(AircraftOverflowAcfCusDigOffset.Id, AircraftOverflowAcfCusDigOffset);
            DataRefList.Add(AircraftOverflowAcfCusDigScale.Id, AircraftOverflowAcfCusDigScale);
            DataRefList.Add(AircraftOverflowAcfCusDigDig.Id, AircraftOverflowAcfCusDigDig);
            DataRefList.Add(AircraftOverflowAcfCusDigDec.Id, AircraftOverflowAcfCusDigDec);
            DataRefList.Add(AircraftOverflowAcfIncAil.Id, AircraftOverflowAcfIncAil);
            DataRefList.Add(AircraftOverflowAcfIncAil2.Id, AircraftOverflowAcfIncAil2);
            DataRefList.Add(AircraftOverflowAcfIncVec.Id, AircraftOverflowAcfIncVec);
            DataRefList.Add(AircraftOverflowAcfTowHookY.Id, AircraftOverflowAcfTowHookY);
            DataRefList.Add(AircraftOverflowAcfTowHookZ.Id, AircraftOverflowAcfTowHookZ);
            DataRefList.Add(AircraftOverflowAcfWinHookY.Id, AircraftOverflowAcfWinHookY);
            DataRefList.Add(AircraftOverflowAcfWinHookZ.Id, AircraftOverflowAcfWinHookZ);
            DataRefList.Add(AircraftOverflowAcfNosewheelK.Id, AircraftOverflowAcfNosewheelK);
            DataRefList.Add(AircraftOverflowAcfVectarmy.Id, AircraftOverflowAcfVectarmy);
            DataRefList.Add(AircraftOverflowAcfHidePropAt90Vect.Id, AircraftOverflowAcfHidePropAt90Vect);
            DataRefList.Add(AircraftOverflowAcfHasFuelAll.Id, AircraftOverflowAcfHasFuelAll);
            DataRefList.Add(AircraftOverflowAcfHasFuelAny.Id, AircraftOverflowAcfHasFuelAny);
            DataRefList.Add(AircraftOverflowHasHsi.Id, AircraftOverflowHasHsi);
            DataRefList.Add(AircraftOverflowHasYawdampBut.Id, AircraftOverflowHasYawdampBut);
            DataRefList.Add(AircraftOverflowHasTransonicAudio.Id, AircraftOverflowHasTransonicAudio);
            DataRefList.Add(AircraftOverflowHasPreRotate.Id, AircraftOverflowHasPreRotate);
            DataRefList.Add(AircraftOverflowSFCAltLoPRP.Id, AircraftOverflowSFCAltLoPRP);
            DataRefList.Add(AircraftOverflowSFCHalfLoPRP.Id, AircraftOverflowSFCHalfLoPRP);
            DataRefList.Add(AircraftOverflowSFCFullLoPRP.Id, AircraftOverflowSFCFullLoPRP);
            DataRefList.Add(AircraftOverflowSFCAltHiPRP.Id, AircraftOverflowSFCAltHiPRP);
            DataRefList.Add(AircraftOverflowSFCHalfHiPRP.Id, AircraftOverflowSFCHalfHiPRP);
            DataRefList.Add(AircraftOverflowSFCFullHiPRP.Id, AircraftOverflowSFCFullHiPRP);
            DataRefList.Add(AircraftOverflowFfRatIdlePRP.Id, AircraftOverflowFfRatIdlePRP);
            DataRefList.Add(AircraftOverflowSFCAltLoJET.Id, AircraftOverflowSFCAltLoJET);
            DataRefList.Add(AircraftOverflowSFCHalfLoJET.Id, AircraftOverflowSFCHalfLoJET);
            DataRefList.Add(AircraftOverflowSFCFullLoJET.Id, AircraftOverflowSFCFullLoJET);
            DataRefList.Add(AircraftOverflowSFCAltHiJET.Id, AircraftOverflowSFCAltHiJET);
            DataRefList.Add(AircraftOverflowSFCHalfHiJET.Id, AircraftOverflowSFCHalfHiJET);
            DataRefList.Add(AircraftOverflowSFCFullHiJET.Id, AircraftOverflowSFCFullHiJET);
            DataRefList.Add(AircraftOverflowFfRatIdleJET.Id, AircraftOverflowFfRatIdleJET);
            DataRefList.Add(AircraftSystemsFdirNeededToEngageServos.Id, AircraftSystemsFdirNeededToEngageServos);
            DataRefList.Add(AirfoilsAflClb.Id, AirfoilsAflClb);
            DataRefList.Add(AirfoilsAflAlminArray.Id, AirfoilsAflAlminArray);
            DataRefList.Add(AirfoilsAflAlmaxArray.Id, AirfoilsAflAlmaxArray);
            DataRefList.Add(AirfoilsAflReNum.Id, AirfoilsAflReNum);
            DataRefList.Add(AirfoilsAflTRat.Id, AirfoilsAflTRat);
            DataRefList.Add(AirfoilsAflMachDiv.Id, AirfoilsAflMachDiv);
            DataRefList.Add(AirfoilsAflClm.Id, AirfoilsAflClm);
            DataRefList.Add(AirfoilsAflCl.Id, AirfoilsAflCl);
            DataRefList.Add(AirfoilsAflCd.Id, AirfoilsAflCd);
            DataRefList.Add(AirfoilsAflCm.Id, AirfoilsAflCm);
            DataRefList.Add(AtcUserAircraftTransmitting.Id, AtcUserAircraftTransmitting);
            DataRefList.Add(AtcCom1TunedFacility.Id, AtcCom1TunedFacility);
            DataRefList.Add(AtcCom2TunedFacility.Id, AtcCom2TunedFacility);
            DataRefList.Add(AtcCom1Active.Id, AtcCom1Active);
            DataRefList.Add(AtcCom2Active.Id, AtcCom2Active);
            DataRefList.Add(AtcCom1Rx.Id, AtcCom1Rx);
            DataRefList.Add(AtcCom2Rx.Id, AtcCom2Rx);
            DataRefList.Add(AtcCom1Tx.Id, AtcCom1Tx);
            DataRefList.Add(AtcCom2Tx.Id, AtcCom2Tx);
            DataRefList.Add(AtcAtisEnabled.Id, AtcAtisEnabled);
            DataRefList.Add(CockpitAutopilotAutopilotMode.Id, CockpitAutopilotAutopilotMode);
            DataRefList.Add(CockpitAutopilotAirspeedMode.Id, CockpitAutopilotAirspeedMode);
            DataRefList.Add(CockpitAutopilotHeadingMode.Id, CockpitAutopilotHeadingMode);
            DataRefList.Add(CockpitAutopilotAltitudeMode.Id, CockpitAutopilotAltitudeMode);
            DataRefList.Add(CockpitAutopilotBackcourseOn.Id, CockpitAutopilotBackcourseOn);
            DataRefList.Add(CockpitAutopilotAltitude.Id, CockpitAutopilotAltitude);
            DataRefList.Add(CockpitAutopilotCurrentAltitude.Id, CockpitAutopilotCurrentAltitude);
            DataRefList.Add(CockpitAutopilotVerticalVelocity.Id, CockpitAutopilotVerticalVelocity);
            DataRefList.Add(CockpitAutopilotAirspeed.Id, CockpitAutopilotAirspeed);
            DataRefList.Add(CockpitAutopilotHeading.Id, CockpitAutopilotHeading);
            DataRefList.Add(CockpitAutopilotHeadingMag.Id, CockpitAutopilotHeadingMag);
            DataRefList.Add(CockpitAutopilotHeadingMag2.Id, CockpitAutopilotHeadingMag2);
            DataRefList.Add(CockpitAutopilotAirspeedIsMach.Id, CockpitAutopilotAirspeedIsMach);
            DataRefList.Add(CockpitAutopilotFlightDirectorPitch.Id, CockpitAutopilotFlightDirectorPitch);
            DataRefList.Add(CockpitAutopilotFlightDirectorRoll.Id, CockpitAutopilotFlightDirectorRoll);
            DataRefList.Add(CockpitAutopilotAutopilotState.Id, CockpitAutopilotAutopilotState);
            DataRefList.Add(CockpitAutopilotHeadingRollMode.Id, CockpitAutopilotHeadingRollMode);
            DataRefList.Add(CockpitAutopilotModeHnav.Id, CockpitAutopilotModeHnav);
            DataRefList.Add(CockpitAutopilotModeGls.Id, CockpitAutopilotModeGls);
            DataRefList.Add(CockpitAutopilotSynHoldDeg.Id, CockpitAutopilotSynHoldDeg);
            DataRefList.Add(CockpitAutopilotNavSteerDegMag.Id, CockpitAutopilotNavSteerDegMag);
            DataRefList.Add(CockpitAvidyneLftHil.Id, CockpitAvidyneLftHil);
            DataRefList.Add(CockpitAvidyneRgtHil.Id, CockpitAvidyneRgtHil);
            DataRefList.Add(CockpitAvidyneAltHil.Id, CockpitAvidyneAltHil);
            DataRefList.Add(CockpitAvidyneSrc.Id, CockpitAvidyneSrc);
            DataRefList.Add(CockpitAvidyneHsiMode.Id, CockpitAvidyneHsiMode);
            DataRefList.Add(CockpitAvidyneMapRangeSel.Id, CockpitAvidyneMapRangeSel);
            DataRefList.Add(CockpitElectricalBatteryOn.Id, CockpitElectricalBatteryOn);
            DataRefList.Add(CockpitElectricalBatteryArrayOn.Id, CockpitElectricalBatteryArrayOn);
            DataRefList.Add(CockpitElectricalBatteryEQ.Id, CockpitElectricalBatteryEQ);
            DataRefList.Add(CockpitElectricalAvionicsOn.Id, CockpitElectricalAvionicsOn);
            DataRefList.Add(CockpitElectricalAvionicsEQ.Id, CockpitElectricalAvionicsEQ);
            DataRefList.Add(CockpitElectricalGeneratorOn.Id, CockpitElectricalGeneratorOn);
            DataRefList.Add(CockpitElectricalGeneratorEQ.Id, CockpitElectricalGeneratorEQ);
            DataRefList.Add(CockpitElectricalGeneratorApuOn.Id, CockpitElectricalGeneratorApuOn);
            DataRefList.Add(CockpitElectricalGpuOn.Id, CockpitElectricalGpuOn);
            DataRefList.Add(CockpitElectricalGeneratorApuAmps.Id, CockpitElectricalGeneratorApuAmps);
            DataRefList.Add(CockpitElectricalGpuAmps.Id, CockpitElectricalGpuAmps);
            DataRefList.Add(CockpitElectricalHUDOn.Id, CockpitElectricalHUDOn);
            DataRefList.Add(CockpitElectricalHUDBrightness.Id, CockpitElectricalHUDBrightness);
            DataRefList.Add(CockpitElectricalBeaconLightsOn.Id, CockpitElectricalBeaconLightsOn);
            DataRefList.Add(CockpitElectricalLandingLightsOn.Id, CockpitElectricalLandingLightsOn);
            DataRefList.Add(CockpitElectricalNavLightsOn.Id, CockpitElectricalNavLightsOn);
            DataRefList.Add(CockpitElectricalStrobeLightsOn.Id, CockpitElectricalStrobeLightsOn);
            DataRefList.Add(CockpitElectricalTaxiLightOn.Id, CockpitElectricalTaxiLightOn);
            DataRefList.Add(CockpitElectricalCockpitLightsOn.Id, CockpitElectricalCockpitLightsOn);
            DataRefList.Add(CockpitElectricalCockpitLights.Id, CockpitElectricalCockpitLights);
            DataRefList.Add(CockpitElectricalInstrumentBrightness.Id, CockpitElectricalInstrumentBrightness);
            DataRefList.Add(CockpitElectricalSunglassesOn.Id, CockpitElectricalSunglassesOn);
            DataRefList.Add(CockpitElectricalNightVisionOn.Id, CockpitElectricalNightVisionOn);
            DataRefList.Add(CockpitElectricalAhBar.Id, CockpitElectricalAhBar);
            DataRefList.Add(CockpitElectricalBatteryChargeWattHr.Id, CockpitElectricalBatteryChargeWattHr);
            DataRefList.Add(CockpitEngineInverterOn.Id, CockpitEngineInverterOn);
            DataRefList.Add(CockpitEngineInverterEq.Id, CockpitEngineInverterEq);
            DataRefList.Add(CockpitEngineFuelPumpOn.Id, CockpitEngineFuelPumpOn);
            DataRefList.Add(CockpitEngineFadecOn.Id, CockpitEngineFadecOn);
            DataRefList.Add(CockpitEngineIdleSpeed.Id, CockpitEngineIdleSpeed);
            DataRefList.Add(CockpitEngineFuelTankSelector.Id, CockpitEngineFuelTankSelector);
            DataRefList.Add(CockpitEngineFuelTankTransfer.Id, CockpitEngineFuelTankTransfer);
            DataRefList.Add(CockpitEngineFuelTankTransferFrom.Id, CockpitEngineFuelTankTransferFrom);
            DataRefList.Add(CockpitEngineIgnitionOn.Id, CockpitEngineIgnitionOn);
            DataRefList.Add(CockpitEngineIgnitersOn.Id, CockpitEngineIgnitersOn);
            DataRefList.Add(CockpitEngineStarterDuration.Id, CockpitEngineStarterDuration);
            DataRefList.Add(CockpitEngineClutchEngage.Id, CockpitEngineClutchEngage);
            DataRefList.Add(CockpitEngineAPUSwitch.Id, CockpitEngineAPUSwitch);
            DataRefList.Add(CockpitEngineAPURunning.Id, CockpitEngineAPURunning);
            DataRefList.Add(CockpitEngineAPUN1.Id, CockpitEngineAPUN1);
            DataRefList.Add(CockpitG430G430NavComSel.Id, CockpitG430G430NavComSel);
            DataRefList.Add(CockpitG1000Gcu478InputSel.Id, CockpitG1000Gcu478InputSel);
            DataRefList.Add(CockpitGpsCourse.Id, CockpitGpsCourse);
            DataRefList.Add(CockpitGpsDestinationType.Id, CockpitGpsDestinationType);
            DataRefList.Add(CockpitGpsDestinationIndex.Id, CockpitGpsDestinationIndex);
            DataRefList.Add(CockpitGyrosTheVacIndDeg.Id, CockpitGyrosTheVacIndDeg);
            DataRefList.Add(CockpitGyrosTheEleIndDeg.Id, CockpitGyrosTheEleIndDeg);
            DataRefList.Add(CockpitGyrosTheIndDeg3.Id, CockpitGyrosTheIndDeg3);
            DataRefList.Add(CockpitGyrosTheIndDeg4.Id, CockpitGyrosTheIndDeg4);
            DataRefList.Add(CockpitGyrosTheIndVacPilotDeg.Id, CockpitGyrosTheIndVacPilotDeg);
            DataRefList.Add(CockpitGyrosTheIndVacCopilotDeg.Id, CockpitGyrosTheIndVacCopilotDeg);
            DataRefList.Add(CockpitGyrosTheIndElecPilotDeg.Id, CockpitGyrosTheIndElecPilotDeg);
            DataRefList.Add(CockpitGyrosTheIndElecCopilotDeg.Id, CockpitGyrosTheIndElecCopilotDeg);
            DataRefList.Add(CockpitGyrosTheIndAharsPilotDeg.Id, CockpitGyrosTheIndAharsPilotDeg);
            DataRefList.Add(CockpitGyrosTheIndAharsCopilotDeg.Id, CockpitGyrosTheIndAharsCopilotDeg);
            DataRefList.Add(CockpitGyrosPsiVacIndDegm.Id, CockpitGyrosPsiVacIndDegm);
            DataRefList.Add(CockpitGyrosPsiEleIndDegm.Id, CockpitGyrosPsiEleIndDegm);
            DataRefList.Add(CockpitGyrosPsiIndDegm3.Id, CockpitGyrosPsiIndDegm3);
            DataRefList.Add(CockpitGyrosPsiIndDegm4.Id, CockpitGyrosPsiIndDegm4);
            DataRefList.Add(CockpitGyrosPsiIndVacPilotDegm.Id, CockpitGyrosPsiIndVacPilotDegm);
            DataRefList.Add(CockpitGyrosPsiIndVacCopilotDegm.Id, CockpitGyrosPsiIndVacCopilotDegm);
            DataRefList.Add(CockpitGyrosPsiIndElecPilotDegm.Id, CockpitGyrosPsiIndElecPilotDegm);
            DataRefList.Add(CockpitGyrosPsiIndElecCopilotDegm.Id, CockpitGyrosPsiIndElecCopilotDegm);
            DataRefList.Add(CockpitGyrosPsiIndAharsPilotDegm.Id, CockpitGyrosPsiIndAharsPilotDegm);
            DataRefList.Add(CockpitGyrosPsiIndAharsCopilotDegm.Id, CockpitGyrosPsiIndAharsCopilotDegm);
            DataRefList.Add(CockpitGyrosPhiVacIndDeg.Id, CockpitGyrosPhiVacIndDeg);
            DataRefList.Add(CockpitGyrosPhiEleIndDeg.Id, CockpitGyrosPhiEleIndDeg);
            DataRefList.Add(CockpitGyrosPhiIndDeg3.Id, CockpitGyrosPhiIndDeg3);
            DataRefList.Add(CockpitGyrosPhiIndDeg4.Id, CockpitGyrosPhiIndDeg4);
            DataRefList.Add(CockpitGyrosPhiIndVacPilotDeg.Id, CockpitGyrosPhiIndVacPilotDeg);
            DataRefList.Add(CockpitGyrosPhiIndVacCopilotDeg.Id, CockpitGyrosPhiIndVacCopilotDeg);
            DataRefList.Add(CockpitGyrosPhiIndElecPilotDeg.Id, CockpitGyrosPhiIndElecPilotDeg);
            DataRefList.Add(CockpitGyrosPhiIndElecCopilotDeg.Id, CockpitGyrosPhiIndElecCopilotDeg);
            DataRefList.Add(CockpitGyrosPhiIndAharsPilotDeg.Id, CockpitGyrosPhiIndAharsPilotDeg);
            DataRefList.Add(CockpitGyrosPhiIndAharsCopilotDeg.Id, CockpitGyrosPhiIndAharsCopilotDeg);
            DataRefList.Add(CockpitGyrosDgDriftVacDeg.Id, CockpitGyrosDgDriftVacDeg);
            DataRefList.Add(CockpitGyrosDgDriftVac2Deg.Id, CockpitGyrosDgDriftVac2Deg);
            DataRefList.Add(CockpitGyrosDgDriftEleDeg.Id, CockpitGyrosDgDriftEleDeg);
            DataRefList.Add(CockpitGyrosDgDriftEle2Deg.Id, CockpitGyrosDgDriftEle2Deg);
            DataRefList.Add(CockpitGyrosDgDriftAharsDeg.Id, CockpitGyrosDgDriftAharsDeg);
            DataRefList.Add(CockpitGyrosDgDriftAhars2Deg.Id, CockpitGyrosDgDriftAhars2Deg);
            DataRefList.Add(CockpitGyrosGyrForce.Id, CockpitGyrosGyrForce);
            DataRefList.Add(CockpitGyrosGyrSpin.Id, CockpitGyrosGyrSpin);
            DataRefList.Add(CockpitGyrosGyrFreeSlaved.Id, CockpitGyrosGyrFreeSlaved);
            DataRefList.Add(CockpitGyrosGyrFlag.Id, CockpitGyrosGyrFlag);
            DataRefList.Add(CockpitGyrosGyrCageRatio.Id, CockpitGyrosGyrCageRatio);
            DataRefList.Add(CockpitMiscOuterMarkerLit.Id, CockpitMiscOuterMarkerLit);
            DataRefList.Add(CockpitMiscMiddleMarkerLit.Id, CockpitMiscMiddleMarkerLit);
            DataRefList.Add(CockpitMiscInnerMarkerLit.Id, CockpitMiscInnerMarkerLit);
            DataRefList.Add(CockpitMiscOverOuterMarker.Id, CockpitMiscOverOuterMarker);
            DataRefList.Add(CockpitMiscOverMiddleMarker.Id, CockpitMiscOverMiddleMarker);
            DataRefList.Add(CockpitMiscOverInnerMarker.Id, CockpitMiscOverInnerMarker);
            DataRefList.Add(CockpitMiscBarometerSetting.Id, CockpitMiscBarometerSetting);
            DataRefList.Add(CockpitMiscBarometerSetting2.Id, CockpitMiscBarometerSetting2);
            DataRefList.Add(CockpitMiscRadioAltimeterMinimum.Id, CockpitMiscRadioAltimeterMinimum);
            DataRefList.Add(CockpitMiscShowPath.Id, CockpitMiscShowPath);
            DataRefList.Add(CockpitMiscVacuum.Id, CockpitMiscVacuum);
            DataRefList.Add(CockpitMiscVacuum2.Id, CockpitMiscVacuum2);
            DataRefList.Add(CockpitMiscAhAdjust.Id, CockpitMiscAhAdjust);
            DataRefList.Add(CockpitMiscAhAdjust2.Id, CockpitMiscAhAdjust2);
            DataRefList.Add(CockpitMiscCompassIndicated.Id, CockpitMiscCompassIndicated);
            DataRefList.Add(CockpitMiscHydraulicQuantity.Id, CockpitMiscHydraulicQuantity);
            DataRefList.Add(CockpitMiscHydraulicQuantity2.Id, CockpitMiscHydraulicQuantity2);
            DataRefList.Add(CockpitPressureBleedAirOn.Id, CockpitPressureBleedAirOn);
            DataRefList.Add(CockpitPressureBleedAirMode.Id, CockpitPressureBleedAirMode);
            DataRefList.Add(CockpitPressureCabinAltitudeSetMMsl.Id, CockpitPressureCabinAltitudeSetMMsl);
            DataRefList.Add(CockpitPressureCabinVviSetMMsec.Id, CockpitPressureCabinVviSetMMsec);
            DataRefList.Add(CockpitPressureCabinPressureDifferentialPsi.Id, CockpitPressureCabinPressureDifferentialPsi);
            DataRefList.Add(CockpitPressureCabinAltitudeActualMMsl.Id, CockpitPressureCabinAltitudeActualMMsl);
            DataRefList.Add(CockpitPressureCabinVviActualMMsec.Id, CockpitPressureCabinVviActualMMsec);
            DataRefList.Add(CockpitPressurePressureTestTimeout.Id, CockpitPressurePressureTestTimeout);
            DataRefList.Add(CockpitPressureMaxAllowableAltitude.Id, CockpitPressureMaxAllowableAltitude);
            DataRefList.Add(CockpitPressureDumpAll.Id, CockpitPressureDumpAll);
            DataRefList.Add(CockpitPressureDumpToAlt.Id, CockpitPressureDumpToAlt);
            DataRefList.Add(CockpitPressureOutflowValve.Id, CockpitPressureOutflowValve);
            DataRefList.Add(CockpitRadiosNav1FreqHz.Id, CockpitRadiosNav1FreqHz);
            DataRefList.Add(CockpitRadiosNav2FreqHz.Id, CockpitRadiosNav2FreqHz);
            DataRefList.Add(CockpitRadiosCom1FreqHz.Id, CockpitRadiosCom1FreqHz);
            DataRefList.Add(CockpitRadiosCom2FreqHz.Id, CockpitRadiosCom2FreqHz);
            DataRefList.Add(CockpitRadiosAdf1FreqHz.Id, CockpitRadiosAdf1FreqHz);
            DataRefList.Add(CockpitRadiosAdf2FreqHz.Id, CockpitRadiosAdf2FreqHz);
            DataRefList.Add(CockpitRadiosDmeFreqHz.Id, CockpitRadiosDmeFreqHz);
            DataRefList.Add(CockpitRadiosNav1StdbyFreqHz.Id, CockpitRadiosNav1StdbyFreqHz);
            DataRefList.Add(CockpitRadiosNav2StdbyFreqHz.Id, CockpitRadiosNav2StdbyFreqHz);
            DataRefList.Add(CockpitRadiosCom1StdbyFreqHz.Id, CockpitRadiosCom1StdbyFreqHz);
            DataRefList.Add(CockpitRadiosCom2StdbyFreqHz.Id, CockpitRadiosCom2StdbyFreqHz);
            DataRefList.Add(CockpitRadiosAdf1StdbyFreqHz.Id, CockpitRadiosAdf1StdbyFreqHz);
            DataRefList.Add(CockpitRadiosAdf2StdbyFreqHz.Id, CockpitRadiosAdf2StdbyFreqHz);
            DataRefList.Add(CockpitRadiosDmeStdbyFreqHz.Id, CockpitRadiosDmeStdbyFreqHz);
            DataRefList.Add(CockpitRadiosNav1ObsDegt.Id, CockpitRadiosNav1ObsDegt);
            DataRefList.Add(CockpitRadiosNav2ObsDegt.Id, CockpitRadiosNav2ObsDegt);
            DataRefList.Add(CockpitRadiosNav1ObsDegm.Id, CockpitRadiosNav1ObsDegm);
            DataRefList.Add(CockpitRadiosNav1ObsDegm2.Id, CockpitRadiosNav1ObsDegm2);
            DataRefList.Add(CockpitRadiosNav2ObsDegm.Id, CockpitRadiosNav2ObsDegm);
            DataRefList.Add(CockpitRadiosNav2ObsDegm2.Id, CockpitRadiosNav2ObsDegm2);
            DataRefList.Add(CockpitRadiosNav1DirDegt.Id, CockpitRadiosNav1DirDegt);
            DataRefList.Add(CockpitRadiosNav2DirDegt.Id, CockpitRadiosNav2DirDegt);
            DataRefList.Add(CockpitRadiosAdf1DirDegt.Id, CockpitRadiosAdf1DirDegt);
            DataRefList.Add(CockpitRadiosAdf2DirDegt.Id, CockpitRadiosAdf2DirDegt);
            DataRefList.Add(CockpitRadiosGpsDirDegt.Id, CockpitRadiosGpsDirDegt);
            DataRefList.Add(CockpitRadiosGps2DirDegt.Id, CockpitRadiosGps2DirDegt);
            DataRefList.Add(CockpitRadiosDmeDirDegt.Id, CockpitRadiosDmeDirDegt);
            DataRefList.Add(CockpitRadiosNav1HdefDot.Id, CockpitRadiosNav1HdefDot);
            DataRefList.Add(CockpitRadiosNav1HdefDot2.Id, CockpitRadiosNav1HdefDot2);
            DataRefList.Add(CockpitRadiosNav2HdefDot.Id, CockpitRadiosNav2HdefDot);
            DataRefList.Add(CockpitRadiosNav2HdefDot2.Id, CockpitRadiosNav2HdefDot2);
            DataRefList.Add(CockpitRadiosGpsHdefDot.Id, CockpitRadiosGpsHdefDot);
            DataRefList.Add(CockpitRadiosGpsHdefDot2.Id, CockpitRadiosGpsHdefDot2);
            DataRefList.Add(CockpitRadiosGps2HdefDot.Id, CockpitRadiosGps2HdefDot);
            DataRefList.Add(CockpitRadiosGps2HdefDot2.Id, CockpitRadiosGps2HdefDot2);
            DataRefList.Add(CockpitRadiosNav1VdefDot.Id, CockpitRadiosNav1VdefDot);
            DataRefList.Add(CockpitRadiosNav1VdefDot2.Id, CockpitRadiosNav1VdefDot2);
            DataRefList.Add(CockpitRadiosNav2VdefDot.Id, CockpitRadiosNav2VdefDot);
            DataRefList.Add(CockpitRadiosNav2VdefDot2.Id, CockpitRadiosNav2VdefDot2);
            DataRefList.Add(CockpitRadiosGpsVdefDot.Id, CockpitRadiosGpsVdefDot);
            DataRefList.Add(CockpitRadiosGpsVdefDot2.Id, CockpitRadiosGpsVdefDot2);
            DataRefList.Add(CockpitRadiosGps2VdefDot.Id, CockpitRadiosGps2VdefDot);
            DataRefList.Add(CockpitRadiosGps2VdefDot2.Id, CockpitRadiosGps2VdefDot2);
            DataRefList.Add(CockpitRadiosNav1Fromto.Id, CockpitRadiosNav1Fromto);
            DataRefList.Add(CockpitRadiosNav1Fromto2.Id, CockpitRadiosNav1Fromto2);
            DataRefList.Add(CockpitRadiosNav2Fromto.Id, CockpitRadiosNav2Fromto);
            DataRefList.Add(CockpitRadiosNav2Fromto2.Id, CockpitRadiosNav2Fromto2);
            DataRefList.Add(CockpitRadiosGpsFromto.Id, CockpitRadiosGpsFromto);
            DataRefList.Add(CockpitRadiosGpsFromto2.Id, CockpitRadiosGpsFromto2);
            DataRefList.Add(CockpitRadiosGps2Fromto.Id, CockpitRadiosGps2Fromto);
            DataRefList.Add(CockpitRadiosGps2Fromto2.Id, CockpitRadiosGps2Fromto2);
            DataRefList.Add(CockpitRadiosNav1CDI.Id, CockpitRadiosNav1CDI);
            DataRefList.Add(CockpitRadiosNav2CDI.Id, CockpitRadiosNav2CDI);
            DataRefList.Add(CockpitRadiosNav1DmeDistM.Id, CockpitRadiosNav1DmeDistM);
            DataRefList.Add(CockpitRadiosNav2DmeDistM.Id, CockpitRadiosNav2DmeDistM);
            DataRefList.Add(CockpitRadiosAdf1DmeDistM.Id, CockpitRadiosAdf1DmeDistM);
            DataRefList.Add(CockpitRadiosAdf2DmeDistM.Id, CockpitRadiosAdf2DmeDistM);
            DataRefList.Add(CockpitRadiosGpsDmeDistM.Id, CockpitRadiosGpsDmeDistM);
            DataRefList.Add(CockpitRadiosGps2DmeDistM.Id, CockpitRadiosGps2DmeDistM);
            DataRefList.Add(CockpitRadiosStandaloneDmeDistM.Id, CockpitRadiosStandaloneDmeDistM);
            DataRefList.Add(CockpitRadiosNav1DmeSpeedKts.Id, CockpitRadiosNav1DmeSpeedKts);
            DataRefList.Add(CockpitRadiosNav2DmeSpeedKts.Id, CockpitRadiosNav2DmeSpeedKts);
            DataRefList.Add(CockpitRadiosAdf1DmeSpeedKts.Id, CockpitRadiosAdf1DmeSpeedKts);
            DataRefList.Add(CockpitRadiosAdf2DmeSpeedKts.Id, CockpitRadiosAdf2DmeSpeedKts);
            DataRefList.Add(CockpitRadiosGpsDmeSpeedKts.Id, CockpitRadiosGpsDmeSpeedKts);
            DataRefList.Add(CockpitRadiosGps2DmeSpeedKts.Id, CockpitRadiosGps2DmeSpeedKts);
            DataRefList.Add(CockpitRadiosStandaloneDmeSpeedKts.Id, CockpitRadiosStandaloneDmeSpeedKts);
            DataRefList.Add(CockpitRadiosNav1DmeTimeSecs.Id, CockpitRadiosNav1DmeTimeSecs);
            DataRefList.Add(CockpitRadiosNav2DmeTimeSecs.Id, CockpitRadiosNav2DmeTimeSecs);
            DataRefList.Add(CockpitRadiosAdf1DmeTimeSecs.Id, CockpitRadiosAdf1DmeTimeSecs);
            DataRefList.Add(CockpitRadiosAdf2DmeTimeSecs.Id, CockpitRadiosAdf2DmeTimeSecs);
            DataRefList.Add(CockpitRadiosGpsDmeTimeSecs.Id, CockpitRadiosGpsDmeTimeSecs);
            DataRefList.Add(CockpitRadiosGps2DmeTimeSecs.Id, CockpitRadiosGps2DmeTimeSecs);
            DataRefList.Add(CockpitRadiosStandaloneDmeTimeSecs.Id, CockpitRadiosStandaloneDmeTimeSecs);
            DataRefList.Add(CockpitRadiosNav1CourseDegm.Id, CockpitRadiosNav1CourseDegm);
            DataRefList.Add(CockpitRadiosNav1CourseDegm2.Id, CockpitRadiosNav1CourseDegm2);
            DataRefList.Add(CockpitRadiosNav2CourseDegm.Id, CockpitRadiosNav2CourseDegm);
            DataRefList.Add(CockpitRadiosNav2CourseDegm2.Id, CockpitRadiosNav2CourseDegm2);
            DataRefList.Add(CockpitRadiosGpsCourseDegtm.Id, CockpitRadiosGpsCourseDegtm);
            DataRefList.Add(CockpitRadiosGpsCourseDegtm2.Id, CockpitRadiosGpsCourseDegtm2);
            DataRefList.Add(CockpitRadiosGps2CourseDegtm.Id, CockpitRadiosGps2CourseDegtm);
            DataRefList.Add(CockpitRadiosGps2CourseDegtm2.Id, CockpitRadiosGps2CourseDegtm2);
            DataRefList.Add(CockpitRadiosNav1SlopeDegt.Id, CockpitRadiosNav1SlopeDegt);
            DataRefList.Add(CockpitRadiosNav2SlopeDegt.Id, CockpitRadiosNav2SlopeDegt);
            DataRefList.Add(CockpitRadiosGpsSlopeDegt.Id, CockpitRadiosGpsSlopeDegt);
            DataRefList.Add(CockpitRadiosGps2SlopeDegt.Id, CockpitRadiosGps2SlopeDegt);
            DataRefList.Add(CockpitRadiosGpsGpMtrPerDot.Id, CockpitRadiosGpsGpMtrPerDot);
            DataRefList.Add(CockpitRadiosGps2GpMtrPerDot.Id, CockpitRadiosGps2GpMtrPerDot);
            DataRefList.Add(CockpitRadiosGpsHdefNmPerDot.Id, CockpitRadiosGpsHdefNmPerDot);
            DataRefList.Add(CockpitRadiosGps2HdefNmPerDot.Id, CockpitRadiosGps2HdefNmPerDot);
            DataRefList.Add(CockpitRadiosTransponderCode.Id, CockpitRadiosTransponderCode);
            DataRefList.Add(CockpitRadiosTransponderId.Id, CockpitRadiosTransponderId);
            DataRefList.Add(CockpitRadiosTransponderLight.Id, CockpitRadiosTransponderLight);
            DataRefList.Add(CockpitRadiosTransponderBrightness.Id, CockpitRadiosTransponderBrightness);
            DataRefList.Add(CockpitRadiosTransponderMode.Id, CockpitRadiosTransponderMode);
            DataRefList.Add(CockpitRadiosNav1CardinalDir.Id, CockpitRadiosNav1CardinalDir);
            DataRefList.Add(CockpitRadiosNav1CardinalDir2.Id, CockpitRadiosNav1CardinalDir2);
            DataRefList.Add(CockpitRadiosNav2CardinalDir.Id, CockpitRadiosNav2CardinalDir);
            DataRefList.Add(CockpitRadiosNav2CardinalDir2.Id, CockpitRadiosNav2CardinalDir2);
            DataRefList.Add(CockpitRadiosAdf1CardinalDir.Id, CockpitRadiosAdf1CardinalDir);
            DataRefList.Add(CockpitRadiosAdf1CardinalDir2.Id, CockpitRadiosAdf1CardinalDir2);
            DataRefList.Add(CockpitRadiosAdf2CardinalDir.Id, CockpitRadiosAdf2CardinalDir);
            DataRefList.Add(CockpitRadiosAdf2CardinalDir2.Id, CockpitRadiosAdf2CardinalDir2);
            DataRefList.Add(CockpitRadiosNav1HasDme.Id, CockpitRadiosNav1HasDme);
            DataRefList.Add(CockpitRadiosNav2HasDme.Id, CockpitRadiosNav2HasDme);
            DataRefList.Add(CockpitRadiosAdf1HasDme.Id, CockpitRadiosAdf1HasDme);
            DataRefList.Add(CockpitRadiosAdf2HasDme.Id, CockpitRadiosAdf2HasDme);
            DataRefList.Add(CockpitRadiosDme5HasDme.Id, CockpitRadiosDme5HasDme);
            DataRefList.Add(CockpitRadiosObsMag.Id, CockpitRadiosObsMag);
            DataRefList.Add(CockpitRadiosGearAudioWorking.Id, CockpitRadiosGearAudioWorking);
            DataRefList.Add(CockpitRadiosMarkerAudioWorking.Id, CockpitRadiosMarkerAudioWorking);
            DataRefList.Add(CockpitRadiosNavType.Id, CockpitRadiosNavType);
            DataRefList.Add(CockpitRadiosApSrc.Id, CockpitRadiosApSrc);
            DataRefList.Add(CockpitRadiosNavComAdfMode.Id, CockpitRadiosNavComAdfMode);
            DataRefList.Add(CockpitRadiosGpsHasGlideslope.Id, CockpitRadiosGpsHasGlideslope);
            DataRefList.Add(CockpitRadiosGps2HasGlideslope.Id, CockpitRadiosGps2HasGlideslope);
            DataRefList.Add(CockpitSwitchesDMERadioSelector.Id, CockpitSwitchesDMERadioSelector);
            DataRefList.Add(CockpitSwitchesDMEDistanceOrTime.Id, CockpitSwitchesDMEDistanceOrTime);
            DataRefList.Add(CockpitSwitchesHSISelector.Id, CockpitSwitchesHSISelector);
            DataRefList.Add(CockpitSwitchesHSISelector2.Id, CockpitSwitchesHSISelector2);
            DataRefList.Add(CockpitSwitchesRMISelector.Id, CockpitSwitchesRMISelector);
            DataRefList.Add(CockpitSwitchesRMISelector2.Id, CockpitSwitchesRMISelector2);
            DataRefList.Add(CockpitSwitchesRMILVorAdfSelector.Id, CockpitSwitchesRMILVorAdfSelector);
            DataRefList.Add(CockpitSwitchesRMILVorAdfSelector2.Id, CockpitSwitchesRMILVorAdfSelector2);
            DataRefList.Add(CockpitSwitchesRMIRVorAdfSelector.Id, CockpitSwitchesRMIRVorAdfSelector);
            DataRefList.Add(CockpitSwitchesRMIRVorAdfSelector2.Id, CockpitSwitchesRMIRVorAdfSelector2);
            DataRefList.Add(CockpitSwitchesEFISDme1Selector.Id, CockpitSwitchesEFISDme1Selector);
            DataRefList.Add(CockpitSwitchesEFISDme2Selector.Id, CockpitSwitchesEFISDme2Selector);
            DataRefList.Add(CockpitSwitchesMarkerPanelOut.Id, CockpitSwitchesMarkerPanelOut);
            DataRefList.Add(CockpitSwitchesAudioPanelOut.Id, CockpitSwitchesAudioPanelOut);
            DataRefList.Add(CockpitSwitchesAntiIceOn.Id, CockpitSwitchesAntiIceOn);
            DataRefList.Add(CockpitSwitchesAntiIceInletHeat.Id, CockpitSwitchesAntiIceInletHeat);
            DataRefList.Add(CockpitSwitchesAntiIceInletHeatPerEnigne.Id, CockpitSwitchesAntiIceInletHeatPerEnigne);
            DataRefList.Add(CockpitSwitchesAntiIceInletHeatPerEngine.Id, CockpitSwitchesAntiIceInletHeatPerEngine);
            DataRefList.Add(CockpitSwitchesAntiIcePropHeat.Id, CockpitSwitchesAntiIcePropHeat);
            DataRefList.Add(CockpitSwitchesAntiIcePropHeatPerEngine.Id, CockpitSwitchesAntiIcePropHeatPerEngine);
            DataRefList.Add(CockpitSwitchesAntiIceWindowHeat.Id, CockpitSwitchesAntiIceWindowHeat);
            DataRefList.Add(CockpitSwitchesPitotHeatOn.Id, CockpitSwitchesPitotHeatOn);
            DataRefList.Add(CockpitSwitchesPitotHeatOn2.Id, CockpitSwitchesPitotHeatOn2);
            DataRefList.Add(CockpitSwitchesStaticHeatOn.Id, CockpitSwitchesStaticHeatOn);
            DataRefList.Add(CockpitSwitchesStaticHeatOn2.Id, CockpitSwitchesStaticHeatOn2);
            DataRefList.Add(CockpitSwitchesAntiIceAOAHeat.Id, CockpitSwitchesAntiIceAOAHeat);
            DataRefList.Add(CockpitSwitchesAntiIceAOAHeat2.Id, CockpitSwitchesAntiIceAOAHeat2);
            DataRefList.Add(CockpitSwitchesAntiIceSurfHeat.Id, CockpitSwitchesAntiIceSurfHeat);
            DataRefList.Add(CockpitSwitchesAntiIceSurfHeatLeft.Id, CockpitSwitchesAntiIceSurfHeatLeft);
            DataRefList.Add(CockpitSwitchesAntiIceSurfHeatRight.Id, CockpitSwitchesAntiIceSurfHeatRight);
            DataRefList.Add(CockpitSwitchesAntiIceSurfBoot.Id, CockpitSwitchesAntiIceSurfBoot);
            DataRefList.Add(CockpitSwitchesAntiIceEngineAir.Id, CockpitSwitchesAntiIceEngineAir);
            DataRefList.Add(CockpitSwitchesAntiIceAutoIgnite.Id, CockpitSwitchesAntiIceAutoIgnite);
            DataRefList.Add(CockpitSwitchesIceDetect.Id, CockpitSwitchesIceDetect);
            DataRefList.Add(CockpitSwitchesAutoBrakeSettings.Id, CockpitSwitchesAutoBrakeSettings);
            DataRefList.Add(CockpitSwitchesAutoFeatherMode.Id, CockpitSwitchesAutoFeatherMode);
            DataRefList.Add(CockpitSwitchesYawDamperOn.Id, CockpitSwitchesYawDamperOn);
            DataRefList.Add(CockpitSwitchesArtStabOn.Id, CockpitSwitchesArtStabOn);
            DataRefList.Add(CockpitSwitchesPreRotateLevel.Id, CockpitSwitchesPreRotateLevel);
            DataRefList.Add(CockpitSwitchesParachuteOn.Id, CockpitSwitchesParachuteOn);
            DataRefList.Add(CockpitSwitchesJatoOn.Id, CockpitSwitchesJatoOn);
            DataRefList.Add(CockpitSwitchesPropSyncOn.Id, CockpitSwitchesPropSyncOn);
            DataRefList.Add(CockpitSwitchesPuffersOn.Id, CockpitSwitchesPuffersOn);
            DataRefList.Add(CockpitSwitchesWaterScoop.Id, CockpitSwitchesWaterScoop);
            DataRefList.Add(CockpitSwitchesArrestingGear.Id, CockpitSwitchesArrestingGear);
            DataRefList.Add(CockpitSwitchesCanopyReq.Id, CockpitSwitchesCanopyReq);
            DataRefList.Add(CockpitSwitchesDumpingFuel.Id, CockpitSwitchesDumpingFuel);
            DataRefList.Add(CockpitSwitchesTotEnerAudio.Id, CockpitSwitchesTotEnerAudio);
            DataRefList.Add(CockpitSwitchesEFISMapMode.Id, CockpitSwitchesEFISMapMode);
            DataRefList.Add(CockpitSwitchesEFISMapSubmode.Id, CockpitSwitchesEFISMapSubmode);
            DataRefList.Add(CockpitSwitchesEFISMapRangeSelector.Id, CockpitSwitchesEFISMapRangeSelector);
            DataRefList.Add(CockpitSwitchesECAMMode.Id, CockpitSwitchesECAMMode);
            DataRefList.Add(CockpitSwitchesGearHandleStatus.Id, CockpitSwitchesGearHandleStatus);
            DataRefList.Add(CockpitSwitchesEFIFSShowsWeather.Id, CockpitSwitchesEFIFSShowsWeather);
            DataRefList.Add(CockpitSwitchesEFISShowsWeather.Id, CockpitSwitchesEFISShowsWeather);
            DataRefList.Add(CockpitSwitchesEFISWeatherAlpha.Id, CockpitSwitchesEFISWeatherAlpha);
            DataRefList.Add(CockpitSwitchesEFISShowsTcas.Id, CockpitSwitchesEFISShowsTcas);
            DataRefList.Add(CockpitSwitchesEFISShowsAirports.Id, CockpitSwitchesEFISShowsAirports);
            DataRefList.Add(CockpitSwitchesEFISShowsWaypoints.Id, CockpitSwitchesEFISShowsWaypoints);
            DataRefList.Add(CockpitSwitchesEFISShowsVors.Id, CockpitSwitchesEFISShowsVors);
            DataRefList.Add(CockpitSwitchesEFISShowsNdbs.Id, CockpitSwitchesEFISShowsNdbs);
            DataRefList.Add(CockpitSwitchesArgusMode.Id, CockpitSwitchesArgusMode);
            DataRefList.Add(CockpitSwitchesNoSmoking.Id, CockpitSwitchesNoSmoking);
            DataRefList.Add(CockpitSwitchesFastenSeatBelts.Id, CockpitSwitchesFastenSeatBelts);
            DataRefList.Add(CockpitWarningsMasterCautionTimeout.Id, CockpitWarningsMasterCautionTimeout);
            DataRefList.Add(CockpitWarningsMasterCautionOn.Id, CockpitWarningsMasterCautionOn);
            DataRefList.Add(CockpitWarningsMasterWarningOn.Id, CockpitWarningsMasterWarningOn);
            DataRefList.Add(CockpitWarningsMasterAcceptOn.Id, CockpitWarningsMasterAcceptOn);
            DataRefList.Add(CockpitWarningsAnnunciatorTestTimeout.Id, CockpitWarningsAnnunciatorTestTimeout);
            DataRefList.Add(CockpitWarningsAnnunciatorTestPressed.Id, CockpitWarningsAnnunciatorTestPressed);
            DataRefList.Add(CockpitWarningsAutopilotTestBeeping.Id, CockpitWarningsAutopilotTestBeeping);
            DataRefList.Add(CockpitWarningsAutopilotTestModesLit.Id, CockpitWarningsAutopilotTestModesLit);
            DataRefList.Add(CockpitWarningsAutopilotTestTrimLit.Id, CockpitWarningsAutopilotTestTrimLit);
            DataRefList.Add(CockpitWarningsAutopilotTestApLit.Id, CockpitWarningsAutopilotTestApLit);
            DataRefList.Add(CockpitWarningsAnnunciatorsMasterCaution.Id, CockpitWarningsAnnunciatorsMasterCaution);
            DataRefList.Add(CockpitWarningsAnnunciatorsMasterWarning.Id, CockpitWarningsAnnunciatorsMasterWarning);
            DataRefList.Add(CockpitWarningsAnnunciatorsMasterAccept.Id, CockpitWarningsAnnunciatorsMasterAccept);
            DataRefList.Add(CockpitWarningsAnnunciatorsAutopilotDisconnect.Id, CockpitWarningsAnnunciatorsAutopilotDisconnect);
            DataRefList.Add(CockpitWarningsAnnunciatorsLowVacuum.Id, CockpitWarningsAnnunciatorsLowVacuum);
            DataRefList.Add(CockpitWarningsAnnunciatorsLowVoltage.Id, CockpitWarningsAnnunciatorsLowVoltage);
            DataRefList.Add(CockpitWarningsAnnunciatorsFuelQuantity.Id, CockpitWarningsAnnunciatorsFuelQuantity);
            DataRefList.Add(CockpitWarningsAnnunciatorsHydraulicPressure.Id, CockpitWarningsAnnunciatorsHydraulicPressure);
            DataRefList.Add(CockpitWarningsAnnunciatorsSpeedbrake.Id, CockpitWarningsAnnunciatorsSpeedbrake);
            DataRefList.Add(CockpitWarningsAnnunciatorsGPWS.Id, CockpitWarningsAnnunciatorsGPWS);
            DataRefList.Add(CockpitWarningsAnnunciatorsIce.Id, CockpitWarningsAnnunciatorsIce);
            DataRefList.Add(CockpitWarningsAnnunciatorsLoRotor.Id, CockpitWarningsAnnunciatorsLoRotor);
            DataRefList.Add(CockpitWarningsAnnunciatorsHiRotor.Id, CockpitWarningsAnnunciatorsHiRotor);
            DataRefList.Add(CockpitWarningsAnnunciatorsPitotHeatOff.Id, CockpitWarningsAnnunciatorsPitotHeatOff);
            DataRefList.Add(CockpitWarningsAnnunciatorsTransonic.Id, CockpitWarningsAnnunciatorsTransonic);
            DataRefList.Add(CockpitWarningsAnnunciatorsSlats.Id, CockpitWarningsAnnunciatorsSlats);
            DataRefList.Add(CockpitWarningsAnnunciatorsFlightDirector.Id, CockpitWarningsAnnunciatorsFlightDirector);
            DataRefList.Add(CockpitWarningsAnnunciatorsAutopilot.Id, CockpitWarningsAnnunciatorsAutopilot);
            DataRefList.Add(CockpitWarningsAnnunciatorsYawDamper.Id, CockpitWarningsAnnunciatorsYawDamper);
            DataRefList.Add(CockpitWarningsAnnunciatorsFuelPressureLow.Id, CockpitWarningsAnnunciatorsFuelPressureLow);
            DataRefList.Add(CockpitWarningsAnnunciatorsOilPressureLow.Id, CockpitWarningsAnnunciatorsOilPressureLow);
            DataRefList.Add(CockpitWarningsAnnunciatorsOilTemperatureHigh.Id, CockpitWarningsAnnunciatorsOilTemperatureHigh);
            DataRefList.Add(CockpitWarningsAnnunciatorsGeneratorOff.Id, CockpitWarningsAnnunciatorsGeneratorOff);
            DataRefList.Add(CockpitWarningsAnnunciatorsChipDetected.Id, CockpitWarningsAnnunciatorsChipDetected);
            DataRefList.Add(CockpitWarningsAnnunciatorsEngineFires.Id, CockpitWarningsAnnunciatorsEngineFires);
            DataRefList.Add(CockpitWarningsAnnunciatorsIgniterOn.Id, CockpitWarningsAnnunciatorsIgniterOn);
            DataRefList.Add(CockpitWarningsAnnunciatorsReverserOn.Id, CockpitWarningsAnnunciatorsReverserOn);
            DataRefList.Add(CockpitWarningsAnnunciatorsBurnerOn.Id, CockpitWarningsAnnunciatorsBurnerOn);
            DataRefList.Add(CockpitWarningsAnnunciatorsInverterOff.Id, CockpitWarningsAnnunciatorsInverterOff);
            DataRefList.Add(CockpitWarningsAnnunciatorsN1Low.Id, CockpitWarningsAnnunciatorsN1Low);
            DataRefList.Add(CockpitWarningsAnnunciatorsN1High.Id, CockpitWarningsAnnunciatorsN1High);
            DataRefList.Add(CockpitWarningsAnnunciatorsReverserNotReady.Id, CockpitWarningsAnnunciatorsReverserNotReady);
            DataRefList.Add(CockpitWarningsAnnunciatorsIceVaneExtend.Id, CockpitWarningsAnnunciatorsIceVaneExtend);
            DataRefList.Add(CockpitWarningsAnnunciatorsIceVaneFail.Id, CockpitWarningsAnnunciatorsIceVaneFail);
            DataRefList.Add(CockpitWarningsAnnunciatorsBleedAirOff.Id, CockpitWarningsAnnunciatorsBleedAirOff);
            DataRefList.Add(CockpitWarningsAnnunciatorsBleedAirFail.Id, CockpitWarningsAnnunciatorsBleedAirFail);
            DataRefList.Add(CockpitWarningsAnnunciatorsAutoFeatherArm.Id, CockpitWarningsAnnunciatorsAutoFeatherArm);
            DataRefList.Add(CockpitWarningsAnnunciatorsFuelTransfer.Id, CockpitWarningsAnnunciatorsFuelTransfer);
            DataRefList.Add(CockpitWarningsAnnunciatorsHvac.Id, CockpitWarningsAnnunciatorsHvac);
            DataRefList.Add(CockpitWarningsAnnunciatorsBatteryChargeHi.Id, CockpitWarningsAnnunciatorsBatteryChargeHi);
            DataRefList.Add(CockpitWarningsAnnunciatorsCabinAltitude12500.Id, CockpitWarningsAnnunciatorsCabinAltitude12500);
            DataRefList.Add(CockpitWarningsAnnunciatorsAutopilotTrimFail.Id, CockpitWarningsAnnunciatorsAutopilotTrimFail);
            DataRefList.Add(CockpitWarningsAnnunciatorsElectricTrimOff.Id, CockpitWarningsAnnunciatorsElectricTrimOff);
            DataRefList.Add(CockpitWarningsAnnunciatorsCrossfeedOn.Id, CockpitWarningsAnnunciatorsCrossfeedOn);
            DataRefList.Add(CockpitWarningsAnnunciatorsLandingTaxiLite.Id, CockpitWarningsAnnunciatorsLandingTaxiLite);
            DataRefList.Add(CockpitWarningsAnnunciatorsCabinDoorOpen.Id, CockpitWarningsAnnunciatorsCabinDoorOpen);
            DataRefList.Add(CockpitWarningsAnnunciatorsExternalPowerOn.Id, CockpitWarningsAnnunciatorsExternalPowerOn);
            DataRefList.Add(CockpitWarningsAnnunciatorsPassengerOxyOn.Id, CockpitWarningsAnnunciatorsPassengerOxyOn);
            DataRefList.Add(CockpitWarningsAnnunciatorsGearUnsafe.Id, CockpitWarningsAnnunciatorsGearUnsafe);
            DataRefList.Add(CockpitWarningsAnnunciatorsAutopilotTrimDown.Id, CockpitWarningsAnnunciatorsAutopilotTrimDown);
            DataRefList.Add(CockpitWarningsAnnunciatorsAutopilotTrimUp.Id, CockpitWarningsAnnunciatorsAutopilotTrimUp);
            DataRefList.Add(CockpitWarningsAnnunciatorsAutopilotBankLimit.Id, CockpitWarningsAnnunciatorsAutopilotBankLimit);
            DataRefList.Add(CockpitWarningsAnnunciatorsAutopilotSoftRide.Id, CockpitWarningsAnnunciatorsAutopilotSoftRide);
            DataRefList.Add(CockpitWarningsAnnunciatorsNoInverters.Id, CockpitWarningsAnnunciatorsNoInverters);
            DataRefList.Add(CockpitWarningsAnnunciatorsGlideslope.Id, CockpitWarningsAnnunciatorsGlideslope);
            DataRefList.Add(CockpitWarningsAnnunciatorsFuelPressure.Id, CockpitWarningsAnnunciatorsFuelPressure);
            DataRefList.Add(CockpitWarningsAnnunciatorsOilPressure.Id, CockpitWarningsAnnunciatorsOilPressure);
            DataRefList.Add(CockpitWarningsAnnunciatorsOilTemperature.Id, CockpitWarningsAnnunciatorsOilTemperature);
            DataRefList.Add(CockpitWarningsAnnunciatorsGenerator.Id, CockpitWarningsAnnunciatorsGenerator);
            DataRefList.Add(CockpitWarningsAnnunciatorsChipDetect.Id, CockpitWarningsAnnunciatorsChipDetect);
            DataRefList.Add(CockpitWarningsAnnunciatorsEngineFire.Id, CockpitWarningsAnnunciatorsEngineFire);
            DataRefList.Add(CockpitWarningsAnnunciatorsAutoIgnition.Id, CockpitWarningsAnnunciatorsAutoIgnition);
            DataRefList.Add(CockpitWarningsAnnunciatorsReverse.Id, CockpitWarningsAnnunciatorsReverse);
            DataRefList.Add(CockpitWarningsAnnunciatorsAfterburnersOn.Id, CockpitWarningsAnnunciatorsAfterburnersOn);
            DataRefList.Add(CockpitWarningsAnnunciatorsInverter.Id, CockpitWarningsAnnunciatorsInverter);
            DataRefList.Add(CockpitWeaponsGunsArmed.Id, CockpitWeaponsGunsArmed);
            DataRefList.Add(CockpitWeaponsRocketsArmed.Id, CockpitWeaponsRocketsArmed);
            DataRefList.Add(CockpitWeaponsMissilesArmed.Id, CockpitWeaponsMissilesArmed);
            DataRefList.Add(CockpitWeaponsBombsArmed.Id, CockpitWeaponsBombsArmed);
            DataRefList.Add(CockpitWeaponsFiringMode.Id, CockpitWeaponsFiringMode);
            DataRefList.Add(CockpitWeaponsFiringRate.Id, CockpitWeaponsFiringRate);
            DataRefList.Add(CockpitWeaponsPlaneTargetIndex.Id, CockpitWeaponsPlaneTargetIndex);
            DataRefList.Add(CockpitWeaponsChaffNow.Id, CockpitWeaponsChaffNow);
            DataRefList.Add(CockpitWeaponsFlareNow.Id, CockpitWeaponsFlareNow);
            DataRefList.Add(CockpitWeaponsWpnSelConsole.Id, CockpitWeaponsWpnSelConsole);
            DataRefList.Add(FlightmodelControlsSbrkrat.Id, FlightmodelControlsSbrkrat);
            DataRefList.Add(FlightmodelControlsFlaprqst.Id, FlightmodelControlsFlaprqst);
            DataRefList.Add(FlightmodelControlsTailLockRat.Id, FlightmodelControlsTailLockRat);
            DataRefList.Add(FlightmodelControlsAilTrim.Id, FlightmodelControlsAilTrim);
            DataRefList.Add(FlightmodelControlsDist.Id, FlightmodelControlsDist);
            DataRefList.Add(FlightmodelControlsElvTrim.Id, FlightmodelControlsElvTrim);
            DataRefList.Add(FlightmodelControlsFlaprat.Id, FlightmodelControlsFlaprat);
            DataRefList.Add(FlightmodelControlsFlap2rat.Id, FlightmodelControlsFlap2rat);
            DataRefList.Add(FlightmodelControlsLBrakeAdd.Id, FlightmodelControlsLBrakeAdd);
            DataRefList.Add(FlightmodelControlsRBrakeAdd.Id, FlightmodelControlsRBrakeAdd);
            DataRefList.Add(FlightmodelControlsLail1def.Id, FlightmodelControlsLail1def);
            DataRefList.Add(FlightmodelControlsLail2def.Id, FlightmodelControlsLail2def);
            DataRefList.Add(FlightmodelControlsRail1def.Id, FlightmodelControlsRail1def);
            DataRefList.Add(FlightmodelControlsRail2def.Id, FlightmodelControlsRail2def);
            DataRefList.Add(FlightmodelControlsLdruddef.Id, FlightmodelControlsLdruddef);
            DataRefList.Add(FlightmodelControlsRdruddef.Id, FlightmodelControlsRdruddef);
            DataRefList.Add(FlightmodelControlsLsplrdef.Id, FlightmodelControlsLsplrdef);
            DataRefList.Add(FlightmodelControlsRsplrdef.Id, FlightmodelControlsRsplrdef);
            DataRefList.Add(FlightmodelControlsAil1Def.Id, FlightmodelControlsAil1Def);
            DataRefList.Add(FlightmodelControlsAil2Def.Id, FlightmodelControlsAil2Def);
            DataRefList.Add(FlightmodelControlsSplrDef.Id, FlightmodelControlsSplrDef);
            DataRefList.Add(FlightmodelControlsSplr2Def.Id, FlightmodelControlsSplr2Def);
            DataRefList.Add(FlightmodelControlsYawbDef.Id, FlightmodelControlsYawbDef);
            DataRefList.Add(FlightmodelControlsRuddDef.Id, FlightmodelControlsRuddDef);
            DataRefList.Add(FlightmodelControlsRudd2Def.Id, FlightmodelControlsRudd2Def);
            DataRefList.Add(FlightmodelControlsElv1Def.Id, FlightmodelControlsElv1Def);
            DataRefList.Add(FlightmodelControlsElv2Def.Id, FlightmodelControlsElv2Def);
            DataRefList.Add(FlightmodelControlsFla1Def.Id, FlightmodelControlsFla1Def);
            DataRefList.Add(FlightmodelControlsFla2Def.Id, FlightmodelControlsFla2Def);
            DataRefList.Add(FlightmodelControlsSbrkrqst.Id, FlightmodelControlsSbrkrqst);
            DataRefList.Add(FlightmodelControlsVectrqst.Id, FlightmodelControlsVectrqst);
            DataRefList.Add(FlightmodelControlsSwdi.Id, FlightmodelControlsSwdi);
            DataRefList.Add(FlightmodelControlsSwdirqst.Id, FlightmodelControlsSwdirqst);
            DataRefList.Add(FlightmodelControlsSlatrat.Id, FlightmodelControlsSlatrat);
            DataRefList.Add(FlightmodelControlsParkbrake.Id, FlightmodelControlsParkbrake);
            DataRefList.Add(FlightmodelControlsRotTrim.Id, FlightmodelControlsRotTrim);
            DataRefList.Add(FlightmodelControlsRudTrim.Id, FlightmodelControlsRudTrim);
            DataRefList.Add(FlightmodelControlsIncidRqst.Id, FlightmodelControlsIncidRqst);
            DataRefList.Add(FlightmodelControlsDihedRqst.Id, FlightmodelControlsDihedRqst);
            DataRefList.Add(FlightmodelControlsVectRat.Id, FlightmodelControlsVectRat);
            DataRefList.Add(FlightmodelControlsIncidRat.Id, FlightmodelControlsIncidRat);
            DataRefList.Add(FlightmodelControlsDihedRat.Id, FlightmodelControlsDihedRat);
            DataRefList.Add(FlightmodelControlsTailhookRatio.Id, FlightmodelControlsTailhookRatio);
            DataRefList.Add(FlightmodelControlsCanopyRatio.Id, FlightmodelControlsCanopyRatio);
            DataRefList.Add(FlightmodelControlsWing1lAil1def.Id, FlightmodelControlsWing1lAil1def);
            DataRefList.Add(FlightmodelControlsWing1lAil2def.Id, FlightmodelControlsWing1lAil2def);
            DataRefList.Add(FlightmodelControlsWing1rAil1def.Id, FlightmodelControlsWing1rAil1def);
            DataRefList.Add(FlightmodelControlsWing1rAil2def.Id, FlightmodelControlsWing1rAil2def);
            DataRefList.Add(FlightmodelControlsWing2lAil1def.Id, FlightmodelControlsWing2lAil1def);
            DataRefList.Add(FlightmodelControlsWing2lAil2def.Id, FlightmodelControlsWing2lAil2def);
            DataRefList.Add(FlightmodelControlsWing2rAil1def.Id, FlightmodelControlsWing2rAil1def);
            DataRefList.Add(FlightmodelControlsWing2rAil2def.Id, FlightmodelControlsWing2rAil2def);
            DataRefList.Add(FlightmodelControlsWing3lAil1def.Id, FlightmodelControlsWing3lAil1def);
            DataRefList.Add(FlightmodelControlsWing3lAil2def.Id, FlightmodelControlsWing3lAil2def);
            DataRefList.Add(FlightmodelControlsWing3rAil1def.Id, FlightmodelControlsWing3rAil1def);
            DataRefList.Add(FlightmodelControlsWing3rAil2def.Id, FlightmodelControlsWing3rAil2def);
            DataRefList.Add(FlightmodelControlsWing4lAil1def.Id, FlightmodelControlsWing4lAil1def);
            DataRefList.Add(FlightmodelControlsWing4lAil2def.Id, FlightmodelControlsWing4lAil2def);
            DataRefList.Add(FlightmodelControlsWing4rAil1def.Id, FlightmodelControlsWing4rAil1def);
            DataRefList.Add(FlightmodelControlsWing4rAil2def.Id, FlightmodelControlsWing4rAil2def);
            DataRefList.Add(FlightmodelControlsWing1lSpo1def.Id, FlightmodelControlsWing1lSpo1def);
            DataRefList.Add(FlightmodelControlsWing1lSpo2def.Id, FlightmodelControlsWing1lSpo2def);
            DataRefList.Add(FlightmodelControlsWing1rSpo1def.Id, FlightmodelControlsWing1rSpo1def);
            DataRefList.Add(FlightmodelControlsWing1rSpo2def.Id, FlightmodelControlsWing1rSpo2def);
            DataRefList.Add(FlightmodelControlsWing2lSpo1def.Id, FlightmodelControlsWing2lSpo1def);
            DataRefList.Add(FlightmodelControlsWing2lSpo2def.Id, FlightmodelControlsWing2lSpo2def);
            DataRefList.Add(FlightmodelControlsWing2rSpo1def.Id, FlightmodelControlsWing2rSpo1def);
            DataRefList.Add(FlightmodelControlsWing2rSpo2def.Id, FlightmodelControlsWing2rSpo2def);
            DataRefList.Add(FlightmodelControlsWing3lSpo1def.Id, FlightmodelControlsWing3lSpo1def);
            DataRefList.Add(FlightmodelControlsWing3lSpo2def.Id, FlightmodelControlsWing3lSpo2def);
            DataRefList.Add(FlightmodelControlsWing3rSpo1def.Id, FlightmodelControlsWing3rSpo1def);
            DataRefList.Add(FlightmodelControlsWing3rSpo2def.Id, FlightmodelControlsWing3rSpo2def);
            DataRefList.Add(FlightmodelControlsWing4lSpo1def.Id, FlightmodelControlsWing4lSpo1def);
            DataRefList.Add(FlightmodelControlsWing4lSpo2def.Id, FlightmodelControlsWing4lSpo2def);
            DataRefList.Add(FlightmodelControlsWing4rSpo1def.Id, FlightmodelControlsWing4rSpo1def);
            DataRefList.Add(FlightmodelControlsWing4rSpo2def.Id, FlightmodelControlsWing4rSpo2def);
            DataRefList.Add(FlightmodelControlsWing1lFla1def.Id, FlightmodelControlsWing1lFla1def);
            DataRefList.Add(FlightmodelControlsWing1lFla2def.Id, FlightmodelControlsWing1lFla2def);
            DataRefList.Add(FlightmodelControlsWing1rFla1def.Id, FlightmodelControlsWing1rFla1def);
            DataRefList.Add(FlightmodelControlsWing1rFla2def.Id, FlightmodelControlsWing1rFla2def);
            DataRefList.Add(FlightmodelControlsWing2lFla1def.Id, FlightmodelControlsWing2lFla1def);
            DataRefList.Add(FlightmodelControlsWing2lFla2def.Id, FlightmodelControlsWing2lFla2def);
            DataRefList.Add(FlightmodelControlsWing2rFla1def.Id, FlightmodelControlsWing2rFla1def);
            DataRefList.Add(FlightmodelControlsWing2rFla2def.Id, FlightmodelControlsWing2rFla2def);
            DataRefList.Add(FlightmodelControlsWing3lFla1def.Id, FlightmodelControlsWing3lFla1def);
            DataRefList.Add(FlightmodelControlsWing3lFla2def.Id, FlightmodelControlsWing3lFla2def);
            DataRefList.Add(FlightmodelControlsWing3rFla1def.Id, FlightmodelControlsWing3rFla1def);
            DataRefList.Add(FlightmodelControlsWing3rFla2def.Id, FlightmodelControlsWing3rFla2def);
            DataRefList.Add(FlightmodelControlsWing4lFla1def.Id, FlightmodelControlsWing4lFla1def);
            DataRefList.Add(FlightmodelControlsWing4lFla2def.Id, FlightmodelControlsWing4lFla2def);
            DataRefList.Add(FlightmodelControlsWing4rFla1def.Id, FlightmodelControlsWing4rFla1def);
            DataRefList.Add(FlightmodelControlsWing4rFla2def.Id, FlightmodelControlsWing4rFla2def);
            DataRefList.Add(FlightmodelControlsWing1lYawbdef.Id, FlightmodelControlsWing1lYawbdef);
            DataRefList.Add(FlightmodelControlsWing1rYawbdef.Id, FlightmodelControlsWing1rYawbdef);
            DataRefList.Add(FlightmodelControlsWing2lYawbdef.Id, FlightmodelControlsWing2lYawbdef);
            DataRefList.Add(FlightmodelControlsWing2rYawbdef.Id, FlightmodelControlsWing2rYawbdef);
            DataRefList.Add(FlightmodelControlsWing3lYawbdef.Id, FlightmodelControlsWing3lYawbdef);
            DataRefList.Add(FlightmodelControlsWing3rYawbdef.Id, FlightmodelControlsWing3rYawbdef);
            DataRefList.Add(FlightmodelControlsWing4lYawbdef.Id, FlightmodelControlsWing4lYawbdef);
            DataRefList.Add(FlightmodelControlsWing4rYawbdef.Id, FlightmodelControlsWing4rYawbdef);
            DataRefList.Add(FlightmodelControlsHstab1Elv1def.Id, FlightmodelControlsHstab1Elv1def);
            DataRefList.Add(FlightmodelControlsHstab1Elv2def.Id, FlightmodelControlsHstab1Elv2def);
            DataRefList.Add(FlightmodelControlsHstab2Elv1def.Id, FlightmodelControlsHstab2Elv1def);
            DataRefList.Add(FlightmodelControlsHstab2Elv2def.Id, FlightmodelControlsHstab2Elv2def);
            DataRefList.Add(FlightmodelControlsVstab1Rud1def.Id, FlightmodelControlsVstab1Rud1def);
            DataRefList.Add(FlightmodelControlsVstab1Rud2def.Id, FlightmodelControlsVstab1Rud2def);
            DataRefList.Add(FlightmodelControlsVstab2Rud1def.Id, FlightmodelControlsVstab2Rud1def);
            DataRefList.Add(FlightmodelControlsVstab2Rud2def.Id, FlightmodelControlsVstab2Rud2def);
            DataRefList.Add(FlightmodelControlsMwing01Ail1def.Id, FlightmodelControlsMwing01Ail1def);
            DataRefList.Add(FlightmodelControlsMwing01Ail2def.Id, FlightmodelControlsMwing01Ail2def);
            DataRefList.Add(FlightmodelControlsMwing01Spo1def.Id, FlightmodelControlsMwing01Spo1def);
            DataRefList.Add(FlightmodelControlsMwing01Spo2def.Id, FlightmodelControlsMwing01Spo2def);
            DataRefList.Add(FlightmodelControlsMwing01Fla1def.Id, FlightmodelControlsMwing01Fla1def);
            DataRefList.Add(FlightmodelControlsMwing01Fla2def.Id, FlightmodelControlsMwing01Fla2def);
            DataRefList.Add(FlightmodelControlsMwing01Yawbdef.Id, FlightmodelControlsMwing01Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing01Elv1def.Id, FlightmodelControlsMwing01Elv1def);
            DataRefList.Add(FlightmodelControlsMwing01Elv2def.Id, FlightmodelControlsMwing01Elv2def);
            DataRefList.Add(FlightmodelControlsMwing01Rud1def.Id, FlightmodelControlsMwing01Rud1def);
            DataRefList.Add(FlightmodelControlsMwing01Rud2def.Id, FlightmodelControlsMwing01Rud2def);
            DataRefList.Add(FlightmodelControlsMwing02Ail1def.Id, FlightmodelControlsMwing02Ail1def);
            DataRefList.Add(FlightmodelControlsMwing02Ail2def.Id, FlightmodelControlsMwing02Ail2def);
            DataRefList.Add(FlightmodelControlsMwing02Spo1def.Id, FlightmodelControlsMwing02Spo1def);
            DataRefList.Add(FlightmodelControlsMwing02Spo2def.Id, FlightmodelControlsMwing02Spo2def);
            DataRefList.Add(FlightmodelControlsMwing02Fla1def.Id, FlightmodelControlsMwing02Fla1def);
            DataRefList.Add(FlightmodelControlsMwing02Fla2def.Id, FlightmodelControlsMwing02Fla2def);
            DataRefList.Add(FlightmodelControlsMwing02Yawbdef.Id, FlightmodelControlsMwing02Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing02Elv1def.Id, FlightmodelControlsMwing02Elv1def);
            DataRefList.Add(FlightmodelControlsMwing02Elv2def.Id, FlightmodelControlsMwing02Elv2def);
            DataRefList.Add(FlightmodelControlsMwing02Rud1def.Id, FlightmodelControlsMwing02Rud1def);
            DataRefList.Add(FlightmodelControlsMwing02Rud2def.Id, FlightmodelControlsMwing02Rud2def);
            DataRefList.Add(FlightmodelControlsMwing03Ail1def.Id, FlightmodelControlsMwing03Ail1def);
            DataRefList.Add(FlightmodelControlsMwing03Ail2def.Id, FlightmodelControlsMwing03Ail2def);
            DataRefList.Add(FlightmodelControlsMwing03Spo1def.Id, FlightmodelControlsMwing03Spo1def);
            DataRefList.Add(FlightmodelControlsMwing03Spo2def.Id, FlightmodelControlsMwing03Spo2def);
            DataRefList.Add(FlightmodelControlsMwing03Fla1def.Id, FlightmodelControlsMwing03Fla1def);
            DataRefList.Add(FlightmodelControlsMwing03Fla2def.Id, FlightmodelControlsMwing03Fla2def);
            DataRefList.Add(FlightmodelControlsMwing03Yawbdef.Id, FlightmodelControlsMwing03Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing03Elv1def.Id, FlightmodelControlsMwing03Elv1def);
            DataRefList.Add(FlightmodelControlsMwing03Elv2def.Id, FlightmodelControlsMwing03Elv2def);
            DataRefList.Add(FlightmodelControlsMwing03Rud1def.Id, FlightmodelControlsMwing03Rud1def);
            DataRefList.Add(FlightmodelControlsMwing03Rud2def.Id, FlightmodelControlsMwing03Rud2def);
            DataRefList.Add(FlightmodelControlsMwing04Ail1def.Id, FlightmodelControlsMwing04Ail1def);
            DataRefList.Add(FlightmodelControlsMwing04Ail2def.Id, FlightmodelControlsMwing04Ail2def);
            DataRefList.Add(FlightmodelControlsMwing04Spo1def.Id, FlightmodelControlsMwing04Spo1def);
            DataRefList.Add(FlightmodelControlsMwing04Spo2def.Id, FlightmodelControlsMwing04Spo2def);
            DataRefList.Add(FlightmodelControlsMwing04Fla1def.Id, FlightmodelControlsMwing04Fla1def);
            DataRefList.Add(FlightmodelControlsMwing04Fla2def.Id, FlightmodelControlsMwing04Fla2def);
            DataRefList.Add(FlightmodelControlsMwing04Yawbdef.Id, FlightmodelControlsMwing04Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing04Elv1def.Id, FlightmodelControlsMwing04Elv1def);
            DataRefList.Add(FlightmodelControlsMwing04Elv2def.Id, FlightmodelControlsMwing04Elv2def);
            DataRefList.Add(FlightmodelControlsMwing04Rud1def.Id, FlightmodelControlsMwing04Rud1def);
            DataRefList.Add(FlightmodelControlsMwing04Rud2def.Id, FlightmodelControlsMwing04Rud2def);
            DataRefList.Add(FlightmodelControlsMwing05Ail1def.Id, FlightmodelControlsMwing05Ail1def);
            DataRefList.Add(FlightmodelControlsMwing05Ail2def.Id, FlightmodelControlsMwing05Ail2def);
            DataRefList.Add(FlightmodelControlsMwing05Spo1def.Id, FlightmodelControlsMwing05Spo1def);
            DataRefList.Add(FlightmodelControlsMwing05Spo2def.Id, FlightmodelControlsMwing05Spo2def);
            DataRefList.Add(FlightmodelControlsMwing05Fla1def.Id, FlightmodelControlsMwing05Fla1def);
            DataRefList.Add(FlightmodelControlsMwing05Fla2def.Id, FlightmodelControlsMwing05Fla2def);
            DataRefList.Add(FlightmodelControlsMwing05Yawbdef.Id, FlightmodelControlsMwing05Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing05Elv1def.Id, FlightmodelControlsMwing05Elv1def);
            DataRefList.Add(FlightmodelControlsMwing05Elv2def.Id, FlightmodelControlsMwing05Elv2def);
            DataRefList.Add(FlightmodelControlsMwing05Rud1def.Id, FlightmodelControlsMwing05Rud1def);
            DataRefList.Add(FlightmodelControlsMwing05Rud2def.Id, FlightmodelControlsMwing05Rud2def);
            DataRefList.Add(FlightmodelControlsMwing06Ail1def.Id, FlightmodelControlsMwing06Ail1def);
            DataRefList.Add(FlightmodelControlsMwing06Ail2def.Id, FlightmodelControlsMwing06Ail2def);
            DataRefList.Add(FlightmodelControlsMwing06Spo1def.Id, FlightmodelControlsMwing06Spo1def);
            DataRefList.Add(FlightmodelControlsMwing06Spo2def.Id, FlightmodelControlsMwing06Spo2def);
            DataRefList.Add(FlightmodelControlsMwing06Fla1def.Id, FlightmodelControlsMwing06Fla1def);
            DataRefList.Add(FlightmodelControlsMwing06Fla2def.Id, FlightmodelControlsMwing06Fla2def);
            DataRefList.Add(FlightmodelControlsMwing06Yawbdef.Id, FlightmodelControlsMwing06Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing06Elv1def.Id, FlightmodelControlsMwing06Elv1def);
            DataRefList.Add(FlightmodelControlsMwing06Elv2def.Id, FlightmodelControlsMwing06Elv2def);
            DataRefList.Add(FlightmodelControlsMwing06Rud1def.Id, FlightmodelControlsMwing06Rud1def);
            DataRefList.Add(FlightmodelControlsMwing06Rud2def.Id, FlightmodelControlsMwing06Rud2def);
            DataRefList.Add(FlightmodelControlsMwing07Ail1def.Id, FlightmodelControlsMwing07Ail1def);
            DataRefList.Add(FlightmodelControlsMwing07Ail2def.Id, FlightmodelControlsMwing07Ail2def);
            DataRefList.Add(FlightmodelControlsMwing07Spo1def.Id, FlightmodelControlsMwing07Spo1def);
            DataRefList.Add(FlightmodelControlsMwing07Spo2def.Id, FlightmodelControlsMwing07Spo2def);
            DataRefList.Add(FlightmodelControlsMwing07Fla1def.Id, FlightmodelControlsMwing07Fla1def);
            DataRefList.Add(FlightmodelControlsMwing07Fla2def.Id, FlightmodelControlsMwing07Fla2def);
            DataRefList.Add(FlightmodelControlsMwing07Yawbdef.Id, FlightmodelControlsMwing07Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing07Elv1def.Id, FlightmodelControlsMwing07Elv1def);
            DataRefList.Add(FlightmodelControlsMwing07Elv2def.Id, FlightmodelControlsMwing07Elv2def);
            DataRefList.Add(FlightmodelControlsMwing07Rud1def.Id, FlightmodelControlsMwing07Rud1def);
            DataRefList.Add(FlightmodelControlsMwing07Rud2def.Id, FlightmodelControlsMwing07Rud2def);
            DataRefList.Add(FlightmodelControlsMwing08Ail1def.Id, FlightmodelControlsMwing08Ail1def);
            DataRefList.Add(FlightmodelControlsMwing08Ail2def.Id, FlightmodelControlsMwing08Ail2def);
            DataRefList.Add(FlightmodelControlsMwing08Spo1def.Id, FlightmodelControlsMwing08Spo1def);
            DataRefList.Add(FlightmodelControlsMwing08Spo2def.Id, FlightmodelControlsMwing08Spo2def);
            DataRefList.Add(FlightmodelControlsMwing08Fla1def.Id, FlightmodelControlsMwing08Fla1def);
            DataRefList.Add(FlightmodelControlsMwing08Fla2def.Id, FlightmodelControlsMwing08Fla2def);
            DataRefList.Add(FlightmodelControlsMwing08Yawbdef.Id, FlightmodelControlsMwing08Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing08Elv1def.Id, FlightmodelControlsMwing08Elv1def);
            DataRefList.Add(FlightmodelControlsMwing08Elv2def.Id, FlightmodelControlsMwing08Elv2def);
            DataRefList.Add(FlightmodelControlsMwing08Rud1def.Id, FlightmodelControlsMwing08Rud1def);
            DataRefList.Add(FlightmodelControlsMwing08Rud2def.Id, FlightmodelControlsMwing08Rud2def);
            DataRefList.Add(FlightmodelControlsMwing09Ail1def.Id, FlightmodelControlsMwing09Ail1def);
            DataRefList.Add(FlightmodelControlsMwing09Ail2def.Id, FlightmodelControlsMwing09Ail2def);
            DataRefList.Add(FlightmodelControlsMwing09Spo1def.Id, FlightmodelControlsMwing09Spo1def);
            DataRefList.Add(FlightmodelControlsMwing09Spo2def.Id, FlightmodelControlsMwing09Spo2def);
            DataRefList.Add(FlightmodelControlsMwing09Fla1def.Id, FlightmodelControlsMwing09Fla1def);
            DataRefList.Add(FlightmodelControlsMwing09Fla2def.Id, FlightmodelControlsMwing09Fla2def);
            DataRefList.Add(FlightmodelControlsMwing09Yawbdef.Id, FlightmodelControlsMwing09Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing09Elv1def.Id, FlightmodelControlsMwing09Elv1def);
            DataRefList.Add(FlightmodelControlsMwing09Elv2def.Id, FlightmodelControlsMwing09Elv2def);
            DataRefList.Add(FlightmodelControlsMwing09Rud1def.Id, FlightmodelControlsMwing09Rud1def);
            DataRefList.Add(FlightmodelControlsMwing09Rud2def.Id, FlightmodelControlsMwing09Rud2def);
            DataRefList.Add(FlightmodelControlsMwing10Ail1def.Id, FlightmodelControlsMwing10Ail1def);
            DataRefList.Add(FlightmodelControlsMwing10Ail2def.Id, FlightmodelControlsMwing10Ail2def);
            DataRefList.Add(FlightmodelControlsMwing10Spo1def.Id, FlightmodelControlsMwing10Spo1def);
            DataRefList.Add(FlightmodelControlsMwing10Spo2def.Id, FlightmodelControlsMwing10Spo2def);
            DataRefList.Add(FlightmodelControlsMwing10Fla1def.Id, FlightmodelControlsMwing10Fla1def);
            DataRefList.Add(FlightmodelControlsMwing10Fla2def.Id, FlightmodelControlsMwing10Fla2def);
            DataRefList.Add(FlightmodelControlsMwing10Yawbdef.Id, FlightmodelControlsMwing10Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing10Elv1def.Id, FlightmodelControlsMwing10Elv1def);
            DataRefList.Add(FlightmodelControlsMwing10Elv2def.Id, FlightmodelControlsMwing10Elv2def);
            DataRefList.Add(FlightmodelControlsMwing10Rud1def.Id, FlightmodelControlsMwing10Rud1def);
            DataRefList.Add(FlightmodelControlsMwing10Rud2def.Id, FlightmodelControlsMwing10Rud2def);
            DataRefList.Add(FlightmodelControlsMwing11Ail1def.Id, FlightmodelControlsMwing11Ail1def);
            DataRefList.Add(FlightmodelControlsMwing11Ail2def.Id, FlightmodelControlsMwing11Ail2def);
            DataRefList.Add(FlightmodelControlsMwing11Spo1def.Id, FlightmodelControlsMwing11Spo1def);
            DataRefList.Add(FlightmodelControlsMwing11Spo2def.Id, FlightmodelControlsMwing11Spo2def);
            DataRefList.Add(FlightmodelControlsMwing11Fla1def.Id, FlightmodelControlsMwing11Fla1def);
            DataRefList.Add(FlightmodelControlsMwing11Fla2def.Id, FlightmodelControlsMwing11Fla2def);
            DataRefList.Add(FlightmodelControlsMwing11Yawbdef.Id, FlightmodelControlsMwing11Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing11Elv1def.Id, FlightmodelControlsMwing11Elv1def);
            DataRefList.Add(FlightmodelControlsMwing11Elv2def.Id, FlightmodelControlsMwing11Elv2def);
            DataRefList.Add(FlightmodelControlsMwing11Rud1def.Id, FlightmodelControlsMwing11Rud1def);
            DataRefList.Add(FlightmodelControlsMwing11Rud2def.Id, FlightmodelControlsMwing11Rud2def);
            DataRefList.Add(FlightmodelControlsMwing12Ail1def.Id, FlightmodelControlsMwing12Ail1def);
            DataRefList.Add(FlightmodelControlsMwing12Ail2def.Id, FlightmodelControlsMwing12Ail2def);
            DataRefList.Add(FlightmodelControlsMwing12Spo1def.Id, FlightmodelControlsMwing12Spo1def);
            DataRefList.Add(FlightmodelControlsMwing12Spo2def.Id, FlightmodelControlsMwing12Spo2def);
            DataRefList.Add(FlightmodelControlsMwing12Fla1def.Id, FlightmodelControlsMwing12Fla1def);
            DataRefList.Add(FlightmodelControlsMwing12Fla2def.Id, FlightmodelControlsMwing12Fla2def);
            DataRefList.Add(FlightmodelControlsMwing12Yawbdef.Id, FlightmodelControlsMwing12Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing12Elv1def.Id, FlightmodelControlsMwing12Elv1def);
            DataRefList.Add(FlightmodelControlsMwing12Elv2def.Id, FlightmodelControlsMwing12Elv2def);
            DataRefList.Add(FlightmodelControlsMwing12Rud1def.Id, FlightmodelControlsMwing12Rud1def);
            DataRefList.Add(FlightmodelControlsMwing12Rud2def.Id, FlightmodelControlsMwing12Rud2def);
            DataRefList.Add(FlightmodelControlsMwing13Ail1def.Id, FlightmodelControlsMwing13Ail1def);
            DataRefList.Add(FlightmodelControlsMwing13Ail2def.Id, FlightmodelControlsMwing13Ail2def);
            DataRefList.Add(FlightmodelControlsMwing13Spo1def.Id, FlightmodelControlsMwing13Spo1def);
            DataRefList.Add(FlightmodelControlsMwing13Spo2def.Id, FlightmodelControlsMwing13Spo2def);
            DataRefList.Add(FlightmodelControlsMwing13Fla1def.Id, FlightmodelControlsMwing13Fla1def);
            DataRefList.Add(FlightmodelControlsMwing13Fla2def.Id, FlightmodelControlsMwing13Fla2def);
            DataRefList.Add(FlightmodelControlsMwing13Yawbdef.Id, FlightmodelControlsMwing13Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing13Elv1def.Id, FlightmodelControlsMwing13Elv1def);
            DataRefList.Add(FlightmodelControlsMwing13Elv2def.Id, FlightmodelControlsMwing13Elv2def);
            DataRefList.Add(FlightmodelControlsMwing13Rud1def.Id, FlightmodelControlsMwing13Rud1def);
            DataRefList.Add(FlightmodelControlsMwing13Rud2def.Id, FlightmodelControlsMwing13Rud2def);
            DataRefList.Add(FlightmodelControlsMwing14Ail1def.Id, FlightmodelControlsMwing14Ail1def);
            DataRefList.Add(FlightmodelControlsMwing14Ail2def.Id, FlightmodelControlsMwing14Ail2def);
            DataRefList.Add(FlightmodelControlsMwing14Spo1def.Id, FlightmodelControlsMwing14Spo1def);
            DataRefList.Add(FlightmodelControlsMwing14Spo2def.Id, FlightmodelControlsMwing14Spo2def);
            DataRefList.Add(FlightmodelControlsMwing14Fla1def.Id, FlightmodelControlsMwing14Fla1def);
            DataRefList.Add(FlightmodelControlsMwing14Fla2def.Id, FlightmodelControlsMwing14Fla2def);
            DataRefList.Add(FlightmodelControlsMwing14Yawbdef.Id, FlightmodelControlsMwing14Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing14Elv1def.Id, FlightmodelControlsMwing14Elv1def);
            DataRefList.Add(FlightmodelControlsMwing14Elv2def.Id, FlightmodelControlsMwing14Elv2def);
            DataRefList.Add(FlightmodelControlsMwing14Rud1def.Id, FlightmodelControlsMwing14Rud1def);
            DataRefList.Add(FlightmodelControlsMwing14Rud2def.Id, FlightmodelControlsMwing14Rud2def);
            DataRefList.Add(FlightmodelControlsMwing15Ail1def.Id, FlightmodelControlsMwing15Ail1def);
            DataRefList.Add(FlightmodelControlsMwing15Ail2def.Id, FlightmodelControlsMwing15Ail2def);
            DataRefList.Add(FlightmodelControlsMwing15Spo1def.Id, FlightmodelControlsMwing15Spo1def);
            DataRefList.Add(FlightmodelControlsMwing15Spo2def.Id, FlightmodelControlsMwing15Spo2def);
            DataRefList.Add(FlightmodelControlsMwing15Fla1def.Id, FlightmodelControlsMwing15Fla1def);
            DataRefList.Add(FlightmodelControlsMwing15Fla2def.Id, FlightmodelControlsMwing15Fla2def);
            DataRefList.Add(FlightmodelControlsMwing15Yawbdef.Id, FlightmodelControlsMwing15Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing15Elv1def.Id, FlightmodelControlsMwing15Elv1def);
            DataRefList.Add(FlightmodelControlsMwing15Elv2def.Id, FlightmodelControlsMwing15Elv2def);
            DataRefList.Add(FlightmodelControlsMwing15Rud1def.Id, FlightmodelControlsMwing15Rud1def);
            DataRefList.Add(FlightmodelControlsMwing15Rud2def.Id, FlightmodelControlsMwing15Rud2def);
            DataRefList.Add(FlightmodelControlsMwing16Ail1def.Id, FlightmodelControlsMwing16Ail1def);
            DataRefList.Add(FlightmodelControlsMwing16Ail2def.Id, FlightmodelControlsMwing16Ail2def);
            DataRefList.Add(FlightmodelControlsMwing16Spo1def.Id, FlightmodelControlsMwing16Spo1def);
            DataRefList.Add(FlightmodelControlsMwing16Spo2def.Id, FlightmodelControlsMwing16Spo2def);
            DataRefList.Add(FlightmodelControlsMwing16Fla1def.Id, FlightmodelControlsMwing16Fla1def);
            DataRefList.Add(FlightmodelControlsMwing16Fla2def.Id, FlightmodelControlsMwing16Fla2def);
            DataRefList.Add(FlightmodelControlsMwing16Yawbdef.Id, FlightmodelControlsMwing16Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing16Elv1def.Id, FlightmodelControlsMwing16Elv1def);
            DataRefList.Add(FlightmodelControlsMwing16Elv2def.Id, FlightmodelControlsMwing16Elv2def);
            DataRefList.Add(FlightmodelControlsMwing16Rud1def.Id, FlightmodelControlsMwing16Rud1def);
            DataRefList.Add(FlightmodelControlsMwing16Rud2def.Id, FlightmodelControlsMwing16Rud2def);
            DataRefList.Add(FlightmodelControlsMwing17Ail1def.Id, FlightmodelControlsMwing17Ail1def);
            DataRefList.Add(FlightmodelControlsMwing17Ail2def.Id, FlightmodelControlsMwing17Ail2def);
            DataRefList.Add(FlightmodelControlsMwing17Spo1def.Id, FlightmodelControlsMwing17Spo1def);
            DataRefList.Add(FlightmodelControlsMwing17Spo2def.Id, FlightmodelControlsMwing17Spo2def);
            DataRefList.Add(FlightmodelControlsMwing17Fla1def.Id, FlightmodelControlsMwing17Fla1def);
            DataRefList.Add(FlightmodelControlsMwing17Fla2def.Id, FlightmodelControlsMwing17Fla2def);
            DataRefList.Add(FlightmodelControlsMwing17Yawbdef.Id, FlightmodelControlsMwing17Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing17Elv1def.Id, FlightmodelControlsMwing17Elv1def);
            DataRefList.Add(FlightmodelControlsMwing17Elv2def.Id, FlightmodelControlsMwing17Elv2def);
            DataRefList.Add(FlightmodelControlsMwing17Rud1def.Id, FlightmodelControlsMwing17Rud1def);
            DataRefList.Add(FlightmodelControlsMwing17Rud2def.Id, FlightmodelControlsMwing17Rud2def);
            DataRefList.Add(FlightmodelControlsMwing18Ail1def.Id, FlightmodelControlsMwing18Ail1def);
            DataRefList.Add(FlightmodelControlsMwing18Ail2def.Id, FlightmodelControlsMwing18Ail2def);
            DataRefList.Add(FlightmodelControlsMwing18Spo1def.Id, FlightmodelControlsMwing18Spo1def);
            DataRefList.Add(FlightmodelControlsMwing18Spo2def.Id, FlightmodelControlsMwing18Spo2def);
            DataRefList.Add(FlightmodelControlsMwing18Fla1def.Id, FlightmodelControlsMwing18Fla1def);
            DataRefList.Add(FlightmodelControlsMwing18Fla2def.Id, FlightmodelControlsMwing18Fla2def);
            DataRefList.Add(FlightmodelControlsMwing18Yawbdef.Id, FlightmodelControlsMwing18Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing18Elv1def.Id, FlightmodelControlsMwing18Elv1def);
            DataRefList.Add(FlightmodelControlsMwing18Elv2def.Id, FlightmodelControlsMwing18Elv2def);
            DataRefList.Add(FlightmodelControlsMwing18Rud1def.Id, FlightmodelControlsMwing18Rud1def);
            DataRefList.Add(FlightmodelControlsMwing18Rud2def.Id, FlightmodelControlsMwing18Rud2def);
            DataRefList.Add(FlightmodelControlsMwing19Ail1def.Id, FlightmodelControlsMwing19Ail1def);
            DataRefList.Add(FlightmodelControlsMwing19Ail2def.Id, FlightmodelControlsMwing19Ail2def);
            DataRefList.Add(FlightmodelControlsMwing19Spo1def.Id, FlightmodelControlsMwing19Spo1def);
            DataRefList.Add(FlightmodelControlsMwing19Spo2def.Id, FlightmodelControlsMwing19Spo2def);
            DataRefList.Add(FlightmodelControlsMwing19Fla1def.Id, FlightmodelControlsMwing19Fla1def);
            DataRefList.Add(FlightmodelControlsMwing19Fla2def.Id, FlightmodelControlsMwing19Fla2def);
            DataRefList.Add(FlightmodelControlsMwing19Yawbdef.Id, FlightmodelControlsMwing19Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing19Elv1def.Id, FlightmodelControlsMwing19Elv1def);
            DataRefList.Add(FlightmodelControlsMwing19Elv2def.Id, FlightmodelControlsMwing19Elv2def);
            DataRefList.Add(FlightmodelControlsMwing19Rud1def.Id, FlightmodelControlsMwing19Rud1def);
            DataRefList.Add(FlightmodelControlsMwing19Rud2def.Id, FlightmodelControlsMwing19Rud2def);
            DataRefList.Add(FlightmodelControlsMwing20Ail1def.Id, FlightmodelControlsMwing20Ail1def);
            DataRefList.Add(FlightmodelControlsMwing20Ail2def.Id, FlightmodelControlsMwing20Ail2def);
            DataRefList.Add(FlightmodelControlsMwing20Spo1def.Id, FlightmodelControlsMwing20Spo1def);
            DataRefList.Add(FlightmodelControlsMwing20Spo2def.Id, FlightmodelControlsMwing20Spo2def);
            DataRefList.Add(FlightmodelControlsMwing20Fla1def.Id, FlightmodelControlsMwing20Fla1def);
            DataRefList.Add(FlightmodelControlsMwing20Fla2def.Id, FlightmodelControlsMwing20Fla2def);
            DataRefList.Add(FlightmodelControlsMwing20Yawbdef.Id, FlightmodelControlsMwing20Yawbdef);
            DataRefList.Add(FlightmodelControlsMwing20Elv1def.Id, FlightmodelControlsMwing20Elv1def);
            DataRefList.Add(FlightmodelControlsMwing20Elv2def.Id, FlightmodelControlsMwing20Elv2def);
            DataRefList.Add(FlightmodelControlsMwing20Rud1def.Id, FlightmodelControlsMwing20Rud1def);
            DataRefList.Add(FlightmodelControlsMwing20Rud2def.Id, FlightmodelControlsMwing20Rud2def);
            DataRefList.Add(FlightmodelControlsWing1lRetract.Id, FlightmodelControlsWing1lRetract);
            DataRefList.Add(FlightmodelControlsWing1rRetract.Id, FlightmodelControlsWing1rRetract);
            DataRefList.Add(FlightmodelControlsWing2lRetract.Id, FlightmodelControlsWing2lRetract);
            DataRefList.Add(FlightmodelControlsWing2rRetract.Id, FlightmodelControlsWing2rRetract);
            DataRefList.Add(FlightmodelControlsWing3lRetract.Id, FlightmodelControlsWing3lRetract);
            DataRefList.Add(FlightmodelControlsWing3rRetract.Id, FlightmodelControlsWing3rRetract);
            DataRefList.Add(FlightmodelControlsWing4lRetract.Id, FlightmodelControlsWing4lRetract);
            DataRefList.Add(FlightmodelControlsWing4rRetract.Id, FlightmodelControlsWing4rRetract);
            DataRefList.Add(FlightmodelControlsHstab1Retract.Id, FlightmodelControlsHstab1Retract);
            DataRefList.Add(FlightmodelControlsHstab2Retract.Id, FlightmodelControlsHstab2Retract);
            DataRefList.Add(FlightmodelControlsVstab1Retract.Id, FlightmodelControlsVstab1Retract);
            DataRefList.Add(FlightmodelControlsVstab2Retract.Id, FlightmodelControlsVstab2Retract);
            DataRefList.Add(FlightmodelControlsMwing01Retract.Id, FlightmodelControlsMwing01Retract);
            DataRefList.Add(FlightmodelControlsMwing02Retract.Id, FlightmodelControlsMwing02Retract);
            DataRefList.Add(FlightmodelControlsMwing03Retract.Id, FlightmodelControlsMwing03Retract);
            DataRefList.Add(FlightmodelControlsMwing04Retract.Id, FlightmodelControlsMwing04Retract);
            DataRefList.Add(FlightmodelControlsMwing05Retract.Id, FlightmodelControlsMwing05Retract);
            DataRefList.Add(FlightmodelControlsMwing06Retract.Id, FlightmodelControlsMwing06Retract);
            DataRefList.Add(FlightmodelControlsMwing07Retract.Id, FlightmodelControlsMwing07Retract);
            DataRefList.Add(FlightmodelControlsMwing08Retract.Id, FlightmodelControlsMwing08Retract);
            DataRefList.Add(FlightmodelControlsMwing09Retract.Id, FlightmodelControlsMwing09Retract);
            DataRefList.Add(FlightmodelControlsMwing10Retract.Id, FlightmodelControlsMwing10Retract);
            DataRefList.Add(FlightmodelControlsMwing11Retract.Id, FlightmodelControlsMwing11Retract);
            DataRefList.Add(FlightmodelControlsMwing12Retract.Id, FlightmodelControlsMwing12Retract);
            DataRefList.Add(FlightmodelControlsMwing13Retract.Id, FlightmodelControlsMwing13Retract);
            DataRefList.Add(FlightmodelControlsMwing14Retract.Id, FlightmodelControlsMwing14Retract);
            DataRefList.Add(FlightmodelControlsMwing15Retract.Id, FlightmodelControlsMwing15Retract);
            DataRefList.Add(FlightmodelControlsMwing16Retract.Id, FlightmodelControlsMwing16Retract);
            DataRefList.Add(FlightmodelControlsMwing17Retract.Id, FlightmodelControlsMwing17Retract);
            DataRefList.Add(FlightmodelControlsMwing18Retract.Id, FlightmodelControlsMwing18Retract);
            DataRefList.Add(FlightmodelControlsMwing19Retract.Id, FlightmodelControlsMwing19Retract);
            DataRefList.Add(FlightmodelControlsMwing20Retract.Id, FlightmodelControlsMwing20Retract);
            DataRefList.Add(FlightmodelControlsWing1lRetractNow.Id, FlightmodelControlsWing1lRetractNow);
            DataRefList.Add(FlightmodelControlsWing1rRetractNow.Id, FlightmodelControlsWing1rRetractNow);
            DataRefList.Add(FlightmodelControlsWing2lRetractNow.Id, FlightmodelControlsWing2lRetractNow);
            DataRefList.Add(FlightmodelControlsWing2rRetractNow.Id, FlightmodelControlsWing2rRetractNow);
            DataRefList.Add(FlightmodelControlsWing3lRetractNow.Id, FlightmodelControlsWing3lRetractNow);
            DataRefList.Add(FlightmodelControlsWing3rRetractNow.Id, FlightmodelControlsWing3rRetractNow);
            DataRefList.Add(FlightmodelControlsWing4lRetractNow.Id, FlightmodelControlsWing4lRetractNow);
            DataRefList.Add(FlightmodelControlsWing4rRetractNow.Id, FlightmodelControlsWing4rRetractNow);
            DataRefList.Add(FlightmodelControlsHstab1RetractNow.Id, FlightmodelControlsHstab1RetractNow);
            DataRefList.Add(FlightmodelControlsHstab2RetractNow.Id, FlightmodelControlsHstab2RetractNow);
            DataRefList.Add(FlightmodelControlsVstab1RetractNow.Id, FlightmodelControlsVstab1RetractNow);
            DataRefList.Add(FlightmodelControlsVstab2RetractNow.Id, FlightmodelControlsVstab2RetractNow);
            DataRefList.Add(FlightmodelControlsMwing01RetractNow.Id, FlightmodelControlsMwing01RetractNow);
            DataRefList.Add(FlightmodelControlsMwing02RetractNow.Id, FlightmodelControlsMwing02RetractNow);
            DataRefList.Add(FlightmodelControlsMwing03RetractNow.Id, FlightmodelControlsMwing03RetractNow);
            DataRefList.Add(FlightmodelControlsMwing04RetractNow.Id, FlightmodelControlsMwing04RetractNow);
            DataRefList.Add(FlightmodelControlsMwing05RetractNow.Id, FlightmodelControlsMwing05RetractNow);
            DataRefList.Add(FlightmodelControlsMwing06RetractNow.Id, FlightmodelControlsMwing06RetractNow);
            DataRefList.Add(FlightmodelControlsMwing07RetractNow.Id, FlightmodelControlsMwing07RetractNow);
            DataRefList.Add(FlightmodelControlsMwing08RetractNow.Id, FlightmodelControlsMwing08RetractNow);
            DataRefList.Add(FlightmodelControlsMwing09RetractNow.Id, FlightmodelControlsMwing09RetractNow);
            DataRefList.Add(FlightmodelControlsMwing10RetractNow.Id, FlightmodelControlsMwing10RetractNow);
            DataRefList.Add(FlightmodelControlsMwing11RetractNow.Id, FlightmodelControlsMwing11RetractNow);
            DataRefList.Add(FlightmodelControlsMwing12RetractNow.Id, FlightmodelControlsMwing12RetractNow);
            DataRefList.Add(FlightmodelControlsMwing13RetractNow.Id, FlightmodelControlsMwing13RetractNow);
            DataRefList.Add(FlightmodelControlsMwing14RetractNow.Id, FlightmodelControlsMwing14RetractNow);
            DataRefList.Add(FlightmodelControlsMwing15RetractNow.Id, FlightmodelControlsMwing15RetractNow);
            DataRefList.Add(FlightmodelControlsMwing16RetractNow.Id, FlightmodelControlsMwing16RetractNow);
            DataRefList.Add(FlightmodelControlsMwing17RetractNow.Id, FlightmodelControlsMwing17RetractNow);
            DataRefList.Add(FlightmodelControlsMwing18RetractNow.Id, FlightmodelControlsMwing18RetractNow);
            DataRefList.Add(FlightmodelControlsMwing19RetractNow.Id, FlightmodelControlsMwing19RetractNow);
            DataRefList.Add(FlightmodelControlsMwing20RetractNow.Id, FlightmodelControlsMwing20RetractNow);
            DataRefList.Add(FlightmodelControlsWing1lRetractMax.Id, FlightmodelControlsWing1lRetractMax);
            DataRefList.Add(FlightmodelControlsWing1rRetractMax.Id, FlightmodelControlsWing1rRetractMax);
            DataRefList.Add(FlightmodelControlsWing2lRetractMax.Id, FlightmodelControlsWing2lRetractMax);
            DataRefList.Add(FlightmodelControlsWing2rRetractMax.Id, FlightmodelControlsWing2rRetractMax);
            DataRefList.Add(FlightmodelControlsWing3lRetractMax.Id, FlightmodelControlsWing3lRetractMax);
            DataRefList.Add(FlightmodelControlsWing3rRetractMax.Id, FlightmodelControlsWing3rRetractMax);
            DataRefList.Add(FlightmodelControlsWing4lRetractMax.Id, FlightmodelControlsWing4lRetractMax);
            DataRefList.Add(FlightmodelControlsWing4rRetractMax.Id, FlightmodelControlsWing4rRetractMax);
            DataRefList.Add(FlightmodelControlsHstab1RetractMax.Id, FlightmodelControlsHstab1RetractMax);
            DataRefList.Add(FlightmodelControlsHstab2RetractMax.Id, FlightmodelControlsHstab2RetractMax);
            DataRefList.Add(FlightmodelControlsVstab1RetractMax.Id, FlightmodelControlsVstab1RetractMax);
            DataRefList.Add(FlightmodelControlsVstab2RetractMax.Id, FlightmodelControlsVstab2RetractMax);
            DataRefList.Add(FlightmodelControlsMwing01RetractMax.Id, FlightmodelControlsMwing01RetractMax);
            DataRefList.Add(FlightmodelControlsMwing02RetractMax.Id, FlightmodelControlsMwing02RetractMax);
            DataRefList.Add(FlightmodelControlsMwing03RetractMax.Id, FlightmodelControlsMwing03RetractMax);
            DataRefList.Add(FlightmodelControlsMwing04RetractMax.Id, FlightmodelControlsMwing04RetractMax);
            DataRefList.Add(FlightmodelControlsMwing05RetractMax.Id, FlightmodelControlsMwing05RetractMax);
            DataRefList.Add(FlightmodelControlsMwing06RetractMax.Id, FlightmodelControlsMwing06RetractMax);
            DataRefList.Add(FlightmodelControlsMwing07RetractMax.Id, FlightmodelControlsMwing07RetractMax);
            DataRefList.Add(FlightmodelControlsMwing08RetractMax.Id, FlightmodelControlsMwing08RetractMax);
            DataRefList.Add(FlightmodelControlsMwing09RetractMax.Id, FlightmodelControlsMwing09RetractMax);
            DataRefList.Add(FlightmodelControlsMwing10RetractMax.Id, FlightmodelControlsMwing10RetractMax);
            DataRefList.Add(FlightmodelControlsMwing11RetractMax.Id, FlightmodelControlsMwing11RetractMax);
            DataRefList.Add(FlightmodelControlsMwing12RetractMax.Id, FlightmodelControlsMwing12RetractMax);
            DataRefList.Add(FlightmodelControlsMwing13RetractMax.Id, FlightmodelControlsMwing13RetractMax);
            DataRefList.Add(FlightmodelControlsMwing14RetractMax.Id, FlightmodelControlsMwing14RetractMax);
            DataRefList.Add(FlightmodelControlsMwing15RetractMax.Id, FlightmodelControlsMwing15RetractMax);
            DataRefList.Add(FlightmodelControlsMwing16RetractMax.Id, FlightmodelControlsMwing16RetractMax);
            DataRefList.Add(FlightmodelControlsMwing17RetractMax.Id, FlightmodelControlsMwing17RetractMax);
            DataRefList.Add(FlightmodelControlsMwing18RetractMax.Id, FlightmodelControlsMwing18RetractMax);
            DataRefList.Add(FlightmodelControlsMwing19RetractMax.Id, FlightmodelControlsMwing19RetractMax);
            DataRefList.Add(FlightmodelControlsMwing20RetractMax.Id, FlightmodelControlsMwing20RetractMax);
            DataRefList.Add(FlightmodelControlsWing1lElv1def.Id, FlightmodelControlsWing1lElv1def);
            DataRefList.Add(FlightmodelControlsWing1lElv2def.Id, FlightmodelControlsWing1lElv2def);
            DataRefList.Add(FlightmodelControlsWing1rElv1def.Id, FlightmodelControlsWing1rElv1def);
            DataRefList.Add(FlightmodelControlsWing1rElv2def.Id, FlightmodelControlsWing1rElv2def);
            DataRefList.Add(FlightmodelControlsWing2lElv1def.Id, FlightmodelControlsWing2lElv1def);
            DataRefList.Add(FlightmodelControlsWing2lElv2def.Id, FlightmodelControlsWing2lElv2def);
            DataRefList.Add(FlightmodelControlsWing2rElv1def.Id, FlightmodelControlsWing2rElv1def);
            DataRefList.Add(FlightmodelControlsWing2rElv2def.Id, FlightmodelControlsWing2rElv2def);
            DataRefList.Add(FlightmodelControlsWing3lElv1def.Id, FlightmodelControlsWing3lElv1def);
            DataRefList.Add(FlightmodelControlsWing3lElv2def.Id, FlightmodelControlsWing3lElv2def);
            DataRefList.Add(FlightmodelControlsWing3rElv1def.Id, FlightmodelControlsWing3rElv1def);
            DataRefList.Add(FlightmodelControlsWing3rElv2def.Id, FlightmodelControlsWing3rElv2def);
            DataRefList.Add(FlightmodelControlsWing4lElv1def.Id, FlightmodelControlsWing4lElv1def);
            DataRefList.Add(FlightmodelControlsWing4lElv2def.Id, FlightmodelControlsWing4lElv2def);
            DataRefList.Add(FlightmodelControlsWing4rElv1def.Id, FlightmodelControlsWing4rElv1def);
            DataRefList.Add(FlightmodelControlsWing4rElv2def.Id, FlightmodelControlsWing4rElv2def);
            DataRefList.Add(FlightmodelCyclicCyclicAilnBladAlph.Id, FlightmodelCyclicCyclicAilnBladAlph);
            DataRefList.Add(FlightmodelCyclicCyclicAilnDiscTilt.Id, FlightmodelCyclicCyclicAilnDiscTilt);
            DataRefList.Add(FlightmodelCyclicCyclicElevBladAlph.Id, FlightmodelCyclicCyclicElevBladAlph);
            DataRefList.Add(FlightmodelCyclicCyclicElevDiscTilt.Id, FlightmodelCyclicCyclicElevDiscTilt);
            DataRefList.Add(FlightmodelCyclicCyclicElevCommand.Id, FlightmodelCyclicCyclicElevCommand);
            DataRefList.Add(FlightmodelCyclicCyclicAilnCommand.Id, FlightmodelCyclicCyclicAilnCommand);
            DataRefList.Add(FlightmodelCyclicSidecant.Id, FlightmodelCyclicSidecant);
            DataRefList.Add(FlightmodelCyclicVertcant.Id, FlightmodelCyclicVertcant);
            DataRefList.Add(FlightmodelEngineENGNN2.Id, FlightmodelEngineENGNN2);
            DataRefList.Add(FlightmodelEngineENGNEGT.Id, FlightmodelEngineENGNEGT);
            DataRefList.Add(FlightmodelEngineENGNITT.Id, FlightmodelEngineENGNITT);
            DataRefList.Add(FlightmodelEngineENGNCHT.Id, FlightmodelEngineENGNCHT);
            DataRefList.Add(FlightmodelEngineENGNEGTC.Id, FlightmodelEngineENGNEGTC);
            DataRefList.Add(FlightmodelEngineENGNITTC.Id, FlightmodelEngineENGNITTC);
            DataRefList.Add(FlightmodelEngineENGNCHTC.Id, FlightmodelEngineENGNCHTC);
            DataRefList.Add(FlightmodelEngineENGNBatAmp.Id, FlightmodelEngineENGNBatAmp);
            DataRefList.Add(FlightmodelEngineENGNBatVolt.Id, FlightmodelEngineENGNBatVolt);
            DataRefList.Add(FlightmodelEngineENGNCowl.Id, FlightmodelEngineENGNCowl);
            DataRefList.Add(FlightmodelEngineENGNEPR.Id, FlightmodelEngineENGNEPR);
            DataRefList.Add(FlightmodelEngineENGNFF.Id, FlightmodelEngineENGNFF);
            DataRefList.Add(FlightmodelEngineENGNGenAmp.Id, FlightmodelEngineENGNGenAmp);
            DataRefList.Add(FlightmodelEngineENGNHeat.Id, FlightmodelEngineENGNHeat);
            DataRefList.Add(FlightmodelEngineENGNMixt.Id, FlightmodelEngineENGNMixt);
            DataRefList.Add(FlightmodelEngineENGNMPR.Id, FlightmodelEngineENGNMPR);
            DataRefList.Add(FlightmodelEngineENGNN1.Id, FlightmodelEngineENGNN1);
            DataRefList.Add(FlightmodelEngineENGNOilPressPsi.Id, FlightmodelEngineENGNOilPressPsi);
            DataRefList.Add(FlightmodelEngineENGNOilTempC.Id, FlightmodelEngineENGNOilTempC);
            DataRefList.Add(FlightmodelEngineENGNOilTemp.Id, FlightmodelEngineENGNOilTemp);
            DataRefList.Add(FlightmodelEngineENGNOilPress.Id, FlightmodelEngineENGNOilPress);
            DataRefList.Add(FlightmodelEngineENGNPower.Id, FlightmodelEngineENGNPower);
            DataRefList.Add(FlightmodelEngineENGNProp.Id, FlightmodelEngineENGNProp);
            DataRefList.Add(FlightmodelEngineENGNSigma.Id, FlightmodelEngineENGNSigma);
            DataRefList.Add(FlightmodelEngineENGNThro.Id, FlightmodelEngineENGNThro);
            DataRefList.Add(FlightmodelEngineENGNThroUse.Id, FlightmodelEngineENGNThroUse);
            DataRefList.Add(FlightmodelEngineENGNThroOverride.Id, FlightmodelEngineENGNThroOverride);
            DataRefList.Add(FlightmodelEngineENGNTRQ.Id, FlightmodelEngineENGNTRQ);
            DataRefList.Add(FlightmodelEngineENGNRunning.Id, FlightmodelEngineENGNRunning);
            DataRefList.Add(FlightmodelEngineENGNBurning.Id, FlightmodelEngineENGNBurning);
            DataRefList.Add(FlightmodelEngineENGNPropmode.Id, FlightmodelEngineENGNPropmode);
            DataRefList.Add(FlightmodelEngineENGNBurnrat.Id, FlightmodelEngineENGNBurnrat);
            DataRefList.Add(FlightmodelEngineENGNOilQuan.Id, FlightmodelEngineENGNOilQuan);
            DataRefList.Add(FlightmodelEngineENGNOilLubeRat.Id, FlightmodelEngineENGNOilLubeRat);
            DataRefList.Add(FlightmodelEngineENGNCrbice.Id, FlightmodelEngineENGNCrbice);
            DataRefList.Add(FlightmodelEngineENGNTacrad.Id, FlightmodelEngineENGNTacrad);
            DataRefList.Add(FlightmodelEnginePOINTPitchDeg.Id, FlightmodelEnginePOINTPitchDeg);
            DataRefList.Add(FlightmodelEnginePOINTPropEff.Id, FlightmodelEnginePOINTPropEff);
            DataRefList.Add(FlightmodelEnginePOINTTacrad.Id, FlightmodelEnginePOINTTacrad);
            DataRefList.Add(FlightmodelEnginePOINTThrust.Id, FlightmodelEnginePOINTThrust);
            DataRefList.Add(FlightmodelEnginePOINTDragTRQ.Id, FlightmodelEnginePOINTDragTRQ);
            DataRefList.Add(FlightmodelEnginePOINTDrivTRQ.Id, FlightmodelEnginePOINTDrivTRQ);
            DataRefList.Add(FlightmodelEnginePOINTMaxTRQ.Id, FlightmodelEnginePOINTMaxTRQ);
            DataRefList.Add(FlightmodelEnginePOINTConeRad.Id, FlightmodelEnginePOINTConeRad);
            DataRefList.Add(FlightmodelEnginePOINTSideWash.Id, FlightmodelEnginePOINTSideWash);
            DataRefList.Add(FlightmodelEnginePOINTXYZ.Id, FlightmodelEnginePOINTXYZ);
            DataRefList.Add(FlightmodelEnginePOINTPitchDegUse.Id, FlightmodelEnginePOINTPitchDegUse);
            DataRefList.Add(FlightmodelEnginePOINTPropAngDeg.Id, FlightmodelEnginePOINTPropAngDeg);
            DataRefList.Add(FlightmodelEngineBurnerEnabled.Id, FlightmodelEngineBurnerEnabled);
            DataRefList.Add(FlightmodelEngineBurnerLevel.Id, FlightmodelEngineBurnerLevel);
            DataRefList.Add(FlightmodelEngineAprMode.Id, FlightmodelEngineAprMode);
            DataRefList.Add(FlightmodelEngineDescentSpeedRatio.Id, FlightmodelEngineDescentSpeedRatio);
            DataRefList.Add(FlightmodelEngineVortexRingState.Id, FlightmodelEngineVortexRingState);
            DataRefList.Add(FlightmodelFailuresFrmIce.Id, FlightmodelFailuresFrmIce);
            DataRefList.Add(FlightmodelFailuresFrmIce2.Id, FlightmodelFailuresFrmIce2);
            DataRefList.Add(FlightmodelFailuresPitotIce.Id, FlightmodelFailuresPitotIce);
            DataRefList.Add(FlightmodelFailuresPitotIce2.Id, FlightmodelFailuresPitotIce2);
            DataRefList.Add(FlightmodelFailuresPropIce.Id, FlightmodelFailuresPropIce);
            DataRefList.Add(FlightmodelFailuresStatIce.Id, FlightmodelFailuresStatIce);
            DataRefList.Add(FlightmodelFailuresStatIce2.Id, FlightmodelFailuresStatIce2);
            DataRefList.Add(FlightmodelFailuresInletIce.Id, FlightmodelFailuresInletIce);
            DataRefList.Add(FlightmodelFailuresPropIcePerEngine.Id, FlightmodelFailuresPropIcePerEngine);
            DataRefList.Add(FlightmodelFailuresInletIcePerEngine.Id, FlightmodelFailuresInletIcePerEngine);
            DataRefList.Add(FlightmodelFailuresWindowIce.Id, FlightmodelFailuresWindowIce);
            DataRefList.Add(FlightmodelFailuresAoaIce.Id, FlightmodelFailuresAoaIce);
            DataRefList.Add(FlightmodelFailuresAoaIce2.Id, FlightmodelFailuresAoaIce2);
            DataRefList.Add(FlightmodelFailuresStallwarning.Id, FlightmodelFailuresStallwarning);
            DataRefList.Add(FlightmodelFailuresOverG.Id, FlightmodelFailuresOverG);
            DataRefList.Add(FlightmodelFailuresOverVne.Id, FlightmodelFailuresOverVne);
            DataRefList.Add(FlightmodelFailuresOverVfe.Id, FlightmodelFailuresOverVfe);
            DataRefList.Add(FlightmodelFailuresOverVle.Id, FlightmodelFailuresOverVle);
            DataRefList.Add(FlightmodelFailuresOngroundAny.Id, FlightmodelFailuresOngroundAny);
            DataRefList.Add(FlightmodelFailuresOngroundAll.Id, FlightmodelFailuresOngroundAll);
            DataRefList.Add(FlightmodelFailuresSmoking.Id, FlightmodelFailuresSmoking);
            DataRefList.Add(FlightmodelFailuresLoRotorWarning.Id, FlightmodelFailuresLoRotorWarning);
            DataRefList.Add(FlightmodelForcesFsideAero.Id, FlightmodelForcesFsideAero);
            DataRefList.Add(FlightmodelForcesFnrmlAero.Id, FlightmodelForcesFnrmlAero);
            DataRefList.Add(FlightmodelForcesFaxilAero.Id, FlightmodelForcesFaxilAero);
            DataRefList.Add(FlightmodelForcesFsideProp.Id, FlightmodelForcesFsideProp);
            DataRefList.Add(FlightmodelForcesFnrmlProp.Id, FlightmodelForcesFnrmlProp);
            DataRefList.Add(FlightmodelForcesFaxilProp.Id, FlightmodelForcesFaxilProp);
            DataRefList.Add(FlightmodelForcesFsideGear.Id, FlightmodelForcesFsideGear);
            DataRefList.Add(FlightmodelForcesFnrmlGear.Id, FlightmodelForcesFnrmlGear);
            DataRefList.Add(FlightmodelForcesFaxilGear.Id, FlightmodelForcesFaxilGear);
            DataRefList.Add(FlightmodelForcesFsideTotal.Id, FlightmodelForcesFsideTotal);
            DataRefList.Add(FlightmodelForcesFnrmlTotal.Id, FlightmodelForcesFnrmlTotal);
            DataRefList.Add(FlightmodelForcesFaxilTotal.Id, FlightmodelForcesFaxilTotal);
            DataRefList.Add(FlightmodelForcesLAero.Id, FlightmodelForcesLAero);
            DataRefList.Add(FlightmodelForcesMAero.Id, FlightmodelForcesMAero);
            DataRefList.Add(FlightmodelForcesNAero.Id, FlightmodelForcesNAero);
            DataRefList.Add(FlightmodelForcesLProp.Id, FlightmodelForcesLProp);
            DataRefList.Add(FlightmodelForcesMProp.Id, FlightmodelForcesMProp);
            DataRefList.Add(FlightmodelForcesNProp.Id, FlightmodelForcesNProp);
            DataRefList.Add(FlightmodelForcesLGear.Id, FlightmodelForcesLGear);
            DataRefList.Add(FlightmodelForcesMGear.Id, FlightmodelForcesMGear);
            DataRefList.Add(FlightmodelForcesNGear.Id, FlightmodelForcesNGear);
            DataRefList.Add(FlightmodelForcesLMass.Id, FlightmodelForcesLMass);
            DataRefList.Add(FlightmodelForcesMMass.Id, FlightmodelForcesMMass);
            DataRefList.Add(FlightmodelForcesNMass.Id, FlightmodelForcesNMass);
            DataRefList.Add(FlightmodelForcesLTotal.Id, FlightmodelForcesLTotal);
            DataRefList.Add(FlightmodelForcesMTotal.Id, FlightmodelForcesMTotal);
            DataRefList.Add(FlightmodelForcesNTotal.Id, FlightmodelForcesNTotal);
            DataRefList.Add(FlightmodelForcesFsidePlugAcf.Id, FlightmodelForcesFsidePlugAcf);
            DataRefList.Add(FlightmodelForcesFnrmlPlugAcf.Id, FlightmodelForcesFnrmlPlugAcf);
            DataRefList.Add(FlightmodelForcesFaxilPlugAcf.Id, FlightmodelForcesFaxilPlugAcf);
            DataRefList.Add(FlightmodelForcesLPlugAcf.Id, FlightmodelForcesLPlugAcf);
            DataRefList.Add(FlightmodelForcesMPlugAcf.Id, FlightmodelForcesMPlugAcf);
            DataRefList.Add(FlightmodelForcesNPlugAcf.Id, FlightmodelForcesNPlugAcf);
            DataRefList.Add(FlightmodelForcesGNrml.Id, FlightmodelForcesGNrml);
            DataRefList.Add(FlightmodelForcesGAxil.Id, FlightmodelForcesGAxil);
            DataRefList.Add(FlightmodelForcesGSide.Id, FlightmodelForcesGSide);
            DataRefList.Add(FlightmodelForcesVxAirOnAcf.Id, FlightmodelForcesVxAirOnAcf);
            DataRefList.Add(FlightmodelForcesVyAirOnAcf.Id, FlightmodelForcesVyAirOnAcf);
            DataRefList.Add(FlightmodelForcesVzAirOnAcf.Id, FlightmodelForcesVzAirOnAcf);
            DataRefList.Add(FlightmodelForcesVxAcfAxis.Id, FlightmodelForcesVxAcfAxis);
            DataRefList.Add(FlightmodelForcesVyAcfAxis.Id, FlightmodelForcesVyAcfAxis);
            DataRefList.Add(FlightmodelForcesVzAcfAxis.Id, FlightmodelForcesVzAcfAxis);
            DataRefList.Add(FlightmodelForcesQRotorRad.Id, FlightmodelForcesQRotorRad);
            DataRefList.Add(FlightmodelForcesRRotorRad.Id, FlightmodelForcesRRotorRad);
            DataRefList.Add(FlightmodelForcesLiftPathAxis.Id, FlightmodelForcesLiftPathAxis);
            DataRefList.Add(FlightmodelForcesDragPathAxis.Id, FlightmodelForcesDragPathAxis);
            DataRefList.Add(FlightmodelForcesSidePathAxis.Id, FlightmodelForcesSidePathAxis);
            DataRefList.Add(FlightmodelJetwashDvinc.Id, FlightmodelJetwashDvinc);
            DataRefList.Add(FlightmodelJetwashRingdvinc.Id, FlightmodelJetwashRingdvinc);
            DataRefList.Add(FlightmodelMiscJettSize.Id, FlightmodelMiscJettSize);
            DataRefList.Add(FlightmodelMiscJettLen.Id, FlightmodelMiscJettLen);
            DataRefList.Add(FlightmodelMiscGTotal.Id, FlightmodelMiscGTotal);
            DataRefList.Add(FlightmodelMiscNosewheelSpeed.Id, FlightmodelMiscNosewheelSpeed);
            DataRefList.Add(FlightmodelMiscWingTiltPtch.Id, FlightmodelMiscWingTiltPtch);
            DataRefList.Add(FlightmodelMiscWingTiltRoll.Id, FlightmodelMiscWingTiltRoll);
            DataRefList.Add(FlightmodelMiscJatoLeft.Id, FlightmodelMiscJatoLeft);
            DataRefList.Add(FlightmodelMiscDisplaceRat.Id, FlightmodelMiscDisplaceRat);
            DataRefList.Add(FlightmodelMiscHInd.Id, FlightmodelMiscHInd);
            DataRefList.Add(FlightmodelMiscHInd2.Id, FlightmodelMiscHInd2);
            DataRefList.Add(FlightmodelMiscHIndCopilot.Id, FlightmodelMiscHIndCopilot);
            DataRefList.Add(FlightmodelMiscHIndCopilot2.Id, FlightmodelMiscHIndCopilot2);
            DataRefList.Add(FlightmodelMiscMachno.Id, FlightmodelMiscMachno);
            DataRefList.Add(FlightmodelMiscQstatic.Id, FlightmodelMiscQstatic);
            DataRefList.Add(FlightmodelMiscTurnrateRoll.Id, FlightmodelMiscTurnrateRoll);
            DataRefList.Add(FlightmodelMiscTurnrateRoll2.Id, FlightmodelMiscTurnrateRoll2);
            DataRefList.Add(FlightmodelMiscTurnrateNoroll.Id, FlightmodelMiscTurnrateNoroll);
            DataRefList.Add(FlightmodelMiscTurnrateNoroll2.Id, FlightmodelMiscTurnrateNoroll2);
            DataRefList.Add(FlightmodelMiscSlip.Id, FlightmodelMiscSlip);
            DataRefList.Add(FlightmodelMiscRocketMode.Id, FlightmodelMiscRocketMode);
            DataRefList.Add(FlightmodelMiscRocketTimeout.Id, FlightmodelMiscRocketTimeout);
            DataRefList.Add(FlightmodelMiscPropOspeedTestTimeout.Id, FlightmodelMiscPropOspeedTestTimeout);
            DataRefList.Add(FlightmodelMiscBlownFlapEngageRat.Id, FlightmodelMiscBlownFlapEngageRat);
            DataRefList.Add(FlightmodelMiscLiftFanTotalPower.Id, FlightmodelMiscLiftFanTotalPower);
            DataRefList.Add(FlightmodelMiscStabPtchTest.Id, FlightmodelMiscStabPtchTest);
            DataRefList.Add(FlightmodelMiscStabHdngTest.Id, FlightmodelMiscStabHdngTest);
            DataRefList.Add(FlightmodelMiscCgzRefToDefault.Id, FlightmodelMiscCgzRefToDefault);
            DataRefList.Add(FlightmodelMiscQCentroidMULT.Id, FlightmodelMiscQCentroidMULT);
            DataRefList.Add(FlightmodelMiscCM.Id, FlightmodelMiscCM);
            DataRefList.Add(FlightmodelMiscCN.Id, FlightmodelMiscCN);
            DataRefList.Add(FlightmodelMiscClOverall.Id, FlightmodelMiscClOverall);
            DataRefList.Add(FlightmodelMiscCdOverall.Id, FlightmodelMiscCdOverall);
            DataRefList.Add(FlightmodelMiscLOD.Id, FlightmodelMiscLOD);
            DataRefList.Add(FlightmodelMiscActFrcPtchLb.Id, FlightmodelMiscActFrcPtchLb);
            DataRefList.Add(FlightmodelMiscActFrcRollLb.Id, FlightmodelMiscActFrcRollLb);
            DataRefList.Add(FlightmodelMiscActFrcHdngLb.Id, FlightmodelMiscActFrcHdngLb);
            DataRefList.Add(FlightmodelMiscActFrcLbrkLb.Id, FlightmodelMiscActFrcLbrkLb);
            DataRefList.Add(FlightmodelMiscActFrcRbrkLb.Id, FlightmodelMiscActFrcRbrkLb);
            DataRefList.Add(FlightmodelMiscSlungLoadX.Id, FlightmodelMiscSlungLoadX);
            DataRefList.Add(FlightmodelMiscSlungLoadY.Id, FlightmodelMiscSlungLoadY);
            DataRefList.Add(FlightmodelMiscSlungLoadZ.Id, FlightmodelMiscSlungLoadZ);
            DataRefList.Add(FlightmodelGroundSurfaceTextureType.Id, FlightmodelGroundSurfaceTextureType);
            DataRefList.Add(FlightmodelGroundPluginGroundCenter.Id, FlightmodelGroundPluginGroundCenter);
            DataRefList.Add(FlightmodelGroundPluginGroundSlopeNormal.Id, FlightmodelGroundPluginGroundSlopeNormal);
            DataRefList.Add(FlightmodelGroundPluginGroundTerrainVelocity.Id, FlightmodelGroundPluginGroundTerrainVelocity);
            DataRefList.Add(FlightmodelMovingpartsGear1def.Id, FlightmodelMovingpartsGear1def);
            DataRefList.Add(FlightmodelMovingpartsGear2def.Id, FlightmodelMovingpartsGear2def);
            DataRefList.Add(FlightmodelMovingpartsGear3def.Id, FlightmodelMovingpartsGear3def);
            DataRefList.Add(FlightmodelMovingpartsGear4def.Id, FlightmodelMovingpartsGear4def);
            DataRefList.Add(FlightmodelMovingpartsGear5def.Id, FlightmodelMovingpartsGear5def);
            DataRefList.Add(FlightmodelPartsVEl.Id, FlightmodelPartsVEl);
            DataRefList.Add(FlightmodelPartsAlphaEl.Id, FlightmodelPartsAlphaEl);
            DataRefList.Add(FlightmodelPartsDelDir.Id, FlightmodelPartsDelDir);
            DataRefList.Add(FlightmodelPartsClElRaw.Id, FlightmodelPartsClElRaw);
            DataRefList.Add(FlightmodelPartsCLGrndeffect.Id, FlightmodelPartsCLGrndeffect);
            DataRefList.Add(FlightmodelPartsCDGrndeffect.Id, FlightmodelPartsCDGrndeffect);
            DataRefList.Add(FlightmodelPartsWashGrndeffect.Id, FlightmodelPartsWashGrndeffect);
            DataRefList.Add(FlightmodelPartsQCentroidLoc.Id, FlightmodelPartsQCentroidLoc);
            DataRefList.Add(FlightmodelPartsQCentroidMULT.Id, FlightmodelPartsQCentroidMULT);
            DataRefList.Add(FlightmodelPartsTireDragDis.Id, FlightmodelPartsTireDragDis);
            DataRefList.Add(FlightmodelPartsTireSpeedTerm.Id, FlightmodelPartsTireSpeedTerm);
            DataRefList.Add(FlightmodelPartsTireSpeedNow.Id, FlightmodelPartsTireSpeedNow);
            DataRefList.Add(FlightmodelPartsTirePropRot.Id, FlightmodelPartsTirePropRot);
            DataRefList.Add(FlightmodelPartsTireXNoDeflection.Id, FlightmodelPartsTireXNoDeflection);
            DataRefList.Add(FlightmodelPartsTireYNoDeflection.Id, FlightmodelPartsTireYNoDeflection);
            DataRefList.Add(FlightmodelPartsTireZNoDeflection.Id, FlightmodelPartsTireZNoDeflection);
            DataRefList.Add(FlightmodelPartsTireVrtDefVeh.Id, FlightmodelPartsTireVrtDefVeh);
            DataRefList.Add(FlightmodelPartsTireVrtFrcVeh.Id, FlightmodelPartsTireVrtFrcVeh);
            DataRefList.Add(FlightmodelPartsTireSteerCmd.Id, FlightmodelPartsTireSteerCmd);
            DataRefList.Add(FlightmodelPartsTireSteerAct.Id, FlightmodelPartsTireSteerAct);
            DataRefList.Add(FlightmodelPartsNrmlForce.Id, FlightmodelPartsNrmlForce);
            DataRefList.Add(FlightmodelPartsAxilForce.Id, FlightmodelPartsAxilForce);
            DataRefList.Add(FlightmodelPartsFlapDef.Id, FlightmodelPartsFlapDef);
            DataRefList.Add(FlightmodelPartsFlap2Def.Id, FlightmodelPartsFlap2Def);
            DataRefList.Add(FlightmodelPartsElevContDef.Id, FlightmodelPartsElevContDef);
            DataRefList.Add(FlightmodelPartsElevTrimDef.Id, FlightmodelPartsElevTrimDef);
            DataRefList.Add(FlightmodelPartsRuddContDef.Id, FlightmodelPartsRuddContDef);
            DataRefList.Add(FlightmodelPartsRudd2ContDef.Id, FlightmodelPartsRudd2ContDef);
            DataRefList.Add(FlightmodelPartsElemInc.Id, FlightmodelPartsElemInc);
            DataRefList.Add(FlightmodelPositionLocalX.Id, FlightmodelPositionLocalX);
            DataRefList.Add(FlightmodelPositionLocalY.Id, FlightmodelPositionLocalY);
            DataRefList.Add(FlightmodelPositionLocalZ.Id, FlightmodelPositionLocalZ);
            DataRefList.Add(FlightmodelPositionLatRef.Id, FlightmodelPositionLatRef);
            DataRefList.Add(FlightmodelPositionLonRef.Id, FlightmodelPositionLonRef);
            DataRefList.Add(FlightmodelPositionLatitude.Id, FlightmodelPositionLatitude);
            DataRefList.Add(FlightmodelPositionLongitude.Id, FlightmodelPositionLongitude);
            DataRefList.Add(FlightmodelPositionElevation.Id, FlightmodelPositionElevation);
            DataRefList.Add(FlightmodelPositionTheta.Id, FlightmodelPositionTheta);
            DataRefList.Add(FlightmodelPositionPhi.Id, FlightmodelPositionPhi);
            DataRefList.Add(FlightmodelPositionPsi.Id, FlightmodelPositionPsi);
            DataRefList.Add(FlightmodelPositionMagpsi.Id, FlightmodelPositionMagpsi);
            DataRefList.Add(FlightmodelPositionTrueTheta.Id, FlightmodelPositionTrueTheta);
            DataRefList.Add(FlightmodelPositionTruePhi.Id, FlightmodelPositionTruePhi);
            DataRefList.Add(FlightmodelPositionTruePsi.Id, FlightmodelPositionTruePsi);
            DataRefList.Add(FlightmodelPositionMagPsi.Id, FlightmodelPositionMagPsi);
            DataRefList.Add(FlightmodelPositionLocalVx.Id, FlightmodelPositionLocalVx);
            DataRefList.Add(FlightmodelPositionLocalVy.Id, FlightmodelPositionLocalVy);
            DataRefList.Add(FlightmodelPositionLocalVz.Id, FlightmodelPositionLocalVz);
            DataRefList.Add(FlightmodelPositionLocalAx.Id, FlightmodelPositionLocalAx);
            DataRefList.Add(FlightmodelPositionLocalAy.Id, FlightmodelPositionLocalAy);
            DataRefList.Add(FlightmodelPositionLocalAz.Id, FlightmodelPositionLocalAz);
            DataRefList.Add(FlightmodelPositionAlpha.Id, FlightmodelPositionAlpha);
            DataRefList.Add(FlightmodelPositionBeta.Id, FlightmodelPositionBeta);
            DataRefList.Add(FlightmodelPositionVpath.Id, FlightmodelPositionVpath);
            DataRefList.Add(FlightmodelPositionHpath.Id, FlightmodelPositionHpath);
            DataRefList.Add(FlightmodelPositionGroundspeed.Id, FlightmodelPositionGroundspeed);
            DataRefList.Add(FlightmodelPositionIndicatedAirspeed.Id, FlightmodelPositionIndicatedAirspeed);
            DataRefList.Add(FlightmodelPositionIndicatedAirspeed2.Id, FlightmodelPositionIndicatedAirspeed2);
            DataRefList.Add(FlightmodelPositionTrueAirspeed.Id, FlightmodelPositionTrueAirspeed);
            DataRefList.Add(FlightmodelPositionMagneticVariation.Id, FlightmodelPositionMagneticVariation);
            DataRefList.Add(FlightmodelPositionM.Id, FlightmodelPositionM);
            DataRefList.Add(FlightmodelPositionN.Id, FlightmodelPositionN);
            DataRefList.Add(FlightmodelPositionL.Id, FlightmodelPositionL);
            DataRefList.Add(FlightmodelPositionP.Id, FlightmodelPositionP);
            DataRefList.Add(FlightmodelPositionQ.Id, FlightmodelPositionQ);
            DataRefList.Add(FlightmodelPositionR.Id, FlightmodelPositionR);
            DataRefList.Add(FlightmodelPositionPDot.Id, FlightmodelPositionPDot);
            DataRefList.Add(FlightmodelPositionQDot.Id, FlightmodelPositionQDot);
            DataRefList.Add(FlightmodelPositionRDot.Id, FlightmodelPositionRDot);
            DataRefList.Add(FlightmodelPositionPrad.Id, FlightmodelPositionPrad);
            DataRefList.Add(FlightmodelPositionQrad.Id, FlightmodelPositionQrad);
            DataRefList.Add(FlightmodelPositionRrad.Id, FlightmodelPositionRrad);
            DataRefList.Add(FlightmodelPositionq.Id, FlightmodelPositionq);
            DataRefList.Add(FlightmodelPositionVhInd.Id, FlightmodelPositionVhInd);
            DataRefList.Add(FlightmodelPositionVhIndFpm.Id, FlightmodelPositionVhIndFpm);
            DataRefList.Add(FlightmodelPositionVhIndFpm2.Id, FlightmodelPositionVhIndFpm2);
            DataRefList.Add(FlightmodelPositionYAgl.Id, FlightmodelPositionYAgl);
            DataRefList.Add(FlightmodelTransmissionsXmsnPress.Id, FlightmodelTransmissionsXmsnPress);
            DataRefList.Add(FlightmodelTransmissionsXmsnTemp.Id, FlightmodelTransmissionsXmsnTemp);
            DataRefList.Add(FlightmodelWeightMFixed.Id, FlightmodelWeightMFixed);
            DataRefList.Add(FlightmodelWeightMTotal.Id, FlightmodelWeightMTotal);
            DataRefList.Add(FlightmodelWeightMFuel.Id, FlightmodelWeightMFuel);
            DataRefList.Add(FlightmodelWeightMFuel1.Id, FlightmodelWeightMFuel1);
            DataRefList.Add(FlightmodelWeightMFuel2.Id, FlightmodelWeightMFuel2);
            DataRefList.Add(FlightmodelWeightMFuel3.Id, FlightmodelWeightMFuel3);
            DataRefList.Add(FlightmodelWeightMJettison.Id, FlightmodelWeightMJettison);
            DataRefList.Add(FlightmodelWeightMFuelTotal.Id, FlightmodelWeightMFuelTotal);
            DataRefList.Add(GraphicsAnimationDrawObjectX.Id, GraphicsAnimationDrawObjectX);
            DataRefList.Add(GraphicsAnimationDrawObjectY.Id, GraphicsAnimationDrawObjectY);
            DataRefList.Add(GraphicsAnimationDrawObjectZ.Id, GraphicsAnimationDrawObjectZ);
            DataRefList.Add(GraphicsAnimationDrawObjectPsi.Id, GraphicsAnimationDrawObjectPsi);
            DataRefList.Add(GraphicsAnimationDrawLightLevel.Id, GraphicsAnimationDrawLightLevel);
            DataRefList.Add(GraphicsAnimationAirportBeaconRotation.Id, GraphicsAnimationAirportBeaconRotation);
            DataRefList.Add(GraphicsAnimationAirportBeaconRotationMilitary.Id, GraphicsAnimationAirportBeaconRotationMilitary);
            DataRefList.Add(GraphicsAnimationWindsockPsi.Id, GraphicsAnimationWindsockPsi);
            DataRefList.Add(GraphicsAnimationWindsockThe.Id, GraphicsAnimationWindsockThe);
            DataRefList.Add(GraphicsAnimationWindsockPhi.Id, GraphicsAnimationWindsockPhi);
            DataRefList.Add(GraphicsAnimationCranePsi.Id, GraphicsAnimationCranePsi);
            DataRefList.Add(GraphicsAnimationBuoyHeight.Id, GraphicsAnimationBuoyHeight);
            DataRefList.Add(GraphicsAnimationPingPong2.Id, GraphicsAnimationPingPong2);
            DataRefList.Add(GraphicsAnimationSinWave2.Id, GraphicsAnimationSinWave2);
            DataRefList.Add(GraphicsAnimationObjWigwagBrightness.Id, GraphicsAnimationObjWigwagBrightness);
            DataRefList.Add(GraphicsAnimationCarrierBlastDefLf.Id, GraphicsAnimationCarrierBlastDefLf);
            DataRefList.Add(GraphicsAnimationCarrierBlastDefRf.Id, GraphicsAnimationCarrierBlastDefRf);
            DataRefList.Add(GraphicsAnimationCarrierBlastDefLr.Id, GraphicsAnimationCarrierBlastDefLr);
            DataRefList.Add(GraphicsAnimationCarrierBlastDefRr.Id, GraphicsAnimationCarrierBlastDefRr);
            DataRefList.Add(GraphicsAnimationLevelCrossingGate.Id, GraphicsAnimationLevelCrossingGate);
            DataRefList.Add(GraphicsAnimationBirdsWingFlapDeg.Id, GraphicsAnimationBirdsWingFlapDeg);
            DataRefList.Add(GraphicsAnimationBirdsFeetRetractDeg.Id, GraphicsAnimationBirdsFeetRetractDeg);
            DataRefList.Add(GraphicsAnimationDeerDeerRunCycle.Id, GraphicsAnimationDeerDeerRunCycle);
            DataRefList.Add(GraphicsAnimationDeerDeerTurnCycle.Id, GraphicsAnimationDeerDeerTurnCycle);
            DataRefList.Add(GraphicsAnimationLightsFlasher.Id, GraphicsAnimationLightsFlasher);
            DataRefList.Add(GraphicsAnimationLightsPulse.Id, GraphicsAnimationLightsPulse);
            DataRefList.Add(GraphicsAnimationLightsStrobeV7.Id, GraphicsAnimationLightsStrobeV7);
            DataRefList.Add(GraphicsAnimationLightsTrafficLight.Id, GraphicsAnimationLightsTrafficLight);
            DataRefList.Add(GraphicsAnimationLightsNormal.Id, GraphicsAnimationLightsNormal);
            DataRefList.Add(GraphicsAnimationLightsVasiPapi.Id, GraphicsAnimationLightsVasiPapi);
            DataRefList.Add(GraphicsAnimationLightsVasi3.Id, GraphicsAnimationLightsVasi3);
            DataRefList.Add(GraphicsAnimationLightsRabbit.Id, GraphicsAnimationLightsRabbit);
            DataRefList.Add(GraphicsAnimationLightsRabbitSp.Id, GraphicsAnimationLightsRabbitSp);
            DataRefList.Add(GraphicsAnimationLightsStrobe.Id, GraphicsAnimationLightsStrobe);
            DataRefList.Add(GraphicsAnimationLightsStrobeSp.Id, GraphicsAnimationLightsStrobeSp);
            DataRefList.Add(GraphicsAnimationLightsWigwag.Id, GraphicsAnimationLightsWigwag);
            DataRefList.Add(GraphicsAnimationLightsWigwagSp.Id, GraphicsAnimationLightsWigwagSp);
            DataRefList.Add(GraphicsAnimationLightsCarrierWaveoff.Id, GraphicsAnimationLightsCarrierWaveoff);
            DataRefList.Add(GraphicsAnimationLightsFresnelVertical.Id, GraphicsAnimationLightsFresnelVertical);
            DataRefList.Add(GraphicsAnimationLightsFresnelHorizontal.Id, GraphicsAnimationLightsFresnelHorizontal);
            DataRefList.Add(GraphicsAnimationLightsAirplaneLandingLight.Id, GraphicsAnimationLightsAirplaneLandingLight);
            DataRefList.Add(GraphicsAnimationLightsAirplaneLandingLightFlash.Id, GraphicsAnimationLightsAirplaneLandingLightFlash);
            DataRefList.Add(GraphicsAnimationLightsAirplaneLandingLightSpill.Id, GraphicsAnimationLightsAirplaneLandingLightSpill);
            DataRefList.Add(GraphicsAnimationLightsAirplaneGenericLight.Id, GraphicsAnimationLightsAirplaneGenericLight);
            DataRefList.Add(GraphicsAnimationLightsAirplaneGenericLightFlash.Id, GraphicsAnimationLightsAirplaneGenericLightFlash);
            DataRefList.Add(GraphicsAnimationLightsAirplaneGenericLightSpill.Id, GraphicsAnimationLightsAirplaneGenericLightSpill);
            DataRefList.Add(GraphicsAnimationLightsAirplaneTaxiLight.Id, GraphicsAnimationLightsAirplaneTaxiLight);
            DataRefList.Add(GraphicsAnimationLightsAirplaneTaxiLightFlash.Id, GraphicsAnimationLightsAirplaneTaxiLightFlash);
            DataRefList.Add(GraphicsAnimationLightsAirplaneTaxiLightSpill.Id, GraphicsAnimationLightsAirplaneTaxiLightSpill);
            DataRefList.Add(GraphicsAnimationLightsAirplaneSpotLight.Id, GraphicsAnimationLightsAirplaneSpotLight);
            DataRefList.Add(GraphicsAnimationLightsAirplaneSpotLightFlash.Id, GraphicsAnimationLightsAirplaneSpotLightFlash);
            DataRefList.Add(GraphicsAnimationLightsAirplaneSpotLightSpill.Id, GraphicsAnimationLightsAirplaneSpotLightSpill);
            DataRefList.Add(GraphicsAnimationLightsAirplaneBeaconLight.Id, GraphicsAnimationLightsAirplaneBeaconLight);
            DataRefList.Add(GraphicsAnimationLightsAirplaneNavigationLight.Id, GraphicsAnimationLightsAirplaneNavigationLight);
            DataRefList.Add(GraphicsAnimationLightsAirplaneStrobeLight.Id, GraphicsAnimationLightsAirplaneStrobeLight);
            DataRefList.Add(GraphicsAnimationLightsAirplaneBeaconLightDir.Id, GraphicsAnimationLightsAirplaneBeaconLightDir);
            DataRefList.Add(GraphicsAnimationLightsAirplaneNavigationLightDir.Id, GraphicsAnimationLightsAirplaneNavigationLightDir);
            DataRefList.Add(GraphicsAnimationLightsAirplaneStrobeLightDir.Id, GraphicsAnimationLightsAirplaneStrobeLightDir);
            DataRefList.Add(GraphicsAnimationLightsAirplaneBeaconLightSpill.Id, GraphicsAnimationLightsAirplaneBeaconLightSpill);
            DataRefList.Add(GraphicsAnimationLightsAirplaneNavigationLightSpill.Id, GraphicsAnimationLightsAirplaneNavigationLightSpill);
            DataRefList.Add(GraphicsAnimationLightsAirplaneStrobeLightSpill.Id, GraphicsAnimationLightsAirplaneStrobeLightSpill);
            DataRefList.Add(GraphicsAnimationLightsAirplanePanelSpill.Id, GraphicsAnimationLightsAirplanePanelSpill);
            DataRefList.Add(GraphicsAnimationLightsAirplaneInstSpill.Id, GraphicsAnimationLightsAirplaneInstSpill);
            DataRefList.Add(GraphicsAnimationLightsAirplaneBeaconLightRotate.Id, GraphicsAnimationLightsAirplaneBeaconLightRotate);
            DataRefList.Add(GraphicsAnimationLightsAirplaneBeaconLightRotateSpill.Id, GraphicsAnimationLightsAirplaneBeaconLightRotateSpill);
            DataRefList.Add(GraphicsAnimationGroundTrafficTireSteerDeg.Id, GraphicsAnimationGroundTrafficTireSteerDeg);
            DataRefList.Add(GraphicsAnimationGroundTrafficTireRotationAngleDeg.Id, GraphicsAnimationGroundTrafficTireRotationAngleDeg);
            DataRefList.Add(GraphicsAnimationGroundTrafficWiperAngleDeg.Id, GraphicsAnimationGroundTrafficWiperAngleDeg);
            DataRefList.Add(GraphicsAnimationGroundTrafficTowbarHeadingDeg.Id, GraphicsAnimationGroundTrafficTowbarHeadingDeg);
            DataRefList.Add(GraphicsAnimationGroundTrafficTowbarPitchDeg.Id, GraphicsAnimationGroundTrafficTowbarPitchDeg);
            DataRefList.Add(GraphicsAnimationGroundTrafficBeltLoaderHeightMeters.Id, GraphicsAnimationGroundTrafficBeltLoaderHeightMeters);
            DataRefList.Add(GraphicsAnimationGroundTrafficDoorOpen.Id, GraphicsAnimationGroundTrafficDoorOpen);
            DataRefList.Add(GraphicsColorsBackgroundRgb.Id, GraphicsColorsBackgroundRgb);
            DataRefList.Add(GraphicsColorsMenuDarkRgb.Id, GraphicsColorsMenuDarkRgb);
            DataRefList.Add(GraphicsColorsMenuHiliteRgb.Id, GraphicsColorsMenuHiliteRgb);
            DataRefList.Add(GraphicsColorsMenuLiteRgb.Id, GraphicsColorsMenuLiteRgb);
            DataRefList.Add(GraphicsColorsMenuTextRgb.Id, GraphicsColorsMenuTextRgb);
            DataRefList.Add(GraphicsColorsMenuTextDisabledRgb.Id, GraphicsColorsMenuTextDisabledRgb);
            DataRefList.Add(GraphicsColorsSubtitleTextRgb.Id, GraphicsColorsSubtitleTextRgb);
            DataRefList.Add(GraphicsColorsTabFrontRgb.Id, GraphicsColorsTabFrontRgb);
            DataRefList.Add(GraphicsColorsTabBackRgb.Id, GraphicsColorsTabBackRgb);
            DataRefList.Add(GraphicsColorsCaptionTextRgb.Id, GraphicsColorsCaptionTextRgb);
            DataRefList.Add(GraphicsColorsListTextRgb.Id, GraphicsColorsListTextRgb);
            DataRefList.Add(GraphicsColorsGlassTextRgb.Id, GraphicsColorsGlassTextRgb);
            DataRefList.Add(GraphicsColorsPlanePath13DRgb.Id, GraphicsColorsPlanePath13DRgb);
            DataRefList.Add(GraphicsColorsPlanePath23DRgb.Id, GraphicsColorsPlanePath23DRgb);
            DataRefList.Add(GraphicsMiscShowPanelClickSpots.Id, GraphicsMiscShowPanelClickSpots);
            DataRefList.Add(GraphicsMiscShowInstrumentDescriptions.Id, GraphicsMiscShowInstrumentDescriptions);
            DataRefList.Add(GraphicsMiscCockpitLightLevelR.Id, GraphicsMiscCockpitLightLevelR);
            DataRefList.Add(GraphicsMiscCockpitLightLevelG.Id, GraphicsMiscCockpitLightLevelG);
            DataRefList.Add(GraphicsMiscCockpitLightLevelB.Id, GraphicsMiscCockpitLightLevelB);
            DataRefList.Add(GraphicsMiscOutsideLightLevelR.Id, GraphicsMiscOutsideLightLevelR);
            DataRefList.Add(GraphicsMiscOutsideLightLevelG.Id, GraphicsMiscOutsideLightLevelG);
            DataRefList.Add(GraphicsMiscOutsideLightLevelB.Id, GraphicsMiscOutsideLightLevelB);
            DataRefList.Add(GraphicsMiscLightAttenuation.Id, GraphicsMiscLightAttenuation);
            DataRefList.Add(GraphicsMiscUseProportionalFonts.Id, GraphicsMiscUseProportionalFonts);
            DataRefList.Add(GraphicsMiscKillMapFmsLine.Id, GraphicsMiscKillMapFmsLine);
            DataRefList.Add(GraphicsMiscKillG1000Ah.Id, GraphicsMiscKillG1000Ah);
            DataRefList.Add(GraphicsMiscRedFlashlightOn.Id, GraphicsMiscRedFlashlightOn);
            DataRefList.Add(GraphicsMiscWhiteFlashlightOn.Id, GraphicsMiscWhiteFlashlightOn);
            DataRefList.Add(GraphicsMiscKillRunwaySnow.Id, GraphicsMiscKillRunwaySnow);
            DataRefList.Add(GraphicsMiscDefaultScrollPos.Id, GraphicsMiscDefaultScrollPos);
            DataRefList.Add(GraphicsMiscCurrentScrollPos.Id, GraphicsMiscCurrentScrollPos);
            DataRefList.Add(GraphicsMiscDefaultScrollPosX.Id, GraphicsMiscDefaultScrollPosX);
            DataRefList.Add(GraphicsMiscCurrentScrollPosX.Id, GraphicsMiscCurrentScrollPosX);
            DataRefList.Add(GraphicsSceneryCurrentPlanet.Id, GraphicsSceneryCurrentPlanet);
            DataRefList.Add(GraphicsSceneryPercentLightsOn.Id, GraphicsSceneryPercentLightsOn);
            DataRefList.Add(GraphicsScenerySunPitchDegrees.Id, GraphicsScenerySunPitchDegrees);
            DataRefList.Add(GraphicsScenerySunHeadingDegrees.Id, GraphicsScenerySunHeadingDegrees);
            DataRefList.Add(GraphicsSceneryMoonPitchDegrees.Id, GraphicsSceneryMoonPitchDegrees);
            DataRefList.Add(GraphicsSceneryMoonHeadingDegrees.Id, GraphicsSceneryMoonHeadingDegrees);
            DataRefList.Add(GraphicsSceneryAirportLightLevel.Id, GraphicsSceneryAirportLightLevel);
            DataRefList.Add(GraphicsSceneryAirportLightsOn.Id, GraphicsSceneryAirportLightsOn);
            DataRefList.Add(GraphicsSceneryAsyncSceneryLoadInProgress.Id, GraphicsSceneryAsyncSceneryLoadInProgress);
            DataRefList.Add(GraphicsSettingsRenderingRes.Id, GraphicsSettingsRenderingRes);
            DataRefList.Add(GraphicsSettingsDimGload.Id, GraphicsSettingsDimGload);
            DataRefList.Add(GraphicsSettingsDrawForestfires.Id, GraphicsSettingsDrawForestfires);
            DataRefList.Add(GraphicsSettingsNonProportionalVerticalFOV.Id, GraphicsSettingsNonProportionalVerticalFOV);
            DataRefList.Add(GraphicsSettingsHDROn.Id, GraphicsSettingsHDROn);
            DataRefList.Add(GraphicsSettingsScatteringOn.Id, GraphicsSettingsScatteringOn);
            DataRefList.Add(GraphicsViewViewType.Id, GraphicsViewViewType);
            DataRefList.Add(GraphicsViewPanelRenderType.Id, GraphicsViewPanelRenderType);
            DataRefList.Add(GraphicsViewPanelRenderNewBlending.Id, GraphicsViewPanelRenderNewBlending);
            DataRefList.Add(GraphicsViewWorldRenderType.Id, GraphicsViewWorldRenderType);
            DataRefList.Add(GraphicsViewPlaneRenderType.Id, GraphicsViewPlaneRenderType);
            DataRefList.Add(GraphicsViewDrawCallType.Id, GraphicsViewDrawCallType);
            DataRefList.Add(GraphicsViewViewIsExternal.Id, GraphicsViewViewIsExternal);
            DataRefList.Add(GraphicsViewViewX.Id, GraphicsViewViewX);
            DataRefList.Add(GraphicsViewViewY.Id, GraphicsViewViewY);
            DataRefList.Add(GraphicsViewViewZ.Id, GraphicsViewViewZ);
            DataRefList.Add(GraphicsViewViewPitch.Id, GraphicsViewViewPitch);
            DataRefList.Add(GraphicsViewViewRoll.Id, GraphicsViewViewRoll);
            DataRefList.Add(GraphicsViewViewHeading.Id, GraphicsViewViewHeading);
            DataRefList.Add(GraphicsViewCockpitPitch.Id, GraphicsViewCockpitPitch);
            DataRefList.Add(GraphicsViewCockpitRoll.Id, GraphicsViewCockpitRoll);
            DataRefList.Add(GraphicsViewCockpitHeading.Id, GraphicsViewCockpitHeading);
            DataRefList.Add(GraphicsViewFieldOfViewDeg.Id, GraphicsViewFieldOfViewDeg);
            DataRefList.Add(GraphicsViewVerticalFieldOfViewDeg.Id, GraphicsViewVerticalFieldOfViewDeg);
            DataRefList.Add(GraphicsViewFieldOfViewVerticalDeg.Id, GraphicsViewFieldOfViewVerticalDeg);
            DataRefList.Add(GraphicsViewFieldOfViewHorizontalDeg.Id, GraphicsViewFieldOfViewHorizontalDeg);
            DataRefList.Add(GraphicsViewFieldOfViewRollDeg.Id, GraphicsViewFieldOfViewRollDeg);
            DataRefList.Add(GraphicsViewFieldOfViewHorizontalRatio.Id, GraphicsViewFieldOfViewHorizontalRatio);
            DataRefList.Add(GraphicsViewWindowWidth.Id, GraphicsViewWindowWidth);
            DataRefList.Add(GraphicsViewWindowHeight.Id, GraphicsViewWindowHeight);
            DataRefList.Add(GraphicsViewVisibilityEffectiveM.Id, GraphicsViewVisibilityEffectiveM);
            DataRefList.Add(GraphicsViewVisibilityTerrainM.Id, GraphicsViewVisibilityTerrainM);
            DataRefList.Add(GraphicsViewVisibilityFramerateRatio.Id, GraphicsViewVisibilityFramerateRatio);
            DataRefList.Add(GraphicsViewVisibilityMathLevel.Id, GraphicsViewVisibilityMathLevel);
            DataRefList.Add(GraphicsViewCinemaVerite.Id, GraphicsViewCinemaVerite);
            DataRefList.Add(GraphicsViewPanelTotalPnlL.Id, GraphicsViewPanelTotalPnlL);
            DataRefList.Add(GraphicsViewPanelTotalPnlB.Id, GraphicsViewPanelTotalPnlB);
            DataRefList.Add(GraphicsViewPanelTotalPnlR.Id, GraphicsViewPanelTotalPnlR);
            DataRefList.Add(GraphicsViewPanelTotalPnlT.Id, GraphicsViewPanelTotalPnlT);
            DataRefList.Add(GraphicsViewPanelVisiblePnlL.Id, GraphicsViewPanelVisiblePnlL);
            DataRefList.Add(GraphicsViewPanelVisiblePnlB.Id, GraphicsViewPanelVisiblePnlB);
            DataRefList.Add(GraphicsViewPanelVisiblePnlR.Id, GraphicsViewPanelVisiblePnlR);
            DataRefList.Add(GraphicsViewPanelVisiblePnlT.Id, GraphicsViewPanelVisiblePnlT);
            DataRefList.Add(GraphicsViewPanelTotalWinL.Id, GraphicsViewPanelTotalWinL);
            DataRefList.Add(GraphicsViewPanelTotalWinB.Id, GraphicsViewPanelTotalWinB);
            DataRefList.Add(GraphicsViewPanelTotalWinR.Id, GraphicsViewPanelTotalWinR);
            DataRefList.Add(GraphicsViewPanelTotalWinT.Id, GraphicsViewPanelTotalWinT);
            DataRefList.Add(GraphicsViewPanelVisibleWinL.Id, GraphicsViewPanelVisibleWinL);
            DataRefList.Add(GraphicsViewPanelVisibleWinB.Id, GraphicsViewPanelVisibleWinB);
            DataRefList.Add(GraphicsViewPanelVisibleWinR.Id, GraphicsViewPanelVisibleWinR);
            DataRefList.Add(GraphicsViewPanelVisibleWinT.Id, GraphicsViewPanelVisibleWinT);
            DataRefList.Add(GraphicsViewPilotsHeadX.Id, GraphicsViewPilotsHeadX);
            DataRefList.Add(GraphicsViewPilotsHeadY.Id, GraphicsViewPilotsHeadY);
            DataRefList.Add(GraphicsViewPilotsHeadZ.Id, GraphicsViewPilotsHeadZ);
            DataRefList.Add(GraphicsViewPilotsHeadPsi.Id, GraphicsViewPilotsHeadPsi);
            DataRefList.Add(GraphicsViewPilotsHeadThe.Id, GraphicsViewPilotsHeadThe);
            DataRefList.Add(GraphicsViewPilotsHeadPhi.Id, GraphicsViewPilotsHeadPhi);
            DataRefList.Add(GraphicsViewClick3DX.Id, GraphicsViewClick3DX);
            DataRefList.Add(GraphicsViewClick3DY.Id, GraphicsViewClick3DY);
            DataRefList.Add(GraphicsViewClick3DXPixels.Id, GraphicsViewClick3DXPixels);
            DataRefList.Add(GraphicsViewClick3DYPixels.Id, GraphicsViewClick3DYPixels);
            DataRefList.Add(GraphicsViewLocalMapL.Id, GraphicsViewLocalMapL);
            DataRefList.Add(GraphicsViewLocalMapB.Id, GraphicsViewLocalMapB);
            DataRefList.Add(GraphicsViewLocalMapR.Id, GraphicsViewLocalMapR);
            DataRefList.Add(GraphicsViewLocalMapT.Id, GraphicsViewLocalMapT);
            DataRefList.Add(GraphicsViewDomeOffsetHeading.Id, GraphicsViewDomeOffsetHeading);
            DataRefList.Add(GraphicsViewDomeOffsetPitch.Id, GraphicsViewDomeOffsetPitch);
            DataRefList.Add(GraphicsViewEqTrackir.Id, GraphicsViewEqTrackir);
            DataRefList.Add(GraphicsViewHideYoke.Id, GraphicsViewHideYoke);
            DataRefList.Add(GraphicsViewProjectionMatrix.Id, GraphicsViewProjectionMatrix);
            DataRefList.Add(GraphicsViewProjectionMatrix3D.Id, GraphicsViewProjectionMatrix3D);
            DataRefList.Add(GraphicsViewWorldMatrix.Id, GraphicsViewWorldMatrix);
            DataRefList.Add(GraphicsViewAcfMatrix.Id, GraphicsViewAcfMatrix);
            DataRefList.Add(GraphicsViewModelviewMatrix.Id, GraphicsViewModelviewMatrix);
            DataRefList.Add(GraphicsViewViewport.Id, GraphicsViewViewport);
            DataRefList.Add(GraphicsViewIsReverseFloatZ.Id, GraphicsViewIsReverseFloatZ);
            DataRefList.Add(GraphicsViewIsReverseY.Id, GraphicsViewIsReverseY);
            DataRefList.Add(GraphicsViewUsingModernDriver.Id, GraphicsViewUsingModernDriver);
            DataRefList.Add(GraphicsViewCurrentGlFbo.Id, GraphicsViewCurrentGlFbo);
            DataRefList.Add(GraphicsViewHardwareMsaaSamples.Id, GraphicsViewHardwareMsaaSamples);
            DataRefList.Add(JoystickHasJoystick.Id, JoystickHasJoystick);
            DataRefList.Add(JoystickMouseIsJoystick.Id, JoystickMouseIsJoystick);
            DataRefList.Add(JoystickMouseCanBeJoystick.Id, JoystickMouseCanBeJoystick);
            DataRefList.Add(JoystickYokePitchRatio.Id, JoystickYokePitchRatio);
            DataRefList.Add(JoystickYolkPitchRatio.Id, JoystickYolkPitchRatio);
            DataRefList.Add(JoystickYokeRollRatio.Id, JoystickYokeRollRatio);
            DataRefList.Add(JoystickYolkRollRatio.Id, JoystickYolkRollRatio);
            DataRefList.Add(JoystickYokeHeadingRatio.Id, JoystickYokeHeadingRatio);
            DataRefList.Add(JoystickYolkHeadingRatio.Id, JoystickYolkHeadingRatio);
            DataRefList.Add(JoystickArtstabPitchRatio.Id, JoystickArtstabPitchRatio);
            DataRefList.Add(JoystickArtstabRollRatio.Id, JoystickArtstabRollRatio);
            DataRefList.Add(JoystickArtstabHeadingRatio.Id, JoystickArtstabHeadingRatio);
            DataRefList.Add(JoystickServoPitchRatio.Id, JoystickServoPitchRatio);
            DataRefList.Add(JoystickServoRollRatio.Id, JoystickServoRollRatio);
            DataRefList.Add(JoystickServoHeadingRatio.Id, JoystickServoHeadingRatio);
            DataRefList.Add(JoystickFCHdng.Id, JoystickFCHdng);
            DataRefList.Add(JoystickFCPtch.Id, JoystickFCPtch);
            DataRefList.Add(JoystickFCRoll.Id, JoystickFCRoll);
            DataRefList.Add(JoystickJoystickPitchNullzone.Id, JoystickJoystickPitchNullzone);
            DataRefList.Add(JoystickJoystickRollNullzone.Id, JoystickJoystickRollNullzone);
            DataRefList.Add(JoystickJoystickHeadingNullzone.Id, JoystickJoystickHeadingNullzone);
            DataRefList.Add(JoystickJoystickPitchCenter.Id, JoystickJoystickPitchCenter);
            DataRefList.Add(JoystickJoystickRollCenter.Id, JoystickJoystickRollCenter);
            DataRefList.Add(JoystickJoystickHeadingCenter.Id, JoystickJoystickHeadingCenter);
            DataRefList.Add(JoystickJoystickPitchAugment.Id, JoystickJoystickPitchAugment);
            DataRefList.Add(JoystickJoystickRollAugment.Id, JoystickJoystickRollAugment);
            DataRefList.Add(JoystickJoystickHeadingAugment.Id, JoystickJoystickHeadingAugment);
            DataRefList.Add(JoystickJoystickPitchSensitivity.Id, JoystickJoystickPitchSensitivity);
            DataRefList.Add(JoystickJoystickRollSensitivity.Id, JoystickJoystickRollSensitivity);
            DataRefList.Add(JoystickJoystickHeadingSensitivity.Id, JoystickJoystickHeadingSensitivity);
            DataRefList.Add(JoystickJoystickAxisAssignments.Id, JoystickJoystickAxisAssignments);
            DataRefList.Add(JoystickJoystickButtonAssignments.Id, JoystickJoystickButtonAssignments);
            DataRefList.Add(JoystickJoystickAxisReverse.Id, JoystickJoystickAxisReverse);
            DataRefList.Add(JoystickJoystickAxisValues.Id, JoystickJoystickAxisValues);
            DataRefList.Add(JoystickJoystickAxisMinimum.Id, JoystickJoystickAxisMinimum);
            DataRefList.Add(JoystickJoystickAxisMaximum.Id, JoystickJoystickAxisMaximum);
            DataRefList.Add(JoystickJoystickButtonValues.Id, JoystickJoystickButtonValues);
            DataRefList.Add(JoystickJoyMappedAxisAvail.Id, JoystickJoyMappedAxisAvail);
            DataRefList.Add(JoystickJoyMappedAxisValue.Id, JoystickJoyMappedAxisValue);
            DataRefList.Add(JoystickEqPedNobrk.Id, JoystickEqPedNobrk);
            DataRefList.Add(JoystickEqPedWibrk.Id, JoystickEqPedWibrk);
            DataRefList.Add(JoystickEqPfcPedals.Id, JoystickEqPfcPedals);
            DataRefList.Add(JoystickEqPfcYoke.Id, JoystickEqPfcYoke);
            DataRefList.Add(JoystickEqPfcThrot.Id, JoystickEqPfcThrot);
            DataRefList.Add(JoystickEqPfcAvio.Id, JoystickEqPfcAvio);
            DataRefList.Add(JoystickEqPfcCentercon.Id, JoystickEqPfcCentercon);
            DataRefList.Add(JoystickEqPfcElecTrim.Id, JoystickEqPfcElecTrim);
            DataRefList.Add(JoystickEqPfcBrakeTog.Id, JoystickEqPfcBrakeTog);
            DataRefList.Add(JoystickEqPfcDualCowl.Id, JoystickEqPfcDualCowl);
            DataRefList.Add(JoystickFireKeyIsDown.Id, JoystickFireKeyIsDown);
            DataRefList.Add(JoystickHasCertifiedRoll.Id, JoystickHasCertifiedRoll);
            DataRefList.Add(JoystickHasCertifiedPitch.Id, JoystickHasCertifiedPitch);
            DataRefList.Add(JoystickHasCertifiedHeading.Id, JoystickHasCertifiedHeading);
            DataRefList.Add(JoystickHasCertifiedBrakes.Id, JoystickHasCertifiedBrakes);
            DataRefList.Add(JoystickHasCertifiedThrottle.Id, JoystickHasCertifiedThrottle);
            DataRefList.Add(JoystickHasCertifiedProp.Id, JoystickHasCertifiedProp);
            DataRefList.Add(JoystickHasCertifiedMixture.Id, JoystickHasCertifiedMixture);
            DataRefList.Add(MultiplayerControlsYokePitchRatio.Id, MultiplayerControlsYokePitchRatio);
            DataRefList.Add(MultiplayerControlsYokeRollRatio.Id, MultiplayerControlsYokeRollRatio);
            DataRefList.Add(MultiplayerControlsYokeHeadingRatio.Id, MultiplayerControlsYokeHeadingRatio);
            DataRefList.Add(MultiplayerControlsGearRequest.Id, MultiplayerControlsGearRequest);
            DataRefList.Add(MultiplayerControlsFlapRequest.Id, MultiplayerControlsFlapRequest);
            DataRefList.Add(MultiplayerControlsSpeedBrakeRequest.Id, MultiplayerControlsSpeedBrakeRequest);
            DataRefList.Add(MultiplayerControlsVectorRequest.Id, MultiplayerControlsVectorRequest);
            DataRefList.Add(MultiplayerControlsSweepRequest.Id, MultiplayerControlsSweepRequest);
            DataRefList.Add(MultiplayerControlsIncidenceRequest.Id, MultiplayerControlsIncidenceRequest);
            DataRefList.Add(MultiplayerControlsDihedralRequest.Id, MultiplayerControlsDihedralRequest);
            DataRefList.Add(MultiplayerControlsTailLockRatio.Id, MultiplayerControlsTailLockRatio);
            DataRefList.Add(MultiplayerControlsLBrakeAdd.Id, MultiplayerControlsLBrakeAdd);
            DataRefList.Add(MultiplayerControlsRBrakeAdd.Id, MultiplayerControlsRBrakeAdd);
            DataRefList.Add(MultiplayerControlsParkingBrake.Id, MultiplayerControlsParkingBrake);
            DataRefList.Add(MultiplayerControlsAileronTrim.Id, MultiplayerControlsAileronTrim);
            DataRefList.Add(MultiplayerControlsElevatorTrim.Id, MultiplayerControlsElevatorTrim);
            DataRefList.Add(MultiplayerControlsRotorTrim.Id, MultiplayerControlsRotorTrim);
            DataRefList.Add(MultiplayerControlsRudderTrim.Id, MultiplayerControlsRudderTrim);
            DataRefList.Add(MultiplayerControlsEngineThrottleRequest.Id, MultiplayerControlsEngineThrottleRequest);
            DataRefList.Add(MultiplayerControlsEnginePropRequest.Id, MultiplayerControlsEnginePropRequest);
            DataRefList.Add(MultiplayerControlsEnginePitchRequest.Id, MultiplayerControlsEnginePitchRequest);
            DataRefList.Add(MultiplayerControlsEngineMixtureRequest.Id, MultiplayerControlsEngineMixtureRequest);
            DataRefList.Add(MultiplayerPositionPlane1X.Id, MultiplayerPositionPlane1X);
            DataRefList.Add(MultiplayerPositionPlane1Y.Id, MultiplayerPositionPlane1Y);
            DataRefList.Add(MultiplayerPositionPlane1Z.Id, MultiplayerPositionPlane1Z);
            DataRefList.Add(MultiplayerPositionPlane1The.Id, MultiplayerPositionPlane1The);
            DataRefList.Add(MultiplayerPositionPlane1Phi.Id, MultiplayerPositionPlane1Phi);
            DataRefList.Add(MultiplayerPositionPlane1Psi.Id, MultiplayerPositionPlane1Psi);
            DataRefList.Add(MultiplayerPositionPlane1GearDeploy.Id, MultiplayerPositionPlane1GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane1FlapRatio.Id, MultiplayerPositionPlane1FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane1FlapRatio2.Id, MultiplayerPositionPlane1FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane1SpoilerRatio.Id, MultiplayerPositionPlane1SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane1SpeedbrakeRatio.Id, MultiplayerPositionPlane1SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane1SlatRatio.Id, MultiplayerPositionPlane1SlatRatio);
            DataRefList.Add(MultiplayerPositionPlane1WingSweep.Id, MultiplayerPositionPlane1WingSweep);
            DataRefList.Add(MultiplayerPositionPlane1Throttle.Id, MultiplayerPositionPlane1Throttle);
            DataRefList.Add(MultiplayerPositionPlane1YolkPitch.Id, MultiplayerPositionPlane1YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane1YolkRoll.Id, MultiplayerPositionPlane1YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane1YolkYaw.Id, MultiplayerPositionPlane1YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane2X.Id, MultiplayerPositionPlane2X);
            DataRefList.Add(MultiplayerPositionPlane2Y.Id, MultiplayerPositionPlane2Y);
            DataRefList.Add(MultiplayerPositionPlane2Z.Id, MultiplayerPositionPlane2Z);
            DataRefList.Add(MultiplayerPositionPlane2The.Id, MultiplayerPositionPlane2The);
            DataRefList.Add(MultiplayerPositionPlane2Phi.Id, MultiplayerPositionPlane2Phi);
            DataRefList.Add(MultiplayerPositionPlane2Psi.Id, MultiplayerPositionPlane2Psi);
            DataRefList.Add(MultiplayerPositionPlane2GearDeploy.Id, MultiplayerPositionPlane2GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane2FlapRatio.Id, MultiplayerPositionPlane2FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane2FlapRatio2.Id, MultiplayerPositionPlane2FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane2SpoilerRatio.Id, MultiplayerPositionPlane2SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane2SpeedbrakeRatio.Id, MultiplayerPositionPlane2SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane2Sla1Ratio.Id, MultiplayerPositionPlane2Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane2WingSweep.Id, MultiplayerPositionPlane2WingSweep);
            DataRefList.Add(MultiplayerPositionPlane2Throttle.Id, MultiplayerPositionPlane2Throttle);
            DataRefList.Add(MultiplayerPositionPlane2YolkPitch.Id, MultiplayerPositionPlane2YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane2YolkRoll.Id, MultiplayerPositionPlane2YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane2YolkYaw.Id, MultiplayerPositionPlane2YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane3X.Id, MultiplayerPositionPlane3X);
            DataRefList.Add(MultiplayerPositionPlane3Y.Id, MultiplayerPositionPlane3Y);
            DataRefList.Add(MultiplayerPositionPlane3Z.Id, MultiplayerPositionPlane3Z);
            DataRefList.Add(MultiplayerPositionPlane3The.Id, MultiplayerPositionPlane3The);
            DataRefList.Add(MultiplayerPositionPlane3Phi.Id, MultiplayerPositionPlane3Phi);
            DataRefList.Add(MultiplayerPositionPlane3Psi.Id, MultiplayerPositionPlane3Psi);
            DataRefList.Add(MultiplayerPositionPlane3GearDeploy.Id, MultiplayerPositionPlane3GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane3FlapRatio.Id, MultiplayerPositionPlane3FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane3FlapRatio2.Id, MultiplayerPositionPlane3FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane3SpoilerRatio.Id, MultiplayerPositionPlane3SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane3SpeedbrakeRatio.Id, MultiplayerPositionPlane3SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane3Sla1Ratio.Id, MultiplayerPositionPlane3Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane3WingSweep.Id, MultiplayerPositionPlane3WingSweep);
            DataRefList.Add(MultiplayerPositionPlane3Throttle.Id, MultiplayerPositionPlane3Throttle);
            DataRefList.Add(MultiplayerPositionPlane3YolkPitch.Id, MultiplayerPositionPlane3YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane3YolkRoll.Id, MultiplayerPositionPlane3YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane3YolkYaw.Id, MultiplayerPositionPlane3YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane4X.Id, MultiplayerPositionPlane4X);
            DataRefList.Add(MultiplayerPositionPlane4Y.Id, MultiplayerPositionPlane4Y);
            DataRefList.Add(MultiplayerPositionPlane4Z.Id, MultiplayerPositionPlane4Z);
            DataRefList.Add(MultiplayerPositionPlane4The.Id, MultiplayerPositionPlane4The);
            DataRefList.Add(MultiplayerPositionPlane4Phi.Id, MultiplayerPositionPlane4Phi);
            DataRefList.Add(MultiplayerPositionPlane4Psi.Id, MultiplayerPositionPlane4Psi);
            DataRefList.Add(MultiplayerPositionPlane4GearDeploy.Id, MultiplayerPositionPlane4GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane4FlapRatio.Id, MultiplayerPositionPlane4FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane4FlapRatio2.Id, MultiplayerPositionPlane4FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane4SpoilerRatio.Id, MultiplayerPositionPlane4SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane4SpeedbrakeRatio.Id, MultiplayerPositionPlane4SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane4Sla1Ratio.Id, MultiplayerPositionPlane4Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane4WingSweep.Id, MultiplayerPositionPlane4WingSweep);
            DataRefList.Add(MultiplayerPositionPlane4Throttle.Id, MultiplayerPositionPlane4Throttle);
            DataRefList.Add(MultiplayerPositionPlane4YolkPitch.Id, MultiplayerPositionPlane4YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane4YolkRoll.Id, MultiplayerPositionPlane4YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane4YolkYaw.Id, MultiplayerPositionPlane4YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane5X.Id, MultiplayerPositionPlane5X);
            DataRefList.Add(MultiplayerPositionPlane5Y.Id, MultiplayerPositionPlane5Y);
            DataRefList.Add(MultiplayerPositionPlane5Z.Id, MultiplayerPositionPlane5Z);
            DataRefList.Add(MultiplayerPositionPlane5The.Id, MultiplayerPositionPlane5The);
            DataRefList.Add(MultiplayerPositionPlane5Phi.Id, MultiplayerPositionPlane5Phi);
            DataRefList.Add(MultiplayerPositionPlane5Psi.Id, MultiplayerPositionPlane5Psi);
            DataRefList.Add(MultiplayerPositionPlane5GearDeploy.Id, MultiplayerPositionPlane5GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane5FlapRatio.Id, MultiplayerPositionPlane5FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane5FlapRatio2.Id, MultiplayerPositionPlane5FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane5SpoilerRatio.Id, MultiplayerPositionPlane5SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane5SpeedbrakeRatio.Id, MultiplayerPositionPlane5SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane5Sla1Ratio.Id, MultiplayerPositionPlane5Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane5WingSweep.Id, MultiplayerPositionPlane5WingSweep);
            DataRefList.Add(MultiplayerPositionPlane5Throttle.Id, MultiplayerPositionPlane5Throttle);
            DataRefList.Add(MultiplayerPositionPlane5YolkPitch.Id, MultiplayerPositionPlane5YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane5YolkRoll.Id, MultiplayerPositionPlane5YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane5YolkYaw.Id, MultiplayerPositionPlane5YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane6X.Id, MultiplayerPositionPlane6X);
            DataRefList.Add(MultiplayerPositionPlane6Y.Id, MultiplayerPositionPlane6Y);
            DataRefList.Add(MultiplayerPositionPlane6Z.Id, MultiplayerPositionPlane6Z);
            DataRefList.Add(MultiplayerPositionPlane6The.Id, MultiplayerPositionPlane6The);
            DataRefList.Add(MultiplayerPositionPlane6Phi.Id, MultiplayerPositionPlane6Phi);
            DataRefList.Add(MultiplayerPositionPlane6Psi.Id, MultiplayerPositionPlane6Psi);
            DataRefList.Add(MultiplayerPositionPlane6GearDeploy.Id, MultiplayerPositionPlane6GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane6FlapRatio.Id, MultiplayerPositionPlane6FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane6FlapRatio2.Id, MultiplayerPositionPlane6FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane6SpoilerRatio.Id, MultiplayerPositionPlane6SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane6SpeedbrakeRatio.Id, MultiplayerPositionPlane6SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane6Sla1Ratio.Id, MultiplayerPositionPlane6Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane6WingSweep.Id, MultiplayerPositionPlane6WingSweep);
            DataRefList.Add(MultiplayerPositionPlane6Throttle.Id, MultiplayerPositionPlane6Throttle);
            DataRefList.Add(MultiplayerPositionPlane6YolkPitch.Id, MultiplayerPositionPlane6YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane6YolkRoll.Id, MultiplayerPositionPlane6YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane6YolkYaw.Id, MultiplayerPositionPlane6YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane7X.Id, MultiplayerPositionPlane7X);
            DataRefList.Add(MultiplayerPositionPlane7Y.Id, MultiplayerPositionPlane7Y);
            DataRefList.Add(MultiplayerPositionPlane7Z.Id, MultiplayerPositionPlane7Z);
            DataRefList.Add(MultiplayerPositionPlane7The.Id, MultiplayerPositionPlane7The);
            DataRefList.Add(MultiplayerPositionPlane7Phi.Id, MultiplayerPositionPlane7Phi);
            DataRefList.Add(MultiplayerPositionPlane7Psi.Id, MultiplayerPositionPlane7Psi);
            DataRefList.Add(MultiplayerPositionPlane7GearDeploy.Id, MultiplayerPositionPlane7GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane7FlapRatio.Id, MultiplayerPositionPlane7FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane7FlapRatio2.Id, MultiplayerPositionPlane7FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane7SpoilerRatio.Id, MultiplayerPositionPlane7SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane7SpeedbrakeRatio.Id, MultiplayerPositionPlane7SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane7Sla1Ratio.Id, MultiplayerPositionPlane7Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane7WingSweep.Id, MultiplayerPositionPlane7WingSweep);
            DataRefList.Add(MultiplayerPositionPlane7Throttle.Id, MultiplayerPositionPlane7Throttle);
            DataRefList.Add(MultiplayerPositionPlane7YolkPitch.Id, MultiplayerPositionPlane7YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane7YolkRoll.Id, MultiplayerPositionPlane7YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane7YolkYaw.Id, MultiplayerPositionPlane7YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane8X.Id, MultiplayerPositionPlane8X);
            DataRefList.Add(MultiplayerPositionPlane8Y.Id, MultiplayerPositionPlane8Y);
            DataRefList.Add(MultiplayerPositionPlane8Z.Id, MultiplayerPositionPlane8Z);
            DataRefList.Add(MultiplayerPositionPlane8The.Id, MultiplayerPositionPlane8The);
            DataRefList.Add(MultiplayerPositionPlane8Phi.Id, MultiplayerPositionPlane8Phi);
            DataRefList.Add(MultiplayerPositionPlane8Psi.Id, MultiplayerPositionPlane8Psi);
            DataRefList.Add(MultiplayerPositionPlane8GearDeploy.Id, MultiplayerPositionPlane8GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane8FlapRatio.Id, MultiplayerPositionPlane8FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane8FlapRatio2.Id, MultiplayerPositionPlane8FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane8SpoilerRatio.Id, MultiplayerPositionPlane8SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane8SpeedbrakeRatio.Id, MultiplayerPositionPlane8SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane8Sla1Ratio.Id, MultiplayerPositionPlane8Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane8WingSweep.Id, MultiplayerPositionPlane8WingSweep);
            DataRefList.Add(MultiplayerPositionPlane8Throttle.Id, MultiplayerPositionPlane8Throttle);
            DataRefList.Add(MultiplayerPositionPlane8YolkPitch.Id, MultiplayerPositionPlane8YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane8YolkRoll.Id, MultiplayerPositionPlane8YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane8YolkYaw.Id, MultiplayerPositionPlane8YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane9X.Id, MultiplayerPositionPlane9X);
            DataRefList.Add(MultiplayerPositionPlane9Y.Id, MultiplayerPositionPlane9Y);
            DataRefList.Add(MultiplayerPositionPlane9Z.Id, MultiplayerPositionPlane9Z);
            DataRefList.Add(MultiplayerPositionPlane9The.Id, MultiplayerPositionPlane9The);
            DataRefList.Add(MultiplayerPositionPlane9Phi.Id, MultiplayerPositionPlane9Phi);
            DataRefList.Add(MultiplayerPositionPlane9Psi.Id, MultiplayerPositionPlane9Psi);
            DataRefList.Add(MultiplayerPositionPlane9GearDeploy.Id, MultiplayerPositionPlane9GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane9FlapRatio.Id, MultiplayerPositionPlane9FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane9FlapRatio2.Id, MultiplayerPositionPlane9FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane9SpoilerRatio.Id, MultiplayerPositionPlane9SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane9SpeedbrakeRatio.Id, MultiplayerPositionPlane9SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane9Sla1Ratio.Id, MultiplayerPositionPlane9Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane9WingSweep.Id, MultiplayerPositionPlane9WingSweep);
            DataRefList.Add(MultiplayerPositionPlane9Throttle.Id, MultiplayerPositionPlane9Throttle);
            DataRefList.Add(MultiplayerPositionPlane9YolkPitch.Id, MultiplayerPositionPlane9YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane9YolkRoll.Id, MultiplayerPositionPlane9YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane9YolkYaw.Id, MultiplayerPositionPlane9YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane1Lat.Id, MultiplayerPositionPlane1Lat);
            DataRefList.Add(MultiplayerPositionPlane1Lon.Id, MultiplayerPositionPlane1Lon);
            DataRefList.Add(MultiplayerPositionPlane1El.Id, MultiplayerPositionPlane1El);
            DataRefList.Add(MultiplayerPositionPlane1VX.Id, MultiplayerPositionPlane1VX);
            DataRefList.Add(MultiplayerPositionPlane1VY.Id, MultiplayerPositionPlane1VY);
            DataRefList.Add(MultiplayerPositionPlane1VZ.Id, MultiplayerPositionPlane1VZ);
            DataRefList.Add(MultiplayerPositionPlane2Lat.Id, MultiplayerPositionPlane2Lat);
            DataRefList.Add(MultiplayerPositionPlane2Lon.Id, MultiplayerPositionPlane2Lon);
            DataRefList.Add(MultiplayerPositionPlane2El.Id, MultiplayerPositionPlane2El);
            DataRefList.Add(MultiplayerPositionPlane2VX.Id, MultiplayerPositionPlane2VX);
            DataRefList.Add(MultiplayerPositionPlane2VY.Id, MultiplayerPositionPlane2VY);
            DataRefList.Add(MultiplayerPositionPlane2VZ.Id, MultiplayerPositionPlane2VZ);
            DataRefList.Add(MultiplayerPositionPlane3Lat.Id, MultiplayerPositionPlane3Lat);
            DataRefList.Add(MultiplayerPositionPlane3Lon.Id, MultiplayerPositionPlane3Lon);
            DataRefList.Add(MultiplayerPositionPlane3El.Id, MultiplayerPositionPlane3El);
            DataRefList.Add(MultiplayerPositionPlane3VX.Id, MultiplayerPositionPlane3VX);
            DataRefList.Add(MultiplayerPositionPlane3VY.Id, MultiplayerPositionPlane3VY);
            DataRefList.Add(MultiplayerPositionPlane3VZ.Id, MultiplayerPositionPlane3VZ);
            DataRefList.Add(MultiplayerPositionPlane4Lat.Id, MultiplayerPositionPlane4Lat);
            DataRefList.Add(MultiplayerPositionPlane4Lon.Id, MultiplayerPositionPlane4Lon);
            DataRefList.Add(MultiplayerPositionPlane4El.Id, MultiplayerPositionPlane4El);
            DataRefList.Add(MultiplayerPositionPlane4VX.Id, MultiplayerPositionPlane4VX);
            DataRefList.Add(MultiplayerPositionPlane4VY.Id, MultiplayerPositionPlane4VY);
            DataRefList.Add(MultiplayerPositionPlane4VZ.Id, MultiplayerPositionPlane4VZ);
            DataRefList.Add(MultiplayerPositionPlane5Lat.Id, MultiplayerPositionPlane5Lat);
            DataRefList.Add(MultiplayerPositionPlane5Lon.Id, MultiplayerPositionPlane5Lon);
            DataRefList.Add(MultiplayerPositionPlane5El.Id, MultiplayerPositionPlane5El);
            DataRefList.Add(MultiplayerPositionPlane5VX.Id, MultiplayerPositionPlane5VX);
            DataRefList.Add(MultiplayerPositionPlane5VY.Id, MultiplayerPositionPlane5VY);
            DataRefList.Add(MultiplayerPositionPlane5VZ.Id, MultiplayerPositionPlane5VZ);
            DataRefList.Add(MultiplayerPositionPlane6Lat.Id, MultiplayerPositionPlane6Lat);
            DataRefList.Add(MultiplayerPositionPlane6Lon.Id, MultiplayerPositionPlane6Lon);
            DataRefList.Add(MultiplayerPositionPlane6El.Id, MultiplayerPositionPlane6El);
            DataRefList.Add(MultiplayerPositionPlane6VX.Id, MultiplayerPositionPlane6VX);
            DataRefList.Add(MultiplayerPositionPlane6VY.Id, MultiplayerPositionPlane6VY);
            DataRefList.Add(MultiplayerPositionPlane6VZ.Id, MultiplayerPositionPlane6VZ);
            DataRefList.Add(MultiplayerPositionPlane7Lat.Id, MultiplayerPositionPlane7Lat);
            DataRefList.Add(MultiplayerPositionPlane7Lon.Id, MultiplayerPositionPlane7Lon);
            DataRefList.Add(MultiplayerPositionPlane7El.Id, MultiplayerPositionPlane7El);
            DataRefList.Add(MultiplayerPositionPlane7VX.Id, MultiplayerPositionPlane7VX);
            DataRefList.Add(MultiplayerPositionPlane7VY.Id, MultiplayerPositionPlane7VY);
            DataRefList.Add(MultiplayerPositionPlane7VZ.Id, MultiplayerPositionPlane7VZ);
            DataRefList.Add(MultiplayerPositionPlane8Lat.Id, MultiplayerPositionPlane8Lat);
            DataRefList.Add(MultiplayerPositionPlane8Lon.Id, MultiplayerPositionPlane8Lon);
            DataRefList.Add(MultiplayerPositionPlane8El.Id, MultiplayerPositionPlane8El);
            DataRefList.Add(MultiplayerPositionPlane8VX.Id, MultiplayerPositionPlane8VX);
            DataRefList.Add(MultiplayerPositionPlane8VY.Id, MultiplayerPositionPlane8VY);
            DataRefList.Add(MultiplayerPositionPlane8VZ.Id, MultiplayerPositionPlane8VZ);
            DataRefList.Add(MultiplayerPositionPlane9Lat.Id, MultiplayerPositionPlane9Lat);
            DataRefList.Add(MultiplayerPositionPlane9Lon.Id, MultiplayerPositionPlane9Lon);
            DataRefList.Add(MultiplayerPositionPlane9El.Id, MultiplayerPositionPlane9El);
            DataRefList.Add(MultiplayerPositionPlane9VX.Id, MultiplayerPositionPlane9VX);
            DataRefList.Add(MultiplayerPositionPlane9VY.Id, MultiplayerPositionPlane9VY);
            DataRefList.Add(MultiplayerPositionPlane9VZ.Id, MultiplayerPositionPlane9VZ);
            DataRefList.Add(MultiplayerPositionPlane1BeaconLightsOn.Id, MultiplayerPositionPlane1BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane1LandingLightsOn.Id, MultiplayerPositionPlane1LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane1NavLightsOn.Id, MultiplayerPositionPlane1NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane1StrobeLightsOn.Id, MultiplayerPositionPlane1StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane1TaxiLightOn.Id, MultiplayerPositionPlane1TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane2BeaconLightsOn.Id, MultiplayerPositionPlane2BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane2LandingLightsOn.Id, MultiplayerPositionPlane2LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane2NavLightsOn.Id, MultiplayerPositionPlane2NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane2StrobeLightsOn.Id, MultiplayerPositionPlane2StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane2TaxiLightOn.Id, MultiplayerPositionPlane2TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane3BeaconLightsOn.Id, MultiplayerPositionPlane3BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane3LandingLightsOn.Id, MultiplayerPositionPlane3LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane3NavLightsOn.Id, MultiplayerPositionPlane3NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane3StrobeLightsOn.Id, MultiplayerPositionPlane3StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane3TaxiLightOn.Id, MultiplayerPositionPlane3TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane4BeaconLightsOn.Id, MultiplayerPositionPlane4BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane4LandingLightsOn.Id, MultiplayerPositionPlane4LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane4NavLightsOn.Id, MultiplayerPositionPlane4NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane4StrobeLightsOn.Id, MultiplayerPositionPlane4StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane4TaxiLightOn.Id, MultiplayerPositionPlane4TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane5BeaconLightsOn.Id, MultiplayerPositionPlane5BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane5LandingLightsOn.Id, MultiplayerPositionPlane5LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane5NavLightsOn.Id, MultiplayerPositionPlane5NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane5StrobeLightsOn.Id, MultiplayerPositionPlane5StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane5TaxiLightOn.Id, MultiplayerPositionPlane5TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane6BeaconLightsOn.Id, MultiplayerPositionPlane6BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane6LandingLightsOn.Id, MultiplayerPositionPlane6LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane6NavLightsOn.Id, MultiplayerPositionPlane6NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane6StrobeLightsOn.Id, MultiplayerPositionPlane6StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane6TaxiLightOn.Id, MultiplayerPositionPlane6TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane7BeaconLightsOn.Id, MultiplayerPositionPlane7BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane7LandingLightsOn.Id, MultiplayerPositionPlane7LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane7NavLightsOn.Id, MultiplayerPositionPlane7NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane7StrobeLightsOn.Id, MultiplayerPositionPlane7StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane7TaxiLightOn.Id, MultiplayerPositionPlane7TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane8BeaconLightsOn.Id, MultiplayerPositionPlane8BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane8LandingLightsOn.Id, MultiplayerPositionPlane8LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane8NavLightsOn.Id, MultiplayerPositionPlane8NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane8StrobeLightsOn.Id, MultiplayerPositionPlane8StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane8TaxiLightOn.Id, MultiplayerPositionPlane8TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane9BeaconLightsOn.Id, MultiplayerPositionPlane9BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane9LandingLightsOn.Id, MultiplayerPositionPlane9LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane9NavLightsOn.Id, MultiplayerPositionPlane9NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane9StrobeLightsOn.Id, MultiplayerPositionPlane9StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane9TaxiLightOn.Id, MultiplayerPositionPlane9TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane10BeaconLightsOn.Id, MultiplayerPositionPlane10BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane10LandingLightsOn.Id, MultiplayerPositionPlane10LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane10NavLightsOn.Id, MultiplayerPositionPlane10NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane10StrobeLightsOn.Id, MultiplayerPositionPlane10StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane10TaxiLightOn.Id, MultiplayerPositionPlane10TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane11BeaconLightsOn.Id, MultiplayerPositionPlane11BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane11LandingLightsOn.Id, MultiplayerPositionPlane11LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane11NavLightsOn.Id, MultiplayerPositionPlane11NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane11StrobeLightsOn.Id, MultiplayerPositionPlane11StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane11TaxiLightOn.Id, MultiplayerPositionPlane11TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane12BeaconLightsOn.Id, MultiplayerPositionPlane12BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane12LandingLightsOn.Id, MultiplayerPositionPlane12LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane12NavLightsOn.Id, MultiplayerPositionPlane12NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane12StrobeLightsOn.Id, MultiplayerPositionPlane12StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane12TaxiLightOn.Id, MultiplayerPositionPlane12TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane13BeaconLightsOn.Id, MultiplayerPositionPlane13BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane13LandingLightsOn.Id, MultiplayerPositionPlane13LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane13NavLightsOn.Id, MultiplayerPositionPlane13NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane13StrobeLightsOn.Id, MultiplayerPositionPlane13StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane13TaxiLightOn.Id, MultiplayerPositionPlane13TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane14BeaconLightsOn.Id, MultiplayerPositionPlane14BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane14LandingLightsOn.Id, MultiplayerPositionPlane14LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane14NavLightsOn.Id, MultiplayerPositionPlane14NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane14StrobeLightsOn.Id, MultiplayerPositionPlane14StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane14TaxiLightOn.Id, MultiplayerPositionPlane14TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane15BeaconLightsOn.Id, MultiplayerPositionPlane15BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane15LandingLightsOn.Id, MultiplayerPositionPlane15LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane15NavLightsOn.Id, MultiplayerPositionPlane15NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane15StrobeLightsOn.Id, MultiplayerPositionPlane15StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane15TaxiLightOn.Id, MultiplayerPositionPlane15TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane16BeaconLightsOn.Id, MultiplayerPositionPlane16BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane16LandingLightsOn.Id, MultiplayerPositionPlane16LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane16NavLightsOn.Id, MultiplayerPositionPlane16NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane16StrobeLightsOn.Id, MultiplayerPositionPlane16StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane16TaxiLightOn.Id, MultiplayerPositionPlane16TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane17BeaconLightsOn.Id, MultiplayerPositionPlane17BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane17LandingLightsOn.Id, MultiplayerPositionPlane17LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane17NavLightsOn.Id, MultiplayerPositionPlane17NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane17StrobeLightsOn.Id, MultiplayerPositionPlane17StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane17TaxiLightOn.Id, MultiplayerPositionPlane17TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane18BeaconLightsOn.Id, MultiplayerPositionPlane18BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane18LandingLightsOn.Id, MultiplayerPositionPlane18LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane18NavLightsOn.Id, MultiplayerPositionPlane18NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane18StrobeLightsOn.Id, MultiplayerPositionPlane18StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane18TaxiLightOn.Id, MultiplayerPositionPlane18TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane19BeaconLightsOn.Id, MultiplayerPositionPlane19BeaconLightsOn);
            DataRefList.Add(MultiplayerPositionPlane19LandingLightsOn.Id, MultiplayerPositionPlane19LandingLightsOn);
            DataRefList.Add(MultiplayerPositionPlane19NavLightsOn.Id, MultiplayerPositionPlane19NavLightsOn);
            DataRefList.Add(MultiplayerPositionPlane19StrobeLightsOn.Id, MultiplayerPositionPlane19StrobeLightsOn);
            DataRefList.Add(MultiplayerPositionPlane19TaxiLightOn.Id, MultiplayerPositionPlane19TaxiLightOn);
            DataRefList.Add(MultiplayerPositionPlane10X.Id, MultiplayerPositionPlane10X);
            DataRefList.Add(MultiplayerPositionPlane10Y.Id, MultiplayerPositionPlane10Y);
            DataRefList.Add(MultiplayerPositionPlane10Z.Id, MultiplayerPositionPlane10Z);
            DataRefList.Add(MultiplayerPositionPlane10The.Id, MultiplayerPositionPlane10The);
            DataRefList.Add(MultiplayerPositionPlane10Phi.Id, MultiplayerPositionPlane10Phi);
            DataRefList.Add(MultiplayerPositionPlane10Psi.Id, MultiplayerPositionPlane10Psi);
            DataRefList.Add(MultiplayerPositionPlane10GearDeploy.Id, MultiplayerPositionPlane10GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane10FlapRatio.Id, MultiplayerPositionPlane10FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane10FlapRatio2.Id, MultiplayerPositionPlane10FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane10SpoilerRatio.Id, MultiplayerPositionPlane10SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane10SpeedbrakeRatio.Id, MultiplayerPositionPlane10SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane10Sla1Ratio.Id, MultiplayerPositionPlane10Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane10WingSweep.Id, MultiplayerPositionPlane10WingSweep);
            DataRefList.Add(MultiplayerPositionPlane10Throttle.Id, MultiplayerPositionPlane10Throttle);
            DataRefList.Add(MultiplayerPositionPlane10YolkPitch.Id, MultiplayerPositionPlane10YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane10YolkRoll.Id, MultiplayerPositionPlane10YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane10YolkYaw.Id, MultiplayerPositionPlane10YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane10Lat.Id, MultiplayerPositionPlane10Lat);
            DataRefList.Add(MultiplayerPositionPlane10Lon.Id, MultiplayerPositionPlane10Lon);
            DataRefList.Add(MultiplayerPositionPlane10El.Id, MultiplayerPositionPlane10El);
            DataRefList.Add(MultiplayerPositionPlane10VX.Id, MultiplayerPositionPlane10VX);
            DataRefList.Add(MultiplayerPositionPlane10VY.Id, MultiplayerPositionPlane10VY);
            DataRefList.Add(MultiplayerPositionPlane10VZ.Id, MultiplayerPositionPlane10VZ);
            DataRefList.Add(MultiplayerPositionPlane11X.Id, MultiplayerPositionPlane11X);
            DataRefList.Add(MultiplayerPositionPlane11Y.Id, MultiplayerPositionPlane11Y);
            DataRefList.Add(MultiplayerPositionPlane11Z.Id, MultiplayerPositionPlane11Z);
            DataRefList.Add(MultiplayerPositionPlane11The.Id, MultiplayerPositionPlane11The);
            DataRefList.Add(MultiplayerPositionPlane11Phi.Id, MultiplayerPositionPlane11Phi);
            DataRefList.Add(MultiplayerPositionPlane11Psi.Id, MultiplayerPositionPlane11Psi);
            DataRefList.Add(MultiplayerPositionPlane11GearDeploy.Id, MultiplayerPositionPlane11GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane11FlapRatio.Id, MultiplayerPositionPlane11FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane11FlapRatio2.Id, MultiplayerPositionPlane11FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane11SpoilerRatio.Id, MultiplayerPositionPlane11SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane11SpeedbrakeRatio.Id, MultiplayerPositionPlane11SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane11Sla1Ratio.Id, MultiplayerPositionPlane11Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane11WingSweep.Id, MultiplayerPositionPlane11WingSweep);
            DataRefList.Add(MultiplayerPositionPlane11Throttle.Id, MultiplayerPositionPlane11Throttle);
            DataRefList.Add(MultiplayerPositionPlane11YolkPitch.Id, MultiplayerPositionPlane11YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane11YolkRoll.Id, MultiplayerPositionPlane11YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane11YolkYaw.Id, MultiplayerPositionPlane11YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane11Lat.Id, MultiplayerPositionPlane11Lat);
            DataRefList.Add(MultiplayerPositionPlane11Lon.Id, MultiplayerPositionPlane11Lon);
            DataRefList.Add(MultiplayerPositionPlane11El.Id, MultiplayerPositionPlane11El);
            DataRefList.Add(MultiplayerPositionPlane11VX.Id, MultiplayerPositionPlane11VX);
            DataRefList.Add(MultiplayerPositionPlane11VY.Id, MultiplayerPositionPlane11VY);
            DataRefList.Add(MultiplayerPositionPlane11VZ.Id, MultiplayerPositionPlane11VZ);
            DataRefList.Add(MultiplayerPositionPlane12X.Id, MultiplayerPositionPlane12X);
            DataRefList.Add(MultiplayerPositionPlane12Y.Id, MultiplayerPositionPlane12Y);
            DataRefList.Add(MultiplayerPositionPlane12Z.Id, MultiplayerPositionPlane12Z);
            DataRefList.Add(MultiplayerPositionPlane12The.Id, MultiplayerPositionPlane12The);
            DataRefList.Add(MultiplayerPositionPlane12Phi.Id, MultiplayerPositionPlane12Phi);
            DataRefList.Add(MultiplayerPositionPlane12Psi.Id, MultiplayerPositionPlane12Psi);
            DataRefList.Add(MultiplayerPositionPlane12GearDeploy.Id, MultiplayerPositionPlane12GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane12FlapRatio.Id, MultiplayerPositionPlane12FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane12FlapRatio2.Id, MultiplayerPositionPlane12FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane12SpoilerRatio.Id, MultiplayerPositionPlane12SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane12SpeedbrakeRatio.Id, MultiplayerPositionPlane12SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane12Sla1Ratio.Id, MultiplayerPositionPlane12Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane12WingSweep.Id, MultiplayerPositionPlane12WingSweep);
            DataRefList.Add(MultiplayerPositionPlane12Throttle.Id, MultiplayerPositionPlane12Throttle);
            DataRefList.Add(MultiplayerPositionPlane12YolkPitch.Id, MultiplayerPositionPlane12YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane12YolkRoll.Id, MultiplayerPositionPlane12YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane12YolkYaw.Id, MultiplayerPositionPlane12YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane12Lat.Id, MultiplayerPositionPlane12Lat);
            DataRefList.Add(MultiplayerPositionPlane12Lon.Id, MultiplayerPositionPlane12Lon);
            DataRefList.Add(MultiplayerPositionPlane12El.Id, MultiplayerPositionPlane12El);
            DataRefList.Add(MultiplayerPositionPlane12VX.Id, MultiplayerPositionPlane12VX);
            DataRefList.Add(MultiplayerPositionPlane12VY.Id, MultiplayerPositionPlane12VY);
            DataRefList.Add(MultiplayerPositionPlane12VZ.Id, MultiplayerPositionPlane12VZ);
            DataRefList.Add(MultiplayerPositionPlane13X.Id, MultiplayerPositionPlane13X);
            DataRefList.Add(MultiplayerPositionPlane13Y.Id, MultiplayerPositionPlane13Y);
            DataRefList.Add(MultiplayerPositionPlane13Z.Id, MultiplayerPositionPlane13Z);
            DataRefList.Add(MultiplayerPositionPlane13The.Id, MultiplayerPositionPlane13The);
            DataRefList.Add(MultiplayerPositionPlane13Phi.Id, MultiplayerPositionPlane13Phi);
            DataRefList.Add(MultiplayerPositionPlane13Psi.Id, MultiplayerPositionPlane13Psi);
            DataRefList.Add(MultiplayerPositionPlane13GearDeploy.Id, MultiplayerPositionPlane13GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane13FlapRatio.Id, MultiplayerPositionPlane13FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane13FlapRatio2.Id, MultiplayerPositionPlane13FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane13SpoilerRatio.Id, MultiplayerPositionPlane13SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane13SpeedbrakeRatio.Id, MultiplayerPositionPlane13SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane13Sla1Ratio.Id, MultiplayerPositionPlane13Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane13WingSweep.Id, MultiplayerPositionPlane13WingSweep);
            DataRefList.Add(MultiplayerPositionPlane13Throttle.Id, MultiplayerPositionPlane13Throttle);
            DataRefList.Add(MultiplayerPositionPlane13YolkPitch.Id, MultiplayerPositionPlane13YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane13YolkRoll.Id, MultiplayerPositionPlane13YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane13YolkYaw.Id, MultiplayerPositionPlane13YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane13Lat.Id, MultiplayerPositionPlane13Lat);
            DataRefList.Add(MultiplayerPositionPlane13Lon.Id, MultiplayerPositionPlane13Lon);
            DataRefList.Add(MultiplayerPositionPlane13El.Id, MultiplayerPositionPlane13El);
            DataRefList.Add(MultiplayerPositionPlane13VX.Id, MultiplayerPositionPlane13VX);
            DataRefList.Add(MultiplayerPositionPlane13VY.Id, MultiplayerPositionPlane13VY);
            DataRefList.Add(MultiplayerPositionPlane13VZ.Id, MultiplayerPositionPlane13VZ);
            DataRefList.Add(MultiplayerPositionPlane14X.Id, MultiplayerPositionPlane14X);
            DataRefList.Add(MultiplayerPositionPlane14Y.Id, MultiplayerPositionPlane14Y);
            DataRefList.Add(MultiplayerPositionPlane14Z.Id, MultiplayerPositionPlane14Z);
            DataRefList.Add(MultiplayerPositionPlane14The.Id, MultiplayerPositionPlane14The);
            DataRefList.Add(MultiplayerPositionPlane14Phi.Id, MultiplayerPositionPlane14Phi);
            DataRefList.Add(MultiplayerPositionPlane14Psi.Id, MultiplayerPositionPlane14Psi);
            DataRefList.Add(MultiplayerPositionPlane14GearDeploy.Id, MultiplayerPositionPlane14GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane14FlapRatio.Id, MultiplayerPositionPlane14FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane14FlapRatio2.Id, MultiplayerPositionPlane14FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane14SpoilerRatio.Id, MultiplayerPositionPlane14SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane14SpeedbrakeRatio.Id, MultiplayerPositionPlane14SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane14Sla1Ratio.Id, MultiplayerPositionPlane14Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane14WingSweep.Id, MultiplayerPositionPlane14WingSweep);
            DataRefList.Add(MultiplayerPositionPlane14Throttle.Id, MultiplayerPositionPlane14Throttle);
            DataRefList.Add(MultiplayerPositionPlane14YolkPitch.Id, MultiplayerPositionPlane14YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane14YolkRoll.Id, MultiplayerPositionPlane14YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane14YolkYaw.Id, MultiplayerPositionPlane14YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane14Lat.Id, MultiplayerPositionPlane14Lat);
            DataRefList.Add(MultiplayerPositionPlane14Lon.Id, MultiplayerPositionPlane14Lon);
            DataRefList.Add(MultiplayerPositionPlane14El.Id, MultiplayerPositionPlane14El);
            DataRefList.Add(MultiplayerPositionPlane14VX.Id, MultiplayerPositionPlane14VX);
            DataRefList.Add(MultiplayerPositionPlane14VY.Id, MultiplayerPositionPlane14VY);
            DataRefList.Add(MultiplayerPositionPlane14VZ.Id, MultiplayerPositionPlane14VZ);
            DataRefList.Add(MultiplayerPositionPlane15X.Id, MultiplayerPositionPlane15X);
            DataRefList.Add(MultiplayerPositionPlane15Y.Id, MultiplayerPositionPlane15Y);
            DataRefList.Add(MultiplayerPositionPlane15Z.Id, MultiplayerPositionPlane15Z);
            DataRefList.Add(MultiplayerPositionPlane15The.Id, MultiplayerPositionPlane15The);
            DataRefList.Add(MultiplayerPositionPlane15Phi.Id, MultiplayerPositionPlane15Phi);
            DataRefList.Add(MultiplayerPositionPlane15Psi.Id, MultiplayerPositionPlane15Psi);
            DataRefList.Add(MultiplayerPositionPlane15GearDeploy.Id, MultiplayerPositionPlane15GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane15FlapRatio.Id, MultiplayerPositionPlane15FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane15FlapRatio2.Id, MultiplayerPositionPlane15FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane15SpoilerRatio.Id, MultiplayerPositionPlane15SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane15SpeedbrakeRatio.Id, MultiplayerPositionPlane15SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane15Sla1Ratio.Id, MultiplayerPositionPlane15Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane15WingSweep.Id, MultiplayerPositionPlane15WingSweep);
            DataRefList.Add(MultiplayerPositionPlane15Throttle.Id, MultiplayerPositionPlane15Throttle);
            DataRefList.Add(MultiplayerPositionPlane15YolkPitch.Id, MultiplayerPositionPlane15YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane15YolkRoll.Id, MultiplayerPositionPlane15YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane15YolkYaw.Id, MultiplayerPositionPlane15YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane15Lat.Id, MultiplayerPositionPlane15Lat);
            DataRefList.Add(MultiplayerPositionPlane15Lon.Id, MultiplayerPositionPlane15Lon);
            DataRefList.Add(MultiplayerPositionPlane15El.Id, MultiplayerPositionPlane15El);
            DataRefList.Add(MultiplayerPositionPlane15VX.Id, MultiplayerPositionPlane15VX);
            DataRefList.Add(MultiplayerPositionPlane15VY.Id, MultiplayerPositionPlane15VY);
            DataRefList.Add(MultiplayerPositionPlane15VZ.Id, MultiplayerPositionPlane15VZ);
            DataRefList.Add(MultiplayerPositionPlane16X.Id, MultiplayerPositionPlane16X);
            DataRefList.Add(MultiplayerPositionPlane16Y.Id, MultiplayerPositionPlane16Y);
            DataRefList.Add(MultiplayerPositionPlane16Z.Id, MultiplayerPositionPlane16Z);
            DataRefList.Add(MultiplayerPositionPlane16The.Id, MultiplayerPositionPlane16The);
            DataRefList.Add(MultiplayerPositionPlane16Phi.Id, MultiplayerPositionPlane16Phi);
            DataRefList.Add(MultiplayerPositionPlane16Psi.Id, MultiplayerPositionPlane16Psi);
            DataRefList.Add(MultiplayerPositionPlane16GearDeploy.Id, MultiplayerPositionPlane16GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane16FlapRatio.Id, MultiplayerPositionPlane16FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane16FlapRatio2.Id, MultiplayerPositionPlane16FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane16SpoilerRatio.Id, MultiplayerPositionPlane16SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane16SpeedbrakeRatio.Id, MultiplayerPositionPlane16SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane16Sla1Ratio.Id, MultiplayerPositionPlane16Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane16WingSweep.Id, MultiplayerPositionPlane16WingSweep);
            DataRefList.Add(MultiplayerPositionPlane16Throttle.Id, MultiplayerPositionPlane16Throttle);
            DataRefList.Add(MultiplayerPositionPlane16YolkPitch.Id, MultiplayerPositionPlane16YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane16YolkRoll.Id, MultiplayerPositionPlane16YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane16YolkYaw.Id, MultiplayerPositionPlane16YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane16Lat.Id, MultiplayerPositionPlane16Lat);
            DataRefList.Add(MultiplayerPositionPlane16Lon.Id, MultiplayerPositionPlane16Lon);
            DataRefList.Add(MultiplayerPositionPlane16El.Id, MultiplayerPositionPlane16El);
            DataRefList.Add(MultiplayerPositionPlane16VX.Id, MultiplayerPositionPlane16VX);
            DataRefList.Add(MultiplayerPositionPlane16VY.Id, MultiplayerPositionPlane16VY);
            DataRefList.Add(MultiplayerPositionPlane16VZ.Id, MultiplayerPositionPlane16VZ);
            DataRefList.Add(MultiplayerPositionPlane17X.Id, MultiplayerPositionPlane17X);
            DataRefList.Add(MultiplayerPositionPlane17Y.Id, MultiplayerPositionPlane17Y);
            DataRefList.Add(MultiplayerPositionPlane17Z.Id, MultiplayerPositionPlane17Z);
            DataRefList.Add(MultiplayerPositionPlane17The.Id, MultiplayerPositionPlane17The);
            DataRefList.Add(MultiplayerPositionPlane17Phi.Id, MultiplayerPositionPlane17Phi);
            DataRefList.Add(MultiplayerPositionPlane17Psi.Id, MultiplayerPositionPlane17Psi);
            DataRefList.Add(MultiplayerPositionPlane17GearDeploy.Id, MultiplayerPositionPlane17GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane17FlapRatio.Id, MultiplayerPositionPlane17FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane17FlapRatio2.Id, MultiplayerPositionPlane17FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane17SpoilerRatio.Id, MultiplayerPositionPlane17SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane17SpeedbrakeRatio.Id, MultiplayerPositionPlane17SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane17Sla1Ratio.Id, MultiplayerPositionPlane17Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane17WingSweep.Id, MultiplayerPositionPlane17WingSweep);
            DataRefList.Add(MultiplayerPositionPlane17Throttle.Id, MultiplayerPositionPlane17Throttle);
            DataRefList.Add(MultiplayerPositionPlane17YolkPitch.Id, MultiplayerPositionPlane17YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane17YolkRoll.Id, MultiplayerPositionPlane17YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane17YolkYaw.Id, MultiplayerPositionPlane17YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane17Lat.Id, MultiplayerPositionPlane17Lat);
            DataRefList.Add(MultiplayerPositionPlane17Lon.Id, MultiplayerPositionPlane17Lon);
            DataRefList.Add(MultiplayerPositionPlane17El.Id, MultiplayerPositionPlane17El);
            DataRefList.Add(MultiplayerPositionPlane17VX.Id, MultiplayerPositionPlane17VX);
            DataRefList.Add(MultiplayerPositionPlane17VY.Id, MultiplayerPositionPlane17VY);
            DataRefList.Add(MultiplayerPositionPlane17VZ.Id, MultiplayerPositionPlane17VZ);
            DataRefList.Add(MultiplayerPositionPlane18X.Id, MultiplayerPositionPlane18X);
            DataRefList.Add(MultiplayerPositionPlane18Y.Id, MultiplayerPositionPlane18Y);
            DataRefList.Add(MultiplayerPositionPlane18Z.Id, MultiplayerPositionPlane18Z);
            DataRefList.Add(MultiplayerPositionPlane18The.Id, MultiplayerPositionPlane18The);
            DataRefList.Add(MultiplayerPositionPlane18Phi.Id, MultiplayerPositionPlane18Phi);
            DataRefList.Add(MultiplayerPositionPlane18Psi.Id, MultiplayerPositionPlane18Psi);
            DataRefList.Add(MultiplayerPositionPlane18GearDeploy.Id, MultiplayerPositionPlane18GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane18FlapRatio.Id, MultiplayerPositionPlane18FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane18FlapRatio2.Id, MultiplayerPositionPlane18FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane18SpoilerRatio.Id, MultiplayerPositionPlane18SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane18SpeedbrakeRatio.Id, MultiplayerPositionPlane18SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane18Sla1Ratio.Id, MultiplayerPositionPlane18Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane18WingSweep.Id, MultiplayerPositionPlane18WingSweep);
            DataRefList.Add(MultiplayerPositionPlane18Throttle.Id, MultiplayerPositionPlane18Throttle);
            DataRefList.Add(MultiplayerPositionPlane18YolkPitch.Id, MultiplayerPositionPlane18YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane18YolkRoll.Id, MultiplayerPositionPlane18YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane18YolkYaw.Id, MultiplayerPositionPlane18YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane18Lat.Id, MultiplayerPositionPlane18Lat);
            DataRefList.Add(MultiplayerPositionPlane18Lon.Id, MultiplayerPositionPlane18Lon);
            DataRefList.Add(MultiplayerPositionPlane18El.Id, MultiplayerPositionPlane18El);
            DataRefList.Add(MultiplayerPositionPlane18VX.Id, MultiplayerPositionPlane18VX);
            DataRefList.Add(MultiplayerPositionPlane18VY.Id, MultiplayerPositionPlane18VY);
            DataRefList.Add(MultiplayerPositionPlane18VZ.Id, MultiplayerPositionPlane18VZ);
            DataRefList.Add(MultiplayerPositionPlane19X.Id, MultiplayerPositionPlane19X);
            DataRefList.Add(MultiplayerPositionPlane19Y.Id, MultiplayerPositionPlane19Y);
            DataRefList.Add(MultiplayerPositionPlane19Z.Id, MultiplayerPositionPlane19Z);
            DataRefList.Add(MultiplayerPositionPlane19The.Id, MultiplayerPositionPlane19The);
            DataRefList.Add(MultiplayerPositionPlane19Phi.Id, MultiplayerPositionPlane19Phi);
            DataRefList.Add(MultiplayerPositionPlane19Psi.Id, MultiplayerPositionPlane19Psi);
            DataRefList.Add(MultiplayerPositionPlane19GearDeploy.Id, MultiplayerPositionPlane19GearDeploy);
            DataRefList.Add(MultiplayerPositionPlane19FlapRatio.Id, MultiplayerPositionPlane19FlapRatio);
            DataRefList.Add(MultiplayerPositionPlane19FlapRatio2.Id, MultiplayerPositionPlane19FlapRatio2);
            DataRefList.Add(MultiplayerPositionPlane19SpoilerRatio.Id, MultiplayerPositionPlane19SpoilerRatio);
            DataRefList.Add(MultiplayerPositionPlane19SpeedbrakeRatio.Id, MultiplayerPositionPlane19SpeedbrakeRatio);
            DataRefList.Add(MultiplayerPositionPlane19Sla1Ratio.Id, MultiplayerPositionPlane19Sla1Ratio);
            DataRefList.Add(MultiplayerPositionPlane19WingSweep.Id, MultiplayerPositionPlane19WingSweep);
            DataRefList.Add(MultiplayerPositionPlane19Throttle.Id, MultiplayerPositionPlane19Throttle);
            DataRefList.Add(MultiplayerPositionPlane19YolkPitch.Id, MultiplayerPositionPlane19YolkPitch);
            DataRefList.Add(MultiplayerPositionPlane19YolkRoll.Id, MultiplayerPositionPlane19YolkRoll);
            DataRefList.Add(MultiplayerPositionPlane19YolkYaw.Id, MultiplayerPositionPlane19YolkYaw);
            DataRefList.Add(MultiplayerPositionPlane19Lat.Id, MultiplayerPositionPlane19Lat);
            DataRefList.Add(MultiplayerPositionPlane19Lon.Id, MultiplayerPositionPlane19Lon);
            DataRefList.Add(MultiplayerPositionPlane19El.Id, MultiplayerPositionPlane19El);
            DataRefList.Add(MultiplayerPositionPlane19VX.Id, MultiplayerPositionPlane19VX);
            DataRefList.Add(MultiplayerPositionPlane19VY.Id, MultiplayerPositionPlane19VY);
            DataRefList.Add(MultiplayerPositionPlane19VZ.Id, MultiplayerPositionPlane19VZ);
            DataRefList.Add(MultiplayerCombatTeamStatus.Id, MultiplayerCombatTeamStatus);
            DataRefList.Add(NetworkDataoutNetworkDataRate.Id, NetworkDataoutNetworkDataRate);
            DataRefList.Add(NetworkDataoutDataToInternet.Id, NetworkDataoutDataToInternet);
            DataRefList.Add(NetworkDataoutDataToDisk.Id, NetworkDataoutDataToDisk);
            DataRefList.Add(NetworkDataoutDataToGraph.Id, NetworkDataoutDataToGraph);
            DataRefList.Add(NetworkDataoutDataToScreen.Id, NetworkDataoutDataToScreen);
            DataRefList.Add(NetworkDataoutDumpPartsProps.Id, NetworkDataoutDumpPartsProps);
            DataRefList.Add(NetworkDataoutDumpPartsWings.Id, NetworkDataoutDumpPartsWings);
            DataRefList.Add(NetworkDataoutDumpPartsVstabs.Id, NetworkDataoutDumpPartsVstabs);
            DataRefList.Add(NetworkDataoutIsExternalVisual.Id, NetworkDataoutIsExternalVisual);
            DataRefList.Add(NetworkDataoutIsMultiplayerSession.Id, NetworkDataoutIsMultiplayerSession);
            DataRefList.Add(NetworkDataoutMultiplayerIp.Id, NetworkDataoutMultiplayerIp);
            DataRefList.Add(NetworkDataoutExternalVisualIp.Id, NetworkDataoutExternalVisualIp);
            DataRefList.Add(NetworkDataoutTrackExternalVisual.Id, NetworkDataoutTrackExternalVisual);
            DataRefList.Add(NetworkDataoutExvisTracksView.Id, NetworkDataoutExvisTracksView);
            DataRefList.Add(NetworkMiscOpentransportInited.Id, NetworkMiscOpentransportInited);
            DataRefList.Add(NetworkMiscConnectionHandshake.Id, NetworkMiscConnectionHandshake);
            DataRefList.Add(NetworkMiscNetworkTimeSec.Id, NetworkMiscNetworkTimeSec);
            DataRefList.Add(PhysicsEarthMu.Id, PhysicsEarthMu);
            DataRefList.Add(PhysicsEarthRadiusM.Id, PhysicsEarthRadiusM);
            DataRefList.Add(PhysicsEarthTempC.Id, PhysicsEarthTempC);
            DataRefList.Add(PhysicsEarthPressureP.Id, PhysicsEarthPressureP);
            DataRefList.Add(PhysicsRhoSeaLevel.Id, PhysicsRhoSeaLevel);
            DataRefList.Add(PhysicsGSealevel.Id, PhysicsGSealevel);
            DataRefList.Add(PhysicsRhoWater.Id, PhysicsRhoWater);
            DataRefList.Add(PhysicsMetricTemp.Id, PhysicsMetricTemp);
            DataRefList.Add(PhysicsMetricPress.Id, PhysicsMetricPress);
            DataRefList.Add(OperationFailuresHydraulicPressureRatio.Id, OperationFailuresHydraulicPressureRatio);
            DataRefList.Add(OperationFailuresHydraulicPressureRatio2.Id, OperationFailuresHydraulicPressureRatio2);
            DataRefList.Add(OperationFailuresOilPowerThrustRatio.Id, OperationFailuresOilPowerThrustRatio);
            DataRefList.Add(OperationFailuresEnableRandomFalures.Id, OperationFailuresEnableRandomFalures);
            DataRefList.Add(OperationFailuresEnableRandomFailures.Id, OperationFailuresEnableRandomFailures);
            DataRefList.Add(OperationFailuresMeanTimeBetweenFailureHrs.Id, OperationFailuresMeanTimeBetweenFailureHrs);
            DataRefList.Add(OperationFailuresRamAirTurbineOn.Id, OperationFailuresRamAirTurbineOn);
            DataRefList.Add(OperationFailuresFailures.Id, OperationFailuresFailures);
            DataRefList.Add(OperationFailuresRelConlock.Id, OperationFailuresRelConlock);
            DataRefList.Add(OperationFailuresRelDoorOpen.Id, OperationFailuresRelDoorOpen);
            DataRefList.Add(OperationFailuresRelExPowerOn.Id, OperationFailuresRelExPowerOn);
            DataRefList.Add(OperationFailuresRelPassO2On.Id, OperationFailuresRelPassO2On);
            DataRefList.Add(OperationFailuresRelFuelcap.Id, OperationFailuresRelFuelcap);
            DataRefList.Add(OperationFailuresRelFuelWater.Id, OperationFailuresRelFuelWater);
            DataRefList.Add(OperationFailuresRelFuelType.Id, OperationFailuresRelFuelType);
            DataRefList.Add(OperationFailuresRelFuelBlock0.Id, OperationFailuresRelFuelBlock0);
            DataRefList.Add(OperationFailuresRelFuelBlock1.Id, OperationFailuresRelFuelBlock1);
            DataRefList.Add(OperationFailuresRelFuelBlock2.Id, OperationFailuresRelFuelBlock2);
            DataRefList.Add(OperationFailuresRelFuelBlock3.Id, OperationFailuresRelFuelBlock3);
            DataRefList.Add(OperationFailuresRelFuelBlock4.Id, OperationFailuresRelFuelBlock4);
            DataRefList.Add(OperationFailuresRelFuelBlock5.Id, OperationFailuresRelFuelBlock5);
            DataRefList.Add(OperationFailuresRelFuelBlock6.Id, OperationFailuresRelFuelBlock6);
            DataRefList.Add(OperationFailuresRelFuelBlock7.Id, OperationFailuresRelFuelBlock7);
            DataRefList.Add(OperationFailuresRelFuelBlock8.Id, OperationFailuresRelFuelBlock8);
            DataRefList.Add(OperationFailuresRelVasi.Id, OperationFailuresRelVasi);
            DataRefList.Add(OperationFailuresRelRwyLites.Id, OperationFailuresRelRwyLites);
            DataRefList.Add(OperationFailuresRelBirdStrike.Id, OperationFailuresRelBirdStrike);
            DataRefList.Add(OperationFailuresRelWindShear.Id, OperationFailuresRelWindShear);
            DataRefList.Add(OperationFailuresRelSmokeCpit.Id, OperationFailuresRelSmokeCpit);
            DataRefList.Add(OperationFailuresRelBrownOut.Id, OperationFailuresRelBrownOut);
            DataRefList.Add(OperationFailuresRelEsys.Id, OperationFailuresRelEsys);
            DataRefList.Add(OperationFailuresRelEsys2.Id, OperationFailuresRelEsys2);
            DataRefList.Add(OperationFailuresRelEsys3.Id, OperationFailuresRelEsys3);
            DataRefList.Add(OperationFailuresRelEsys4.Id, OperationFailuresRelEsys4);
            DataRefList.Add(OperationFailuresRelEsys5.Id, OperationFailuresRelEsys5);
            DataRefList.Add(OperationFailuresRelEsys6.Id, OperationFailuresRelEsys6);
            DataRefList.Add(OperationFailuresRelInvert0.Id, OperationFailuresRelInvert0);
            DataRefList.Add(OperationFailuresRelInvert1.Id, OperationFailuresRelInvert1);
            DataRefList.Add(OperationFailuresRelGen0Lo.Id, OperationFailuresRelGen0Lo);
            DataRefList.Add(OperationFailuresRelGen0Hi.Id, OperationFailuresRelGen0Hi);
            DataRefList.Add(OperationFailuresRelGen1Lo.Id, OperationFailuresRelGen1Lo);
            DataRefList.Add(OperationFailuresRelGen1Hi.Id, OperationFailuresRelGen1Hi);
            DataRefList.Add(OperationFailuresRelBat0Lo.Id, OperationFailuresRelBat0Lo);
            DataRefList.Add(OperationFailuresRelBat0Hi.Id, OperationFailuresRelBat0Hi);
            DataRefList.Add(OperationFailuresRelBat1Lo.Id, OperationFailuresRelBat1Lo);
            DataRefList.Add(OperationFailuresRelBat1Hi.Id, OperationFailuresRelBat1Hi);
            DataRefList.Add(OperationFailuresRelLitesNav.Id, OperationFailuresRelLitesNav);
            DataRefList.Add(OperationFailuresRelLitesStrobe.Id, OperationFailuresRelLitesStrobe);
            DataRefList.Add(OperationFailuresRelLitesBeac.Id, OperationFailuresRelLitesBeac);
            DataRefList.Add(OperationFailuresRelLitesTaxi.Id, OperationFailuresRelLitesTaxi);
            DataRefList.Add(OperationFailuresRelLitesLand.Id, OperationFailuresRelLitesLand);
            DataRefList.Add(OperationFailuresRelLitesIns.Id, OperationFailuresRelLitesIns);
            DataRefList.Add(OperationFailuresRelClights.Id, OperationFailuresRelClights);
            DataRefList.Add(OperationFailuresRelLitesHud.Id, OperationFailuresRelLitesHud);
            DataRefList.Add(OperationFailuresRelStbaug.Id, OperationFailuresRelStbaug);
            DataRefList.Add(OperationFailuresRelServoRudd.Id, OperationFailuresRelServoRudd);
            DataRefList.Add(OperationFailuresRelOtto.Id, OperationFailuresRelOtto);
            DataRefList.Add(OperationFailuresRelAutoRunaway.Id, OperationFailuresRelAutoRunaway);
            DataRefList.Add(OperationFailuresRelAutoServos.Id, OperationFailuresRelAutoServos);
            DataRefList.Add(OperationFailuresRelServoAiln.Id, OperationFailuresRelServoAiln);
            DataRefList.Add(OperationFailuresRelServoElev.Id, OperationFailuresRelServoElev);
            DataRefList.Add(OperationFailuresRelServoThro.Id, OperationFailuresRelServoThro);
            DataRefList.Add(OperationFailuresRelFcRudL.Id, OperationFailuresRelFcRudL);
            DataRefList.Add(OperationFailuresRelFcRudR.Id, OperationFailuresRelFcRudR);
            DataRefList.Add(OperationFailuresRelFcAilL.Id, OperationFailuresRelFcAilL);
            DataRefList.Add(OperationFailuresRelFcAilR.Id, OperationFailuresRelFcAilR);
            DataRefList.Add(OperationFailuresRelFcElvU.Id, OperationFailuresRelFcElvU);
            DataRefList.Add(OperationFailuresRelFcElvD.Id, OperationFailuresRelFcElvD);
            DataRefList.Add(OperationFailuresRelTrimRud.Id, OperationFailuresRelTrimRud);
            DataRefList.Add(OperationFailuresRelTrimAil.Id, OperationFailuresRelTrimAil);
            DataRefList.Add(OperationFailuresRelTrimElv.Id, OperationFailuresRelTrimElv);
            DataRefList.Add(OperationFailuresRelRudTrimRun.Id, OperationFailuresRelRudTrimRun);
            DataRefList.Add(OperationFailuresRelAilTrimRun.Id, OperationFailuresRelAilTrimRun);
            DataRefList.Add(OperationFailuresRelElvTrimRun.Id, OperationFailuresRelElvTrimRun);
            DataRefList.Add(OperationFailuresRelFcSlt.Id, OperationFailuresRelFcSlt);
            DataRefList.Add(OperationFailuresRelFlapAct.Id, OperationFailuresRelFlapAct);
            DataRefList.Add(OperationFailuresRelFcLFlp.Id, OperationFailuresRelFcLFlp);
            DataRefList.Add(OperationFailuresRelFcRFlp.Id, OperationFailuresRelFcRFlp);
            DataRefList.Add(OperationFailuresRelLFlpOff.Id, OperationFailuresRelLFlpOff);
            DataRefList.Add(OperationFailuresRelRFlpOff.Id, OperationFailuresRelRFlpOff);
            DataRefList.Add(OperationFailuresRelGearAct.Id, OperationFailuresRelGearAct);
            DataRefList.Add(OperationFailuresRelGearInd.Id, OperationFailuresRelGearInd);
            DataRefList.Add(OperationFailuresRelLbrakes.Id, OperationFailuresRelLbrakes);
            DataRefList.Add(OperationFailuresRelRbrakes.Id, OperationFailuresRelRbrakes);
            DataRefList.Add(OperationFailuresRelLagear1.Id, OperationFailuresRelLagear1);
            DataRefList.Add(OperationFailuresRelLagear2.Id, OperationFailuresRelLagear2);
            DataRefList.Add(OperationFailuresRelLagear3.Id, OperationFailuresRelLagear3);
            DataRefList.Add(OperationFailuresRelLagear4.Id, OperationFailuresRelLagear4);
            DataRefList.Add(OperationFailuresRelLagear5.Id, OperationFailuresRelLagear5);
            DataRefList.Add(OperationFailuresRelCollapse1.Id, OperationFailuresRelCollapse1);
            DataRefList.Add(OperationFailuresRelCollapse2.Id, OperationFailuresRelCollapse2);
            DataRefList.Add(OperationFailuresRelCollapse3.Id, OperationFailuresRelCollapse3);
            DataRefList.Add(OperationFailuresRelCollapse4.Id, OperationFailuresRelCollapse4);
            DataRefList.Add(OperationFailuresRelCollapse5.Id, OperationFailuresRelCollapse5);
            DataRefList.Add(OperationFailuresRelCollapse6.Id, OperationFailuresRelCollapse6);
            DataRefList.Add(OperationFailuresRelCollapse7.Id, OperationFailuresRelCollapse7);
            DataRefList.Add(OperationFailuresRelCollapse8.Id, OperationFailuresRelCollapse8);
            DataRefList.Add(OperationFailuresRelCollapse9.Id, OperationFailuresRelCollapse9);
            DataRefList.Add(OperationFailuresRelCollapse10.Id, OperationFailuresRelCollapse10);
            DataRefList.Add(OperationFailuresRelTire1.Id, OperationFailuresRelTire1);
            DataRefList.Add(OperationFailuresRelTire2.Id, OperationFailuresRelTire2);
            DataRefList.Add(OperationFailuresRelTire3.Id, OperationFailuresRelTire3);
            DataRefList.Add(OperationFailuresRelTire4.Id, OperationFailuresRelTire4);
            DataRefList.Add(OperationFailuresRelTire5.Id, OperationFailuresRelTire5);
            DataRefList.Add(OperationFailuresRelHVAC.Id, OperationFailuresRelHVAC);
            DataRefList.Add(OperationFailuresRelBleedAirLft.Id, OperationFailuresRelBleedAirLft);
            DataRefList.Add(OperationFailuresRelBleedAirRgt.Id, OperationFailuresRelBleedAirRgt);
            DataRefList.Add(OperationFailuresRelAPUPress.Id, OperationFailuresRelAPUPress);
            DataRefList.Add(OperationFailuresRelDepresSlow.Id, OperationFailuresRelDepresSlow);
            DataRefList.Add(OperationFailuresRelDepresFast.Id, OperationFailuresRelDepresFast);
            DataRefList.Add(OperationFailuresRelHydpmpEle.Id, OperationFailuresRelHydpmpEle);
            DataRefList.Add(OperationFailuresRelHydpmp.Id, OperationFailuresRelHydpmp);
            DataRefList.Add(OperationFailuresRelHydpmp2.Id, OperationFailuresRelHydpmp2);
            DataRefList.Add(OperationFailuresRelHydpmp3.Id, OperationFailuresRelHydpmp3);
            DataRefList.Add(OperationFailuresRelHydpmp4.Id, OperationFailuresRelHydpmp4);
            DataRefList.Add(OperationFailuresRelHydpmp5.Id, OperationFailuresRelHydpmp5);
            DataRefList.Add(OperationFailuresRelHydpmp6.Id, OperationFailuresRelHydpmp6);
            DataRefList.Add(OperationFailuresRelHydpmp7.Id, OperationFailuresRelHydpmp7);
            DataRefList.Add(OperationFailuresRelHydpmp8.Id, OperationFailuresRelHydpmp8);
            DataRefList.Add(OperationFailuresRelHydleak.Id, OperationFailuresRelHydleak);
            DataRefList.Add(OperationFailuresRelHydleak2.Id, OperationFailuresRelHydleak2);
            DataRefList.Add(OperationFailuresRelHydoverp.Id, OperationFailuresRelHydoverp);
            DataRefList.Add(OperationFailuresRelHydoverp2.Id, OperationFailuresRelHydoverp2);
            DataRefList.Add(OperationFailuresRelThrotLo.Id, OperationFailuresRelThrotLo);
            DataRefList.Add(OperationFailuresRelThrotHi.Id, OperationFailuresRelThrotHi);
            DataRefList.Add(OperationFailuresRelFcThr.Id, OperationFailuresRelFcThr);
            DataRefList.Add(OperationFailuresRelPropSync.Id, OperationFailuresRelPropSync);
            DataRefList.Add(OperationFailuresRelFeather.Id, OperationFailuresRelFeather);
            DataRefList.Add(OperationFailuresRelTrotor.Id, OperationFailuresRelTrotor);
            DataRefList.Add(OperationFailuresRelAntice.Id, OperationFailuresRelAntice);
            DataRefList.Add(OperationFailuresRelIceDetect.Id, OperationFailuresRelIceDetect);
            DataRefList.Add(OperationFailuresRelIcePitotHeat1.Id, OperationFailuresRelIcePitotHeat1);
            DataRefList.Add(OperationFailuresRelIcePitotHeat2.Id, OperationFailuresRelIcePitotHeat2);
            DataRefList.Add(OperationFailuresRelIceStaticHeat.Id, OperationFailuresRelIceStaticHeat);
            DataRefList.Add(OperationFailuresRelIceStaticHeat2.Id, OperationFailuresRelIceStaticHeat2);
            DataRefList.Add(OperationFailuresRelIceAOAHeat.Id, OperationFailuresRelIceAOAHeat);
            DataRefList.Add(OperationFailuresRelIceAOAHeat2.Id, OperationFailuresRelIceAOAHeat2);
            DataRefList.Add(OperationFailuresRelIceWindowHeat.Id, OperationFailuresRelIceWindowHeat);
            DataRefList.Add(OperationFailuresRelIceSurfBoot.Id, OperationFailuresRelIceSurfBoot);
            DataRefList.Add(OperationFailuresRelIceSurfHeat.Id, OperationFailuresRelIceSurfHeat);
            DataRefList.Add(OperationFailuresRelIceSurfHeat2.Id, OperationFailuresRelIceSurfHeat2);
            DataRefList.Add(OperationFailuresRelIceBrakeHeat.Id, OperationFailuresRelIceBrakeHeat);
            DataRefList.Add(OperationFailuresRelIceAltAir1.Id, OperationFailuresRelIceAltAir1);
            DataRefList.Add(OperationFailuresRelIceAltAir2.Id, OperationFailuresRelIceAltAir2);
            DataRefList.Add(OperationFailuresRelVacuum.Id, OperationFailuresRelVacuum);
            DataRefList.Add(OperationFailuresRelVacuum2.Id, OperationFailuresRelVacuum2);
            DataRefList.Add(OperationFailuresRelElecGyr.Id, OperationFailuresRelElecGyr);
            DataRefList.Add(OperationFailuresRelElecGyr2.Id, OperationFailuresRelElecGyr2);
            DataRefList.Add(OperationFailuresRelPitot.Id, OperationFailuresRelPitot);
            DataRefList.Add(OperationFailuresRelPitot2.Id, OperationFailuresRelPitot2);
            DataRefList.Add(OperationFailuresRelStatic.Id, OperationFailuresRelStatic);
            DataRefList.Add(OperationFailuresRelStatic2.Id, OperationFailuresRelStatic2);
            DataRefList.Add(OperationFailuresRelStatic1Err.Id, OperationFailuresRelStatic1Err);
            DataRefList.Add(OperationFailuresRelStatic2Err.Id, OperationFailuresRelStatic2Err);
            DataRefList.Add(OperationFailuresRelGOat.Id, OperationFailuresRelGOat);
            DataRefList.Add(OperationFailuresRelGFuel.Id, OperationFailuresRelGFuel);
            DataRefList.Add(OperationFailuresRelSsAsi.Id, OperationFailuresRelSsAsi);
            DataRefList.Add(OperationFailuresRelSsAhz.Id, OperationFailuresRelSsAhz);
            DataRefList.Add(OperationFailuresRelSsAlt.Id, OperationFailuresRelSsAlt);
            DataRefList.Add(OperationFailuresRelSsTsi.Id, OperationFailuresRelSsTsi);
            DataRefList.Add(OperationFailuresRelSsDgy.Id, OperationFailuresRelSsDgy);
            DataRefList.Add(OperationFailuresRelSsVvi.Id, OperationFailuresRelSsVvi);
            DataRefList.Add(OperationFailuresRelCopAsi.Id, OperationFailuresRelCopAsi);
            DataRefList.Add(OperationFailuresRelCopAhz.Id, OperationFailuresRelCopAhz);
            DataRefList.Add(OperationFailuresRelCopAlt.Id, OperationFailuresRelCopAlt);
            DataRefList.Add(OperationFailuresRelCopTsi.Id, OperationFailuresRelCopTsi);
            DataRefList.Add(OperationFailuresRelCopDgy.Id, OperationFailuresRelCopDgy);
            DataRefList.Add(OperationFailuresRelCopVvi.Id, OperationFailuresRelCopVvi);
            DataRefList.Add(OperationFailuresRelEfis1.Id, OperationFailuresRelEfis1);
            DataRefList.Add(OperationFailuresRelEfis2.Id, OperationFailuresRelEfis2);
            DataRefList.Add(OperationFailuresRelAOA.Id, OperationFailuresRelAOA);
            DataRefList.Add(OperationFailuresRelStallWarn.Id, OperationFailuresRelStallWarn);
            DataRefList.Add(OperationFailuresRelGearWarning.Id, OperationFailuresRelGearWarning);
            DataRefList.Add(OperationFailuresRelNavcom1.Id, OperationFailuresRelNavcom1);
            DataRefList.Add(OperationFailuresRelNavcom2.Id, OperationFailuresRelNavcom2);
            DataRefList.Add(OperationFailuresRelNav1.Id, OperationFailuresRelNav1);
            DataRefList.Add(OperationFailuresRelNav2.Id, OperationFailuresRelNav2);
            DataRefList.Add(OperationFailuresRelCom1.Id, OperationFailuresRelCom1);
            DataRefList.Add(OperationFailuresRelCom2.Id, OperationFailuresRelCom2);
            DataRefList.Add(OperationFailuresRelAdf1.Id, OperationFailuresRelAdf1);
            DataRefList.Add(OperationFailuresRelAdf2.Id, OperationFailuresRelAdf2);
            DataRefList.Add(OperationFailuresRelGps.Id, OperationFailuresRelGps);
            DataRefList.Add(OperationFailuresRelGps2.Id, OperationFailuresRelGps2);
            DataRefList.Add(OperationFailuresRelDme.Id, OperationFailuresRelDme);
            DataRefList.Add(OperationFailuresRelLoc.Id, OperationFailuresRelLoc);
            DataRefList.Add(OperationFailuresRelGls.Id, OperationFailuresRelGls);
            DataRefList.Add(OperationFailuresRelGp.Id, OperationFailuresRelGp);
            DataRefList.Add(OperationFailuresRelXpndr.Id, OperationFailuresRelXpndr);
            DataRefList.Add(OperationFailuresRelMarker.Id, OperationFailuresRelMarker);
            DataRefList.Add(OperationFailuresRelRPMInd0.Id, OperationFailuresRelRPMInd0);
            DataRefList.Add(OperationFailuresRelRPMInd1.Id, OperationFailuresRelRPMInd1);
            DataRefList.Add(OperationFailuresRelN1Ind0.Id, OperationFailuresRelN1Ind0);
            DataRefList.Add(OperationFailuresRelN1Ind1.Id, OperationFailuresRelN1Ind1);
            DataRefList.Add(OperationFailuresRelN2Ind0.Id, OperationFailuresRelN2Ind0);
            DataRefList.Add(OperationFailuresRelN2Ind1.Id, OperationFailuresRelN2Ind1);
            DataRefList.Add(OperationFailuresRelMPInd0.Id, OperationFailuresRelMPInd0);
            DataRefList.Add(OperationFailuresRelMPInd1.Id, OperationFailuresRelMPInd1);
            DataRefList.Add(OperationFailuresRelTrqind0.Id, OperationFailuresRelTrqind0);
            DataRefList.Add(OperationFailuresRelTrqind1.Id, OperationFailuresRelTrqind1);
            DataRefList.Add(OperationFailuresRelEprind0.Id, OperationFailuresRelEprind0);
            DataRefList.Add(OperationFailuresRelEprind1.Id, OperationFailuresRelEprind1);
            DataRefList.Add(OperationFailuresRelCHTInd0.Id, OperationFailuresRelCHTInd0);
            DataRefList.Add(OperationFailuresRelCHTInd1.Id, OperationFailuresRelCHTInd1);
            DataRefList.Add(OperationFailuresRelIttind0.Id, OperationFailuresRelIttind0);
            DataRefList.Add(OperationFailuresRelIttind1.Id, OperationFailuresRelIttind1);
            DataRefList.Add(OperationFailuresRelEGTInd0.Id, OperationFailuresRelEGTInd0);
            DataRefList.Add(OperationFailuresRelEGTInd1.Id, OperationFailuresRelEGTInd1);
            DataRefList.Add(OperationFailuresRelFFInd0.Id, OperationFailuresRelFFInd0);
            DataRefList.Add(OperationFailuresRelFFInd1.Id, OperationFailuresRelFFInd1);
            DataRefList.Add(OperationFailuresRelFpInd0.Id, OperationFailuresRelFpInd0);
            DataRefList.Add(OperationFailuresRelFpInd1.Id, OperationFailuresRelFpInd1);
            DataRefList.Add(OperationFailuresRelOilpInd0.Id, OperationFailuresRelOilpInd0);
            DataRefList.Add(OperationFailuresRelOilpInd1.Id, OperationFailuresRelOilpInd1);
            DataRefList.Add(OperationFailuresRelOiltInd0.Id, OperationFailuresRelOiltInd0);
            DataRefList.Add(OperationFailuresRelOiltInd1.Id, OperationFailuresRelOiltInd1);
            DataRefList.Add(OperationFailuresRelG430Gps1.Id, OperationFailuresRelG430Gps1);
            DataRefList.Add(OperationFailuresRelG430Gps2.Id, OperationFailuresRelG430Gps2);
            DataRefList.Add(OperationFailuresRelG430Rad1Tune.Id, OperationFailuresRelG430Rad1Tune);
            DataRefList.Add(OperationFailuresRelG430Rad2Tune.Id, OperationFailuresRelG430Rad2Tune);
            DataRefList.Add(OperationFailuresRelGGia1.Id, OperationFailuresRelGGia1);
            DataRefList.Add(OperationFailuresRelGGia2.Id, OperationFailuresRelGGia2);
            DataRefList.Add(OperationFailuresRelGGea.Id, OperationFailuresRelGGea);
            DataRefList.Add(OperationFailuresRelAdcComp.Id, OperationFailuresRelAdcComp);
            DataRefList.Add(OperationFailuresRelGArthorz.Id, OperationFailuresRelGArthorz);
            DataRefList.Add(OperationFailuresRelGAsi.Id, OperationFailuresRelGAsi);
            DataRefList.Add(OperationFailuresRelGAlt.Id, OperationFailuresRelGAlt);
            DataRefList.Add(OperationFailuresRelGMagmtr.Id, OperationFailuresRelGMagmtr);
            DataRefList.Add(OperationFailuresRelGVvi.Id, OperationFailuresRelGVvi);
            DataRefList.Add(OperationFailuresRelGNavrad1.Id, OperationFailuresRelGNavrad1);
            DataRefList.Add(OperationFailuresRelGNavrad2.Id, OperationFailuresRelGNavrad2);
            DataRefList.Add(OperationFailuresRelGComrad1.Id, OperationFailuresRelGComrad1);
            DataRefList.Add(OperationFailuresRelGComrad2.Id, OperationFailuresRelGComrad2);
            DataRefList.Add(OperationFailuresRelGXpndr.Id, OperationFailuresRelGXpndr);
            DataRefList.Add(OperationFailuresRelGGen1.Id, OperationFailuresRelGGen1);
            DataRefList.Add(OperationFailuresRelGGen2.Id, OperationFailuresRelGGen2);
            DataRefList.Add(OperationFailuresRelGBat1.Id, OperationFailuresRelGBat1);
            DataRefList.Add(OperationFailuresRelGBat2.Id, OperationFailuresRelGBat2);
            DataRefList.Add(OperationFailuresRelGBus1.Id, OperationFailuresRelGBus1);
            DataRefList.Add(OperationFailuresRelGBus2.Id, OperationFailuresRelGBus2);
            DataRefList.Add(OperationFailuresRelGMfd.Id, OperationFailuresRelGMfd);
            DataRefList.Add(OperationFailuresRelGPfd.Id, OperationFailuresRelGPfd);
            DataRefList.Add(OperationFailuresRelGPfd2.Id, OperationFailuresRelGPfd2);
            DataRefList.Add(OperationFailuresRelMaglft0.Id, OperationFailuresRelMaglft0);
            DataRefList.Add(OperationFailuresRelMaglft1.Id, OperationFailuresRelMaglft1);
            DataRefList.Add(OperationFailuresRelMaglft2.Id, OperationFailuresRelMaglft2);
            DataRefList.Add(OperationFailuresRelMaglft3.Id, OperationFailuresRelMaglft3);
            DataRefList.Add(OperationFailuresRelMaglft4.Id, OperationFailuresRelMaglft4);
            DataRefList.Add(OperationFailuresRelMaglft5.Id, OperationFailuresRelMaglft5);
            DataRefList.Add(OperationFailuresRelMaglft6.Id, OperationFailuresRelMaglft6);
            DataRefList.Add(OperationFailuresRelMaglft7.Id, OperationFailuresRelMaglft7);
            DataRefList.Add(OperationFailuresRelMagrgt0.Id, OperationFailuresRelMagrgt0);
            DataRefList.Add(OperationFailuresRelMagrgt1.Id, OperationFailuresRelMagrgt1);
            DataRefList.Add(OperationFailuresRelMagrgt2.Id, OperationFailuresRelMagrgt2);
            DataRefList.Add(OperationFailuresRelMagrgt3.Id, OperationFailuresRelMagrgt3);
            DataRefList.Add(OperationFailuresRelMagrgt4.Id, OperationFailuresRelMagrgt4);
            DataRefList.Add(OperationFailuresRelMagrgt5.Id, OperationFailuresRelMagrgt5);
            DataRefList.Add(OperationFailuresRelMagrgt6.Id, OperationFailuresRelMagrgt6);
            DataRefList.Add(OperationFailuresRelMagrgt7.Id, OperationFailuresRelMagrgt7);
            DataRefList.Add(OperationFailuresRelEngfir0.Id, OperationFailuresRelEngfir0);
            DataRefList.Add(OperationFailuresRelEngfir1.Id, OperationFailuresRelEngfir1);
            DataRefList.Add(OperationFailuresRelEngfir2.Id, OperationFailuresRelEngfir2);
            DataRefList.Add(OperationFailuresRelEngfir3.Id, OperationFailuresRelEngfir3);
            DataRefList.Add(OperationFailuresRelEngfir4.Id, OperationFailuresRelEngfir4);
            DataRefList.Add(OperationFailuresRelEngfir5.Id, OperationFailuresRelEngfir5);
            DataRefList.Add(OperationFailuresRelEngfir6.Id, OperationFailuresRelEngfir6);
            DataRefList.Add(OperationFailuresRelEngfir7.Id, OperationFailuresRelEngfir7);
            DataRefList.Add(OperationFailuresRelEngfla0.Id, OperationFailuresRelEngfla0);
            DataRefList.Add(OperationFailuresRelEngfla1.Id, OperationFailuresRelEngfla1);
            DataRefList.Add(OperationFailuresRelEngfla2.Id, OperationFailuresRelEngfla2);
            DataRefList.Add(OperationFailuresRelEngfla3.Id, OperationFailuresRelEngfla3);
            DataRefList.Add(OperationFailuresRelEngfla4.Id, OperationFailuresRelEngfla4);
            DataRefList.Add(OperationFailuresRelEngfla5.Id, OperationFailuresRelEngfla5);
            DataRefList.Add(OperationFailuresRelEngfla6.Id, OperationFailuresRelEngfla6);
            DataRefList.Add(OperationFailuresRelEngfla7.Id, OperationFailuresRelEngfla7);
            DataRefList.Add(OperationFailuresRelEngfai0.Id, OperationFailuresRelEngfai0);
            DataRefList.Add(OperationFailuresRelEngfai1.Id, OperationFailuresRelEngfai1);
            DataRefList.Add(OperationFailuresRelEngfai2.Id, OperationFailuresRelEngfai2);
            DataRefList.Add(OperationFailuresRelEngfai3.Id, OperationFailuresRelEngfai3);
            DataRefList.Add(OperationFailuresRelEngfai4.Id, OperationFailuresRelEngfai4);
            DataRefList.Add(OperationFailuresRelEngfai5.Id, OperationFailuresRelEngfai5);
            DataRefList.Add(OperationFailuresRelEngfai6.Id, OperationFailuresRelEngfai6);
            DataRefList.Add(OperationFailuresRelEngfai7.Id, OperationFailuresRelEngfai7);
            DataRefList.Add(OperationFailuresRelEngsep0.Id, OperationFailuresRelEngsep0);
            DataRefList.Add(OperationFailuresRelEngsep1.Id, OperationFailuresRelEngsep1);
            DataRefList.Add(OperationFailuresRelEngsep2.Id, OperationFailuresRelEngsep2);
            DataRefList.Add(OperationFailuresRelEngsep3.Id, OperationFailuresRelEngsep3);
            DataRefList.Add(OperationFailuresRelEngsep4.Id, OperationFailuresRelEngsep4);
            DataRefList.Add(OperationFailuresRelEngsep5.Id, OperationFailuresRelEngsep5);
            DataRefList.Add(OperationFailuresRelEngsep6.Id, OperationFailuresRelEngsep6);
            DataRefList.Add(OperationFailuresRelEngsep7.Id, OperationFailuresRelEngsep7);
            DataRefList.Add(OperationFailuresRelFuepmp0.Id, OperationFailuresRelFuepmp0);
            DataRefList.Add(OperationFailuresRelFuepmp1.Id, OperationFailuresRelFuepmp1);
            DataRefList.Add(OperationFailuresRelFuepmp2.Id, OperationFailuresRelFuepmp2);
            DataRefList.Add(OperationFailuresRelFuepmp3.Id, OperationFailuresRelFuepmp3);
            DataRefList.Add(OperationFailuresRelFuepmp4.Id, OperationFailuresRelFuepmp4);
            DataRefList.Add(OperationFailuresRelFuepmp5.Id, OperationFailuresRelFuepmp5);
            DataRefList.Add(OperationFailuresRelFuepmp6.Id, OperationFailuresRelFuepmp6);
            DataRefList.Add(OperationFailuresRelFuepmp7.Id, OperationFailuresRelFuepmp7);
            DataRefList.Add(OperationFailuresRelEleFuepmp0.Id, OperationFailuresRelEleFuepmp0);
            DataRefList.Add(OperationFailuresRelEleFuepmp1.Id, OperationFailuresRelEleFuepmp1);
            DataRefList.Add(OperationFailuresRelEleFuepmp2.Id, OperationFailuresRelEleFuepmp2);
            DataRefList.Add(OperationFailuresRelEleFuepmp3.Id, OperationFailuresRelEleFuepmp3);
            DataRefList.Add(OperationFailuresRelEleFuepmp4.Id, OperationFailuresRelEleFuepmp4);
            DataRefList.Add(OperationFailuresRelEleFuepmp5.Id, OperationFailuresRelEleFuepmp5);
            DataRefList.Add(OperationFailuresRelEleFuepmp6.Id, OperationFailuresRelEleFuepmp6);
            DataRefList.Add(OperationFailuresRelEleFuepmp7.Id, OperationFailuresRelEleFuepmp7);
            DataRefList.Add(OperationFailuresRelEngLo0.Id, OperationFailuresRelEngLo0);
            DataRefList.Add(OperationFailuresRelEngLo1.Id, OperationFailuresRelEngLo1);
            DataRefList.Add(OperationFailuresRelEngLo2.Id, OperationFailuresRelEngLo2);
            DataRefList.Add(OperationFailuresRelEngLo3.Id, OperationFailuresRelEngLo3);
            DataRefList.Add(OperationFailuresRelEngLo4.Id, OperationFailuresRelEngLo4);
            DataRefList.Add(OperationFailuresRelEngLo5.Id, OperationFailuresRelEngLo5);
            DataRefList.Add(OperationFailuresRelEngLo6.Id, OperationFailuresRelEngLo6);
            DataRefList.Add(OperationFailuresRelEngLo7.Id, OperationFailuresRelEngLo7);
            DataRefList.Add(OperationFailuresRelAirres0.Id, OperationFailuresRelAirres0);
            DataRefList.Add(OperationFailuresRelAirres1.Id, OperationFailuresRelAirres1);
            DataRefList.Add(OperationFailuresRelAirres2.Id, OperationFailuresRelAirres2);
            DataRefList.Add(OperationFailuresRelAirres3.Id, OperationFailuresRelAirres3);
            DataRefList.Add(OperationFailuresRelAirres4.Id, OperationFailuresRelAirres4);
            DataRefList.Add(OperationFailuresRelAirres5.Id, OperationFailuresRelAirres5);
            DataRefList.Add(OperationFailuresRelAirres6.Id, OperationFailuresRelAirres6);
            DataRefList.Add(OperationFailuresRelAirres7.Id, OperationFailuresRelAirres7);
            DataRefList.Add(OperationFailuresRelFuelfl0.Id, OperationFailuresRelFuelfl0);
            DataRefList.Add(OperationFailuresRelFuelfl1.Id, OperationFailuresRelFuelfl1);
            DataRefList.Add(OperationFailuresRelFuelfl2.Id, OperationFailuresRelFuelfl2);
            DataRefList.Add(OperationFailuresRelFuelfl3.Id, OperationFailuresRelFuelfl3);
            DataRefList.Add(OperationFailuresRelFuelfl4.Id, OperationFailuresRelFuelfl4);
            DataRefList.Add(OperationFailuresRelFuelfl5.Id, OperationFailuresRelFuelfl5);
            DataRefList.Add(OperationFailuresRelFuelfl6.Id, OperationFailuresRelFuelfl6);
            DataRefList.Add(OperationFailuresRelFuelfl7.Id, OperationFailuresRelFuelfl7);
            DataRefList.Add(OperationFailuresRelComsta0.Id, OperationFailuresRelComsta0);
            DataRefList.Add(OperationFailuresRelComsta1.Id, OperationFailuresRelComsta1);
            DataRefList.Add(OperationFailuresRelComsta2.Id, OperationFailuresRelComsta2);
            DataRefList.Add(OperationFailuresRelComsta3.Id, OperationFailuresRelComsta3);
            DataRefList.Add(OperationFailuresRelComsta4.Id, OperationFailuresRelComsta4);
            DataRefList.Add(OperationFailuresRelComsta5.Id, OperationFailuresRelComsta5);
            DataRefList.Add(OperationFailuresRelComsta6.Id, OperationFailuresRelComsta6);
            DataRefList.Add(OperationFailuresRelComsta7.Id, OperationFailuresRelComsta7);
            DataRefList.Add(OperationFailuresRelStartr0.Id, OperationFailuresRelStartr0);
            DataRefList.Add(OperationFailuresRelStartr1.Id, OperationFailuresRelStartr1);
            DataRefList.Add(OperationFailuresRelStartr2.Id, OperationFailuresRelStartr2);
            DataRefList.Add(OperationFailuresRelStartr3.Id, OperationFailuresRelStartr3);
            DataRefList.Add(OperationFailuresRelStartr4.Id, OperationFailuresRelStartr4);
            DataRefList.Add(OperationFailuresRelStartr5.Id, OperationFailuresRelStartr5);
            DataRefList.Add(OperationFailuresRelStartr6.Id, OperationFailuresRelStartr6);
            DataRefList.Add(OperationFailuresRelStartr7.Id, OperationFailuresRelStartr7);
            DataRefList.Add(OperationFailuresRelIgnitr0.Id, OperationFailuresRelIgnitr0);
            DataRefList.Add(OperationFailuresRelIgnitr1.Id, OperationFailuresRelIgnitr1);
            DataRefList.Add(OperationFailuresRelIgnitr2.Id, OperationFailuresRelIgnitr2);
            DataRefList.Add(OperationFailuresRelIgnitr3.Id, OperationFailuresRelIgnitr3);
            DataRefList.Add(OperationFailuresRelIgnitr4.Id, OperationFailuresRelIgnitr4);
            DataRefList.Add(OperationFailuresRelIgnitr5.Id, OperationFailuresRelIgnitr5);
            DataRefList.Add(OperationFailuresRelIgnitr6.Id, OperationFailuresRelIgnitr6);
            DataRefList.Add(OperationFailuresRelIgnitr7.Id, OperationFailuresRelIgnitr7);
            DataRefList.Add(OperationFailuresRelHunsta0.Id, OperationFailuresRelHunsta0);
            DataRefList.Add(OperationFailuresRelHunsta1.Id, OperationFailuresRelHunsta1);
            DataRefList.Add(OperationFailuresRelHunsta2.Id, OperationFailuresRelHunsta2);
            DataRefList.Add(OperationFailuresRelHunsta3.Id, OperationFailuresRelHunsta3);
            DataRefList.Add(OperationFailuresRelHunsta4.Id, OperationFailuresRelHunsta4);
            DataRefList.Add(OperationFailuresRelHunsta5.Id, OperationFailuresRelHunsta5);
            DataRefList.Add(OperationFailuresRelHunsta6.Id, OperationFailuresRelHunsta6);
            DataRefList.Add(OperationFailuresRelHunsta7.Id, OperationFailuresRelHunsta7);
            DataRefList.Add(OperationFailuresRelClonoz0.Id, OperationFailuresRelClonoz0);
            DataRefList.Add(OperationFailuresRelClonoz1.Id, OperationFailuresRelClonoz1);
            DataRefList.Add(OperationFailuresRelClonoz2.Id, OperationFailuresRelClonoz2);
            DataRefList.Add(OperationFailuresRelClonoz3.Id, OperationFailuresRelClonoz3);
            DataRefList.Add(OperationFailuresRelClonoz4.Id, OperationFailuresRelClonoz4);
            DataRefList.Add(OperationFailuresRelClonoz5.Id, OperationFailuresRelClonoz5);
            DataRefList.Add(OperationFailuresRelClonoz6.Id, OperationFailuresRelClonoz6);
            DataRefList.Add(OperationFailuresRelClonoz7.Id, OperationFailuresRelClonoz7);
            DataRefList.Add(OperationFailuresRelHotsta0.Id, OperationFailuresRelHotsta0);
            DataRefList.Add(OperationFailuresRelHotsta1.Id, OperationFailuresRelHotsta1);
            DataRefList.Add(OperationFailuresRelHotsta2.Id, OperationFailuresRelHotsta2);
            DataRefList.Add(OperationFailuresRelHotsta3.Id, OperationFailuresRelHotsta3);
            DataRefList.Add(OperationFailuresRelHotsta4.Id, OperationFailuresRelHotsta4);
            DataRefList.Add(OperationFailuresRelHotsta5.Id, OperationFailuresRelHotsta5);
            DataRefList.Add(OperationFailuresRelHotsta6.Id, OperationFailuresRelHotsta6);
            DataRefList.Add(OperationFailuresRelHotsta7.Id, OperationFailuresRelHotsta7);
            DataRefList.Add(OperationFailuresRelRunitt0.Id, OperationFailuresRelRunitt0);
            DataRefList.Add(OperationFailuresRelRunitt1.Id, OperationFailuresRelRunitt1);
            DataRefList.Add(OperationFailuresRelRunitt2.Id, OperationFailuresRelRunitt2);
            DataRefList.Add(OperationFailuresRelRunitt3.Id, OperationFailuresRelRunitt3);
            DataRefList.Add(OperationFailuresRelRunitt4.Id, OperationFailuresRelRunitt4);
            DataRefList.Add(OperationFailuresRelRunitt5.Id, OperationFailuresRelRunitt5);
            DataRefList.Add(OperationFailuresRelRunitt6.Id, OperationFailuresRelRunitt6);
            DataRefList.Add(OperationFailuresRelRunitt7.Id, OperationFailuresRelRunitt7);
            DataRefList.Add(OperationFailuresRelGenera0.Id, OperationFailuresRelGenera0);
            DataRefList.Add(OperationFailuresRelGenera1.Id, OperationFailuresRelGenera1);
            DataRefList.Add(OperationFailuresRelGenera2.Id, OperationFailuresRelGenera2);
            DataRefList.Add(OperationFailuresRelGenera3.Id, OperationFailuresRelGenera3);
            DataRefList.Add(OperationFailuresRelGenera4.Id, OperationFailuresRelGenera4);
            DataRefList.Add(OperationFailuresRelGenera5.Id, OperationFailuresRelGenera5);
            DataRefList.Add(OperationFailuresRelGenera6.Id, OperationFailuresRelGenera6);
            DataRefList.Add(OperationFailuresRelGenera7.Id, OperationFailuresRelGenera7);
            DataRefList.Add(OperationFailuresRelBatter0.Id, OperationFailuresRelBatter0);
            DataRefList.Add(OperationFailuresRelBatter1.Id, OperationFailuresRelBatter1);
            DataRefList.Add(OperationFailuresRelBatter2.Id, OperationFailuresRelBatter2);
            DataRefList.Add(OperationFailuresRelBatter3.Id, OperationFailuresRelBatter3);
            DataRefList.Add(OperationFailuresRelBatter4.Id, OperationFailuresRelBatter4);
            DataRefList.Add(OperationFailuresRelBatter5.Id, OperationFailuresRelBatter5);
            DataRefList.Add(OperationFailuresRelBatter6.Id, OperationFailuresRelBatter6);
            DataRefList.Add(OperationFailuresRelBatter7.Id, OperationFailuresRelBatter7);
            DataRefList.Add(OperationFailuresRelGovnr0.Id, OperationFailuresRelGovnr0);
            DataRefList.Add(OperationFailuresRelGovnr1.Id, OperationFailuresRelGovnr1);
            DataRefList.Add(OperationFailuresRelGovnr2.Id, OperationFailuresRelGovnr2);
            DataRefList.Add(OperationFailuresRelGovnr3.Id, OperationFailuresRelGovnr3);
            DataRefList.Add(OperationFailuresRelGovnr4.Id, OperationFailuresRelGovnr4);
            DataRefList.Add(OperationFailuresRelGovnr5.Id, OperationFailuresRelGovnr5);
            DataRefList.Add(OperationFailuresRelGovnr6.Id, OperationFailuresRelGovnr6);
            DataRefList.Add(OperationFailuresRelGovnr7.Id, OperationFailuresRelGovnr7);
            DataRefList.Add(OperationFailuresRelFadec0.Id, OperationFailuresRelFadec0);
            DataRefList.Add(OperationFailuresRelFadec1.Id, OperationFailuresRelFadec1);
            DataRefList.Add(OperationFailuresRelFadec2.Id, OperationFailuresRelFadec2);
            DataRefList.Add(OperationFailuresRelFadec3.Id, OperationFailuresRelFadec3);
            DataRefList.Add(OperationFailuresRelFadec4.Id, OperationFailuresRelFadec4);
            DataRefList.Add(OperationFailuresRelFadec5.Id, OperationFailuresRelFadec5);
            DataRefList.Add(OperationFailuresRelFadec6.Id, OperationFailuresRelFadec6);
            DataRefList.Add(OperationFailuresRelFadec7.Id, OperationFailuresRelFadec7);
            DataRefList.Add(OperationFailuresRelOilpmp0.Id, OperationFailuresRelOilpmp0);
            DataRefList.Add(OperationFailuresRelOilpmp1.Id, OperationFailuresRelOilpmp1);
            DataRefList.Add(OperationFailuresRelOilpmp2.Id, OperationFailuresRelOilpmp2);
            DataRefList.Add(OperationFailuresRelOilpmp3.Id, OperationFailuresRelOilpmp3);
            DataRefList.Add(OperationFailuresRelOilpmp4.Id, OperationFailuresRelOilpmp4);
            DataRefList.Add(OperationFailuresRelOilpmp5.Id, OperationFailuresRelOilpmp5);
            DataRefList.Add(OperationFailuresRelOilpmp6.Id, OperationFailuresRelOilpmp6);
            DataRefList.Add(OperationFailuresRelOilpmp7.Id, OperationFailuresRelOilpmp7);
            DataRefList.Add(OperationFailuresRelChipde0.Id, OperationFailuresRelChipde0);
            DataRefList.Add(OperationFailuresRelChipde1.Id, OperationFailuresRelChipde1);
            DataRefList.Add(OperationFailuresRelChipde2.Id, OperationFailuresRelChipde2);
            DataRefList.Add(OperationFailuresRelChipde3.Id, OperationFailuresRelChipde3);
            DataRefList.Add(OperationFailuresRelChipde4.Id, OperationFailuresRelChipde4);
            DataRefList.Add(OperationFailuresRelChipde5.Id, OperationFailuresRelChipde5);
            DataRefList.Add(OperationFailuresRelChipde6.Id, OperationFailuresRelChipde6);
            DataRefList.Add(OperationFailuresRelChipde7.Id, OperationFailuresRelChipde7);
            DataRefList.Add(OperationFailuresRelPrpfin0.Id, OperationFailuresRelPrpfin0);
            DataRefList.Add(OperationFailuresRelPrpfin1.Id, OperationFailuresRelPrpfin1);
            DataRefList.Add(OperationFailuresRelPrpfin2.Id, OperationFailuresRelPrpfin2);
            DataRefList.Add(OperationFailuresRelPrpfin3.Id, OperationFailuresRelPrpfin3);
            DataRefList.Add(OperationFailuresRelPrpfin4.Id, OperationFailuresRelPrpfin4);
            DataRefList.Add(OperationFailuresRelPrpfin5.Id, OperationFailuresRelPrpfin5);
            DataRefList.Add(OperationFailuresRelPrpfin6.Id, OperationFailuresRelPrpfin6);
            DataRefList.Add(OperationFailuresRelPrpfin7.Id, OperationFailuresRelPrpfin7);
            DataRefList.Add(OperationFailuresRelPrpcrs0.Id, OperationFailuresRelPrpcrs0);
            DataRefList.Add(OperationFailuresRelPrpcrs1.Id, OperationFailuresRelPrpcrs1);
            DataRefList.Add(OperationFailuresRelPrpcrs2.Id, OperationFailuresRelPrpcrs2);
            DataRefList.Add(OperationFailuresRelPrpcrs3.Id, OperationFailuresRelPrpcrs3);
            DataRefList.Add(OperationFailuresRelPrpcrs4.Id, OperationFailuresRelPrpcrs4);
            DataRefList.Add(OperationFailuresRelPrpcrs5.Id, OperationFailuresRelPrpcrs5);
            DataRefList.Add(OperationFailuresRelPrpcrs6.Id, OperationFailuresRelPrpcrs6);
            DataRefList.Add(OperationFailuresRelPrpcrs7.Id, OperationFailuresRelPrpcrs7);
            DataRefList.Add(OperationFailuresRelPshaft0.Id, OperationFailuresRelPshaft0);
            DataRefList.Add(OperationFailuresRelPshaft1.Id, OperationFailuresRelPshaft1);
            DataRefList.Add(OperationFailuresRelPshaft2.Id, OperationFailuresRelPshaft2);
            DataRefList.Add(OperationFailuresRelPshaft3.Id, OperationFailuresRelPshaft3);
            DataRefList.Add(OperationFailuresRelPshaft4.Id, OperationFailuresRelPshaft4);
            DataRefList.Add(OperationFailuresRelPshaft5.Id, OperationFailuresRelPshaft5);
            DataRefList.Add(OperationFailuresRelPshaft6.Id, OperationFailuresRelPshaft6);
            DataRefList.Add(OperationFailuresRelPshaft7.Id, OperationFailuresRelPshaft7);
            DataRefList.Add(OperationFailuresRelSeize0.Id, OperationFailuresRelSeize0);
            DataRefList.Add(OperationFailuresRelSeize1.Id, OperationFailuresRelSeize1);
            DataRefList.Add(OperationFailuresRelSeize2.Id, OperationFailuresRelSeize2);
            DataRefList.Add(OperationFailuresRelSeize3.Id, OperationFailuresRelSeize3);
            DataRefList.Add(OperationFailuresRelSeize4.Id, OperationFailuresRelSeize4);
            DataRefList.Add(OperationFailuresRelSeize5.Id, OperationFailuresRelSeize5);
            DataRefList.Add(OperationFailuresRelSeize6.Id, OperationFailuresRelSeize6);
            DataRefList.Add(OperationFailuresRelSeize7.Id, OperationFailuresRelSeize7);
            DataRefList.Add(OperationFailuresRelRevers0.Id, OperationFailuresRelRevers0);
            DataRefList.Add(OperationFailuresRelRevers1.Id, OperationFailuresRelRevers1);
            DataRefList.Add(OperationFailuresRelRevers2.Id, OperationFailuresRelRevers2);
            DataRefList.Add(OperationFailuresRelRevers3.Id, OperationFailuresRelRevers3);
            DataRefList.Add(OperationFailuresRelRevers4.Id, OperationFailuresRelRevers4);
            DataRefList.Add(OperationFailuresRelRevers5.Id, OperationFailuresRelRevers5);
            DataRefList.Add(OperationFailuresRelRevers6.Id, OperationFailuresRelRevers6);
            DataRefList.Add(OperationFailuresRelRevers7.Id, OperationFailuresRelRevers7);
            DataRefList.Add(OperationFailuresRelRevdep0.Id, OperationFailuresRelRevdep0);
            DataRefList.Add(OperationFailuresRelRevdep1.Id, OperationFailuresRelRevdep1);
            DataRefList.Add(OperationFailuresRelRevdep2.Id, OperationFailuresRelRevdep2);
            DataRefList.Add(OperationFailuresRelRevdep3.Id, OperationFailuresRelRevdep3);
            DataRefList.Add(OperationFailuresRelRevdep4.Id, OperationFailuresRelRevdep4);
            DataRefList.Add(OperationFailuresRelRevdep5.Id, OperationFailuresRelRevdep5);
            DataRefList.Add(OperationFailuresRelRevdep6.Id, OperationFailuresRelRevdep6);
            DataRefList.Add(OperationFailuresRelRevdep7.Id, OperationFailuresRelRevdep7);
            DataRefList.Add(OperationFailuresRelRevloc0.Id, OperationFailuresRelRevloc0);
            DataRefList.Add(OperationFailuresRelRevloc1.Id, OperationFailuresRelRevloc1);
            DataRefList.Add(OperationFailuresRelRevloc2.Id, OperationFailuresRelRevloc2);
            DataRefList.Add(OperationFailuresRelRevloc3.Id, OperationFailuresRelRevloc3);
            DataRefList.Add(OperationFailuresRelRevloc4.Id, OperationFailuresRelRevloc4);
            DataRefList.Add(OperationFailuresRelRevloc5.Id, OperationFailuresRelRevloc5);
            DataRefList.Add(OperationFailuresRelRevloc6.Id, OperationFailuresRelRevloc6);
            DataRefList.Add(OperationFailuresRelRevloc7.Id, OperationFailuresRelRevloc7);
            DataRefList.Add(OperationFailuresRelAftbur0.Id, OperationFailuresRelAftbur0);
            DataRefList.Add(OperationFailuresRelAftbur1.Id, OperationFailuresRelAftbur1);
            DataRefList.Add(OperationFailuresRelAftbur2.Id, OperationFailuresRelAftbur2);
            DataRefList.Add(OperationFailuresRelAftbur3.Id, OperationFailuresRelAftbur3);
            DataRefList.Add(OperationFailuresRelAftbur4.Id, OperationFailuresRelAftbur4);
            DataRefList.Add(OperationFailuresRelAftbur5.Id, OperationFailuresRelAftbur5);
            DataRefList.Add(OperationFailuresRelAftbur6.Id, OperationFailuresRelAftbur6);
            DataRefList.Add(OperationFailuresRelAftbur7.Id, OperationFailuresRelAftbur7);
            DataRefList.Add(OperationFailuresRelIceInletHeat.Id, OperationFailuresRelIceInletHeat);
            DataRefList.Add(OperationFailuresRelIceInletHeat2.Id, OperationFailuresRelIceInletHeat2);
            DataRefList.Add(OperationFailuresRelIceInletHeat3.Id, OperationFailuresRelIceInletHeat3);
            DataRefList.Add(OperationFailuresRelIceInletHeat4.Id, OperationFailuresRelIceInletHeat4);
            DataRefList.Add(OperationFailuresRelIceInletHeat5.Id, OperationFailuresRelIceInletHeat5);
            DataRefList.Add(OperationFailuresRelIceInletHeat6.Id, OperationFailuresRelIceInletHeat6);
            DataRefList.Add(OperationFailuresRelIceInletHeat7.Id, OperationFailuresRelIceInletHeat7);
            DataRefList.Add(OperationFailuresRelIceInletHeat8.Id, OperationFailuresRelIceInletHeat8);
            DataRefList.Add(OperationFailuresRelIcePropHeat.Id, OperationFailuresRelIcePropHeat);
            DataRefList.Add(OperationFailuresRelIcePropHeat2.Id, OperationFailuresRelIcePropHeat2);
            DataRefList.Add(OperationFailuresRelIcePropHeat3.Id, OperationFailuresRelIcePropHeat3);
            DataRefList.Add(OperationFailuresRelIcePropHeat4.Id, OperationFailuresRelIcePropHeat4);
            DataRefList.Add(OperationFailuresRelIcePropHeat5.Id, OperationFailuresRelIcePropHeat5);
            DataRefList.Add(OperationFailuresRelIcePropHeat6.Id, OperationFailuresRelIcePropHeat6);
            DataRefList.Add(OperationFailuresRelIcePropHeat7.Id, OperationFailuresRelIcePropHeat7);
            DataRefList.Add(OperationFailuresRelIcePropHeat8.Id, OperationFailuresRelIcePropHeat8);
            DataRefList.Add(OperationFailuresRelWing1l.Id, OperationFailuresRelWing1l);
            DataRefList.Add(OperationFailuresRelWing1r.Id, OperationFailuresRelWing1r);
            DataRefList.Add(OperationFailuresRelWing2l.Id, OperationFailuresRelWing2l);
            DataRefList.Add(OperationFailuresRelWing2r.Id, OperationFailuresRelWing2r);
            DataRefList.Add(OperationFailuresRelWing3l.Id, OperationFailuresRelWing3l);
            DataRefList.Add(OperationFailuresRelWing3r.Id, OperationFailuresRelWing3r);
            DataRefList.Add(OperationFailuresRelWing4l.Id, OperationFailuresRelWing4l);
            DataRefList.Add(OperationFailuresRelWing4r.Id, OperationFailuresRelWing4r);
            DataRefList.Add(OperationFailuresRelHstbl.Id, OperationFailuresRelHstbl);
            DataRefList.Add(OperationFailuresRelHstbr.Id, OperationFailuresRelHstbr);
            DataRefList.Add(OperationFailuresRelVstb1.Id, OperationFailuresRelVstb1);
            DataRefList.Add(OperationFailuresRelVstb2.Id, OperationFailuresRelVstb2);
            DataRefList.Add(OperationFailuresRelMwing1.Id, OperationFailuresRelMwing1);
            DataRefList.Add(OperationFailuresRelMwing2.Id, OperationFailuresRelMwing2);
            DataRefList.Add(OperationFailuresRelMwing3.Id, OperationFailuresRelMwing3);
            DataRefList.Add(OperationFailuresRelMwing4.Id, OperationFailuresRelMwing4);
            DataRefList.Add(OperationFailuresRelMwing5.Id, OperationFailuresRelMwing5);
            DataRefList.Add(OperationFailuresRelMwing6.Id, OperationFailuresRelMwing6);
            DataRefList.Add(OperationFailuresRelMwing7.Id, OperationFailuresRelMwing7);
            DataRefList.Add(OperationFailuresRelMwing8.Id, OperationFailuresRelMwing8);
            DataRefList.Add(OperationFailuresRelPyl1a.Id, OperationFailuresRelPyl1a);
            DataRefList.Add(OperationFailuresRelPyl2a.Id, OperationFailuresRelPyl2a);
            DataRefList.Add(OperationFailuresRelPyl3a.Id, OperationFailuresRelPyl3a);
            DataRefList.Add(OperationFailuresRelPyl4a.Id, OperationFailuresRelPyl4a);
            DataRefList.Add(OperationFailuresRelPyl5a.Id, OperationFailuresRelPyl5a);
            DataRefList.Add(OperationFailuresRelPyl6a.Id, OperationFailuresRelPyl6a);
            DataRefList.Add(OperationFailuresRelPyl7a.Id, OperationFailuresRelPyl7a);
            DataRefList.Add(OperationFailuresRelPyl8a.Id, OperationFailuresRelPyl8a);
            DataRefList.Add(OperationFailuresRelPyl1b.Id, OperationFailuresRelPyl1b);
            DataRefList.Add(OperationFailuresRelPyl2b.Id, OperationFailuresRelPyl2b);
            DataRefList.Add(OperationFailuresRelPyl3b.Id, OperationFailuresRelPyl3b);
            DataRefList.Add(OperationFailuresRelPyl4b.Id, OperationFailuresRelPyl4b);
            DataRefList.Add(OperationFailuresRelPyl5b.Id, OperationFailuresRelPyl5b);
            DataRefList.Add(OperationFailuresRelPyl6b.Id, OperationFailuresRelPyl6b);
            DataRefList.Add(OperationFailuresRelPyl7b.Id, OperationFailuresRelPyl7b);
            DataRefList.Add(OperationFailuresRelPyl8b.Id, OperationFailuresRelPyl8b);
            DataRefList.Add(OperationFailuresRelGenEsys.Id, OperationFailuresRelGenEsys);
            DataRefList.Add(OperationFailuresRelGenAvio.Id, OperationFailuresRelGenAvio);
            DataRefList.Add(OperationFailuresRelApu.Id, OperationFailuresRelApu);
            DataRefList.Add(OperationFailuresRelApuFire.Id, OperationFailuresRelApuFire);
            DataRefList.Add(OperationG430G430IsVloc.Id, OperationG430G430IsVloc);
            DataRefList.Add(OperationMiscDebugNetwork.Id, OperationMiscDebugNetwork);
            DataRefList.Add(OperationMiscFrameRatePeriod.Id, OperationMiscFrameRatePeriod);
            DataRefList.Add(OperationMiscTimeRatio.Id, OperationMiscTimeRatio);
            DataRefList.Add(OperationOverrideOverrideJoystick.Id, OperationOverrideOverrideJoystick);
            DataRefList.Add(OperationOverrideOverrideArtstab.Id, OperationOverrideOverrideArtstab);
            DataRefList.Add(OperationOverrideOverrideFlightcontrol.Id, OperationOverrideOverrideFlightcontrol);
            DataRefList.Add(OperationOverrideOverrideGearbrake.Id, OperationOverrideOverrideGearbrake);
            DataRefList.Add(OperationOverrideOverridePlanepath.Id, OperationOverrideOverridePlanepath);
            DataRefList.Add(OperationOverrideOverridePlaneAiAutopilot.Id, OperationOverrideOverridePlaneAiAutopilot);
            DataRefList.Add(OperationOverrideOverrideNavneedles.Id, OperationOverrideOverrideNavneedles);
            DataRefList.Add(OperationOverrideOverrideNav1Needles.Id, OperationOverrideOverrideNav1Needles);
            DataRefList.Add(OperationOverrideOverrideNav2Needles.Id, OperationOverrideOverrideNav2Needles);
            DataRefList.Add(OperationOverrideOverrideAdf.Id, OperationOverrideOverrideAdf);
            DataRefList.Add(OperationOverrideOverrideDme.Id, OperationOverrideOverrideDme);
            DataRefList.Add(OperationOverrideOverrideGps.Id, OperationOverrideOverrideGps);
            DataRefList.Add(OperationOverrideOverrideNavHeading.Id, OperationOverrideOverrideNavHeading);
            DataRefList.Add(OperationOverrideOverrideFlightdir.Id, OperationOverrideOverrideFlightdir);
            DataRefList.Add(OperationOverrideOverrideFlightdirPtch.Id, OperationOverrideOverrideFlightdirPtch);
            DataRefList.Add(OperationOverrideOverrideFlightdirRoll.Id, OperationOverrideOverrideFlightdirRoll);
            DataRefList.Add(OperationOverrideOverrideCamera.Id, OperationOverrideOverrideCamera);
            DataRefList.Add(OperationOverrideOverrideAnnunciators.Id, OperationOverrideOverrideAnnunciators);
            DataRefList.Add(OperationOverrideOverrideAutopilot.Id, OperationOverrideOverrideAutopilot);
            DataRefList.Add(OperationOverrideOverrideJoystickHeading.Id, OperationOverrideOverrideJoystickHeading);
            DataRefList.Add(OperationOverrideOverrideJoystickPitch.Id, OperationOverrideOverrideJoystickPitch);
            DataRefList.Add(OperationOverrideOverrideJoystickRoll.Id, OperationOverrideOverrideJoystickRoll);
            DataRefList.Add(OperationOverrideOverrideThrottles.Id, OperationOverrideOverrideThrottles);
            DataRefList.Add(OperationOverrideOverridePropPitch.Id, OperationOverrideOverridePropPitch);
            DataRefList.Add(OperationOverrideOverridePropMode.Id, OperationOverrideOverridePropMode);
            DataRefList.Add(OperationOverrideOverrideMixture.Id, OperationOverrideOverrideMixture);
            DataRefList.Add(OperationOverrideOverrideGroundplane.Id, OperationOverrideOverrideGroundplane);
            DataRefList.Add(OperationOverrideOverrideFmsAdvance.Id, OperationOverrideOverrideFmsAdvance);
            DataRefList.Add(OperationOverrideOverrideFuelFlow.Id, OperationOverrideOverrideFuelFlow);
            DataRefList.Add(OperationOverrideOverrideIttEgt.Id, OperationOverrideOverrideIttEgt);
            DataRefList.Add(OperationOverrideOverrideChtOilt.Id, OperationOverrideOverrideChtOilt);
            DataRefList.Add(OperationOverrideOverrideIas.Id, OperationOverrideOverrideIas);
            DataRefList.Add(OperationOverrideOverrideControlSurfaces.Id, OperationOverrideOverrideControlSurfaces);
            DataRefList.Add(OperationOverrideOverrideEngines.Id, OperationOverrideOverrideEngines);
            DataRefList.Add(OperationOverrideOverrideTorqueMotors.Id, OperationOverrideOverrideTorqueMotors);
            DataRefList.Add(OperationOverrideOverrideForces.Id, OperationOverrideOverrideForces);
            DataRefList.Add(OperationOverrideOverrideWingForces.Id, OperationOverrideOverrideWingForces);
            DataRefList.Add(OperationOverrideOverrideEngineForces.Id, OperationOverrideOverrideEngineForces);
            DataRefList.Add(OperationOverrideOverrideGearForces.Id, OperationOverrideOverrideGearForces);
            DataRefList.Add(OperationOverrideOverrideBoats.Id, OperationOverrideOverrideBoats);
            DataRefList.Add(OperationOverrideOverrideClouds.Id, OperationOverrideOverrideClouds);
            DataRefList.Add(OperationOverrideOverrideWheelSteer.Id, OperationOverrideOverrideWheelSteer);
            DataRefList.Add(OperationOverrideOverrideAirportLites.Id, OperationOverrideOverrideAirportLites);
            DataRefList.Add(OperationOverrideOverrideFuelSystem.Id, OperationOverrideOverrideFuelSystem);
            DataRefList.Add(OperationOverrideOverrideTCAS.Id, OperationOverrideOverrideTCAS);
            DataRefList.Add(OperationOverrideOverrideMultiplayerMapLayer.Id, OperationOverrideOverrideMultiplayerMapLayer);
            DataRefList.Add(OperationOverrideOverrideToeBrakes.Id, OperationOverrideOverrideToeBrakes);
            DataRefList.Add(OperationOverrideOverrideGroundTrucks.Id, OperationOverrideOverrideGroundTrucks);
            DataRefList.Add(OperationOverrideOverrideTimestep.Id, OperationOverrideOverrideTimestep);
            DataRefList.Add(OperationOverrideOverridePressurization.Id, OperationOverrideOverridePressurization);
            DataRefList.Add(OperationOverrideOverrideOxygenSystem.Id, OperationOverrideOverrideOxygenSystem);
            DataRefList.Add(OperationOverrideOverrideSlungLoadSize.Id, OperationOverrideOverrideSlungLoadSize);
            DataRefList.Add(OperationPrefsStartupRunning.Id, OperationPrefsStartupRunning);
            DataRefList.Add(OperationPrefsWarnOverspeed.Id, OperationPrefsWarnOverspeed);
            DataRefList.Add(OperationPrefsWarnOvergforce.Id, OperationPrefsWarnOvergforce);
            DataRefList.Add(OperationPrefsWarnOverspeedFlaps.Id, OperationPrefsWarnOverspeedFlaps);
            DataRefList.Add(OperationPrefsWarnOverspeedGear.Id, OperationPrefsWarnOverspeedGear);
            DataRefList.Add(OperationPrefsResetOnCrash.Id, OperationPrefsResetOnCrash);
            DataRefList.Add(OperationPrefsWarnNonobviousStuff.Id, OperationPrefsWarnNonobviousStuff);
            DataRefList.Add(OperationPrefsTextOut.Id, OperationPrefsTextOut);
            DataRefList.Add(OperationPrefsReplayMode.Id, OperationPrefsReplayMode);
            DataRefList.Add(OperationPrefsAiFliesAircraft.Id, OperationPrefsAiFliesAircraft);
            DataRefList.Add(OperationPrefsUsingExperimentalFm.Id, OperationPrefsUsingExperimentalFm);
            DataRefList.Add(OperationPrefsMiscLanguage.Id, OperationPrefsMiscLanguage);
            DataRefList.Add(OperationPrefsMiscHasLuaAlloc.Id, OperationPrefsMiscHasLuaAlloc);
            DataRefList.Add(OperationSoundHasSound.Id, OperationSoundHasSound);
            DataRefList.Add(OperationSoundHasSpeechSynth.Id, OperationSoundHasSpeechSynth);
            DataRefList.Add(OperationSoundSoundOn.Id, OperationSoundSoundOn);
            DataRefList.Add(OperationSoundSpeechOn.Id, OperationSoundSpeechOn);
            DataRefList.Add(OperationSoundMasterVolumeRatio.Id, OperationSoundMasterVolumeRatio);
            DataRefList.Add(OperationSoundExteriorVolumeRatio.Id, OperationSoundExteriorVolumeRatio);
            DataRefList.Add(OperationSoundInteriorVolumeRatio.Id, OperationSoundInteriorVolumeRatio);
            DataRefList.Add(OperationSoundCopilotVolumeRatio.Id, OperationSoundCopilotVolumeRatio);
            DataRefList.Add(OperationSoundRadioVolumeRatio.Id, OperationSoundRadioVolumeRatio);
            DataRefList.Add(OperationSoundEnviroVolumeRatio.Id, OperationSoundEnviroVolumeRatio);
            DataRefList.Add(OperationSoundUiVolumeRatio.Id, OperationSoundUiVolumeRatio);
            DataRefList.Add(OperationSoundEngineVolumeRatio.Id, OperationSoundEngineVolumeRatio);
            DataRefList.Add(OperationSoundPropVolumeRatio.Id, OperationSoundPropVolumeRatio);
            DataRefList.Add(OperationSoundGroundVolumeRatio.Id, OperationSoundGroundVolumeRatio);
            DataRefList.Add(OperationSoundWeatherVolumeRatio.Id, OperationSoundWeatherVolumeRatio);
            DataRefList.Add(OperationSoundWarningVolumeRatio.Id, OperationSoundWarningVolumeRatio);
            DataRefList.Add(OperationSoundFanVolumeRatio.Id, OperationSoundFanVolumeRatio);
            DataRefList.Add(OperationSoundInsideRatio.Id, OperationSoundInsideRatio);
            DataRefList.Add(OperationSoundInsideAny.Id, OperationSoundInsideAny);
            DataRefList.Add(OperationSoundUsersCanopyOpenRatio.Id, OperationSoundUsersCanopyOpenRatio);
            DataRefList.Add(OperationSoundUsersDoorOpenRatio.Id, OperationSoundUsersDoorOpenRatio);
            DataRefList.Add(OperationWindowsSystemWindow.Id, OperationWindowsSystemWindow);
            DataRefList.Add(OperationWindowsSystemWindow64.Id, OperationWindowsSystemWindow64);
            DataRefList.Add(TestTestFloat.Id, TestTestFloat);
            DataRefList.Add(TimeTimerIsRunningSec.Id, TimeTimerIsRunningSec);
            DataRefList.Add(TimeTotalRunningTimeSec.Id, TimeTotalRunningTimeSec);
            DataRefList.Add(TimeTotalFlightTimeSec.Id, TimeTotalFlightTimeSec);
            DataRefList.Add(TimeTimerElapsedTimeSec.Id, TimeTimerElapsedTimeSec);
            DataRefList.Add(TimeLocalTimeSec.Id, TimeLocalTimeSec);
            DataRefList.Add(TimeZuluTimeSec.Id, TimeZuluTimeSec);
            DataRefList.Add(TimeLocalDateDays.Id, TimeLocalDateDays);
            DataRefList.Add(TimeUseSystemTime.Id, TimeUseSystemTime);
            DataRefList.Add(TimePaused.Id, TimePaused);
            DataRefList.Add(TimeSimSpeed.Id, TimeSimSpeed);
            DataRefList.Add(TimeSimSpeedActual.Id, TimeSimSpeedActual);
            DataRefList.Add(TimeSimSpeedActualOgl.Id, TimeSimSpeedActualOgl);
            DataRefList.Add(TimeGroundSpeed.Id, TimeGroundSpeed);
            DataRefList.Add(TimeGroundSpeedFlt.Id, TimeGroundSpeedFlt);
            DataRefList.Add(TimeHobbsTime.Id, TimeHobbsTime);
            DataRefList.Add(TimeIsInReplay.Id, TimeIsInReplay);
            DataRefList.Add(TimeFrameratePeriod.Id, TimeFrameratePeriod);
            DataRefList.Add(TimeGpuTimePerFrameSecApprox.Id, TimeGpuTimePerFrameSecApprox);
            DataRefList.Add(VersionXplaneeInternalVersion.Id, VersionXplaneeInternalVersion);
            DataRefList.Add(VersionXplaneInternalVersion.Id, VersionXplaneInternalVersion);
            DataRefList.Add(WeaponsWeaponCount.Id, WeaponsWeaponCount);
            DataRefList.Add(WeaponsType.Id, WeaponsType);
            DataRefList.Add(WeaponsFreeFlyer.Id, WeaponsFreeFlyer);
            DataRefList.Add(WeaponsActionMode.Id, WeaponsActionMode);
            DataRefList.Add(WeaponsXWpnAtt.Id, WeaponsXWpnAtt);
            DataRefList.Add(WeaponsYWpnAtt.Id, WeaponsYWpnAtt);
            DataRefList.Add(WeaponsZWpnAtt.Id, WeaponsZWpnAtt);
            DataRefList.Add(WeaponsCgy.Id, WeaponsCgy);
            DataRefList.Add(WeaponsCgz.Id, WeaponsCgz);
            DataRefList.Add(WeaponsLasRange.Id, WeaponsLasRange);
            DataRefList.Add(WeaponsConvRange.Id, WeaponsConvRange);
            DataRefList.Add(WeaponsBulRoundsPerSec.Id, WeaponsBulRoundsPerSec);
            DataRefList.Add(WeaponsBulRounds.Id, WeaponsBulRounds);
            DataRefList.Add(WeaponsBulMuzzleSpeed.Id, WeaponsBulMuzzleSpeed);
            DataRefList.Add(WeaponsBulArea.Id, WeaponsBulArea);
            DataRefList.Add(WeaponsAddedMass.Id, WeaponsAddedMass);
            DataRefList.Add(WeaponsTotalWeaponMassMax.Id, WeaponsTotalWeaponMassMax);
            DataRefList.Add(WeaponsFuelWarheadMassMax.Id, WeaponsFuelWarheadMassMax);
            DataRefList.Add(WeaponsWarheadType.Id, WeaponsWarheadType);
            DataRefList.Add(WeaponsMisDragCo.Id, WeaponsMisDragCo);
            DataRefList.Add(WeaponsMisDragChuteS.Id, WeaponsMisDragChuteS);
            DataRefList.Add(WeaponsMisConeWidth.Id, WeaponsMisConeWidth);
            DataRefList.Add(WeaponsMisCratPerDegBore.Id, WeaponsMisCratPerDegBore);
            DataRefList.Add(WeaponsMisCratPerDegpersecBore.Id, WeaponsMisCratPerDegpersecBore);
            DataRefList.Add(WeaponsMisCratPerDegpersec.Id, WeaponsMisCratPerDegpersec);
            DataRefList.Add(WeaponsGunDelPsiDegMax.Id, WeaponsGunDelPsiDegMax);
            DataRefList.Add(WeaponsGunDelTheDegMax.Id, WeaponsGunDelTheDegMax);
            DataRefList.Add(WeaponsSFrn.Id, WeaponsSFrn);
            DataRefList.Add(WeaponsSSid.Id, WeaponsSSid);
            DataRefList.Add(WeaponsSTop.Id, WeaponsSTop);
            DataRefList.Add(WeaponsXBodyAero.Id, WeaponsXBodyAero);
            DataRefList.Add(WeaponsYBodyAero.Id, WeaponsYBodyAero);
            DataRefList.Add(WeaponsZBodyAero.Id, WeaponsZBodyAero);
            DataRefList.Add(WeaponsJxxUnitmass.Id, WeaponsJxxUnitmass);
            DataRefList.Add(WeaponsJyyUnitmass.Id, WeaponsJyyUnitmass);
            DataRefList.Add(WeaponsJzzUnitmass.Id, WeaponsJzzUnitmass);
            DataRefList.Add(WeaponsTargetIndex.Id, WeaponsTargetIndex);
            DataRefList.Add(WeaponsTargLat.Id, WeaponsTargLat);
            DataRefList.Add(WeaponsTargLon.Id, WeaponsTargLon);
            DataRefList.Add(WeaponsTargH.Id, WeaponsTargH);
            DataRefList.Add(WeaponsDelPsi.Id, WeaponsDelPsi);
            DataRefList.Add(WeaponsDelThe.Id, WeaponsDelThe);
            DataRefList.Add(WeaponsRuddRat.Id, WeaponsRuddRat);
            DataRefList.Add(WeaponsElevRat.Id, WeaponsElevRat);
            DataRefList.Add(WeaponsVMsc.Id, WeaponsVMsc);
            DataRefList.Add(WeaponsAVMsc.Id, WeaponsAVMsc);
            DataRefList.Add(WeaponsDistTarg.Id, WeaponsDistTarg);
            DataRefList.Add(WeaponsDistPoint.Id, WeaponsDistPoint);
            DataRefList.Add(WeaponsTimePoint.Id, WeaponsTimePoint);
            DataRefList.Add(WeaponsFxAxis.Id, WeaponsFxAxis);
            DataRefList.Add(WeaponsFyAxis.Id, WeaponsFyAxis);
            DataRefList.Add(WeaponsFzAxis.Id, WeaponsFzAxis);
            DataRefList.Add(WeaponsVx.Id, WeaponsVx);
            DataRefList.Add(WeaponsVy.Id, WeaponsVy);
            DataRefList.Add(WeaponsVz.Id, WeaponsVz);
            DataRefList.Add(WeaponsX.Id, WeaponsX);
            DataRefList.Add(WeaponsY.Id, WeaponsY);
            DataRefList.Add(WeaponsZ.Id, WeaponsZ);
            DataRefList.Add(WeaponsL.Id, WeaponsL);
            DataRefList.Add(WeaponsM.Id, WeaponsM);
            DataRefList.Add(WeaponsN.Id, WeaponsN);
            DataRefList.Add(WeaponsPrad.Id, WeaponsPrad);
            DataRefList.Add(WeaponsQrad.Id, WeaponsQrad);
            DataRefList.Add(WeaponsRrad.Id, WeaponsRrad);
            DataRefList.Add(WeaponsThe.Id, WeaponsThe);
            DataRefList.Add(WeaponsPsi.Id, WeaponsPsi);
            DataRefList.Add(WeaponsPhi.Id, WeaponsPhi);
            DataRefList.Add(WeaponsNextBullTime.Id, WeaponsNextBullTime);
            DataRefList.Add(WeaponsTotalWeaponMassNow.Id, WeaponsTotalWeaponMassNow);
            DataRefList.Add(WeaponsFuelWarheadMassNow.Id, WeaponsFuelWarheadMassNow);
            DataRefList.Add(WeaponsMisThrust1.Id, WeaponsMisThrust1);
            DataRefList.Add(WeaponsMisThrust2.Id, WeaponsMisThrust2);
            DataRefList.Add(WeaponsMisThrust3.Id, WeaponsMisThrust3);
            DataRefList.Add(WeaponsMisDuration1.Id, WeaponsMisDuration1);
            DataRefList.Add(WeaponsMisDuration2.Id, WeaponsMisDuration2);
            DataRefList.Add(WeaponsMisDuration3.Id, WeaponsMisDuration3);
            DataRefList.Add(WeaponsQ1.Id, WeaponsQ1);
            DataRefList.Add(WeaponsQ2.Id, WeaponsQ2);
            DataRefList.Add(WeaponsQ3.Id, WeaponsQ3);
            DataRefList.Add(WeaponsQ4.Id, WeaponsQ4);
            DataRefList.Add(WeaponsArmed.Id, WeaponsArmed);
            DataRefList.Add(WeaponsFiring.Id, WeaponsFiring);
            DataRefList.Add(WeaponsShellIsAttached.Id, WeaponsShellIsAttached);
            DataRefList.Add(WeaponsShellThrustRat.Id, WeaponsShellThrustRat);
            DataRefList.Add(WeatherCloudType0.Id, WeatherCloudType0);
            DataRefList.Add(WeatherCloudType1.Id, WeatherCloudType1);
            DataRefList.Add(WeatherCloudType2.Id, WeatherCloudType2);
            DataRefList.Add(WeatherCloudCoverage0.Id, WeatherCloudCoverage0);
            DataRefList.Add(WeatherCloudCoverage1.Id, WeatherCloudCoverage1);
            DataRefList.Add(WeatherCloudCoverage2.Id, WeatherCloudCoverage2);
            DataRefList.Add(WeatherCloudBaseMslM0.Id, WeatherCloudBaseMslM0);
            DataRefList.Add(WeatherCloudBaseMslM1.Id, WeatherCloudBaseMslM1);
            DataRefList.Add(WeatherCloudBaseMslM2.Id, WeatherCloudBaseMslM2);
            DataRefList.Add(WeatherCloudTopsMslM0.Id, WeatherCloudTopsMslM0);
            DataRefList.Add(WeatherCloudTopsMslM1.Id, WeatherCloudTopsMslM1);
            DataRefList.Add(WeatherCloudTopsMslM2.Id, WeatherCloudTopsMslM2);
            DataRefList.Add(WeatherVisibilityReportedM.Id, WeatherVisibilityReportedM);
            DataRefList.Add(WeatherRainPercent.Id, WeatherRainPercent);
            DataRefList.Add(WeatherThunderstormPercent.Id, WeatherThunderstormPercent);
            DataRefList.Add(WeatherWindTurbulencePercent.Id, WeatherWindTurbulencePercent);
            DataRefList.Add(WeatherBarometerSealevelInhg.Id, WeatherBarometerSealevelInhg);
            DataRefList.Add(WeatherHasRealWeatherBool.Id, WeatherHasRealWeatherBool);
            DataRefList.Add(WeatherUseRealWeatherBool.Id, WeatherUseRealWeatherBool);
            DataRefList.Add(WeatherDownloadRealWeather.Id, WeatherDownloadRealWeather);
            DataRefList.Add(WeatherSigma.Id, WeatherSigma);
            DataRefList.Add(WeatherRho.Id, WeatherRho);
            DataRefList.Add(WeatherBarometerCurrentInhg.Id, WeatherBarometerCurrentInhg);
            DataRefList.Add(WeatherGravityMss.Id, WeatherGravityMss);
            DataRefList.Add(WeatherSpeedSoundMs.Id, WeatherSpeedSoundMs);
            DataRefList.Add(WeatherWindAltitudeMslM0.Id, WeatherWindAltitudeMslM0);
            DataRefList.Add(WeatherWindAltitudeMslM1.Id, WeatherWindAltitudeMslM1);
            DataRefList.Add(WeatherWindAltitudeMslM2.Id, WeatherWindAltitudeMslM2);
            DataRefList.Add(WeatherWindDirectionDegt0.Id, WeatherWindDirectionDegt0);
            DataRefList.Add(WeatherWindDirectionDegt1.Id, WeatherWindDirectionDegt1);
            DataRefList.Add(WeatherWindDirectionDegt2.Id, WeatherWindDirectionDegt2);
            DataRefList.Add(WeatherWindSpeedKt0.Id, WeatherWindSpeedKt0);
            DataRefList.Add(WeatherWindSpeedKt1.Id, WeatherWindSpeedKt1);
            DataRefList.Add(WeatherWindSpeedKt2.Id, WeatherWindSpeedKt2);
            DataRefList.Add(WeatherShearDirectionDegt0.Id, WeatherShearDirectionDegt0);
            DataRefList.Add(WeatherShearDirectionDegt1.Id, WeatherShearDirectionDegt1);
            DataRefList.Add(WeatherShearDirectionDegt2.Id, WeatherShearDirectionDegt2);
            DataRefList.Add(WeatherShearSpeedKt0.Id, WeatherShearSpeedKt0);
            DataRefList.Add(WeatherShearSpeedKt1.Id, WeatherShearSpeedKt1);
            DataRefList.Add(WeatherShearSpeedKt2.Id, WeatherShearSpeedKt2);
            DataRefList.Add(WeatherTurbulence0.Id, WeatherTurbulence0);
            DataRefList.Add(WeatherTurbulence1.Id, WeatherTurbulence1);
            DataRefList.Add(WeatherTurbulence2.Id, WeatherTurbulence2);
            DataRefList.Add(WeatherWaveAmplitude.Id, WeatherWaveAmplitude);
            DataRefList.Add(WeatherWaveLength.Id, WeatherWaveLength);
            DataRefList.Add(WeatherWaveSpeed.Id, WeatherWaveSpeed);
            DataRefList.Add(WeatherWaveDir.Id, WeatherWaveDir);
            DataRefList.Add(WeatherTemperatureSealevelC.Id, WeatherTemperatureSealevelC);
            DataRefList.Add(WeatherTemperatureTropoC.Id, WeatherTemperatureTropoC);
            DataRefList.Add(WeatherTropoAltMtr.Id, WeatherTropoAltMtr);
            DataRefList.Add(WeatherDewpoiSealevelC.Id, WeatherDewpoiSealevelC);
            DataRefList.Add(WeatherRelativeHumiditySealevelPercent.Id, WeatherRelativeHumiditySealevelPercent);
            DataRefList.Add(WeatherTemperatureAmbientC.Id, WeatherTemperatureAmbientC);
            DataRefList.Add(WeatherTemperatureLeC.Id, WeatherTemperatureLeC);
            DataRefList.Add(WeatherThermalPercent.Id, WeatherThermalPercent);
            DataRefList.Add(WeatherThermalRateMs.Id, WeatherThermalRateMs);
            DataRefList.Add(WeatherThermalAltitudeMslM.Id, WeatherThermalAltitudeMslM);
            DataRefList.Add(WeatherRunwayFriction.Id, WeatherRunwayFriction);
            DataRefList.Add(WeatherRunwayIsPatchy.Id, WeatherRunwayIsPatchy);
            DataRefList.Add(WeatherWindDirectionDegt.Id, WeatherWindDirectionDegt);
            DataRefList.Add(WeatherWindSpeedKt.Id, WeatherWindSpeedKt);
            DataRefList.Add(WeatherWindNowXMsc.Id, WeatherWindNowXMsc);
            DataRefList.Add(WeatherWindNowYMsc.Id, WeatherWindNowYMsc);
            DataRefList.Add(WeatherWindNowZMsc.Id, WeatherWindNowZMsc);
            DataRefList.Add(WeatherPrecipitationOnAircraftRatio.Id, WeatherPrecipitationOnAircraftRatio);
            DataRefList.Add(WorldBoatVelocityMsc.Id, WorldBoatVelocityMsc);
            DataRefList.Add(WorldBoatXMtr.Id, WorldBoatXMtr);
            DataRefList.Add(WorldBoatYMtr.Id, WorldBoatYMtr);
            DataRefList.Add(WorldBoatZMtr.Id, WorldBoatZMtr);
            DataRefList.Add(WorldBoatHeadingDeg.Id, WorldBoatHeadingDeg);
            DataRefList.Add(WorldBoatPitchFrequencyHz.Id, WorldBoatPitchFrequencyHz);
            DataRefList.Add(WorldBoatPitchAmplitudeDegMtr.Id, WorldBoatPitchAmplitudeDegMtr);
            DataRefList.Add(WorldBoatRollFrequencyHz.Id, WorldBoatRollFrequencyHz);
            DataRefList.Add(WorldBoatRollAmplitudeDegMtr.Id, WorldBoatRollAmplitudeDegMtr);
            DataRefList.Add(WorldBoatFrigateDeckHeightMtr.Id, WorldBoatFrigateDeckHeightMtr);
            DataRefList.Add(WorldBoatFrigateILSOffsetXMtr.Id, WorldBoatFrigateILSOffsetXMtr);
            DataRefList.Add(WorldBoatFrigateILSOffsetZMtr.Id, WorldBoatFrigateILSOffsetZMtr);
            DataRefList.Add(WorldBoatCarrierDeckHeightMtr.Id, WorldBoatCarrierDeckHeightMtr);
            DataRefList.Add(WorldBoatCarrierILSOffsetXMtr.Id, WorldBoatCarrierILSOffsetXMtr);
            DataRefList.Add(WorldBoatCarrierILSOffsetZMtr.Id, WorldBoatCarrierILSOffsetZMtr);
            DataRefList.Add(WorldBoatCarrierApproachHeading.Id, WorldBoatCarrierApproachHeading);
            DataRefList.Add(WorldBoatCarrierCatshotHeading.Id, WorldBoatCarrierCatshotHeading);
            DataRefList.Add(WorldBoatCarrierCatshotStartXMtr.Id, WorldBoatCarrierCatshotStartXMtr);
            DataRefList.Add(WorldBoatCarrierCatshotStartZMtr.Id, WorldBoatCarrierCatshotStartZMtr);
            DataRefList.Add(WorldBoatCarrierCatshotEndXMtr.Id, WorldBoatCarrierCatshotEndXMtr);
            DataRefList.Add(WorldBoatCarrierCatshotEndZMtr.Id, WorldBoatCarrierCatshotEndZMtr);
            DataRefList.Add(WorldBoatCarrierCatshotStatus.Id, WorldBoatCarrierCatshotStatus);
            DataRefList.Add(WorldWinchWinchRampUpTimeSec.Id, WorldWinchWinchRampUpTimeSec);
            DataRefList.Add(WorldWinchWinchSpeedKnots.Id, WorldWinchWinchSpeedKnots);
            DataRefList.Add(WorldWinchWinchInitialLength.Id, WorldWinchWinchInitialLength);
            DataRefList.Add(WorldWinchWinchMaxBhp.Id, WorldWinchWinchMaxBhp);
            DataRefList.Add(Aircraft2MetadataIsUltralight.Id, Aircraft2MetadataIsUltralight);
            DataRefList.Add(Aircraft2MetadataIsExperimental.Id, Aircraft2MetadataIsExperimental);
            DataRefList.Add(Aircraft2MetadataIsGeneralAviation.Id, Aircraft2MetadataIsGeneralAviation);
            DataRefList.Add(Aircraft2MetadataIsAirliner.Id, Aircraft2MetadataIsAirliner);
            DataRefList.Add(Aircraft2MetadataIsMilitary.Id, Aircraft2MetadataIsMilitary);
            DataRefList.Add(Aircraft2MetadataIsCargo.Id, Aircraft2MetadataIsCargo);
            DataRefList.Add(Aircraft2MetadataIsGlider.Id, Aircraft2MetadataIsGlider);
            DataRefList.Add(Aircraft2MetadataIsSeaplane.Id, Aircraft2MetadataIsSeaplane);
            DataRefList.Add(Aircraft2MetadataIsHelicopter.Id, Aircraft2MetadataIsHelicopter);
            DataRefList.Add(Aircraft2MetadataIsVtol.Id, Aircraft2MetadataIsVtol);
            DataRefList.Add(Aircraft2MetadataIsSciFi.Id, Aircraft2MetadataIsSciFi);
            DataRefList.Add(Aircraft2EngineLowIdleRatio.Id, Aircraft2EngineLowIdleRatio);
            DataRefList.Add(Aircraft2EngineHighIdleRatio.Id, Aircraft2EngineHighIdleRatio);
            DataRefList.Add(Aircraft2EngineMaxPowerLimitedWatts.Id, Aircraft2EngineMaxPowerLimitedWatts);
            DataRefList.Add(Aircraft2EngineFlapExtensionTimeSec.Id, Aircraft2EngineFlapExtensionTimeSec);
            DataRefList.Add(Aircraft2EngineFlapRetractionTimeSec.Id, Aircraft2EngineFlapRetractionTimeSec);
            DataRefList.Add(Aircraft2EngineExhaustDirtinessRatio.Id, Aircraft2EngineExhaustDirtinessRatio);
            DataRefList.Add(Cockpit2AnnunciatorsMasterCaution.Id, Cockpit2AnnunciatorsMasterCaution);
            DataRefList.Add(Cockpit2AnnunciatorsMasterWarning.Id, Cockpit2AnnunciatorsMasterWarning);
            DataRefList.Add(Cockpit2AnnunciatorsMasterAccept.Id, Cockpit2AnnunciatorsMasterAccept);
            DataRefList.Add(Cockpit2AnnunciatorsAutopilotDisconnect.Id, Cockpit2AnnunciatorsAutopilotDisconnect);
            DataRefList.Add(Cockpit2AnnunciatorsLowVacuum.Id, Cockpit2AnnunciatorsLowVacuum);
            DataRefList.Add(Cockpit2AnnunciatorsLowVoltage.Id, Cockpit2AnnunciatorsLowVoltage);
            DataRefList.Add(Cockpit2AnnunciatorsFuelQuantity.Id, Cockpit2AnnunciatorsFuelQuantity);
            DataRefList.Add(Cockpit2AnnunciatorsHydraulicPressure.Id, Cockpit2AnnunciatorsHydraulicPressure);
            DataRefList.Add(Cockpit2AnnunciatorsSpeedbrake.Id, Cockpit2AnnunciatorsSpeedbrake);
            DataRefList.Add(Cockpit2AnnunciatorsGPWS.Id, Cockpit2AnnunciatorsGPWS);
            DataRefList.Add(Cockpit2AnnunciatorsIce.Id, Cockpit2AnnunciatorsIce);
            DataRefList.Add(Cockpit2AnnunciatorsLowRotor.Id, Cockpit2AnnunciatorsLowRotor);
            DataRefList.Add(Cockpit2AnnunciatorsHighRotor.Id, Cockpit2AnnunciatorsHighRotor);
            DataRefList.Add(Cockpit2AnnunciatorsPitotHeat.Id, Cockpit2AnnunciatorsPitotHeat);
            DataRefList.Add(Cockpit2AnnunciatorsTransonic.Id, Cockpit2AnnunciatorsTransonic);
            DataRefList.Add(Cockpit2AnnunciatorsSlats.Id, Cockpit2AnnunciatorsSlats);
            DataRefList.Add(Cockpit2AnnunciatorsFlightDirector.Id, Cockpit2AnnunciatorsFlightDirector);
            DataRefList.Add(Cockpit2AnnunciatorsAutopilot.Id, Cockpit2AnnunciatorsAutopilot);
            DataRefList.Add(Cockpit2AnnunciatorsYawDamper.Id, Cockpit2AnnunciatorsYawDamper);
            DataRefList.Add(Cockpit2AnnunciatorsFuelPressureLow.Id, Cockpit2AnnunciatorsFuelPressureLow);
            DataRefList.Add(Cockpit2AnnunciatorsOilPressureLow.Id, Cockpit2AnnunciatorsOilPressureLow);
            DataRefList.Add(Cockpit2AnnunciatorsOilTemperatureHigh.Id, Cockpit2AnnunciatorsOilTemperatureHigh);
            DataRefList.Add(Cockpit2AnnunciatorsGeneratorOff.Id, Cockpit2AnnunciatorsGeneratorOff);
            DataRefList.Add(Cockpit2AnnunciatorsChipDetected.Id, Cockpit2AnnunciatorsChipDetected);
            DataRefList.Add(Cockpit2AnnunciatorsEngineFires.Id, Cockpit2AnnunciatorsEngineFires);
            DataRefList.Add(Cockpit2AnnunciatorsIgniterOn.Id, Cockpit2AnnunciatorsIgniterOn);
            DataRefList.Add(Cockpit2AnnunciatorsReverserOn.Id, Cockpit2AnnunciatorsReverserOn);
            DataRefList.Add(Cockpit2AnnunciatorsBeta.Id, Cockpit2AnnunciatorsBeta);
            DataRefList.Add(Cockpit2AnnunciatorsBurnerOn.Id, Cockpit2AnnunciatorsBurnerOn);
            DataRefList.Add(Cockpit2AnnunciatorsInverterOff.Id, Cockpit2AnnunciatorsInverterOff);
            DataRefList.Add(Cockpit2AnnunciatorsN1Low.Id, Cockpit2AnnunciatorsN1Low);
            DataRefList.Add(Cockpit2AnnunciatorsN1High.Id, Cockpit2AnnunciatorsN1High);
            DataRefList.Add(Cockpit2AnnunciatorsReverserNotReady.Id, Cockpit2AnnunciatorsReverserNotReady);
            DataRefList.Add(Cockpit2AnnunciatorsIceVaneExtend.Id, Cockpit2AnnunciatorsIceVaneExtend);
            DataRefList.Add(Cockpit2AnnunciatorsIceVaneFail.Id, Cockpit2AnnunciatorsIceVaneFail);
            DataRefList.Add(Cockpit2AnnunciatorsBleedAirOff.Id, Cockpit2AnnunciatorsBleedAirOff);
            DataRefList.Add(Cockpit2AnnunciatorsBleedAirFail.Id, Cockpit2AnnunciatorsBleedAirFail);
            DataRefList.Add(Cockpit2AnnunciatorsAutoFeatherArm.Id, Cockpit2AnnunciatorsAutoFeatherArm);
            DataRefList.Add(Cockpit2AnnunciatorsFuelTransfer.Id, Cockpit2AnnunciatorsFuelTransfer);
            DataRefList.Add(Cockpit2AnnunciatorsHvac.Id, Cockpit2AnnunciatorsHvac);
            DataRefList.Add(Cockpit2AnnunciatorsBatteryChargeHi.Id, Cockpit2AnnunciatorsBatteryChargeHi);
            DataRefList.Add(Cockpit2AnnunciatorsCabinAltitude12500.Id, Cockpit2AnnunciatorsCabinAltitude12500);
            DataRefList.Add(Cockpit2AnnunciatorsAutopilotTrimFail.Id, Cockpit2AnnunciatorsAutopilotTrimFail);
            DataRefList.Add(Cockpit2AnnunciatorsElectricTrimOff.Id, Cockpit2AnnunciatorsElectricTrimOff);
            DataRefList.Add(Cockpit2AnnunciatorsCrossfeedOn.Id, Cockpit2AnnunciatorsCrossfeedOn);
            DataRefList.Add(Cockpit2AnnunciatorsLandingTaxiLite.Id, Cockpit2AnnunciatorsLandingTaxiLite);
            DataRefList.Add(Cockpit2AnnunciatorsCabinDoorOpen.Id, Cockpit2AnnunciatorsCabinDoorOpen);
            DataRefList.Add(Cockpit2AnnunciatorsExternalPowerOn.Id, Cockpit2AnnunciatorsExternalPowerOn);
            DataRefList.Add(Cockpit2AnnunciatorsPassengerOxyOn.Id, Cockpit2AnnunciatorsPassengerOxyOn);
            DataRefList.Add(Cockpit2AnnunciatorsGearUnsafe.Id, Cockpit2AnnunciatorsGearUnsafe);
            DataRefList.Add(Cockpit2AnnunciatorsAutopilotTrimDown.Id, Cockpit2AnnunciatorsAutopilotTrimDown);
            DataRefList.Add(Cockpit2AnnunciatorsAutopilotTrimUp.Id, Cockpit2AnnunciatorsAutopilotTrimUp);
            DataRefList.Add(Cockpit2AnnunciatorsAutopilotBankLimit.Id, Cockpit2AnnunciatorsAutopilotBankLimit);
            DataRefList.Add(Cockpit2AnnunciatorsAutopilotSoftRide.Id, Cockpit2AnnunciatorsAutopilotSoftRide);
            DataRefList.Add(Cockpit2AnnunciatorsNoInverters.Id, Cockpit2AnnunciatorsNoInverters);
            DataRefList.Add(Cockpit2AnnunciatorsFuelPressure.Id, Cockpit2AnnunciatorsFuelPressure);
            DataRefList.Add(Cockpit2AnnunciatorsOilPressure.Id, Cockpit2AnnunciatorsOilPressure);
            DataRefList.Add(Cockpit2AnnunciatorsOilTemperature.Id, Cockpit2AnnunciatorsOilTemperature);
            DataRefList.Add(Cockpit2AnnunciatorsGenerator.Id, Cockpit2AnnunciatorsGenerator);
            DataRefList.Add(Cockpit2AnnunciatorsChipDetect.Id, Cockpit2AnnunciatorsChipDetect);
            DataRefList.Add(Cockpit2AnnunciatorsEngineFire.Id, Cockpit2AnnunciatorsEngineFire);
            DataRefList.Add(Cockpit2AnnunciatorsReverserDeployed.Id, Cockpit2AnnunciatorsReverserDeployed);
            DataRefList.Add(Cockpit2AnnunciatorsPropBeta.Id, Cockpit2AnnunciatorsPropBeta);
            DataRefList.Add(Cockpit2AnnunciatorsAfterburner.Id, Cockpit2AnnunciatorsAfterburner);
            DataRefList.Add(Cockpit2AnnunciatorsInverter.Id, Cockpit2AnnunciatorsInverter);
            DataRefList.Add(Cockpit2AnnunciatorsStallWarning.Id, Cockpit2AnnunciatorsStallWarning);
            DataRefList.Add(Cockpit2AnnunciatorsStallWarningRatio.Id, Cockpit2AnnunciatorsStallWarningRatio);
            DataRefList.Add(Cockpit2AnnunciatorsGearWarning.Id, Cockpit2AnnunciatorsGearWarning);
            DataRefList.Add(Cockpit2AnnunciatorsGearWarningAural.Id, Cockpit2AnnunciatorsGearWarningAural);
            DataRefList.Add(Cockpit2AnnunciatorsNoSmoking.Id, Cockpit2AnnunciatorsNoSmoking);
            DataRefList.Add(Cockpit2AnnunciatorsFastenSeatbelt.Id, Cockpit2AnnunciatorsFastenSeatbelt);
            DataRefList.Add(Cockpit2AnnunciatorsWindshearWarning.Id, Cockpit2AnnunciatorsWindshearWarning);
            DataRefList.Add(Cockpit2AnnunciatorsPluginMasterWarning.Id, Cockpit2AnnunciatorsPluginMasterWarning);
            DataRefList.Add(Cockpit2AnnunciatorsPluginMasterCaution.Id, Cockpit2AnnunciatorsPluginMasterCaution);
            DataRefList.Add(Cockpit2AutopilotAutopilot2Avail.Id, Cockpit2AutopilotAutopilot2Avail);
            DataRefList.Add(Cockpit2AutopilotMasterFlightDirector.Id, Cockpit2AutopilotMasterFlightDirector);
            DataRefList.Add(Cockpit2AutopilotAutopilotSource.Id, Cockpit2AutopilotAutopilotSource);
            DataRefList.Add(Cockpit2AutopilotAutothrottleEnabled.Id, Cockpit2AutopilotAutothrottleEnabled);
            DataRefList.Add(Cockpit2AutopilotAutothrottleOn.Id, Cockpit2AutopilotAutothrottleOn);
            DataRefList.Add(Cockpit2AutopilotElectricTrimOn.Id, Cockpit2AutopilotElectricTrimOn);
            DataRefList.Add(Cockpit2AutopilotPitchMistrim.Id, Cockpit2AutopilotPitchMistrim);
            DataRefList.Add(Cockpit2AutopilotOttoFailWarn.Id, Cockpit2AutopilotOttoFailWarn);
            DataRefList.Add(Cockpit2AutopilotOttoReady.Id, Cockpit2AutopilotOttoReady);
            DataRefList.Add(Cockpit2AutopilotHeadingMode.Id, Cockpit2AutopilotHeadingMode);
            DataRefList.Add(Cockpit2AutopilotAltitudeMode.Id, Cockpit2AutopilotAltitudeMode);
            DataRefList.Add(Cockpit2AutopilotBankAngleMode.Id, Cockpit2AutopilotBankAngleMode);
            DataRefList.Add(Cockpit2AutopilotFlightDirectorMode.Id, Cockpit2AutopilotFlightDirectorMode);
            DataRefList.Add(Cockpit2AutopilotFlightDirector2Mode.Id, Cockpit2AutopilotFlightDirector2Mode);
            DataRefList.Add(Cockpit2AutopilotFlightDirector3Mode.Id, Cockpit2AutopilotFlightDirector3Mode);
            DataRefList.Add(Cockpit2AutopilotAutopilotOn.Id, Cockpit2AutopilotAutopilotOn);
            DataRefList.Add(Cockpit2AutopilotAutopilot2On.Id, Cockpit2AutopilotAutopilot2On);
            DataRefList.Add(Cockpit2AutopilotAutopilot3On.Id, Cockpit2AutopilotAutopilot3On);
            DataRefList.Add(Cockpit2AutopilotAutopilotOnOrCws.Id, Cockpit2AutopilotAutopilotOnOrCws);
            DataRefList.Add(Cockpit2AutopilotAutopilot2OnOrCws.Id, Cockpit2AutopilotAutopilot2OnOrCws);
            DataRefList.Add(Cockpit2AutopilotAutopilot3OnOrCws.Id, Cockpit2AutopilotAutopilot3OnOrCws);
            DataRefList.Add(Cockpit2AutopilotServosOn.Id, Cockpit2AutopilotServosOn);
            DataRefList.Add(Cockpit2AutopilotServos2On.Id, Cockpit2AutopilotServos2On);
            DataRefList.Add(Cockpit2AutopilotServos3On.Id, Cockpit2AutopilotServos3On);
            DataRefList.Add(Cockpit2AutopilotAirspeedIsMach.Id, Cockpit2AutopilotAirspeedIsMach);
            DataRefList.Add(Cockpit2AutopilotAltVviIsShowingVvi.Id, Cockpit2AutopilotAltVviIsShowingVvi);
            DataRefList.Add(Cockpit2AutopilotVnavArmed.Id, Cockpit2AutopilotVnavArmed);
            DataRefList.Add(Cockpit2AutopilotAltitudeHoldArmed.Id, Cockpit2AutopilotAltitudeHoldArmed);
            DataRefList.Add(Cockpit2AutopilotHnavArmed.Id, Cockpit2AutopilotHnavArmed);
            DataRefList.Add(Cockpit2AutopilotGlideslopeArmed.Id, Cockpit2AutopilotGlideslopeArmed);
            DataRefList.Add(Cockpit2AutopilotBackcourseOn.Id, Cockpit2AutopilotBackcourseOn);
            DataRefList.Add(Cockpit2AutopilotAirspeedDialKtsMach.Id, Cockpit2AutopilotAirspeedDialKtsMach);
            DataRefList.Add(Cockpit2AutopilotAirspeedDialKts.Id, Cockpit2AutopilotAirspeedDialKts);
            DataRefList.Add(Cockpit2AutopilotHeadingDialDegMagPilot.Id, Cockpit2AutopilotHeadingDialDegMagPilot);
            DataRefList.Add(Cockpit2AutopilotHeadingDialDegMagCopilot.Id, Cockpit2AutopilotHeadingDialDegMagCopilot);
            DataRefList.Add(Cockpit2AutopilotHeadingIsGpss.Id, Cockpit2AutopilotHeadingIsGpss);
            DataRefList.Add(Cockpit2AutopilotTrkFpa.Id, Cockpit2AutopilotTrkFpa);
            DataRefList.Add(Cockpit2AutopilotVviDialFpm.Id, Cockpit2AutopilotVviDialFpm);
            DataRefList.Add(Cockpit2AutopilotFpa.Id, Cockpit2AutopilotFpa);
            DataRefList.Add(Cockpit2AutopilotAltitudeDialFt.Id, Cockpit2AutopilotAltitudeDialFt);
            DataRefList.Add(Cockpit2AutopilotAltitudeHoldFt.Id, Cockpit2AutopilotAltitudeHoldFt);
            DataRefList.Add(Cockpit2AutopilotAltitudeVnavFt.Id, Cockpit2AutopilotAltitudeVnavFt);
            DataRefList.Add(Cockpit2AutopilotBarometerSettingInHgAltPreselector.Id, Cockpit2AutopilotBarometerSettingInHgAltPreselector);
            DataRefList.Add(Cockpit2AutopilotAltitudeReadoutPreselector.Id, Cockpit2AutopilotAltitudeReadoutPreselector);
            DataRefList.Add(Cockpit2AutopilotClimbAdjust.Id, Cockpit2AutopilotClimbAdjust);
            DataRefList.Add(Cockpit2AutopilotDesAdjust.Id, Cockpit2AutopilotDesAdjust);
            DataRefList.Add(Cockpit2AutopilotSyncHoldPitchDeg.Id, Cockpit2AutopilotSyncHoldPitchDeg);
            DataRefList.Add(Cockpit2AutopilotSyncHoldRollDeg.Id, Cockpit2AutopilotSyncHoldRollDeg);
            DataRefList.Add(Cockpit2AutopilotSetRollDeg.Id, Cockpit2AutopilotSetRollDeg);
            DataRefList.Add(Cockpit2AutopilotTurnRateDegSec.Id, Cockpit2AutopilotTurnRateDegSec);
            DataRefList.Add(Cockpit2AutopilotFlightDirectorPitchDeg.Id, Cockpit2AutopilotFlightDirectorPitchDeg);
            DataRefList.Add(Cockpit2AutopilotFlightDirectorRollDeg.Id, Cockpit2AutopilotFlightDirectorRollDeg);
            DataRefList.Add(Cockpit2AutopilotFlightDirector2PitchDeg.Id, Cockpit2AutopilotFlightDirector2PitchDeg);
            DataRefList.Add(Cockpit2AutopilotFlightDirector2RollDeg.Id, Cockpit2AutopilotFlightDirector2RollDeg);
            DataRefList.Add(Cockpit2AutopilotTOGAPitchDeg.Id, Cockpit2AutopilotTOGAPitchDeg);
            DataRefList.Add(Cockpit2AutopilotRollStatus.Id, Cockpit2AutopilotRollStatus);
            DataRefList.Add(Cockpit2AutopilotRateStatus.Id, Cockpit2AutopilotRateStatus);
            DataRefList.Add(Cockpit2AutopilotHeadingStatus.Id, Cockpit2AutopilotHeadingStatus);
            DataRefList.Add(Cockpit2AutopilotHeadingHoldStatus.Id, Cockpit2AutopilotHeadingHoldStatus);
            DataRefList.Add(Cockpit2AutopilotTrackStatus.Id, Cockpit2AutopilotTrackStatus);
            DataRefList.Add(Cockpit2AutopilotNavStatus.Id, Cockpit2AutopilotNavStatus);
            DataRefList.Add(Cockpit2AutopilotGpssStatus.Id, Cockpit2AutopilotGpssStatus);
            DataRefList.Add(Cockpit2AutopilotRolloutStatus.Id, Cockpit2AutopilotRolloutStatus);
            DataRefList.Add(Cockpit2AutopilotFlareStatus.Id, Cockpit2AutopilotFlareStatus);
            DataRefList.Add(Cockpit2AutopilotBackcourseStatus.Id, Cockpit2AutopilotBackcourseStatus);
            DataRefList.Add(Cockpit2AutopilotTOGALateralStatus.Id, Cockpit2AutopilotTOGALateralStatus);
            DataRefList.Add(Cockpit2AutopilotPitchStatus.Id, Cockpit2AutopilotPitchStatus);
            DataRefList.Add(Cockpit2AutopilotVviStatus.Id, Cockpit2AutopilotVviStatus);
            DataRefList.Add(Cockpit2AutopilotFpaStatus.Id, Cockpit2AutopilotFpaStatus);
            DataRefList.Add(Cockpit2AutopilotSpeedStatus.Id, Cockpit2AutopilotSpeedStatus);
            DataRefList.Add(Cockpit2AutopilotAltitudeHoldStatus.Id, Cockpit2AutopilotAltitudeHoldStatus);
            DataRefList.Add(Cockpit2AutopilotGlideslopeStatus.Id, Cockpit2AutopilotGlideslopeStatus);
            DataRefList.Add(Cockpit2AutopilotVnavStatus.Id, Cockpit2AutopilotVnavStatus);
            DataRefList.Add(Cockpit2AutopilotFmsVnav.Id, Cockpit2AutopilotFmsVnav);
            DataRefList.Add(Cockpit2AutopilotTOGAStatus.Id, Cockpit2AutopilotTOGAStatus);
            DataRefList.Add(Cockpit2AutopilotApproachStatus.Id, Cockpit2AutopilotApproachStatus);
            DataRefList.Add(Cockpit2AutopilotDeadReckoning.Id, Cockpit2AutopilotDeadReckoning);
            DataRefList.Add(Cockpit2CameraCameraOffsetPitch.Id, Cockpit2CameraCameraOffsetPitch);
            DataRefList.Add(Cockpit2CameraCameraOffsetHeading.Id, Cockpit2CameraCameraOffsetHeading);
            DataRefList.Add(Cockpit2CameraCameraOffsetRoll.Id, Cockpit2CameraCameraOffsetRoll);
            DataRefList.Add(Cockpit2CameraCameraFieldOfView.Id, Cockpit2CameraCameraFieldOfView);
            DataRefList.Add(Cockpit2ClockTimerElapsedTimeHours.Id, Cockpit2ClockTimerElapsedTimeHours);
            DataRefList.Add(Cockpit2ClockTimerElapsedTimeMinutes.Id, Cockpit2ClockTimerElapsedTimeMinutes);
            DataRefList.Add(Cockpit2ClockTimerElapsedTimeSeconds.Id, Cockpit2ClockTimerElapsedTimeSeconds);
            DataRefList.Add(Cockpit2ClockTimerZuluTimeHours.Id, Cockpit2ClockTimerZuluTimeHours);
            DataRefList.Add(Cockpit2ClockTimerZuluTimeMinutes.Id, Cockpit2ClockTimerZuluTimeMinutes);
            DataRefList.Add(Cockpit2ClockTimerZuluTimeSeconds.Id, Cockpit2ClockTimerZuluTimeSeconds);
            DataRefList.Add(Cockpit2ClockTimerLocalTimeHours.Id, Cockpit2ClockTimerLocalTimeHours);
            DataRefList.Add(Cockpit2ClockTimerLocalTimeMinutes.Id, Cockpit2ClockTimerLocalTimeMinutes);
            DataRefList.Add(Cockpit2ClockTimerLocalTimeSeconds.Id, Cockpit2ClockTimerLocalTimeSeconds);
            DataRefList.Add(Cockpit2ClockTimerHobbsTimeHours.Id, Cockpit2ClockTimerHobbsTimeHours);
            DataRefList.Add(Cockpit2ClockTimerHobbsTimeMinutes.Id, Cockpit2ClockTimerHobbsTimeMinutes);
            DataRefList.Add(Cockpit2ClockTimerHobbsTimeSeconds.Id, Cockpit2ClockTimerHobbsTimeSeconds);
            DataRefList.Add(Cockpit2ClockTimerTimerRunning.Id, Cockpit2ClockTimerTimerRunning);
            DataRefList.Add(Cockpit2ClockTimerTimerIsGMT.Id, Cockpit2ClockTimerTimerIsGMT);
            DataRefList.Add(Cockpit2ClockTimerDateIsShowing.Id, Cockpit2ClockTimerDateIsShowing);
            DataRefList.Add(Cockpit2ClockTimerCurrentDay.Id, Cockpit2ClockTimerCurrentDay);
            DataRefList.Add(Cockpit2ClockTimerCurrentMonth.Id, Cockpit2ClockTimerCurrentMonth);
            DataRefList.Add(Cockpit2ClockTimerTimerMode.Id, Cockpit2ClockTimerTimerMode);
            DataRefList.Add(Cockpit2ControlsYokePitchRatio.Id, Cockpit2ControlsYokePitchRatio);
            DataRefList.Add(Cockpit2ControlsYokeRollRatio.Id, Cockpit2ControlsYokeRollRatio);
            DataRefList.Add(Cockpit2ControlsYokeHeadingRatio.Id, Cockpit2ControlsYokeHeadingRatio);
            DataRefList.Add(Cockpit2ControlsTotalHeadingRatio.Id, Cockpit2ControlsTotalHeadingRatio);
            DataRefList.Add(Cockpit2ControlsTotalPitchRatio.Id, Cockpit2ControlsTotalPitchRatio);
            DataRefList.Add(Cockpit2ControlsTotalRollRatio.Id, Cockpit2ControlsTotalRollRatio);
            DataRefList.Add(Cockpit2ControlsSpeedbrakeRatio.Id, Cockpit2ControlsSpeedbrakeRatio);
            DataRefList.Add(Cockpit2ControlsWingsweepRatio.Id, Cockpit2ControlsWingsweepRatio);
            DataRefList.Add(Cockpit2ControlsThrustVectorRatio.Id, Cockpit2ControlsThrustVectorRatio);
            DataRefList.Add(Cockpit2ControlsDihedralRatio.Id, Cockpit2ControlsDihedralRatio);
            DataRefList.Add(Cockpit2ControlsIncidenceRatio.Id, Cockpit2ControlsIncidenceRatio);
            DataRefList.Add(Cockpit2ControlsWingRetractionRatio.Id, Cockpit2ControlsWingRetractionRatio);
            DataRefList.Add(Cockpit2ControlsFlapRatio.Id, Cockpit2ControlsFlapRatio);
            DataRefList.Add(Cockpit2ControlsParkingBrakeRatio.Id, Cockpit2ControlsParkingBrakeRatio);
            DataRefList.Add(Cockpit2ControlsLeftBrakeRatio.Id, Cockpit2ControlsLeftBrakeRatio);
            DataRefList.Add(Cockpit2ControlsRightBrakeRatio.Id, Cockpit2ControlsRightBrakeRatio);
            DataRefList.Add(Cockpit2ControlsGearHandleDown.Id, Cockpit2ControlsGearHandleDown);
            DataRefList.Add(Cockpit2ControlsNosewheelSteerOn.Id, Cockpit2ControlsNosewheelSteerOn);
            DataRefList.Add(Cockpit2ControlsTailwheelLockRatio.Id, Cockpit2ControlsTailwheelLockRatio);
            DataRefList.Add(Cockpit2ControlsAileronTrim.Id, Cockpit2ControlsAileronTrim);
            DataRefList.Add(Cockpit2ControlsElevatorTrim.Id, Cockpit2ControlsElevatorTrim);
            DataRefList.Add(Cockpit2ControlsRudderTrim.Id, Cockpit2ControlsRudderTrim);
            DataRefList.Add(Cockpit2ControlsRotorTrim.Id, Cockpit2ControlsRotorTrim);
            DataRefList.Add(Cockpit2ControlsWaterRudderHandleRatio.Id, Cockpit2ControlsWaterRudderHandleRatio);
            DataRefList.Add(Cockpit2ControlsFlapHandleDeployRatio.Id, Cockpit2ControlsFlapHandleDeployRatio);
            DataRefList.Add(Cockpit2EFISMapMode.Id, Cockpit2EFISMapMode);
            DataRefList.Add(Cockpit2EFISMapModeIsHSI.Id, Cockpit2EFISMapModeIsHSI);
            DataRefList.Add(Cockpit2EFISMapRange.Id, Cockpit2EFISMapRange);
            DataRefList.Add(Cockpit2EFISArgusMode.Id, Cockpit2EFISArgusMode);
            DataRefList.Add(Cockpit2EFISEcamMode.Id, Cockpit2EFISEcamMode);
            DataRefList.Add(Cockpit2EFISEFISWeatherOn.Id, Cockpit2EFISEFISWeatherOn);
            DataRefList.Add(Cockpit2EFISEFISTcasOn.Id, Cockpit2EFISEFISTcasOn);
            DataRefList.Add(Cockpit2EFISEFISAirportOn.Id, Cockpit2EFISEFISAirportOn);
            DataRefList.Add(Cockpit2EFISEFISFixOn.Id, Cockpit2EFISEFISFixOn);
            DataRefList.Add(Cockpit2EFISEFISVorOn.Id, Cockpit2EFISEFISVorOn);
            DataRefList.Add(Cockpit2EFISEFISNdbOn.Id, Cockpit2EFISEFISNdbOn);
            DataRefList.Add(Cockpit2EFISEFIS1SelectionPilot.Id, Cockpit2EFISEFIS1SelectionPilot);
            DataRefList.Add(Cockpit2EFISEFIS1SelectionCopilot.Id, Cockpit2EFISEFIS1SelectionCopilot);
            DataRefList.Add(Cockpit2EFISEFIS2SelectionPilot.Id, Cockpit2EFISEFIS2SelectionPilot);
            DataRefList.Add(Cockpit2EFISEFIS2SelectionCopilot.Id, Cockpit2EFISEFIS2SelectionCopilot);
            DataRefList.Add(Cockpit2EFISEFISPage.Id, Cockpit2EFISEFISPage);
            DataRefList.Add(Cockpit2ElectricalInverterOn.Id, Cockpit2ElectricalInverterOn);
            DataRefList.Add(Cockpit2ElectricalBatteryOn.Id, Cockpit2ElectricalBatteryOn);
            DataRefList.Add(Cockpit2ElectricalBatteryAmps.Id, Cockpit2ElectricalBatteryAmps);
            DataRefList.Add(Cockpit2ElectricalBatteryVoltageActualVolts.Id, Cockpit2ElectricalBatteryVoltageActualVolts);
            DataRefList.Add(Cockpit2ElectricalBatteryVoltageIndicatedVolts.Id, Cockpit2ElectricalBatteryVoltageIndicatedVolts);
            DataRefList.Add(Cockpit2ElectricalGeneratorOn.Id, Cockpit2ElectricalGeneratorOn);
            DataRefList.Add(Cockpit2ElectricalGeneratorAmps.Id, Cockpit2ElectricalGeneratorAmps);
            DataRefList.Add(Cockpit2ElectricalAPUGeneratorOn.Id, Cockpit2ElectricalAPUGeneratorOn);
            DataRefList.Add(Cockpit2ElectricalAPUGeneratorAmps.Id, Cockpit2ElectricalAPUGeneratorAmps);
            DataRefList.Add(Cockpit2ElectricalAPUStarterSwitch.Id, Cockpit2ElectricalAPUStarterSwitch);
            DataRefList.Add(Cockpit2ElectricalAPUN1Percent.Id, Cockpit2ElectricalAPUN1Percent);
            DataRefList.Add(Cockpit2ElectricalAPUEGTC.Id, Cockpit2ElectricalAPUEGTC);
            DataRefList.Add(Cockpit2ElectricalAPUDoor.Id, Cockpit2ElectricalAPUDoor);
            DataRefList.Add(Cockpit2ElectricalAPURunning.Id, Cockpit2ElectricalAPURunning);
            DataRefList.Add(Cockpit2ElectricalCrossTie.Id, Cockpit2ElectricalCrossTie);
            DataRefList.Add(Cockpit2ElectricalDcVoltmeterSelection.Id, Cockpit2ElectricalDcVoltmeterSelection);
            DataRefList.Add(Cockpit2ElectricalDcVoltmeterValue.Id, Cockpit2ElectricalDcVoltmeterValue);
            DataRefList.Add(Cockpit2ElectricalBusVolts.Id, Cockpit2ElectricalBusVolts);
            DataRefList.Add(Cockpit2ElectricalBusLoadAmps.Id, Cockpit2ElectricalBusLoadAmps);
            DataRefList.Add(Cockpit2ElectricalPluginBusLoadAmps.Id, Cockpit2ElectricalPluginBusLoadAmps);
            DataRefList.Add(Cockpit2ElectricalPanelBrightnessRatio.Id, Cockpit2ElectricalPanelBrightnessRatio);
            DataRefList.Add(Cockpit2ElectricalPanelBrightnessRatioAuto.Id, Cockpit2ElectricalPanelBrightnessRatioAuto);
            DataRefList.Add(Cockpit2ElectricalPanelBrightnessRatioManual.Id, Cockpit2ElectricalPanelBrightnessRatioManual);
            DataRefList.Add(Cockpit2ElectricalInstrumentBrightnessRatio.Id, Cockpit2ElectricalInstrumentBrightnessRatio);
            DataRefList.Add(Cockpit2ElectricalInstrumentBrightnessRatioAuto.Id, Cockpit2ElectricalInstrumentBrightnessRatioAuto);
            DataRefList.Add(Cockpit2ElectricalInstrumentBrightnessRatioManual.Id, Cockpit2ElectricalInstrumentBrightnessRatioManual);
            DataRefList.Add(Cockpit2ElectricalHUDBrightnessRatio.Id, Cockpit2ElectricalHUDBrightnessRatio);
            DataRefList.Add(Cockpit2ElectricalHUDBrightnessRatioAuto.Id, Cockpit2ElectricalHUDBrightnessRatioAuto);
            DataRefList.Add(Cockpit2ElectricalHUDBrightnessRatioManual.Id, Cockpit2ElectricalHUDBrightnessRatioManual);
            DataRefList.Add(Cockpit2EngineActuatorsCyclicElevatorDeg.Id, Cockpit2EngineActuatorsCyclicElevatorDeg);
            DataRefList.Add(Cockpit2EngineActuatorsCyclicAileronDeg.Id, Cockpit2EngineActuatorsCyclicAileronDeg);
            DataRefList.Add(Cockpit2EngineActuatorsThrottleRatio.Id, Cockpit2EngineActuatorsThrottleRatio);
            DataRefList.Add(Cockpit2EngineActuatorsThrottleBetaRevRatio.Id, Cockpit2EngineActuatorsThrottleBetaRevRatio);
            DataRefList.Add(Cockpit2EngineActuatorsThrottleJetRevRatio.Id, Cockpit2EngineActuatorsThrottleJetRevRatio);
            DataRefList.Add(Cockpit2EngineActuatorsBetaRatio.Id, Cockpit2EngineActuatorsBetaRatio);
            DataRefList.Add(Cockpit2EngineActuatorsThrottleRatioAll.Id, Cockpit2EngineActuatorsThrottleRatioAll);
            DataRefList.Add(Cockpit2EngineActuatorsThrottleBetaRevRatioAll.Id, Cockpit2EngineActuatorsThrottleBetaRevRatioAll);
            DataRefList.Add(Cockpit2EngineActuatorsThrottleJetRevRatioAll.Id, Cockpit2EngineActuatorsThrottleJetRevRatioAll);
            DataRefList.Add(Cockpit2EngineActuatorsPropRotationSpeedRadSec.Id, Cockpit2EngineActuatorsPropRotationSpeedRadSec);
            DataRefList.Add(Cockpit2EngineActuatorsPropRotationSpeedRadSecAll.Id, Cockpit2EngineActuatorsPropRotationSpeedRadSecAll);
            DataRefList.Add(Cockpit2EngineActuatorsPropAngleDegrees.Id, Cockpit2EngineActuatorsPropAngleDegrees);
            DataRefList.Add(Cockpit2EngineActuatorsPropAngleDegreesAll.Id, Cockpit2EngineActuatorsPropAngleDegreesAll);
            DataRefList.Add(Cockpit2EngineActuatorsPropRatio.Id, Cockpit2EngineActuatorsPropRatio);
            DataRefList.Add(Cockpit2EngineActuatorsPropRatioAll.Id, Cockpit2EngineActuatorsPropRatioAll);
            DataRefList.Add(Cockpit2EngineActuatorsMixtureRatio.Id, Cockpit2EngineActuatorsMixtureRatio);
            DataRefList.Add(Cockpit2EngineActuatorsMixtureRatioAll.Id, Cockpit2EngineActuatorsMixtureRatioAll);
            DataRefList.Add(Cockpit2EngineActuatorsCarbHeatRatio.Id, Cockpit2EngineActuatorsCarbHeatRatio);
            DataRefList.Add(Cockpit2EngineActuatorsCowlFlapRatio.Id, Cockpit2EngineActuatorsCowlFlapRatio);
            DataRefList.Add(Cockpit2EngineActuatorsPrimerRatio.Id, Cockpit2EngineActuatorsPrimerRatio);
            DataRefList.Add(Cockpit2EngineActuatorsAfterburnerEnabled.Id, Cockpit2EngineActuatorsAfterburnerEnabled);
            DataRefList.Add(Cockpit2EngineActuatorsIgniterOn.Id, Cockpit2EngineActuatorsIgniterOn);
            DataRefList.Add(Cockpit2EngineActuatorsAutoIgniteOn.Id, Cockpit2EngineActuatorsAutoIgniteOn);
            DataRefList.Add(Cockpit2EngineActuatorsIgnitionOn.Id, Cockpit2EngineActuatorsIgnitionOn);
            DataRefList.Add(Cockpit2EngineActuatorsIgnitionKey.Id, Cockpit2EngineActuatorsIgnitionKey);
            DataRefList.Add(Cockpit2EngineActuatorsStarterHit.Id, Cockpit2EngineActuatorsStarterHit);
            DataRefList.Add(Cockpit2EngineActuatorsFadecOn.Id, Cockpit2EngineActuatorsFadecOn);
            DataRefList.Add(Cockpit2EngineActuatorsPrimerOn.Id, Cockpit2EngineActuatorsPrimerOn);
            DataRefList.Add(Cockpit2EngineActuatorsFuelPumpOn.Id, Cockpit2EngineActuatorsFuelPumpOn);
            DataRefList.Add(Cockpit2EngineActuatorsIdleSpeed.Id, Cockpit2EngineActuatorsIdleSpeed);
            DataRefList.Add(Cockpit2EngineActuatorsIdleSpeedRatio.Id, Cockpit2EngineActuatorsIdleSpeedRatio);
            DataRefList.Add(Cockpit2EngineActuatorsPropMode.Id, Cockpit2EngineActuatorsPropMode);
            DataRefList.Add(Cockpit2EngineActuatorsPropPitchDeg.Id, Cockpit2EngineActuatorsPropPitchDeg);
            DataRefList.Add(Cockpit2EngineActuatorsStartLockEngaged.Id, Cockpit2EngineActuatorsStartLockEngaged);
            DataRefList.Add(Cockpit2EngineActuatorsUnfeatherPumpRunning.Id, Cockpit2EngineActuatorsUnfeatherPumpRunning);
            DataRefList.Add(Cockpit2EngineActuatorsGovernorOn.Id, Cockpit2EngineActuatorsGovernorOn);
            DataRefList.Add(Cockpit2EngineActuatorsFireExtinguisherOn.Id, Cockpit2EngineActuatorsFireExtinguisherOn);
            DataRefList.Add(Cockpit2EngineActuatorsClutchEngage.Id, Cockpit2EngineActuatorsClutchEngage);
            DataRefList.Add(Cockpit2EngineActuatorsClutchRatio.Id, Cockpit2EngineActuatorsClutchRatio);
            DataRefList.Add(Cockpit2EngineActuatorsManualFeatherProp.Id, Cockpit2EngineActuatorsManualFeatherProp);
            DataRefList.Add(Cockpit2EngineActuatorsN1TargetBug.Id, Cockpit2EngineActuatorsN1TargetBug);
            DataRefList.Add(Cockpit2EngineActuatorsEPRTargetBug.Id, Cockpit2EngineActuatorsEPRTargetBug);
            DataRefList.Add(Cockpit2EngineIndicatorsN1Percent.Id, Cockpit2EngineIndicatorsN1Percent);
            DataRefList.Add(Cockpit2EngineIndicatorsN2Percent.Id, Cockpit2EngineIndicatorsN2Percent);
            DataRefList.Add(Cockpit2EngineIndicatorsMPRInHg.Id, Cockpit2EngineIndicatorsMPRInHg);
            DataRefList.Add(Cockpit2EngineIndicatorsEPRRatio.Id, Cockpit2EngineIndicatorsEPRRatio);
            DataRefList.Add(Cockpit2EngineIndicatorsTorqueNMtr.Id, Cockpit2EngineIndicatorsTorqueNMtr);
            DataRefList.Add(Cockpit2EngineIndicatorsFuelFlowKgSec.Id, Cockpit2EngineIndicatorsFuelFlowKgSec);
            DataRefList.Add(Cockpit2EngineIndicatorsFuelFlowDryKgSec.Id, Cockpit2EngineIndicatorsFuelFlowDryKgSec);
            DataRefList.Add(Cockpit2EngineIndicatorsITTDegC.Id, Cockpit2EngineIndicatorsITTDegC);
            DataRefList.Add(Cockpit2EngineIndicatorsEGTDegC.Id, Cockpit2EngineIndicatorsEGTDegC);
            DataRefList.Add(Cockpit2EngineIndicatorsCHTDegC.Id, Cockpit2EngineIndicatorsCHTDegC);
            DataRefList.Add(Cockpit2EngineIndicatorsFuelPressurePsi.Id, Cockpit2EngineIndicatorsFuelPressurePsi);
            DataRefList.Add(Cockpit2EngineIndicatorsOilPressurePsi.Id, Cockpit2EngineIndicatorsOilPressurePsi);
            DataRefList.Add(Cockpit2EngineIndicatorsOilTemperatureDegC.Id, Cockpit2EngineIndicatorsOilTemperatureDegC);
            DataRefList.Add(Cockpit2EngineIndicatorsOilQuantityRatio.Id, Cockpit2EngineIndicatorsOilQuantityRatio);
            DataRefList.Add(Cockpit2EngineIndicatorsPowerWatts.Id, Cockpit2EngineIndicatorsPowerWatts);
            DataRefList.Add(Cockpit2EngineIndicatorsThrustN.Id, Cockpit2EngineIndicatorsThrustN);
            DataRefList.Add(Cockpit2EngineIndicatorsThrustDryN.Id, Cockpit2EngineIndicatorsThrustDryN);
            DataRefList.Add(Cockpit2EngineIndicatorsEngineSpeedRpm.Id, Cockpit2EngineIndicatorsEngineSpeedRpm);
            DataRefList.Add(Cockpit2EngineIndicatorsPropSpeedRpm.Id, Cockpit2EngineIndicatorsPropSpeedRpm);
            DataRefList.Add(Cockpit2EngineIndicatorsCarburetorTemperatureC.Id, Cockpit2EngineIndicatorsCarburetorTemperatureC);
            DataRefList.Add(Cockpit2EngineIndicatorsIgniterSparking.Id, Cockpit2EngineIndicatorsIgniterSparking);
            DataRefList.Add(Cockpit2EngineIndicatorsIgniterVolt.Id, Cockpit2EngineIndicatorsIgniterVolt);
            DataRefList.Add(Cockpit2FuelFuelTankSelectorLeft.Id, Cockpit2FuelFuelTankSelectorLeft);
            DataRefList.Add(Cockpit2FuelFuelTankSelectorRight.Id, Cockpit2FuelFuelTankSelectorRight);
            DataRefList.Add(Cockpit2FuelFuelTankSelector.Id, Cockpit2FuelFuelTankSelector);
            DataRefList.Add(Cockpit2FuelFuelTankTransferTo.Id, Cockpit2FuelFuelTankTransferTo);
            DataRefList.Add(Cockpit2FuelFuelTankTransferFrom.Id, Cockpit2FuelFuelTankTransferFrom);
            DataRefList.Add(Cockpit2FuelFuelTankPumpOn.Id, Cockpit2FuelFuelTankPumpOn);
            DataRefList.Add(Cockpit2FuelShowingAux.Id, Cockpit2FuelShowingAux);
            DataRefList.Add(Cockpit2FuelFuelQuantity.Id, Cockpit2FuelFuelQuantity);
            DataRefList.Add(Cockpit2FuelFuelTotalizerInitKg.Id, Cockpit2FuelFuelTotalizerInitKg);
            DataRefList.Add(Cockpit2FuelFuelTotalizerSumKg.Id, Cockpit2FuelFuelTotalizerSumKg);
            DataRefList.Add(Cockpit2FuelTransferPumpLeft.Id, Cockpit2FuelTransferPumpLeft);
            DataRefList.Add(Cockpit2FuelTransferPumpRight.Id, Cockpit2FuelTransferPumpRight);
            DataRefList.Add(Cockpit2FuelTransferPumpActivation.Id, Cockpit2FuelTransferPumpActivation);
            DataRefList.Add(Cockpit2FuelFuelLevelIndicatedLeft.Id, Cockpit2FuelFuelLevelIndicatedLeft);
            DataRefList.Add(Cockpit2FuelFuelLevelIndicatedRight.Id, Cockpit2FuelFuelLevelIndicatedRight);
            DataRefList.Add(Cockpit2FuelFirewallClosedLeft.Id, Cockpit2FuelFirewallClosedLeft);
            DataRefList.Add(Cockpit2FuelFirewallClosedRight.Id, Cockpit2FuelFirewallClosedRight);
            DataRefList.Add(Cockpit2FuelAutoCrossfeed.Id, Cockpit2FuelAutoCrossfeed);
            DataRefList.Add(Cockpit2FuelNoTransferLeft.Id, Cockpit2FuelNoTransferLeft);
            DataRefList.Add(Cockpit2FuelNoTransferRight.Id, Cockpit2FuelNoTransferRight);
            DataRefList.Add(Cockpit2FuelTransferTest.Id, Cockpit2FuelTransferTest);
            DataRefList.Add(Cockpit2FuelTankPumpPressurePsi.Id, Cockpit2FuelTankPumpPressurePsi);
            DataRefList.Add(Cockpit2GaugesActuatorsBarometerSettingInHgPilot.Id, Cockpit2GaugesActuatorsBarometerSettingInHgPilot);
            DataRefList.Add(Cockpit2GaugesActuatorsBarometerSettingInHgCopilot.Id, Cockpit2GaugesActuatorsBarometerSettingInHgCopilot);
            DataRefList.Add(Cockpit2GaugesActuatorsBarometerSettingInHgStby.Id, Cockpit2GaugesActuatorsBarometerSettingInHgStby);
            DataRefList.Add(Cockpit2GaugesActuatorsRadioAltimeterBugFtPilot.Id, Cockpit2GaugesActuatorsRadioAltimeterBugFtPilot);
            DataRefList.Add(Cockpit2GaugesActuatorsRadioAltimeterBugFtCopilot.Id, Cockpit2GaugesActuatorsRadioAltimeterBugFtCopilot);
            DataRefList.Add(Cockpit2GaugesActuatorsBaroAltimeterBugFtPilot.Id, Cockpit2GaugesActuatorsBaroAltimeterBugFtPilot);
            DataRefList.Add(Cockpit2GaugesActuatorsBaroAltimeterBugFtCopilot.Id, Cockpit2GaugesActuatorsBaroAltimeterBugFtCopilot);
            DataRefList.Add(Cockpit2GaugesActuatorsArtificialHorizonAdjustDegPilot.Id, Cockpit2GaugesActuatorsArtificialHorizonAdjustDegPilot);
            DataRefList.Add(Cockpit2GaugesActuatorsArtificialHorizonAdjustDegCopilot.Id, Cockpit2GaugesActuatorsArtificialHorizonAdjustDegCopilot);
            DataRefList.Add(Cockpit2GaugesActuatorsAirspeedBugDeg.Id, Cockpit2GaugesActuatorsAirspeedBugDeg);
            DataRefList.Add(Cockpit2GaugesIndicatorsSlipDeg.Id, Cockpit2GaugesIndicatorsSlipDeg);
            DataRefList.Add(Cockpit2GaugesIndicatorsCompassHeadingDegMag.Id, Cockpit2GaugesIndicatorsCompassHeadingDegMag);
            DataRefList.Add(Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecPilot.Id, Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecCopilot.Id, Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsAirspeedKtsPilot.Id, Cockpit2GaugesIndicatorsAirspeedKtsPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsAirspeedKtsCopilot.Id, Cockpit2GaugesIndicatorsAirspeedKtsCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsAirspeedKtsStby.Id, Cockpit2GaugesIndicatorsAirspeedKtsStby);
            DataRefList.Add(Cockpit2GaugesIndicatorsCalibratedAirspeedKtsPilot.Id, Cockpit2GaugesIndicatorsCalibratedAirspeedKtsPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsCalibratedAirspeedKtsCopilot.Id, Cockpit2GaugesIndicatorsCalibratedAirspeedKtsCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsCalibratedAirspeedKtsStby.Id, Cockpit2GaugesIndicatorsCalibratedAirspeedKtsStby);
            DataRefList.Add(Cockpit2GaugesIndicatorsAltitudeFtPilot.Id, Cockpit2GaugesIndicatorsAltitudeFtPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsAltitudeFtCopilot.Id, Cockpit2GaugesIndicatorsAltitudeFtCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsAltitudeFtStby.Id, Cockpit2GaugesIndicatorsAltitudeFtStby);
            DataRefList.Add(Cockpit2GaugesIndicatorsVviFpmPilot.Id, Cockpit2GaugesIndicatorsVviFpmPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsVviFpmCopilot.Id, Cockpit2GaugesIndicatorsVviFpmCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsTurnRateRollDegPilot.Id, Cockpit2GaugesIndicatorsTurnRateRollDegPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsTrueAirspeedKtsPilot.Id, Cockpit2GaugesIndicatorsTrueAirspeedKtsPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsTrueAirspeedKtsCopilot.Id, Cockpit2GaugesIndicatorsTrueAirspeedKtsCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsMachPilot.Id, Cockpit2GaugesIndicatorsMachPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsMachCopilot.Id, Cockpit2GaugesIndicatorsMachCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsTurnRateRollDegCopilot.Id, Cockpit2GaugesIndicatorsTurnRateRollDegCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsTurnRateHeadingDegPilot.Id, Cockpit2GaugesIndicatorsTurnRateHeadingDegPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsTurnRateHeadingDegCopilot.Id, Cockpit2GaugesIndicatorsTurnRateHeadingDegCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsHeadingAHARSDegMagPilot.Id, Cockpit2GaugesIndicatorsHeadingAHARSDegMagPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsHeadingAHARSDegMagCopilot.Id, Cockpit2GaugesIndicatorsHeadingAHARSDegMagCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsHeadingElectricDegMagPilot.Id, Cockpit2GaugesIndicatorsHeadingElectricDegMagPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsHeadingElectricDegMagCopilot.Id, Cockpit2GaugesIndicatorsHeadingElectricDegMagCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsHeadingVacuumDegMagPilot.Id, Cockpit2GaugesIndicatorsHeadingVacuumDegMagPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsHeadingVacuumDegMagCopilot.Id, Cockpit2GaugesIndicatorsHeadingVacuumDegMagCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsPitchAHARSDegPilot.Id, Cockpit2GaugesIndicatorsPitchAHARSDegPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsPitchAHARSDegCopilot.Id, Cockpit2GaugesIndicatorsPitchAHARSDegCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsPitchElectricDegPilot.Id, Cockpit2GaugesIndicatorsPitchElectricDegPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsPitchElectricDegCopilot.Id, Cockpit2GaugesIndicatorsPitchElectricDegCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsPitchVacuumDegPilot.Id, Cockpit2GaugesIndicatorsPitchVacuumDegPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsPitchVacuumDegCopilot.Id, Cockpit2GaugesIndicatorsPitchVacuumDegCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRadioAltimeterHeightFtPilot.Id, Cockpit2GaugesIndicatorsRadioAltimeterHeightFtPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRadioAltimeterHeightFtCopilot.Id, Cockpit2GaugesIndicatorsRadioAltimeterHeightFtCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRadioAltimeterDhLitPilot.Id, Cockpit2GaugesIndicatorsRadioAltimeterDhLitPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRadioAltimeterDhLitCopilot.Id, Cockpit2GaugesIndicatorsRadioAltimeterDhLitCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsBaroAltimeterMdaLitPilot.Id, Cockpit2GaugesIndicatorsBaroAltimeterMdaLitPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsBaroAltimeterMdaLitCopilot.Id, Cockpit2GaugesIndicatorsBaroAltimeterMdaLitCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsBaroAltimeterAlertLitPilot.Id, Cockpit2GaugesIndicatorsBaroAltimeterAlertLitPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsBaroAltimeterAlertLitCopilot.Id, Cockpit2GaugesIndicatorsBaroAltimeterAlertLitCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRollAHARSDegPilot.Id, Cockpit2GaugesIndicatorsRollAHARSDegPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRollAHARSDegCopilot.Id, Cockpit2GaugesIndicatorsRollAHARSDegCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRollElectricDegPilot.Id, Cockpit2GaugesIndicatorsRollElectricDegPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRollElectricDegCopilot.Id, Cockpit2GaugesIndicatorsRollElectricDegCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRollVacuumDegPilot.Id, Cockpit2GaugesIndicatorsRollVacuumDegPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsRollVacuumDegCopilot.Id, Cockpit2GaugesIndicatorsRollVacuumDegCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsWindHeadingDegMag.Id, Cockpit2GaugesIndicatorsWindHeadingDegMag);
            DataRefList.Add(Cockpit2GaugesIndicatorsWindSpeedKts.Id, Cockpit2GaugesIndicatorsWindSpeedKts);
            DataRefList.Add(Cockpit2GaugesIndicatorsSuction1Ratio.Id, Cockpit2GaugesIndicatorsSuction1Ratio);
            DataRefList.Add(Cockpit2GaugesIndicatorsSuction2Ratio.Id, Cockpit2GaugesIndicatorsSuction2Ratio);
            DataRefList.Add(Cockpit2GaugesIndicatorsTotalEnergyFpm.Id, Cockpit2GaugesIndicatorsTotalEnergyFpm);
            DataRefList.Add(Cockpit2GaugesIndicatorsWaterRatio.Id, Cockpit2GaugesIndicatorsWaterRatio);
            DataRefList.Add(Cockpit2GaugesIndicatorsSideslipDegrees.Id, Cockpit2GaugesIndicatorsSideslipDegrees);
            DataRefList.Add(Cockpit2GaugesIndicatorsPropSyncDegrees.Id, Cockpit2GaugesIndicatorsPropSyncDegrees);
            DataRefList.Add(Cockpit2GaugesIndicatorsCGIndicator.Id, Cockpit2GaugesIndicatorsCGIndicator);
            DataRefList.Add(Cockpit2GaugesIndicatorsGroundTrackMagPilot.Id, Cockpit2GaugesIndicatorsGroundTrackMagPilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsGroundTrackMagCopilot.Id, Cockpit2GaugesIndicatorsGroundTrackMagCopilot);
            DataRefList.Add(Cockpit2GaugesIndicatorsMaxMachNumberInKias.Id, Cockpit2GaugesIndicatorsMaxMachNumberInKias);
            DataRefList.Add(Cockpit2GaugesIndicatorsMaxMachNumberOrSpeedKias.Id, Cockpit2GaugesIndicatorsMaxMachNumberOrSpeedKias);
            DataRefList.Add(Cockpit2HydraulicsIndicatorsHydraulicPressure1.Id, Cockpit2HydraulicsIndicatorsHydraulicPressure1);
            DataRefList.Add(Cockpit2HydraulicsIndicatorsHydraulicPressure2.Id, Cockpit2HydraulicsIndicatorsHydraulicPressure2);
            DataRefList.Add(Cockpit2HydraulicsIndicatorsHydraulicFluidRatio1.Id, Cockpit2HydraulicsIndicatorsHydraulicFluidRatio1);
            DataRefList.Add(Cockpit2HydraulicsIndicatorsHydraulicFluidRatio2.Id, Cockpit2HydraulicsIndicatorsHydraulicFluidRatio2);
            DataRefList.Add(Cockpit2IceIceAllOn.Id, Cockpit2IceIceAllOn);
            DataRefList.Add(Cockpit2IceIceInletHeatOn.Id, Cockpit2IceIceInletHeatOn);
            DataRefList.Add(Cockpit2IceIcePropHeatOn.Id, Cockpit2IceIcePropHeatOn);
            DataRefList.Add(Cockpit2IceIceInletHeatOnPerEngine.Id, Cockpit2IceIceInletHeatOnPerEngine);
            DataRefList.Add(Cockpit2IceIcePropHeatOnPerEngine.Id, Cockpit2IceIcePropHeatOnPerEngine);
            DataRefList.Add(Cockpit2IceIceWindowHeatOn.Id, Cockpit2IceIceWindowHeatOn);
            DataRefList.Add(Cockpit2IceIcePitotHeatOnPilot.Id, Cockpit2IceIcePitotHeatOnPilot);
            DataRefList.Add(Cockpit2IceIcePitotHeatOnCopilot.Id, Cockpit2IceIcePitotHeatOnCopilot);
            DataRefList.Add(Cockpit2IceIceAOAHeatOn.Id, Cockpit2IceIceAOAHeatOn);
            DataRefList.Add(Cockpit2IceIceAOAHeatOnCopilot.Id, Cockpit2IceIceAOAHeatOnCopilot);
            DataRefList.Add(Cockpit2IceIceStaticHeatOnPilot.Id, Cockpit2IceIceStaticHeatOnPilot);
            DataRefList.Add(Cockpit2IceIceStaticHeatOnCopilot.Id, Cockpit2IceIceStaticHeatOnCopilot);
            DataRefList.Add(Cockpit2IceIceSurfceHeatOn.Id, Cockpit2IceIceSurfceHeatOn);
            DataRefList.Add(Cockpit2IceIceSurfceHeatLeftOn.Id, Cockpit2IceIceSurfceHeatLeftOn);
            DataRefList.Add(Cockpit2IceIceSurfceHeatRightOn.Id, Cockpit2IceIceSurfceHeatRightOn);
            DataRefList.Add(Cockpit2IceIceSurfaceBootOn.Id, Cockpit2IceIceSurfaceBootOn);
            DataRefList.Add(Cockpit2IceIceSurfaceBootLeftOn.Id, Cockpit2IceIceSurfaceBootLeftOn);
            DataRefList.Add(Cockpit2IceIceSurfaceBootRightOn.Id, Cockpit2IceIceSurfaceBootRightOn);
            DataRefList.Add(Cockpit2IceIceSurfaceHotBleedAirOn.Id, Cockpit2IceIceSurfaceHotBleedAirOn);
            DataRefList.Add(Cockpit2IceIceSurfaceHotBleedAirLeftOn.Id, Cockpit2IceIceSurfaceHotBleedAirLeftOn);
            DataRefList.Add(Cockpit2IceIceSurfaceHotBleedAirRightOn.Id, Cockpit2IceIceSurfaceHotBleedAirRightOn);
            DataRefList.Add(Cockpit2IceIceSurfaceTksOn.Id, Cockpit2IceIceSurfaceTksOn);
            DataRefList.Add(Cockpit2IceIceSurfaceTksLeftOn.Id, Cockpit2IceIceSurfaceTksLeftOn);
            DataRefList.Add(Cockpit2IceIceSurfaceTksRightOn.Id, Cockpit2IceIceSurfaceTksRightOn);
            DataRefList.Add(Cockpit2IceCowlingThermalAntiIcePerEngine.Id, Cockpit2IceCowlingThermalAntiIcePerEngine);
            DataRefList.Add(Cockpit2IceIcePropTksOnPerEngine.Id, Cockpit2IceIcePropTksOnPerEngine);
            DataRefList.Add(Cockpit2IceAntiIceEngineAir.Id, Cockpit2IceAntiIceEngineAir);
            DataRefList.Add(Cockpit2IceAntiIceEngineAirB.Id, Cockpit2IceAntiIceEngineAirB);
            DataRefList.Add(Cockpit2IceIceAutoIgniteOn.Id, Cockpit2IceIceAutoIgniteOn);
            DataRefList.Add(Cockpit2IceIceDetectOn.Id, Cockpit2IceIceDetectOn);
            DataRefList.Add(Cockpit2IceIceTksFluidLiter.Id, Cockpit2IceIceTksFluidLiter);
            DataRefList.Add(Cockpit2PressurizationActuatorsBleedAirMode.Id, Cockpit2PressurizationActuatorsBleedAirMode);
            DataRefList.Add(Cockpit2PressurizationActuatorsDumpAllOn.Id, Cockpit2PressurizationActuatorsDumpAllOn);
            DataRefList.Add(Cockpit2PressurizationActuatorsDumpToAltitudeOn.Id, Cockpit2PressurizationActuatorsDumpToAltitudeOn);
            DataRefList.Add(Cockpit2PressurizationActuatorsCabinAltitudeFt.Id, Cockpit2PressurizationActuatorsCabinAltitudeFt);
            DataRefList.Add(Cockpit2PressurizationActuatorsCabinVviFpm.Id, Cockpit2PressurizationActuatorsCabinVviFpm);
            DataRefList.Add(Cockpit2PressurizationActuatorsMaxAllowableAltitudeFt.Id, Cockpit2PressurizationActuatorsMaxAllowableAltitudeFt);
            DataRefList.Add(Cockpit2PressurizationActuatorsAirCondOn.Id, Cockpit2PressurizationActuatorsAirCondOn);
            DataRefList.Add(Cockpit2PressurizationActuatorsHeaterOn.Id, Cockpit2PressurizationActuatorsHeaterOn);
            DataRefList.Add(Cockpit2PressurizationActuatorsFanSetting.Id, Cockpit2PressurizationActuatorsFanSetting);
            DataRefList.Add(Cockpit2PressurizationIndicatorsCabinAltitudeFt.Id, Cockpit2PressurizationIndicatorsCabinAltitudeFt);
            DataRefList.Add(Cockpit2PressurizationIndicatorsCabinVviFpm.Id, Cockpit2PressurizationIndicatorsCabinVviFpm);
            DataRefList.Add(Cockpit2PressurizationIndicatorsPressureDiffentialPsi.Id, Cockpit2PressurizationIndicatorsPressureDiffentialPsi);
            DataRefList.Add(Cockpit2PressurizationIndicatorsOutflowValve.Id, Cockpit2PressurizationIndicatorsOutflowValve);
            DataRefList.Add(Cockpit2PressurizationIndicatorsFanSpeed.Id, Cockpit2PressurizationIndicatorsFanSpeed);
            DataRefList.Add(Cockpit2BleedairActuatorsEngineBleedSov.Id, Cockpit2BleedairActuatorsEngineBleedSov);
            DataRefList.Add(Cockpit2BleedairActuatorsApuBleed.Id, Cockpit2BleedairActuatorsApuBleed);
            DataRefList.Add(Cockpit2BleedairActuatorsGpuBleed.Id, Cockpit2BleedairActuatorsGpuBleed);
            DataRefList.Add(Cockpit2BleedairActuatorsIsolValveLeft.Id, Cockpit2BleedairActuatorsIsolValveLeft);
            DataRefList.Add(Cockpit2BleedairActuatorsIsolValveRight.Id, Cockpit2BleedairActuatorsIsolValveRight);
            DataRefList.Add(Cockpit2BleedairActuatorsPackLeft.Id, Cockpit2BleedairActuatorsPackLeft);
            DataRefList.Add(Cockpit2BleedairActuatorsPackCenter.Id, Cockpit2BleedairActuatorsPackCenter);
            DataRefList.Add(Cockpit2BleedairActuatorsPackRight.Id, Cockpit2BleedairActuatorsPackRight);
            DataRefList.Add(Cockpit2BleedairIndicatorsBleedAvailableLeft.Id, Cockpit2BleedairIndicatorsBleedAvailableLeft);
            DataRefList.Add(Cockpit2BleedairIndicatorsBleedAvailableCenter.Id, Cockpit2BleedairIndicatorsBleedAvailableCenter);
            DataRefList.Add(Cockpit2BleedairIndicatorsBleedAvailableRight.Id, Cockpit2BleedairIndicatorsBleedAvailableRight);
            DataRefList.Add(Cockpit2BleedairIndicatorsEngineLossFromBleedAirRatio.Id, Cockpit2BleedairIndicatorsEngineLossFromBleedAirRatio);
            DataRefList.Add(Cockpit2BleedairIndicatorsAPULossFromBleedAirRatio.Id, Cockpit2BleedairIndicatorsAPULossFromBleedAirRatio);
            DataRefList.Add(Cockpit2OxygenActuatorsO2ValveOn.Id, Cockpit2OxygenActuatorsO2ValveOn);
            DataRefList.Add(Cockpit2OxygenActuatorsDemandFlowSetting.Id, Cockpit2OxygenActuatorsDemandFlowSetting);
            DataRefList.Add(Cockpit2OxygenActuatorsNumPluggedInO2.Id, Cockpit2OxygenActuatorsNumPluggedInO2);
            DataRefList.Add(Cockpit2OxygenIndicatorsO2BottleRemLiter.Id, Cockpit2OxygenIndicatorsO2BottleRemLiter);
            DataRefList.Add(Cockpit2OxygenIndicatorsO2BottlePressurePsi.Id, Cockpit2OxygenIndicatorsO2BottlePressurePsi);
            DataRefList.Add(Cockpit2OxygenIndicatorsPilotFeltAltitudeFt.Id, Cockpit2OxygenIndicatorsPilotFeltAltitudeFt);
            DataRefList.Add(Cockpit2OxygenIndicatorsPassOxygenatorWorking.Id, Cockpit2OxygenIndicatorsPassOxygenatorWorking);
            DataRefList.Add(Cockpit2OxygenIndicatorsPassOxygenatorMinRem.Id, Cockpit2OxygenIndicatorsPassOxygenatorMinRem);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1Power.Id, Cockpit2RadiosActuatorsNav1Power);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2Power.Id, Cockpit2RadiosActuatorsNav2Power);
            DataRefList.Add(Cockpit2RadiosActuatorsNavPower.Id, Cockpit2RadiosActuatorsNavPower);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1Power.Id, Cockpit2RadiosActuatorsCom1Power);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2Power.Id, Cockpit2RadiosActuatorsCom2Power);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf1Power.Id, Cockpit2RadiosActuatorsAdf1Power);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf2Power.Id, Cockpit2RadiosActuatorsAdf2Power);
            DataRefList.Add(Cockpit2RadiosActuatorsGpsPower.Id, Cockpit2RadiosActuatorsGpsPower);
            DataRefList.Add(Cockpit2RadiosActuatorsGps2Power.Id, Cockpit2RadiosActuatorsGps2Power);
            DataRefList.Add(Cockpit2RadiosActuatorsDmePower.Id, Cockpit2RadiosActuatorsDmePower);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1FrequencyHz.Id, Cockpit2RadiosActuatorsNav1FrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1FrequencyMhz.Id, Cockpit2RadiosActuatorsNav1FrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1FrequencyKhz.Id, Cockpit2RadiosActuatorsNav1FrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2FrequencyHz.Id, Cockpit2RadiosActuatorsNav2FrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2FrequencyMhz.Id, Cockpit2RadiosActuatorsNav2FrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2FrequencyKhz.Id, Cockpit2RadiosActuatorsNav2FrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNavFrequencyHz.Id, Cockpit2RadiosActuatorsNavFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNavFrequencyMhz.Id, Cockpit2RadiosActuatorsNavFrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNavFrequencyKhz.Id, Cockpit2RadiosActuatorsNavFrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNavDmeHold.Id, Cockpit2RadiosActuatorsNavDmeHold);
            DataRefList.Add(Cockpit2RadiosActuatorsNavDmeFrequencyHz.Id, Cockpit2RadiosActuatorsNavDmeFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNavDmeFrequencyMhz.Id, Cockpit2RadiosActuatorsNavDmeFrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNavDmeFrequencyKhz.Id, Cockpit2RadiosActuatorsNavDmeFrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1FrequencyHz.Id, Cockpit2RadiosActuatorsCom1FrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1FrequencyMhz.Id, Cockpit2RadiosActuatorsCom1FrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1FrequencyKhz.Id, Cockpit2RadiosActuatorsCom1FrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1FrequencyHz833.Id, Cockpit2RadiosActuatorsCom1FrequencyHz833);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2FrequencyHz.Id, Cockpit2RadiosActuatorsCom2FrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2FrequencyMhz.Id, Cockpit2RadiosActuatorsCom2FrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2FrequencyKhz.Id, Cockpit2RadiosActuatorsCom2FrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2FrequencyHz833.Id, Cockpit2RadiosActuatorsCom2FrequencyHz833);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf1FrequencyHz.Id, Cockpit2RadiosActuatorsAdf1FrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf2FrequencyHz.Id, Cockpit2RadiosActuatorsAdf2FrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsDmeFrequencyHz.Id, Cockpit2RadiosActuatorsDmeFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1StandbyFrequencyHz.Id, Cockpit2RadiosActuatorsNav1StandbyFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1StandbyFrequencyMhz.Id, Cockpit2RadiosActuatorsNav1StandbyFrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1StandbyFrequencyKhz.Id, Cockpit2RadiosActuatorsNav1StandbyFrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2StandbyFrequencyHz.Id, Cockpit2RadiosActuatorsNav2StandbyFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2StandbyFrequencyMhz.Id, Cockpit2RadiosActuatorsNav2StandbyFrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2StandbyFrequencyKhz.Id, Cockpit2RadiosActuatorsNav2StandbyFrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNavStandbyFrequencyHz.Id, Cockpit2RadiosActuatorsNavStandbyFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNavStandbyFrequencyMhz.Id, Cockpit2RadiosActuatorsNavStandbyFrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsNavStandbyFrequencyKhz.Id, Cockpit2RadiosActuatorsNavStandbyFrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1StandbyFrequencyHz.Id, Cockpit2RadiosActuatorsCom1StandbyFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1StandbyFrequencyMhz.Id, Cockpit2RadiosActuatorsCom1StandbyFrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1StandbyFrequencyKhz.Id, Cockpit2RadiosActuatorsCom1StandbyFrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1StandbyFrequencyHz833.Id, Cockpit2RadiosActuatorsCom1StandbyFrequencyHz833);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2StandbyFrequencyHz.Id, Cockpit2RadiosActuatorsCom2StandbyFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2StandbyFrequencyMhz.Id, Cockpit2RadiosActuatorsCom2StandbyFrequencyMhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2StandbyFrequencyKhz.Id, Cockpit2RadiosActuatorsCom2StandbyFrequencyKhz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2StandbyFrequencyHz833.Id, Cockpit2RadiosActuatorsCom2StandbyFrequencyHz833);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf1StandbyFrequencyHz.Id, Cockpit2RadiosActuatorsAdf1StandbyFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf2StandbyFrequencyHz.Id, Cockpit2RadiosActuatorsAdf2StandbyFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsDmeStandbyFrequencyHz.Id, Cockpit2RadiosActuatorsDmeStandbyFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1ObsDegMagPilot.Id, Cockpit2RadiosActuatorsNav1ObsDegMagPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2ObsDegMagPilot.Id, Cockpit2RadiosActuatorsNav2ObsDegMagPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNavObsDegMagPilot.Id, Cockpit2RadiosActuatorsNavObsDegMagPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1ObsDegMagCopilot.Id, Cockpit2RadiosActuatorsNav1ObsDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2ObsDegMagCopilot.Id, Cockpit2RadiosActuatorsNav2ObsDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNavObsDegMagCopilot.Id, Cockpit2RadiosActuatorsNavObsDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf1CardHeadingDegMagPilot.Id, Cockpit2RadiosActuatorsAdf1CardHeadingDegMagPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf2CardHeadingDegMagPilot.Id, Cockpit2RadiosActuatorsAdf2CardHeadingDegMagPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf1CardHeadingDegMagCopilot.Id, Cockpit2RadiosActuatorsAdf1CardHeadingDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf2CardHeadingDegMagCopilot.Id, Cockpit2RadiosActuatorsAdf2CardHeadingDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1CourseDegMagPilot.Id, Cockpit2RadiosActuatorsNav1CourseDegMagPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2CourseDegMagPilot.Id, Cockpit2RadiosActuatorsNav2CourseDegMagPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNavCourseDegMagPilot.Id, Cockpit2RadiosActuatorsNavCourseDegMagPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1CourseDegMagCopilot.Id, Cockpit2RadiosActuatorsNav1CourseDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2CourseDegMagCopilot.Id, Cockpit2RadiosActuatorsNav2CourseDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNavCourseDegMagCopilot.Id, Cockpit2RadiosActuatorsNavCourseDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsHSISourceSelectPilot.Id, Cockpit2RadiosActuatorsHSISourceSelectPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsHSISourceSelectCopilot.Id, Cockpit2RadiosActuatorsHSISourceSelectCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsRMISourceSelectPilot.Id, Cockpit2RadiosActuatorsRMISourceSelectPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsRMISourceSelectCopilot.Id, Cockpit2RadiosActuatorsRMISourceSelectCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsRMILeftUseAdfPilot.Id, Cockpit2RadiosActuatorsRMILeftUseAdfPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsRMILeftUseAdfCopilot.Id, Cockpit2RadiosActuatorsRMILeftUseAdfCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsRMIRightUseAdfPilot.Id, Cockpit2RadiosActuatorsRMIRightUseAdfPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsRMIRightUseAdfCopilot.Id, Cockpit2RadiosActuatorsRMIRightUseAdfCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsDMEMode.Id, Cockpit2RadiosActuatorsDMEMode);
            DataRefList.Add(Cockpit2RadiosActuatorsDMESlaveSource.Id, Cockpit2RadiosActuatorsDMESlaveSource);
            DataRefList.Add(Cockpit2RadiosActuatorsNavComAdfMode.Id, Cockpit2RadiosActuatorsNavComAdfMode);
            DataRefList.Add(Cockpit2RadiosActuatorsTransponderCode.Id, Cockpit2RadiosActuatorsTransponderCode);
            DataRefList.Add(Cockpit2RadiosActuatorsFlightId.Id, Cockpit2RadiosActuatorsFlightId);
            DataRefList.Add(Cockpit2RadiosActuatorsTransponderMode.Id, Cockpit2RadiosActuatorsTransponderMode);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioComSelection.Id, Cockpit2RadiosActuatorsAudioComSelection);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioNavSelection.Id, Cockpit2RadiosActuatorsAudioNavSelection);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioComSelectionMan.Id, Cockpit2RadiosActuatorsAudioComSelectionMan);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioSelectionComAuto.Id, Cockpit2RadiosActuatorsAudioSelectionComAuto);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioSelectionCom1.Id, Cockpit2RadiosActuatorsAudioSelectionCom1);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioSelectionCom2.Id, Cockpit2RadiosActuatorsAudioSelectionCom2);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioSelectionNav1.Id, Cockpit2RadiosActuatorsAudioSelectionNav1);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioSelectionNav2.Id, Cockpit2RadiosActuatorsAudioSelectionNav2);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioSelectionAdf1.Id, Cockpit2RadiosActuatorsAudioSelectionAdf1);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioSelectionAdf2.Id, Cockpit2RadiosActuatorsAudioSelectionAdf2);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioDmeEnabled.Id, Cockpit2RadiosActuatorsAudioDmeEnabled);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioSelectionDme1.Id, Cockpit2RadiosActuatorsAudioSelectionDme1);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioSelectionDme2.Id, Cockpit2RadiosActuatorsAudioSelectionDme2);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioMarkerEnabled.Id, Cockpit2RadiosActuatorsAudioMarkerEnabled);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeCom1.Id, Cockpit2RadiosActuatorsAudioVolumeCom1);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeCom2.Id, Cockpit2RadiosActuatorsAudioVolumeCom2);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeNav1.Id, Cockpit2RadiosActuatorsAudioVolumeNav1);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeNav2.Id, Cockpit2RadiosActuatorsAudioVolumeNav2);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeAdf1.Id, Cockpit2RadiosActuatorsAudioVolumeAdf1);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeAdf2.Id, Cockpit2RadiosActuatorsAudioVolumeAdf2);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeDme.Id, Cockpit2RadiosActuatorsAudioVolumeDme);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeDme1.Id, Cockpit2RadiosActuatorsAudioVolumeDme1);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeDme2.Id, Cockpit2RadiosActuatorsAudioVolumeDme2);
            DataRefList.Add(Cockpit2RadiosActuatorsAudioVolumeMark.Id, Cockpit2RadiosActuatorsAudioVolumeMark);
            DataRefList.Add(Cockpit2RadiosActuatorsHsiObsDegMagPilot.Id, Cockpit2RadiosActuatorsHsiObsDegMagPilot);
            DataRefList.Add(Cockpit2RadiosActuatorsHsiObsDegMagCopilot.Id, Cockpit2RadiosActuatorsHsiObsDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1LeftFrequencyHz.Id, Cockpit2RadiosActuatorsNav1LeftFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2LeftFrequencyHz.Id, Cockpit2RadiosActuatorsNav2LeftFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1LeftFrequencyHz.Id, Cockpit2RadiosActuatorsCom1LeftFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1LeftFrequencyHz833.Id, Cockpit2RadiosActuatorsCom1LeftFrequencyHz833);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2LeftFrequencyHz.Id, Cockpit2RadiosActuatorsCom2LeftFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2LeftFrequencyHz833.Id, Cockpit2RadiosActuatorsCom2LeftFrequencyHz833);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf1LeftFrequencyHz.Id, Cockpit2RadiosActuatorsAdf1LeftFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf2LeftFrequencyHz.Id, Cockpit2RadiosActuatorsAdf2LeftFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsDmeLeftFrequencyHz.Id, Cockpit2RadiosActuatorsDmeLeftFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1RightFrequencyHz.Id, Cockpit2RadiosActuatorsNav1RightFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2RightFrequencyHz.Id, Cockpit2RadiosActuatorsNav2RightFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1RightFrequencyHz.Id, Cockpit2RadiosActuatorsCom1RightFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2RightFrequencyHz.Id, Cockpit2RadiosActuatorsCom2RightFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf1RightFrequencyHz.Id, Cockpit2RadiosActuatorsAdf1RightFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf2RightFrequencyHz.Id, Cockpit2RadiosActuatorsAdf2RightFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsDmeRightFrequencyHz.Id, Cockpit2RadiosActuatorsDmeRightFrequencyHz);
            DataRefList.Add(Cockpit2RadiosActuatorsNav1RightIsSelected.Id, Cockpit2RadiosActuatorsNav1RightIsSelected);
            DataRefList.Add(Cockpit2RadiosActuatorsNav2RightIsSelected.Id, Cockpit2RadiosActuatorsNav2RightIsSelected);
            DataRefList.Add(Cockpit2RadiosActuatorsCom1RightIsSelected.Id, Cockpit2RadiosActuatorsCom1RightIsSelected);
            DataRefList.Add(Cockpit2RadiosActuatorsCom2RightIsSelected.Id, Cockpit2RadiosActuatorsCom2RightIsSelected);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf1RightIsSelected.Id, Cockpit2RadiosActuatorsAdf1RightIsSelected);
            DataRefList.Add(Cockpit2RadiosActuatorsAdf2RightIsSelected.Id, Cockpit2RadiosActuatorsAdf2RightIsSelected);
            DataRefList.Add(Cockpit2RadiosActuatorsDmeRightIsSelected.Id, Cockpit2RadiosActuatorsDmeRightIsSelected);
            DataRefList.Add(Cockpit2RadiosActuatorsMarkerSens.Id, Cockpit2RadiosActuatorsMarkerSens);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1BearingDegMag.Id, Cockpit2RadiosIndicatorsNav1BearingDegMag);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2BearingDegMag.Id, Cockpit2RadiosIndicatorsNav2BearingDegMag);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavBearingDegMag.Id, Cockpit2RadiosIndicatorsNavBearingDegMag);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf1BearingDegMag.Id, Cockpit2RadiosIndicatorsAdf1BearingDegMag);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf2BearingDegMag.Id, Cockpit2RadiosIndicatorsAdf2BearingDegMag);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsBearingDegMag.Id, Cockpit2RadiosIndicatorsGpsBearingDegMag);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2BearingDegMag.Id, Cockpit2RadiosIndicatorsGps2BearingDegMag);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1RelativeBearingDeg.Id, Cockpit2RadiosIndicatorsNav1RelativeBearingDeg);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2RelativeBearingDeg.Id, Cockpit2RadiosIndicatorsNav2RelativeBearingDeg);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavRelativeBearingDeg.Id, Cockpit2RadiosIndicatorsNavRelativeBearingDeg);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf1RelativeBearingDeg.Id, Cockpit2RadiosIndicatorsAdf1RelativeBearingDeg);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf2RelativeBearingDeg.Id, Cockpit2RadiosIndicatorsAdf2RelativeBearingDeg);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsRelativeBearingDeg.Id, Cockpit2RadiosIndicatorsGpsRelativeBearingDeg);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2RelativeBearingDeg.Id, Cockpit2RadiosIndicatorsGps2RelativeBearingDeg);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1FlagFromToPilot.Id, Cockpit2RadiosIndicatorsNav1FlagFromToPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2FlagFromToPilot.Id, Cockpit2RadiosIndicatorsNav2FlagFromToPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavFlagFromToPilot.Id, Cockpit2RadiosIndicatorsNavFlagFromToPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1FlagFromToCopilot.Id, Cockpit2RadiosIndicatorsNav1FlagFromToCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2FlagFromToCopilot.Id, Cockpit2RadiosIndicatorsNav2FlagFromToCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavFlagFromToCopilot.Id, Cockpit2RadiosIndicatorsNavFlagFromToCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1FlagGlideslope.Id, Cockpit2RadiosIndicatorsNav1FlagGlideslope);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2FlagGlideslope.Id, Cockpit2RadiosIndicatorsNav2FlagGlideslope);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavFlagGlideslope.Id, Cockpit2RadiosIndicatorsNavFlagGlideslope);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1FlagGlideslopeMech.Id, Cockpit2RadiosIndicatorsNav1FlagGlideslopeMech);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2FlagGlideslopeMech.Id, Cockpit2RadiosIndicatorsNav2FlagGlideslopeMech);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavFlagGlideslopeMech.Id, Cockpit2RadiosIndicatorsNavFlagGlideslopeMech);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1DisplayHorizontal.Id, Cockpit2RadiosIndicatorsNav1DisplayHorizontal);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2DisplayHorizontal.Id, Cockpit2RadiosIndicatorsNav2DisplayHorizontal);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavDisplayHorizontal.Id, Cockpit2RadiosIndicatorsNavDisplayHorizontal);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1DisplayVertical.Id, Cockpit2RadiosIndicatorsNav1DisplayVertical);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2DisplayVertical.Id, Cockpit2RadiosIndicatorsNav2DisplayVertical);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavDisplayVertical.Id, Cockpit2RadiosIndicatorsNavDisplayVertical);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1HdefDotsPilot.Id, Cockpit2RadiosIndicatorsNav1HdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2HdefDotsPilot.Id, Cockpit2RadiosIndicatorsNav2HdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavHdefDotsPilot.Id, Cockpit2RadiosIndicatorsNavHdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsHdefDotsPilot.Id, Cockpit2RadiosIndicatorsGpsHdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2HdefDotsPilot.Id, Cockpit2RadiosIndicatorsGps2HdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1HdefDotsCopilot.Id, Cockpit2RadiosIndicatorsNav1HdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2HdefDotsCopilot.Id, Cockpit2RadiosIndicatorsNav2HdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavHdefDotsCopilot.Id, Cockpit2RadiosIndicatorsNavHdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsHdefDotsCopilot.Id, Cockpit2RadiosIndicatorsGpsHdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2HdefDotsCopilot.Id, Cockpit2RadiosIndicatorsGps2HdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1VdefDotsPilot.Id, Cockpit2RadiosIndicatorsNav1VdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2VdefDotsPilot.Id, Cockpit2RadiosIndicatorsNav2VdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavVdefDotsPilot.Id, Cockpit2RadiosIndicatorsNavVdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1VdefDotsCopilot.Id, Cockpit2RadiosIndicatorsNav1VdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2VdefDotsCopilot.Id, Cockpit2RadiosIndicatorsNav2VdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavVdefDotsCopilot.Id, Cockpit2RadiosIndicatorsNavVdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1HasDme.Id, Cockpit2RadiosIndicatorsNav1HasDme);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2HasDme.Id, Cockpit2RadiosIndicatorsNav2HasDme);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavHasDme.Id, Cockpit2RadiosIndicatorsNavHasDme);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf1HasDme.Id, Cockpit2RadiosIndicatorsAdf1HasDme);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf2HasDme.Id, Cockpit2RadiosIndicatorsAdf2HasDme);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsHasDme.Id, Cockpit2RadiosIndicatorsGpsHasDme);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2HasDme.Id, Cockpit2RadiosIndicatorsGps2HasDme);
            DataRefList.Add(Cockpit2RadiosIndicatorsDmeHasDme.Id, Cockpit2RadiosIndicatorsDmeHasDme);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1DmeDistanceNm.Id, Cockpit2RadiosIndicatorsNav1DmeDistanceNm);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2DmeDistanceNm.Id, Cockpit2RadiosIndicatorsNav2DmeDistanceNm);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavDmeDistanceNm.Id, Cockpit2RadiosIndicatorsNavDmeDistanceNm);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf1DmeDistanceNm.Id, Cockpit2RadiosIndicatorsAdf1DmeDistanceNm);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf2DmeDistanceNm.Id, Cockpit2RadiosIndicatorsAdf2DmeDistanceNm);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsDmeDistanceNm.Id, Cockpit2RadiosIndicatorsGpsDmeDistanceNm);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2DmeDistanceNm.Id, Cockpit2RadiosIndicatorsGps2DmeDistanceNm);
            DataRefList.Add(Cockpit2RadiosIndicatorsDmeDmeDistanceNm.Id, Cockpit2RadiosIndicatorsDmeDmeDistanceNm);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1DmeSpeedKts.Id, Cockpit2RadiosIndicatorsNav1DmeSpeedKts);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2DmeSpeedKts.Id, Cockpit2RadiosIndicatorsNav2DmeSpeedKts);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavDmeSpeedKts.Id, Cockpit2RadiosIndicatorsNavDmeSpeedKts);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf1DmeSpeedKts.Id, Cockpit2RadiosIndicatorsAdf1DmeSpeedKts);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf2DmeSpeedKts.Id, Cockpit2RadiosIndicatorsAdf2DmeSpeedKts);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsDmeSpeedKts.Id, Cockpit2RadiosIndicatorsGpsDmeSpeedKts);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2DmeSpeedKts.Id, Cockpit2RadiosIndicatorsGps2DmeSpeedKts);
            DataRefList.Add(Cockpit2RadiosIndicatorsDmeDmeSpeedKts.Id, Cockpit2RadiosIndicatorsDmeDmeSpeedKts);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1DmeTimeMin.Id, Cockpit2RadiosIndicatorsNav1DmeTimeMin);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2DmeTimeMin.Id, Cockpit2RadiosIndicatorsNav2DmeTimeMin);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavDmeTimeMin.Id, Cockpit2RadiosIndicatorsNavDmeTimeMin);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf1DmeTimeMin.Id, Cockpit2RadiosIndicatorsAdf1DmeTimeMin);
            DataRefList.Add(Cockpit2RadiosIndicatorsAdf2DmeTimeMin.Id, Cockpit2RadiosIndicatorsAdf2DmeTimeMin);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsDmeTimeMin.Id, Cockpit2RadiosIndicatorsGpsDmeTimeMin);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2DmeTimeMin.Id, Cockpit2RadiosIndicatorsGps2DmeTimeMin);
            DataRefList.Add(Cockpit2RadiosIndicatorsDmeDmeTimeMin.Id, Cockpit2RadiosIndicatorsDmeDmeTimeMin);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1Type.Id, Cockpit2RadiosIndicatorsNav1Type);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2Type.Id, Cockpit2RadiosIndicatorsNav2Type);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavType.Id, Cockpit2RadiosIndicatorsNavType);
            DataRefList.Add(Cockpit2RadiosIndicatorsOverOuterMarker.Id, Cockpit2RadiosIndicatorsOverOuterMarker);
            DataRefList.Add(Cockpit2RadiosIndicatorsOverMiddleMarker.Id, Cockpit2RadiosIndicatorsOverMiddleMarker);
            DataRefList.Add(Cockpit2RadiosIndicatorsOverInnerMarker.Id, Cockpit2RadiosIndicatorsOverInnerMarker);
            DataRefList.Add(Cockpit2RadiosIndicatorsOuterMarkerSignalRatio.Id, Cockpit2RadiosIndicatorsOuterMarkerSignalRatio);
            DataRefList.Add(Cockpit2RadiosIndicatorsMiddleMarkerSignalRatio.Id, Cockpit2RadiosIndicatorsMiddleMarkerSignalRatio);
            DataRefList.Add(Cockpit2RadiosIndicatorsInnerMarkerSignalRatio.Id, Cockpit2RadiosIndicatorsInnerMarkerSignalRatio);
            DataRefList.Add(Cockpit2RadiosIndicatorsOuterMarkerLit.Id, Cockpit2RadiosIndicatorsOuterMarkerLit);
            DataRefList.Add(Cockpit2RadiosIndicatorsMiddleMarkerLit.Id, Cockpit2RadiosIndicatorsMiddleMarkerLit);
            DataRefList.Add(Cockpit2RadiosIndicatorsInnerMarkerLit.Id, Cockpit2RadiosIndicatorsInnerMarkerLit);
            DataRefList.Add(Cockpit2RadiosIndicatorsMorseIdToneNav1.Id, Cockpit2RadiosIndicatorsMorseIdToneNav1);
            DataRefList.Add(Cockpit2RadiosIndicatorsMorseIdToneNav2.Id, Cockpit2RadiosIndicatorsMorseIdToneNav2);
            DataRefList.Add(Cockpit2RadiosIndicatorsMorseIdToneAdf1.Id, Cockpit2RadiosIndicatorsMorseIdToneAdf1);
            DataRefList.Add(Cockpit2RadiosIndicatorsMorseIdToneAdf2.Id, Cockpit2RadiosIndicatorsMorseIdToneAdf2);
            DataRefList.Add(Cockpit2RadiosIndicatorsMorseIdToneDme.Id, Cockpit2RadiosIndicatorsMorseIdToneDme);
            DataRefList.Add(Cockpit2RadiosIndicatorsMorseIdToneDme1.Id, Cockpit2RadiosIndicatorsMorseIdToneDme1);
            DataRefList.Add(Cockpit2RadiosIndicatorsMorseIdToneDme2.Id, Cockpit2RadiosIndicatorsMorseIdToneDme2);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiBearingDegMagPilot.Id, Cockpit2RadiosIndicatorsHsiBearingDegMagPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiBearingDegMagCopilot.Id, Cockpit2RadiosIndicatorsHsiBearingDegMagCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiRelativeBearingDegPilot.Id, Cockpit2RadiosIndicatorsHsiRelativeBearingDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiRelativeBearingDegCopilot.Id, Cockpit2RadiosIndicatorsHsiRelativeBearingDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiFlagFromToPilot.Id, Cockpit2RadiosIndicatorsHsiFlagFromToPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiFlagFromToCopilot.Id, Cockpit2RadiosIndicatorsHsiFlagFromToCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiHdefDotsPilot.Id, Cockpit2RadiosIndicatorsHsiHdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiHdefDotsCopilot.Id, Cockpit2RadiosIndicatorsHsiHdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiVdefDotsPilot.Id, Cockpit2RadiosIndicatorsHsiVdefDotsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiVdefDotsCopilot.Id, Cockpit2RadiosIndicatorsHsiVdefDotsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiHasDmePilot.Id, Cockpit2RadiosIndicatorsHsiHasDmePilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiHasDmeCopilot.Id, Cockpit2RadiosIndicatorsHsiHasDmeCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDmeDistanceNmPilot.Id, Cockpit2RadiosIndicatorsHsiDmeDistanceNmPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDmeDistanceNmCopilot.Id, Cockpit2RadiosIndicatorsHsiDmeDistanceNmCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDmeSpeedKtsPilot.Id, Cockpit2RadiosIndicatorsHsiDmeSpeedKtsPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDmeSpeedKtsCopilot.Id, Cockpit2RadiosIndicatorsHsiDmeSpeedKtsCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDmeTimeMinPilot.Id, Cockpit2RadiosIndicatorsHsiDmeTimeMinPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDmeTimeMinCopilot.Id, Cockpit2RadiosIndicatorsHsiDmeTimeMinCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiFlagGlideslopePilot.Id, Cockpit2RadiosIndicatorsHsiFlagGlideslopePilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiFlagGlideslopeCopilot.Id, Cockpit2RadiosIndicatorsHsiFlagGlideslopeCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiFlagGlideslopePilotMech.Id, Cockpit2RadiosIndicatorsHsiFlagGlideslopePilotMech);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiFlagGlideslopeCopilotMech.Id, Cockpit2RadiosIndicatorsHsiFlagGlideslopeCopilotMech);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDisplayHorizontalPilot.Id, Cockpit2RadiosIndicatorsHsiDisplayHorizontalPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDisplayHorizontalCopilot.Id, Cockpit2RadiosIndicatorsHsiDisplayHorizontalCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDisplayVerticalPilot.Id, Cockpit2RadiosIndicatorsHsiDisplayVerticalPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiDisplayVerticalCopilot.Id, Cockpit2RadiosIndicatorsHsiDisplayVerticalCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsTransponderId.Id, Cockpit2RadiosIndicatorsTransponderId);
            DataRefList.Add(Cockpit2RadiosIndicatorsTransponderBrightness.Id, Cockpit2RadiosIndicatorsTransponderBrightness);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegPilot.Id, Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegCopilot.Id, Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegPilot.Id, Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegCopilot.Id, Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegPilot.Id, Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegCopilot.Id, Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegPilot.Id, Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegCopilot.Id, Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegPilot.Id, Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegCopilot.Id, Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegPilot.Id, Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegCopilot.Id, Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavRelativeHeadingVacuumDegPilot.Id, Cockpit2RadiosIndicatorsNavRelativeHeadingVacuumDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavRelativeHeadingVacuumDegCopilot.Id, Cockpit2RadiosIndicatorsNavRelativeHeadingVacuumDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavRelativeHeadingElectricDegPilot.Id, Cockpit2RadiosIndicatorsNavRelativeHeadingElectricDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavRelativeHeadingElectricDegCopilot.Id, Cockpit2RadiosIndicatorsNavRelativeHeadingElectricDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavRelativeHeadingAHARSDegPilot.Id, Cockpit2RadiosIndicatorsNavRelativeHeadingAHARSDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsNavRelativeHeadingAHARSDegCopilot.Id, Cockpit2RadiosIndicatorsNavRelativeHeadingAHARSDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegPilot.Id, Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegCopilot.Id, Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegPilot.Id, Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegCopilot.Id, Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegPilot.Id, Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegCopilot.Id, Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegPilot.Id, Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegCopilot.Id, Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegPilot.Id, Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegCopilot.Id, Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegPilot.Id, Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegCopilot.Id, Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegPilot.Id, Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegCopilot.Id, Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegPilot.Id, Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegCopilot.Id, Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegPilot.Id, Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegCopilot.Id, Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsExecLightPilot.Id, Cockpit2RadiosIndicatorsFmsExecLightPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsExecLightCopilot.Id, Cockpit2RadiosIndicatorsFmsExecLightCopilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsFptaPilot.Id, Cockpit2RadiosIndicatorsFmsFptaPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsVpaPilot.Id, Cockpit2RadiosIndicatorsFmsVpaPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsVtkPilot.Id, Cockpit2RadiosIndicatorsFmsVtkPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsDistanceToTodPilot.Id, Cockpit2RadiosIndicatorsFmsDistanceToTodPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsTodBeforeIndexPilot.Id, Cockpit2RadiosIndicatorsFmsTodBeforeIndexPilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsTodBeforeDistancePilot.Id, Cockpit2RadiosIndicatorsFmsTodBeforeDistancePilot);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine0.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine0);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine1.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine1);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine2.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine2);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine3.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine3);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine4.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine4);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine5.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine5);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine6.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine6);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine7.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine7);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine8.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine8);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine9.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine9);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine10.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine10);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine11.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine11);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine12.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine12);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine13.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine13);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine14.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine14);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1TextLine15.Id, Cockpit2RadiosIndicatorsFmsCdu1TextLine15);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine0.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine0);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine1.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine1);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine2.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine2);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine3.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine3);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine4.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine4);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine5.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine5);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine6.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine6);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine7.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine7);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine8.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine8);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine9.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine9);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine10.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine10);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine11.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine11);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine12.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine12);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine13.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine13);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine14.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine14);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu1StyleLine15.Id, Cockpit2RadiosIndicatorsFmsCdu1StyleLine15);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine0.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine0);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine1.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine1);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine2.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine2);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine3.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine3);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine4.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine4);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine5.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine5);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine6.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine6);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine7.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine7);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine8.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine8);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine9.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine9);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine10.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine10);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine11.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine11);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine12.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine12);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine13.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine13);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine14.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine14);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2TextLine15.Id, Cockpit2RadiosIndicatorsFmsCdu2TextLine15);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine0.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine0);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine1.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine1);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine2.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine2);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine3.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine3);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine4.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine4);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine5.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine5);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine6.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine6);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine7.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine7);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine8.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine8);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine9.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine9);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine10.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine10);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine11.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine11);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine12.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine12);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine13.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine13);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine14.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine14);
            DataRefList.Add(Cockpit2RadiosIndicatorsFmsCdu2StyleLine15.Id, Cockpit2RadiosIndicatorsFmsCdu2StyleLine15);
            DataRefList.Add(Cockpit2SwitchesAvionicsPowerOn.Id, Cockpit2SwitchesAvionicsPowerOn);
            DataRefList.Add(Cockpit2SwitchesNavigationLightsOn.Id, Cockpit2SwitchesNavigationLightsOn);
            DataRefList.Add(Cockpit2SwitchesBeaconOn.Id, Cockpit2SwitchesBeaconOn);
            DataRefList.Add(Cockpit2SwitchesStrobeLightsOn.Id, Cockpit2SwitchesStrobeLightsOn);
            DataRefList.Add(Cockpit2SwitchesLandingLightsOn.Id, Cockpit2SwitchesLandingLightsOn);
            DataRefList.Add(Cockpit2SwitchesLandingLightsSwitch.Id, Cockpit2SwitchesLandingLightsSwitch);
            DataRefList.Add(Cockpit2SwitchesGenericLightsSwitch.Id, Cockpit2SwitchesGenericLightsSwitch);
            DataRefList.Add(Cockpit2SwitchesTaxiLightOn.Id, Cockpit2SwitchesTaxiLightOn);
            DataRefList.Add(Cockpit2SwitchesSpotLightOn.Id, Cockpit2SwitchesSpotLightOn);
            DataRefList.Add(Cockpit2SwitchesDumpFuel.Id, Cockpit2SwitchesDumpFuel);
            DataRefList.Add(Cockpit2SwitchesPuffersOn.Id, Cockpit2SwitchesPuffersOn);
            DataRefList.Add(Cockpit2SwitchesPropSyncOn.Id, Cockpit2SwitchesPropSyncOn);
            DataRefList.Add(Cockpit2SwitchesJetSyncMode.Id, Cockpit2SwitchesJetSyncMode);
            DataRefList.Add(Cockpit2SwitchesElectricHydraulicPumpOn.Id, Cockpit2SwitchesElectricHydraulicPumpOn);
            DataRefList.Add(Cockpit2SwitchesRamAirTurbineOn.Id, Cockpit2SwitchesRamAirTurbineOn);
            DataRefList.Add(Cockpit2SwitchesYawDamperOn.Id, Cockpit2SwitchesYawDamperOn);
            DataRefList.Add(Cockpit2SwitchesArtificialStabilityOn.Id, Cockpit2SwitchesArtificialStabilityOn);
            DataRefList.Add(Cockpit2SwitchesArtificialStabilityPitchOn.Id, Cockpit2SwitchesArtificialStabilityPitchOn);
            DataRefList.Add(Cockpit2SwitchesArtificialStabilityRollOn.Id, Cockpit2SwitchesArtificialStabilityRollOn);
            DataRefList.Add(Cockpit2SwitchesHUDOn.Id, Cockpit2SwitchesHUDOn);
            DataRefList.Add(Cockpit2SwitchesParachuteDeploy.Id, Cockpit2SwitchesParachuteDeploy);
            DataRefList.Add(Cockpit2SwitchesJatoOn.Id, Cockpit2SwitchesJatoOn);
            DataRefList.Add(Cockpit2SwitchesTailhookDeploy.Id, Cockpit2SwitchesTailhookDeploy);
            DataRefList.Add(Cockpit2SwitchesCanopyOpen.Id, Cockpit2SwitchesCanopyOpen);
            DataRefList.Add(Cockpit2SwitchesDoorOpen.Id, Cockpit2SwitchesDoorOpen);
            DataRefList.Add(Cockpit2SwitchesWaterScoopDeploy.Id, Cockpit2SwitchesWaterScoopDeploy);
            DataRefList.Add(Cockpit2SwitchesDumpWater.Id, Cockpit2SwitchesDumpWater);
            DataRefList.Add(Cockpit2SwitchesNoSmoking.Id, Cockpit2SwitchesNoSmoking);
            DataRefList.Add(Cockpit2SwitchesFastenSeatBelts.Id, Cockpit2SwitchesFastenSeatBelts);
            DataRefList.Add(Cockpit2SwitchesTotalEnergyAudio.Id, Cockpit2SwitchesTotalEnergyAudio);
            DataRefList.Add(Cockpit2SwitchesHSIIsArc.Id, Cockpit2SwitchesHSIIsArc);
            DataRefList.Add(Cockpit2SwitchesAutoBrakeLevel.Id, Cockpit2SwitchesAutoBrakeLevel);
            DataRefList.Add(Cockpit2SwitchesAutoReverseOn.Id, Cockpit2SwitchesAutoReverseOn);
            DataRefList.Add(Cockpit2SwitchesPropFeatherMode.Id, Cockpit2SwitchesPropFeatherMode);
            DataRefList.Add(Cockpit2SwitchesPreRotateLevel.Id, Cockpit2SwitchesPreRotateLevel);
            DataRefList.Add(Cockpit2SwitchesClutchEngage.Id, Cockpit2SwitchesClutchEngage);
            DataRefList.Add(Cockpit2SwitchesRotorBrake.Id, Cockpit2SwitchesRotorBrake);
            DataRefList.Add(Cockpit2SwitchesHotelMode.Id, Cockpit2SwitchesHotelMode);
            DataRefList.Add(Cockpit2SwitchesRotorBrakeRatio.Id, Cockpit2SwitchesRotorBrakeRatio);
            DataRefList.Add(Cockpit2SwitchesHotelModeRatio.Id, Cockpit2SwitchesHotelModeRatio);
            DataRefList.Add(Cockpit2SwitchesClutchRatio.Id, Cockpit2SwitchesClutchRatio);
            DataRefList.Add(Cockpit2SwitchesRocketMode.Id, Cockpit2SwitchesRocketMode);
            DataRefList.Add(Cockpit2SwitchesBurnerLevel.Id, Cockpit2SwitchesBurnerLevel);
            DataRefList.Add(Cockpit2SwitchesAlternateStaticAirRatio.Id, Cockpit2SwitchesAlternateStaticAirRatio);
            DataRefList.Add(Cockpit2SwitchesStandbyVacuumPump.Id, Cockpit2SwitchesStandbyVacuumPump);
            DataRefList.Add(Cockpit2SwitchesWiperSpeed.Id, Cockpit2SwitchesWiperSpeed);
            DataRefList.Add(Cockpit2SwitchesCustomSliderOn.Id, Cockpit2SwitchesCustomSliderOn);
            DataRefList.Add(Cockpit2SwitchesPanelBrightnessRatio.Id, Cockpit2SwitchesPanelBrightnessRatio);
            DataRefList.Add(Cockpit2SwitchesInstrumentBrightnessRatio.Id, Cockpit2SwitchesInstrumentBrightnessRatio);
            DataRefList.Add(Cockpit2SwitchesHUDBrightnessRatio.Id, Cockpit2SwitchesHUDBrightnessRatio);
            DataRefList.Add(Cockpit2SwitchesCameraPowerOn.Id, Cockpit2SwitchesCameraPowerOn);
            DataRefList.Add(Cockpit2SwitchesTotalEnergyAudioOn.Id, Cockpit2SwitchesTotalEnergyAudioOn);
            DataRefList.Add(Cockpit2TcasIndicatorsRelativeBearingDegs.Id, Cockpit2TcasIndicatorsRelativeBearingDegs);
            DataRefList.Add(Cockpit2TcasIndicatorsRelativeDistanceMtrs.Id, Cockpit2TcasIndicatorsRelativeDistanceMtrs);
            DataRefList.Add(Cockpit2TcasIndicatorsRelativeAltitudeMtrs.Id, Cockpit2TcasIndicatorsRelativeAltitudeMtrs);
            DataRefList.Add(Cockpit2TcasIndicatorsTcasAlert.Id, Cockpit2TcasIndicatorsTcasAlert);
            DataRefList.Add(Cockpit2TcasIndicatorsTcasNumAcf.Id, Cockpit2TcasIndicatorsTcasNumAcf);
            DataRefList.Add(Cockpit2TcasTargetsModesId.Id, Cockpit2TcasTargetsModesId);
            DataRefList.Add(Cockpit2TcasTargetsModecCode.Id, Cockpit2TcasTargetsModecCode);
            DataRefList.Add(Cockpit2TcasTargetsPositionX.Id, Cockpit2TcasTargetsPositionX);
            DataRefList.Add(Cockpit2TcasTargetsPositionY.Id, Cockpit2TcasTargetsPositionY);
            DataRefList.Add(Cockpit2TcasTargetsPositionZ.Id, Cockpit2TcasTargetsPositionZ);
            DataRefList.Add(Cockpit2TcasTargetsPositionLat.Id, Cockpit2TcasTargetsPositionLat);
            DataRefList.Add(Cockpit2TcasTargetsPositionLon.Id, Cockpit2TcasTargetsPositionLon);
            DataRefList.Add(Cockpit2TcasTargetsPositionEle.Id, Cockpit2TcasTargetsPositionEle);
            DataRefList.Add(Cockpit2TcasTargetsPositionVx.Id, Cockpit2TcasTargetsPositionVx);
            DataRefList.Add(Cockpit2TcasTargetsPositionVy.Id, Cockpit2TcasTargetsPositionVy);
            DataRefList.Add(Cockpit2TcasTargetsPositionVz.Id, Cockpit2TcasTargetsPositionVz);
            DataRefList.Add(Cockpit2TcasTargetsPositionVerticalSpeed.Id, Cockpit2TcasTargetsPositionVerticalSpeed);
            DataRefList.Add(Cockpit2TcasTargetsPositionHpath.Id, Cockpit2TcasTargetsPositionHpath);
            DataRefList.Add(Cockpit2TcasTargetsPositionVpath.Id, Cockpit2TcasTargetsPositionVpath);
            DataRefList.Add(Cockpit2TcasTargetsPositionVMsc.Id, Cockpit2TcasTargetsPositionVMsc);
            DataRefList.Add(Cockpit2TcasTargetsPositionPsi.Id, Cockpit2TcasTargetsPositionPsi);
            DataRefList.Add(Cockpit2TcasTargetsPositionThe.Id, Cockpit2TcasTargetsPositionThe);
            DataRefList.Add(Cockpit2TcasTargetsPositionPhi.Id, Cockpit2TcasTargetsPositionPhi);
            DataRefList.Add(Cockpit2TcasTargetsPositionWeightOnWheels.Id, Cockpit2TcasTargetsPositionWeightOnWheels);
            DataRefList.Add(Cockpit2TcasTargetsPositionGearDeploy.Id, Cockpit2TcasTargetsPositionGearDeploy);
            DataRefList.Add(Cockpit2TcasTargetsPositionFlapRatio.Id, Cockpit2TcasTargetsPositionFlapRatio);
            DataRefList.Add(Cockpit2TcasTargetsPositionFlapRatio2.Id, Cockpit2TcasTargetsPositionFlapRatio2);
            DataRefList.Add(Cockpit2TcasTargetsPositionSpeedbrakeRatio.Id, Cockpit2TcasTargetsPositionSpeedbrakeRatio);
            DataRefList.Add(Cockpit2TcasTargetsPositionSlatRatio.Id, Cockpit2TcasTargetsPositionSlatRatio);
            DataRefList.Add(Cockpit2TcasTargetsPositionWingSweep.Id, Cockpit2TcasTargetsPositionWingSweep);
            DataRefList.Add(Cockpit2TcasTargetsPositionThrottle.Id, Cockpit2TcasTargetsPositionThrottle);
            DataRefList.Add(Cockpit2TcasTargetsPositionYolkPitch.Id, Cockpit2TcasTargetsPositionYolkPitch);
            DataRefList.Add(Cockpit2TcasTargetsPositionYolkRoll.Id, Cockpit2TcasTargetsPositionYolkRoll);
            DataRefList.Add(Cockpit2TcasTargetsPositionYolkYaw.Id, Cockpit2TcasTargetsPositionYolkYaw);
            DataRefList.Add(Cockpit2TcasTargetsPositionLights.Id, Cockpit2TcasTargetsPositionLights);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane1Lat.Id, Cockpit2TcasTargetsPositionDoublePlane1Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane1Lon.Id, Cockpit2TcasTargetsPositionDoublePlane1Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane1Ele.Id, Cockpit2TcasTargetsPositionDoublePlane1Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane2Lat.Id, Cockpit2TcasTargetsPositionDoublePlane2Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane2Lon.Id, Cockpit2TcasTargetsPositionDoublePlane2Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane2Ele.Id, Cockpit2TcasTargetsPositionDoublePlane2Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane3Lat.Id, Cockpit2TcasTargetsPositionDoublePlane3Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane3Lon.Id, Cockpit2TcasTargetsPositionDoublePlane3Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane3Ele.Id, Cockpit2TcasTargetsPositionDoublePlane3Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane4Lat.Id, Cockpit2TcasTargetsPositionDoublePlane4Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane4Lon.Id, Cockpit2TcasTargetsPositionDoublePlane4Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane4Ele.Id, Cockpit2TcasTargetsPositionDoublePlane4Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane5Lat.Id, Cockpit2TcasTargetsPositionDoublePlane5Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane5Lon.Id, Cockpit2TcasTargetsPositionDoublePlane5Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane5Ele.Id, Cockpit2TcasTargetsPositionDoublePlane5Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane6Lat.Id, Cockpit2TcasTargetsPositionDoublePlane6Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane6Lon.Id, Cockpit2TcasTargetsPositionDoublePlane6Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane6Ele.Id, Cockpit2TcasTargetsPositionDoublePlane6Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane7Lat.Id, Cockpit2TcasTargetsPositionDoublePlane7Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane7Lon.Id, Cockpit2TcasTargetsPositionDoublePlane7Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane7Ele.Id, Cockpit2TcasTargetsPositionDoublePlane7Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane8Lat.Id, Cockpit2TcasTargetsPositionDoublePlane8Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane8Lon.Id, Cockpit2TcasTargetsPositionDoublePlane8Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane8Ele.Id, Cockpit2TcasTargetsPositionDoublePlane8Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane9Lat.Id, Cockpit2TcasTargetsPositionDoublePlane9Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane9Lon.Id, Cockpit2TcasTargetsPositionDoublePlane9Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane9Ele.Id, Cockpit2TcasTargetsPositionDoublePlane9Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane10Lat.Id, Cockpit2TcasTargetsPositionDoublePlane10Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane10Lon.Id, Cockpit2TcasTargetsPositionDoublePlane10Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane10Ele.Id, Cockpit2TcasTargetsPositionDoublePlane10Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane11Lat.Id, Cockpit2TcasTargetsPositionDoublePlane11Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane11Lon.Id, Cockpit2TcasTargetsPositionDoublePlane11Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane11Ele.Id, Cockpit2TcasTargetsPositionDoublePlane11Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane12Lat.Id, Cockpit2TcasTargetsPositionDoublePlane12Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane12Lon.Id, Cockpit2TcasTargetsPositionDoublePlane12Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane12Ele.Id, Cockpit2TcasTargetsPositionDoublePlane12Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane13Lat.Id, Cockpit2TcasTargetsPositionDoublePlane13Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane13Lon.Id, Cockpit2TcasTargetsPositionDoublePlane13Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane13Ele.Id, Cockpit2TcasTargetsPositionDoublePlane13Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane14Lat.Id, Cockpit2TcasTargetsPositionDoublePlane14Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane14Lon.Id, Cockpit2TcasTargetsPositionDoublePlane14Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane14Ele.Id, Cockpit2TcasTargetsPositionDoublePlane14Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane15Lat.Id, Cockpit2TcasTargetsPositionDoublePlane15Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane15Lon.Id, Cockpit2TcasTargetsPositionDoublePlane15Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane15Ele.Id, Cockpit2TcasTargetsPositionDoublePlane15Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane16Lat.Id, Cockpit2TcasTargetsPositionDoublePlane16Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane16Lon.Id, Cockpit2TcasTargetsPositionDoublePlane16Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane16Ele.Id, Cockpit2TcasTargetsPositionDoublePlane16Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane17Lat.Id, Cockpit2TcasTargetsPositionDoublePlane17Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane17Lon.Id, Cockpit2TcasTargetsPositionDoublePlane17Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane17Ele.Id, Cockpit2TcasTargetsPositionDoublePlane17Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane18Lat.Id, Cockpit2TcasTargetsPositionDoublePlane18Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane18Lon.Id, Cockpit2TcasTargetsPositionDoublePlane18Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane18Ele.Id, Cockpit2TcasTargetsPositionDoublePlane18Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane19Lat.Id, Cockpit2TcasTargetsPositionDoublePlane19Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane19Lon.Id, Cockpit2TcasTargetsPositionDoublePlane19Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane19Ele.Id, Cockpit2TcasTargetsPositionDoublePlane19Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane20Lat.Id, Cockpit2TcasTargetsPositionDoublePlane20Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane20Lon.Id, Cockpit2TcasTargetsPositionDoublePlane20Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane20Ele.Id, Cockpit2TcasTargetsPositionDoublePlane20Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane21Lat.Id, Cockpit2TcasTargetsPositionDoublePlane21Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane21Lon.Id, Cockpit2TcasTargetsPositionDoublePlane21Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane21Ele.Id, Cockpit2TcasTargetsPositionDoublePlane21Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane22Lat.Id, Cockpit2TcasTargetsPositionDoublePlane22Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane22Lon.Id, Cockpit2TcasTargetsPositionDoublePlane22Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane22Ele.Id, Cockpit2TcasTargetsPositionDoublePlane22Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane23Lat.Id, Cockpit2TcasTargetsPositionDoublePlane23Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane23Lon.Id, Cockpit2TcasTargetsPositionDoublePlane23Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane23Ele.Id, Cockpit2TcasTargetsPositionDoublePlane23Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane24Lat.Id, Cockpit2TcasTargetsPositionDoublePlane24Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane24Lon.Id, Cockpit2TcasTargetsPositionDoublePlane24Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane24Ele.Id, Cockpit2TcasTargetsPositionDoublePlane24Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane25Lat.Id, Cockpit2TcasTargetsPositionDoublePlane25Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane25Lon.Id, Cockpit2TcasTargetsPositionDoublePlane25Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane25Ele.Id, Cockpit2TcasTargetsPositionDoublePlane25Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane26Lat.Id, Cockpit2TcasTargetsPositionDoublePlane26Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane26Lon.Id, Cockpit2TcasTargetsPositionDoublePlane26Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane26Ele.Id, Cockpit2TcasTargetsPositionDoublePlane26Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane27Lat.Id, Cockpit2TcasTargetsPositionDoublePlane27Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane27Lon.Id, Cockpit2TcasTargetsPositionDoublePlane27Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane27Ele.Id, Cockpit2TcasTargetsPositionDoublePlane27Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane28Lat.Id, Cockpit2TcasTargetsPositionDoublePlane28Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane28Lon.Id, Cockpit2TcasTargetsPositionDoublePlane28Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane28Ele.Id, Cockpit2TcasTargetsPositionDoublePlane28Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane29Lat.Id, Cockpit2TcasTargetsPositionDoublePlane29Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane29Lon.Id, Cockpit2TcasTargetsPositionDoublePlane29Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane29Ele.Id, Cockpit2TcasTargetsPositionDoublePlane29Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane30Lat.Id, Cockpit2TcasTargetsPositionDoublePlane30Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane30Lon.Id, Cockpit2TcasTargetsPositionDoublePlane30Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane30Ele.Id, Cockpit2TcasTargetsPositionDoublePlane30Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane31Lat.Id, Cockpit2TcasTargetsPositionDoublePlane31Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane31Lon.Id, Cockpit2TcasTargetsPositionDoublePlane31Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane31Ele.Id, Cockpit2TcasTargetsPositionDoublePlane31Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane32Lat.Id, Cockpit2TcasTargetsPositionDoublePlane32Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane32Lon.Id, Cockpit2TcasTargetsPositionDoublePlane32Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane32Ele.Id, Cockpit2TcasTargetsPositionDoublePlane32Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane33Lat.Id, Cockpit2TcasTargetsPositionDoublePlane33Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane33Lon.Id, Cockpit2TcasTargetsPositionDoublePlane33Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane33Ele.Id, Cockpit2TcasTargetsPositionDoublePlane33Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane34Lat.Id, Cockpit2TcasTargetsPositionDoublePlane34Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane34Lon.Id, Cockpit2TcasTargetsPositionDoublePlane34Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane34Ele.Id, Cockpit2TcasTargetsPositionDoublePlane34Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane35Lat.Id, Cockpit2TcasTargetsPositionDoublePlane35Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane35Lon.Id, Cockpit2TcasTargetsPositionDoublePlane35Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane35Ele.Id, Cockpit2TcasTargetsPositionDoublePlane35Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane36Lat.Id, Cockpit2TcasTargetsPositionDoublePlane36Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane36Lon.Id, Cockpit2TcasTargetsPositionDoublePlane36Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane36Ele.Id, Cockpit2TcasTargetsPositionDoublePlane36Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane37Lat.Id, Cockpit2TcasTargetsPositionDoublePlane37Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane37Lon.Id, Cockpit2TcasTargetsPositionDoublePlane37Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane37Ele.Id, Cockpit2TcasTargetsPositionDoublePlane37Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane38Lat.Id, Cockpit2TcasTargetsPositionDoublePlane38Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane38Lon.Id, Cockpit2TcasTargetsPositionDoublePlane38Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane38Ele.Id, Cockpit2TcasTargetsPositionDoublePlane38Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane39Lat.Id, Cockpit2TcasTargetsPositionDoublePlane39Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane39Lon.Id, Cockpit2TcasTargetsPositionDoublePlane39Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane39Ele.Id, Cockpit2TcasTargetsPositionDoublePlane39Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane40Lat.Id, Cockpit2TcasTargetsPositionDoublePlane40Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane40Lon.Id, Cockpit2TcasTargetsPositionDoublePlane40Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane40Ele.Id, Cockpit2TcasTargetsPositionDoublePlane40Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane41Lat.Id, Cockpit2TcasTargetsPositionDoublePlane41Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane41Lon.Id, Cockpit2TcasTargetsPositionDoublePlane41Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane41Ele.Id, Cockpit2TcasTargetsPositionDoublePlane41Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane42Lat.Id, Cockpit2TcasTargetsPositionDoublePlane42Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane42Lon.Id, Cockpit2TcasTargetsPositionDoublePlane42Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane42Ele.Id, Cockpit2TcasTargetsPositionDoublePlane42Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane43Lat.Id, Cockpit2TcasTargetsPositionDoublePlane43Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane43Lon.Id, Cockpit2TcasTargetsPositionDoublePlane43Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane43Ele.Id, Cockpit2TcasTargetsPositionDoublePlane43Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane44Lat.Id, Cockpit2TcasTargetsPositionDoublePlane44Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane44Lon.Id, Cockpit2TcasTargetsPositionDoublePlane44Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane44Ele.Id, Cockpit2TcasTargetsPositionDoublePlane44Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane45Lat.Id, Cockpit2TcasTargetsPositionDoublePlane45Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane45Lon.Id, Cockpit2TcasTargetsPositionDoublePlane45Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane45Ele.Id, Cockpit2TcasTargetsPositionDoublePlane45Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane46Lat.Id, Cockpit2TcasTargetsPositionDoublePlane46Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane46Lon.Id, Cockpit2TcasTargetsPositionDoublePlane46Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane46Ele.Id, Cockpit2TcasTargetsPositionDoublePlane46Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane47Lat.Id, Cockpit2TcasTargetsPositionDoublePlane47Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane47Lon.Id, Cockpit2TcasTargetsPositionDoublePlane47Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane47Ele.Id, Cockpit2TcasTargetsPositionDoublePlane47Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane48Lat.Id, Cockpit2TcasTargetsPositionDoublePlane48Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane48Lon.Id, Cockpit2TcasTargetsPositionDoublePlane48Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane48Ele.Id, Cockpit2TcasTargetsPositionDoublePlane48Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane49Lat.Id, Cockpit2TcasTargetsPositionDoublePlane49Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane49Lon.Id, Cockpit2TcasTargetsPositionDoublePlane49Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane49Ele.Id, Cockpit2TcasTargetsPositionDoublePlane49Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane50Lat.Id, Cockpit2TcasTargetsPositionDoublePlane50Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane50Lon.Id, Cockpit2TcasTargetsPositionDoublePlane50Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane50Ele.Id, Cockpit2TcasTargetsPositionDoublePlane50Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane51Lat.Id, Cockpit2TcasTargetsPositionDoublePlane51Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane51Lon.Id, Cockpit2TcasTargetsPositionDoublePlane51Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane51Ele.Id, Cockpit2TcasTargetsPositionDoublePlane51Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane52Lat.Id, Cockpit2TcasTargetsPositionDoublePlane52Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane52Lon.Id, Cockpit2TcasTargetsPositionDoublePlane52Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane52Ele.Id, Cockpit2TcasTargetsPositionDoublePlane52Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane53Lat.Id, Cockpit2TcasTargetsPositionDoublePlane53Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane53Lon.Id, Cockpit2TcasTargetsPositionDoublePlane53Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane53Ele.Id, Cockpit2TcasTargetsPositionDoublePlane53Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane54Lat.Id, Cockpit2TcasTargetsPositionDoublePlane54Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane54Lon.Id, Cockpit2TcasTargetsPositionDoublePlane54Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane54Ele.Id, Cockpit2TcasTargetsPositionDoublePlane54Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane55Lat.Id, Cockpit2TcasTargetsPositionDoublePlane55Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane55Lon.Id, Cockpit2TcasTargetsPositionDoublePlane55Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane55Ele.Id, Cockpit2TcasTargetsPositionDoublePlane55Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane56Lat.Id, Cockpit2TcasTargetsPositionDoublePlane56Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane56Lon.Id, Cockpit2TcasTargetsPositionDoublePlane56Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane56Ele.Id, Cockpit2TcasTargetsPositionDoublePlane56Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane57Lat.Id, Cockpit2TcasTargetsPositionDoublePlane57Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane57Lon.Id, Cockpit2TcasTargetsPositionDoublePlane57Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane57Ele.Id, Cockpit2TcasTargetsPositionDoublePlane57Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane58Lat.Id, Cockpit2TcasTargetsPositionDoublePlane58Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane58Lon.Id, Cockpit2TcasTargetsPositionDoublePlane58Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane58Ele.Id, Cockpit2TcasTargetsPositionDoublePlane58Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane59Lat.Id, Cockpit2TcasTargetsPositionDoublePlane59Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane59Lon.Id, Cockpit2TcasTargetsPositionDoublePlane59Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane59Ele.Id, Cockpit2TcasTargetsPositionDoublePlane59Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane60Lat.Id, Cockpit2TcasTargetsPositionDoublePlane60Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane60Lon.Id, Cockpit2TcasTargetsPositionDoublePlane60Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane60Ele.Id, Cockpit2TcasTargetsPositionDoublePlane60Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane61Lat.Id, Cockpit2TcasTargetsPositionDoublePlane61Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane61Lon.Id, Cockpit2TcasTargetsPositionDoublePlane61Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane61Ele.Id, Cockpit2TcasTargetsPositionDoublePlane61Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane62Lat.Id, Cockpit2TcasTargetsPositionDoublePlane62Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane62Lon.Id, Cockpit2TcasTargetsPositionDoublePlane62Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane62Ele.Id, Cockpit2TcasTargetsPositionDoublePlane62Ele);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane63Lat.Id, Cockpit2TcasTargetsPositionDoublePlane63Lat);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane63Lon.Id, Cockpit2TcasTargetsPositionDoublePlane63Lon);
            DataRefList.Add(Cockpit2TcasTargetsPositionDoublePlane63Ele.Id, Cockpit2TcasTargetsPositionDoublePlane63Ele);
            DataRefList.Add(Cockpit2TemperatureOutsideAirTempDeg.Id, Cockpit2TemperatureOutsideAirTempDeg);
            DataRefList.Add(Cockpit2TemperatureOutsideAirTempDegc.Id, Cockpit2TemperatureOutsideAirTempDegc);
            DataRefList.Add(Cockpit2TemperatureOutsideAirTempDegf.Id, Cockpit2TemperatureOutsideAirTempDegf);
            DataRefList.Add(Cockpit2TemperatureOutsideAirLETempDeg.Id, Cockpit2TemperatureOutsideAirLETempDeg);
            DataRefList.Add(Cockpit2TemperatureOutsideAirLETempDegc.Id, Cockpit2TemperatureOutsideAirLETempDegc);
            DataRefList.Add(Cockpit2TemperatureOutsideAirLETempDegf.Id, Cockpit2TemperatureOutsideAirLETempDegf);
            DataRefList.Add(Cockpit2TemperatureOutsideAirTempIsMetric.Id, Cockpit2TemperatureOutsideAirTempIsMetric);
            DataRefList.Add(Cockpit2TransmissionsIndicatorsOilTemperature.Id, Cockpit2TransmissionsIndicatorsOilTemperature);
            DataRefList.Add(Cockpit2TransmissionsIndicatorsOilPressure.Id, Cockpit2TransmissionsIndicatorsOilPressure);
            DataRefList.Add(Cockpit2WeaponsWeaponSelectConsoleIndex.Id, Cockpit2WeaponsWeaponSelectConsoleIndex);
            DataRefList.Add(Cockpit2WeaponsWeaponSelectConsoleName.Id, Cockpit2WeaponsWeaponSelectConsoleName);
            DataRefList.Add(Cockpit2WeaponsFireMode.Id, Cockpit2WeaponsFireMode);
            DataRefList.Add(Cockpit2WeaponsFireRate.Id, Cockpit2WeaponsFireRate);
            DataRefList.Add(Cockpit2WeaponsWeaponSelected.Id, Cockpit2WeaponsWeaponSelected);
            DataRefList.Add(Cockpit2WeaponsGunOffsetHeadingRatio.Id, Cockpit2WeaponsGunOffsetHeadingRatio);
            DataRefList.Add(Cockpit2WeaponsGunOffsetPitchRatio.Id, Cockpit2WeaponsGunOffsetPitchRatio);
            DataRefList.Add(Flightmodel2ControlsPitchRatio.Id, Flightmodel2ControlsPitchRatio);
            DataRefList.Add(Flightmodel2ControlsRollRatio.Id, Flightmodel2ControlsRollRatio);
            DataRefList.Add(Flightmodel2ControlsHeadingRatio.Id, Flightmodel2ControlsHeadingRatio);
            DataRefList.Add(Flightmodel2ControlsSpeedbrakeRatio.Id, Flightmodel2ControlsSpeedbrakeRatio);
            DataRefList.Add(Flightmodel2ControlsWingsweepRatio.Id, Flightmodel2ControlsWingsweepRatio);
            DataRefList.Add(Flightmodel2ControlsThrustVectorRatio.Id, Flightmodel2ControlsThrustVectorRatio);
            DataRefList.Add(Flightmodel2ControlsDihedralRatio.Id, Flightmodel2ControlsDihedralRatio);
            DataRefList.Add(Flightmodel2ControlsIncidenceRatio.Id, Flightmodel2ControlsIncidenceRatio);
            DataRefList.Add(Flightmodel2ControlsWingRetractionRatio.Id, Flightmodel2ControlsWingRetractionRatio);
            DataRefList.Add(Flightmodel2ControlsFlapHandleDeployRatio.Id, Flightmodel2ControlsFlapHandleDeployRatio);
            DataRefList.Add(Flightmodel2ControlsSlat1DeployRatio.Id, Flightmodel2ControlsSlat1DeployRatio);
            DataRefList.Add(Flightmodel2ControlsSlat2DeployRatio.Id, Flightmodel2ControlsSlat2DeployRatio);
            DataRefList.Add(Flightmodel2ControlsFlap1DeployRatio.Id, Flightmodel2ControlsFlap1DeployRatio);
            DataRefList.Add(Flightmodel2ControlsFlap2DeployRatio.Id, Flightmodel2ControlsFlap2DeployRatio);
            DataRefList.Add(Flightmodel2ControlsStabilizerDeflectionDegrees.Id, Flightmodel2ControlsStabilizerDeflectionDegrees);
            DataRefList.Add(Flightmodel2ControlsAileronTrim.Id, Flightmodel2ControlsAileronTrim);
            DataRefList.Add(Flightmodel2ControlsElevatorTrim.Id, Flightmodel2ControlsElevatorTrim);
            DataRefList.Add(Flightmodel2ControlsRudderTrim.Id, Flightmodel2ControlsRudderTrim);
            DataRefList.Add(Flightmodel2ControlsRotorTrim.Id, Flightmodel2ControlsRotorTrim);
            DataRefList.Add(Flightmodel2ControlsWaterRudderDeployRatio.Id, Flightmodel2ControlsWaterRudderDeployRatio);
            DataRefList.Add(Flightmodel2DoorsType.Id, Flightmodel2DoorsType);
            DataRefList.Add(Flightmodel2DoorsAngleNowDeg.Id, Flightmodel2DoorsAngleNowDeg);
            DataRefList.Add(Flightmodel2EnginesLocationXMtr.Id, Flightmodel2EnginesLocationXMtr);
            DataRefList.Add(Flightmodel2EnginesLocationYMtr.Id, Flightmodel2EnginesLocationYMtr);
            DataRefList.Add(Flightmodel2EnginesLocationZMtr.Id, Flightmodel2EnginesLocationZMtr);
            DataRefList.Add(Flightmodel2EnginesThrottleUsedRatio.Id, Flightmodel2EnginesThrottleUsedRatio);
            DataRefList.Add(Flightmodel2EnginesHasFuelFlowBeforeMixture.Id, Flightmodel2EnginesHasFuelFlowBeforeMixture);
            DataRefList.Add(Flightmodel2EnginesHasFuelFlowAfterMixture.Id, Flightmodel2EnginesHasFuelFlowAfterMixture);
            DataRefList.Add(Flightmodel2EnginesEngineIsBurningFuel.Id, Flightmodel2EnginesEngineIsBurningFuel);
            DataRefList.Add(Flightmodel2EnginesEngineFuelInIntake.Id, Flightmodel2EnginesEngineFuelInIntake);
            DataRefList.Add(Flightmodel2EnginesAfterburnerOn.Id, Flightmodel2EnginesAfterburnerOn);
            DataRefList.Add(Flightmodel2EnginesAfterburnerRatio.Id, Flightmodel2EnginesAfterburnerRatio);
            DataRefList.Add(Flightmodel2EnginesEngineRotationSpeedRadSec.Id, Flightmodel2EnginesEngineRotationSpeedRadSec);
            DataRefList.Add(Flightmodel2EnginesEngineRotationAngleDeg.Id, Flightmodel2EnginesEngineRotationAngleDeg);
            DataRefList.Add(Flightmodel2EnginesPropRotationSpeedRadSec.Id, Flightmodel2EnginesPropRotationSpeedRadSec);
            DataRefList.Add(Flightmodel2EnginesPropRotationAngleDeg.Id, Flightmodel2EnginesPropRotationAngleDeg);
            DataRefList.Add(Flightmodel2EnginesPropNoDiscRotationAngleDeg.Id, Flightmodel2EnginesPropNoDiscRotationAngleDeg);
            DataRefList.Add(Flightmodel2EnginesPropPitchDeg.Id, Flightmodel2EnginesPropPitchDeg);
            DataRefList.Add(Flightmodel2EnginesPropConeAngleRad.Id, Flightmodel2EnginesPropConeAngleRad);
            DataRefList.Add(Flightmodel2EnginesRotorVerticalVectorDeg.Id, Flightmodel2EnginesRotorVerticalVectorDeg);
            DataRefList.Add(Flightmodel2EnginesRotorVerticalCyclicDeg.Id, Flightmodel2EnginesRotorVerticalCyclicDeg);
            DataRefList.Add(Flightmodel2EnginesRotorSideCyclicDeg.Id, Flightmodel2EnginesRotorSideCyclicDeg);
            DataRefList.Add(Flightmodel2EnginesRotorCyclicElevatorTiltDeg.Id, Flightmodel2EnginesRotorCyclicElevatorTiltDeg);
            DataRefList.Add(Flightmodel2EnginesRotorCyclicAileronTiltDeg.Id, Flightmodel2EnginesRotorCyclicAileronTiltDeg);
            DataRefList.Add(Flightmodel2EnginesNacelleVerticalAngleDeg.Id, Flightmodel2EnginesNacelleVerticalAngleDeg);
            DataRefList.Add(Flightmodel2EnginesThrustReverserDeployRatio.Id, Flightmodel2EnginesThrustReverserDeployRatio);
            DataRefList.Add(Flightmodel2EnginesPropIsDisc.Id, Flightmodel2EnginesPropIsDisc);
            DataRefList.Add(Flightmodel2EnginesPropTipDeflectionDegrees.Id, Flightmodel2EnginesPropTipDeflectionDegrees);
            DataRefList.Add(Flightmodel2EnginesFuelPumpSpinning.Id, Flightmodel2EnginesFuelPumpSpinning);
            DataRefList.Add(Flightmodel2EnginesStarterIsRunning.Id, Flightmodel2EnginesStarterIsRunning);
            DataRefList.Add(Flightmodel2EnginesStarterMakingTorque.Id, Flightmodel2EnginesStarterMakingTorque);
            DataRefList.Add(Flightmodel2EnginesIsOnFire.Id, Flightmodel2EnginesIsOnFire);
            DataRefList.Add(Flightmodel2EnginesSideSign.Id, Flightmodel2EnginesSideSign);
            DataRefList.Add(Flightmodel2EnginesN1Percent.Id, Flightmodel2EnginesN1Percent);
            DataRefList.Add(Flightmodel2EnginesN2Percent.Id, Flightmodel2EnginesN2Percent);
            DataRefList.Add(Flightmodel2EnginesITTDegC.Id, Flightmodel2EnginesITTDegC);
            DataRefList.Add(Flightmodel2EnginesEGTDegC.Id, Flightmodel2EnginesEGTDegC);
            DataRefList.Add(Flightmodel2EnginesCHTDegC.Id, Flightmodel2EnginesCHTDegC);
            DataRefList.Add(Flightmodel2EnginesJetwashMtrSec.Id, Flightmodel2EnginesJetwashMtrSec);
            DataRefList.Add(Flightmodel2EnginesPropDiscOverride.Id, Flightmodel2EnginesPropDiscOverride);
            DataRefList.Add(Flightmodel2EnginesPropDiscDiscWidth.Id, Flightmodel2EnginesPropDiscDiscWidth);
            DataRefList.Add(Flightmodel2EnginesPropDiscDiscLengthRatio.Id, Flightmodel2EnginesPropDiscDiscLengthRatio);
            DataRefList.Add(Flightmodel2EnginesPropDiscDiscS.Id, Flightmodel2EnginesPropDiscDiscS);
            DataRefList.Add(Flightmodel2EnginesPropDiscDiscT.Id, Flightmodel2EnginesPropDiscDiscT);
            DataRefList.Add(Flightmodel2EnginesPropDiscDiscSDim.Id, Flightmodel2EnginesPropDiscDiscSDim);
            DataRefList.Add(Flightmodel2EnginesPropDiscDiscTDim.Id, Flightmodel2EnginesPropDiscDiscTDim);
            DataRefList.Add(Flightmodel2EnginesPropDiscDiscAlphaFront.Id, Flightmodel2EnginesPropDiscDiscAlphaFront);
            DataRefList.Add(Flightmodel2EnginesPropDiscDiscAlphaSide.Id, Flightmodel2EnginesPropDiscDiscAlphaSide);
            DataRefList.Add(Flightmodel2EnginesPropDiscDiscAlphaInside.Id, Flightmodel2EnginesPropDiscDiscAlphaInside);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideWidth.Id, Flightmodel2EnginesPropDiscSideWidth);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideLengthRatio.Id, Flightmodel2EnginesPropDiscSideLengthRatio);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideAngle.Id, Flightmodel2EnginesPropDiscSideAngle);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideNumberOfBlades.Id, Flightmodel2EnginesPropDiscSideNumberOfBlades);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideIsBillboard.Id, Flightmodel2EnginesPropDiscSideIsBillboard);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideS.Id, Flightmodel2EnginesPropDiscSideS);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideT.Id, Flightmodel2EnginesPropDiscSideT);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideSDim.Id, Flightmodel2EnginesPropDiscSideSDim);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideTDim.Id, Flightmodel2EnginesPropDiscSideTDim);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideAlphaFront.Id, Flightmodel2EnginesPropDiscSideAlphaFront);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideAlphaSide.Id, Flightmodel2EnginesPropDiscSideAlphaSide);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideAlphaInside.Id, Flightmodel2EnginesPropDiscSideAlphaInside);
            DataRefList.Add(Flightmodel2EnginesPropDiscSideAlphaToCamera.Id, Flightmodel2EnginesPropDiscSideAlphaToCamera);
            DataRefList.Add(Flightmodel2GearGearHeadingDeg.Id, Flightmodel2GearGearHeadingDeg);
            DataRefList.Add(Flightmodel2GearGearPitchDeg.Id, Flightmodel2GearGearPitchDeg);
            DataRefList.Add(Flightmodel2GearGearRollDeg.Id, Flightmodel2GearGearRollDeg);
            DataRefList.Add(Flightmodel2GearTireSteerCommandDeg.Id, Flightmodel2GearTireSteerCommandDeg);
            DataRefList.Add(Flightmodel2GearTireSteerActualDeg.Id, Flightmodel2GearTireSteerActualDeg);
            DataRefList.Add(Flightmodel2GearTireVerticalDeflectionMtr.Id, Flightmodel2GearTireVerticalDeflectionMtr);
            DataRefList.Add(Flightmodel2GearTireVerticalForceNMtr.Id, Flightmodel2GearTireVerticalForceNMtr);
            DataRefList.Add(Flightmodel2GearTireRotationSpeedRadSec.Id, Flightmodel2GearTireRotationSpeedRadSec);
            DataRefList.Add(Flightmodel2GearTireRotationAngleDeg.Id, Flightmodel2GearTireRotationAngleDeg);
            DataRefList.Add(Flightmodel2GearDeployRatio.Id, Flightmodel2GearDeployRatio);
            DataRefList.Add(Flightmodel2GearEagleClawAngleDeg.Id, Flightmodel2GearEagleClawAngleDeg);
            DataRefList.Add(Flightmodel2GearTireSkidRatio.Id, Flightmodel2GearTireSkidRatio);
            DataRefList.Add(Flightmodel2GearTotalDeflectionRate.Id, Flightmodel2GearTotalDeflectionRate);
            DataRefList.Add(Flightmodel2GearOnGround.Id, Flightmodel2GearOnGround);
            DataRefList.Add(Flightmodel2GearOnGrass.Id, Flightmodel2GearOnGrass);
            DataRefList.Add(Flightmodel2GearOnNoisy.Id, Flightmodel2GearOnNoisy);
            DataRefList.Add(Flightmodel2GearTireSkidSpeedMtrSec.Id, Flightmodel2GearTireSkidSpeedMtrSec);
            DataRefList.Add(Flightmodel2LightsLandingLightsBrightnessRatio.Id, Flightmodel2LightsLandingLightsBrightnessRatio);
            DataRefList.Add(Flightmodel2LightsGenericLightsBrightnessRatio.Id, Flightmodel2LightsGenericLightsBrightnessRatio);
            DataRefList.Add(Flightmodel2LightsTaxiLightsBrightnessRatio.Id, Flightmodel2LightsTaxiLightsBrightnessRatio);
            DataRefList.Add(Flightmodel2LightsSpotLightsBrightnessRatio.Id, Flightmodel2LightsSpotLightsBrightnessRatio);
            DataRefList.Add(Flightmodel2LightsNavLightsBrightnessRatio.Id, Flightmodel2LightsNavLightsBrightnessRatio);
            DataRefList.Add(Flightmodel2LightsBeaconBrightnessRatio.Id, Flightmodel2LightsBeaconBrightnessRatio);
            DataRefList.Add(Flightmodel2LightsStrobeBrightnessRatio.Id, Flightmodel2LightsStrobeBrightnessRatio);
            DataRefList.Add(Flightmodel2LightsSpotLightHeadingDeg.Id, Flightmodel2LightsSpotLightHeadingDeg);
            DataRefList.Add(Flightmodel2LightsSpotLightPitchDeg.Id, Flightmodel2LightsSpotLightPitchDeg);
            DataRefList.Add(Flightmodel2LightsStrobeFlashNow.Id, Flightmodel2LightsStrobeFlashNow);
            DataRefList.Add(Flightmodel2LightsOverrideBeaconsAndStrobes.Id, Flightmodel2LightsOverrideBeaconsAndStrobes);
            DataRefList.Add(Flightmodel2MiscCanopyOpenRatio.Id, Flightmodel2MiscCanopyOpenRatio);
            DataRefList.Add(Flightmodel2MiscDoorOpenRatio.Id, Flightmodel2MiscDoorOpenRatio);
            DataRefList.Add(Flightmodel2MiscTailhookDeployRatio.Id, Flightmodel2MiscTailhookDeployRatio);
            DataRefList.Add(Flightmodel2MiscWaterScoopDeployRatio.Id, Flightmodel2MiscWaterScoopDeployRatio);
            DataRefList.Add(Flightmodel2MiscWaterDropDeployRatio.Id, Flightmodel2MiscWaterDropDeployRatio);
            DataRefList.Add(Flightmodel2MiscWiperAngleDeg.Id, Flightmodel2MiscWiperAngleDeg);
            DataRefList.Add(Flightmodel2MiscCustomSliderRatio.Id, Flightmodel2MiscCustomSliderRatio);
            DataRefList.Add(Flightmodel2MiscPressureOutflowRatio.Id, Flightmodel2MiscPressureOutflowRatio);
            DataRefList.Add(Flightmodel2MiscAoaAngleDegrees.Id, Flightmodel2MiscAoaAngleDegrees);
            DataRefList.Add(Flightmodel2MiscYawStringAngle.Id, Flightmodel2MiscYawStringAngle);
            DataRefList.Add(Flightmodel2MiscYawStringAirspeed.Id, Flightmodel2MiscYawStringAirspeed);
            DataRefList.Add(Flightmodel2MiscGforceNormal.Id, Flightmodel2MiscGforceNormal);
            DataRefList.Add(Flightmodel2MiscGforceAxil.Id, Flightmodel2MiscGforceAxil);
            DataRefList.Add(Flightmodel2MiscGforceSide.Id, Flightmodel2MiscGforceSide);
            DataRefList.Add(Flightmodel2MiscBouncerX.Id, Flightmodel2MiscBouncerX);
            DataRefList.Add(Flightmodel2MiscBouncerY.Id, Flightmodel2MiscBouncerY);
            DataRefList.Add(Flightmodel2MiscBouncerZ.Id, Flightmodel2MiscBouncerZ);
            DataRefList.Add(Flightmodel2MiscBouncerVx.Id, Flightmodel2MiscBouncerVx);
            DataRefList.Add(Flightmodel2MiscBouncerVy.Id, Flightmodel2MiscBouncerVy);
            DataRefList.Add(Flightmodel2MiscBouncerVz.Id, Flightmodel2MiscBouncerVz);
            DataRefList.Add(Flightmodel2MiscAutoStartInProgress.Id, Flightmodel2MiscAutoStartInProgress);
            DataRefList.Add(Flightmodel2MiscAutoBoardInProgress.Id, Flightmodel2MiscAutoBoardInProgress);
            DataRefList.Add(Flightmodel2MiscTailhookAngleDegrees.Id, Flightmodel2MiscTailhookAngleDegrees);
            DataRefList.Add(Flightmodel2MiscTowInProgress.Id, Flightmodel2MiscTowInProgress);
            DataRefList.Add(Flightmodel2MiscHasCrashed.Id, Flightmodel2MiscHasCrashed);
            DataRefList.Add(Flightmodel2PositionTrueTheta.Id, Flightmodel2PositionTrueTheta);
            DataRefList.Add(Flightmodel2PositionTruePhi.Id, Flightmodel2PositionTruePhi);
            DataRefList.Add(Flightmodel2PositionTruePsi.Id, Flightmodel2PositionTruePsi);
            DataRefList.Add(Flightmodel2PositionMagPsi.Id, Flightmodel2PositionMagPsi);
            DataRefList.Add(Flightmodel2PositionAlpha.Id, Flightmodel2PositionAlpha);
            DataRefList.Add(Flightmodel2PositionBeta.Id, Flightmodel2PositionBeta);
            DataRefList.Add(Flightmodel2PositionPressureAltitude.Id, Flightmodel2PositionPressureAltitude);
            DataRefList.Add(Flightmodel2PositionVpath.Id, Flightmodel2PositionVpath);
            DataRefList.Add(Flightmodel2PositionHpath.Id, Flightmodel2PositionHpath);
            DataRefList.Add(Flightmodel2PositionGroundspeed.Id, Flightmodel2PositionGroundspeed);
            DataRefList.Add(Flightmodel2PositionTrueAirspeed.Id, Flightmodel2PositionTrueAirspeed);
            DataRefList.Add(Flightmodel2PositionYAgl.Id, Flightmodel2PositionYAgl);
            DataRefList.Add(Flightmodel2WingAileron1Deg.Id, Flightmodel2WingAileron1Deg);
            DataRefList.Add(Flightmodel2WingAileron2Deg.Id, Flightmodel2WingAileron2Deg);
            DataRefList.Add(Flightmodel2WingSpoiler1Deg.Id, Flightmodel2WingSpoiler1Deg);
            DataRefList.Add(Flightmodel2WingSpoiler2Deg.Id, Flightmodel2WingSpoiler2Deg);
            DataRefList.Add(Flightmodel2WingYawbrakeDeg.Id, Flightmodel2WingYawbrakeDeg);
            DataRefList.Add(Flightmodel2WingElevator1Deg.Id, Flightmodel2WingElevator1Deg);
            DataRefList.Add(Flightmodel2WingElevator2Deg.Id, Flightmodel2WingElevator2Deg);
            DataRefList.Add(Flightmodel2WingRudder1Deg.Id, Flightmodel2WingRudder1Deg);
            DataRefList.Add(Flightmodel2WingRudder2Deg.Id, Flightmodel2WingRudder2Deg);
            DataRefList.Add(Flightmodel2WingFlap1Deg.Id, Flightmodel2WingFlap1Deg);
            DataRefList.Add(Flightmodel2WingFlap2Deg.Id, Flightmodel2WingFlap2Deg);
            DataRefList.Add(Flightmodel2WingSpeedbrake1Deg.Id, Flightmodel2WingSpeedbrake1Deg);
            DataRefList.Add(Flightmodel2WingSpeedbrake2Deg.Id, Flightmodel2WingSpeedbrake2Deg);
            DataRefList.Add(Flightmodel2WingWingTipDeflectionDeg.Id, Flightmodel2WingWingTipDeflectionDeg);
            DataRefList.Add(Flightmodel2WingWingCondensationRatio.Id, Flightmodel2WingWingCondensationRatio);
            DataRefList.Add(Flightmodel2WingWingTipCondensationRatio.Id, Flightmodel2WingWingTipCondensationRatio);
            DataRefList.Add(Flightmodel2WingElementsElementMACMtr.Id, Flightmodel2WingElementsElementMACMtr);
            DataRefList.Add(Flightmodel2WingElementsElementSurfaceAreaMtrSq.Id, Flightmodel2WingElementsElementSurfaceAreaMtrSq);
            DataRefList.Add(Flightmodel2WingElementsElementCondensationRatio.Id, Flightmodel2WingElementsElementCondensationRatio);
            DataRefList.Add(Flightmodel2WingElementsElementIsStalled.Id, Flightmodel2WingElementsElementIsStalled);
            DataRefList.Add(GraphicsVRButtonAxisX.Id, GraphicsVRButtonAxisX);
            DataRefList.Add(GraphicsVRButtonAxisY.Id, GraphicsVRButtonAxisY);
            DataRefList.Add(GraphicsVRButtonDown.Id, GraphicsVRButtonDown);
            DataRefList.Add(GraphicsVRBacklightLevel.Id, GraphicsVRBacklightLevel);
            DataRefList.Add(GraphicsVRSeekerLightLevel.Id, GraphicsVRSeekerLightLevel);
            DataRefList.Add(GraphicsVRTouchSpotLightLevel.Id, GraphicsVRTouchSpotLightLevel);
            DataRefList.Add(GraphicsVREnabled.Id, GraphicsVREnabled);
            DataRefList.Add(GraphicsVRUsing3DMouse.Id, GraphicsVRUsing3DMouse);
            DataRefList.Add(GraphicsVRTeleportOnGround.Id, GraphicsVRTeleportOnGround);
        }

        public Dictionary<DataRefId, DataRefElement> DataRefList { get; private set; } = new Dictionary<DataRefId, DataRefElement>();

        private DataRefElement AircraftAutopilotVviStepFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/vvi_step_ft",
                    Units = "Feet",
                    Description = "Step increment for autopilot VVI",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Autopilot VVI Step Ft",
                    Id = DataRefId.AircraftAutopilotVviStepFt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftAutopilotAltStepFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/alt_step_ft",
                    Units = "Feet",
                    Description = "Step increment for autopilot altitude",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Autopilot Alt Step Ft",
                    Id = DataRefId.AircraftAutopilotAltStepFt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftAutopilotRadioAltimeterStepFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/radio_altimeter_step_ft",
                    Units = "Feet",
                    Description = "Step increment for radio altimeter decision height",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Autopilot Radio Altimeter Step Ft",
                    Id = DataRefId.AircraftAutopilotRadioAltimeterStepFt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftAutopilotPreconfiguredApType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/preconfigured_ap_type",
                    Units = "enum",
                    Description = "0=X-Plane custom, 1=Airliner, 2=GFC-700, 3=S-Tec 55, 4=S-Tec 55 with altitude preselect, 5=KAP-140 single axis, 6=KAP-140 dual axis, 7=KAP-140 dual axis with altitude preselect, 8=Piper Autocontrol, 9=Rockwell/Collins FCS-65",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Autopilot Preconfigured AP Type",
                    Id = DataRefId.AircraftAutopilotPreconfiguredApType,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftAutopilotSingleAxisAutopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/single_axis_autopilot",
                    Units = "boolean",
                    Description = "Whether the autopilot is strictly single axis (bank) only.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Autopilot Single Axis Autopilot",
                    Id = DataRefId.AircraftAutopilotSingleAxisAutopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftAutopilotAhSource
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/ah_source",
                    Units = "enum",
                    Description = "Attitude source for the autopilot: 10 = AHRS, 11 = elec gyro, 12 = vacuum gyro, 13 = turn coordinator and absolute pressure transducer",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Autopilot Ah Source",
                    Id = DataRefId.AircraftAutopilotAhSource,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftAutopilotDgSource
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/dg_source",
                    Units = "enum",
                    Description = "Directional gyro source for the autopillot: 10 = AHRS, 11 = elec gyro (HSI or DG), 12 = vacuum gyro (DG)",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Autopilot DG Source",
                    Id = DataRefId.AircraftAutopilotDgSource,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private StringDataRefElement AircraftViewAcfTailnum
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_tailnum",
                    StringLength = 40,
                    Description = "Tail number",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Tailnum",
                    Id = DataRefId.AircraftViewAcfTailnum,
                    Writable = true,
                    DataType = "byte[40]"
                };
            }
        }
        private StringDataRefElement AircraftViewAcfUiName
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_ui_name",
                    StringLength = 250,
                    Description = "ACF name as seen in the UI",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Ui Name",
                    Id = DataRefId.AircraftViewAcfUiName,
                    Writable = false,
                    DataType = "byte[250]"
                };
            }
        }
        private DataRefElement AircraftViewAcfModesId
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_modeS_id",
                    Units = "integer",
                    Description = "24bit (0-16777215 or 0-0xFFFFFF) unique ID of the airframe. This is also known as the ADS-B \"hexcode\".",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Modes Id",
                    Id = DataRefId.AircraftViewAcfModesId,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private StringDataRefElement AircraftViewAcfAuthor
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_author",
                    StringLength = 500,
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Author",
                    Id = DataRefId.AircraftViewAcfAuthor,
                    Writable = true,
                    DataType = "byte[500]"
                };
            }
        }
        private StringDataRefElement AircraftViewAcfDescrip
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_descrip",
                    StringLength = 260,
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Descrip",
                    Id = DataRefId.AircraftViewAcfDescrip,
                    Writable = true,
                    DataType = "byte[260]"
                };
            }
        }
        private StringDataRefElement AircraftViewAcfNotes
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_notes",
                    StringLength = 240,
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Notes",
                    Id = DataRefId.AircraftViewAcfNotes,
                    Writable = true,
                    DataType = "byte[240]"
                };
            }
        }
        private DataRefElement AircraftViewAcfSizeX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_size_x",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Size X",
                    Id = DataRefId.AircraftViewAcfSizeX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfSizeZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_size_z",
                    Units = "???",
                    Description = "shadow size, and viewing distance size",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Size Z",
                    Id = DataRefId.AircraftViewAcfSizeZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfAsiKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_asi_kts",
                    Units = "enum",
                    Description = "air speed indicator knots calibration",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Asi Kts",
                    Id = DataRefId.AircraftViewAcfAsiKts,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftViewAcfCockpitType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_cockpit_type",
                    Units = "enum",
                    Description = "cockpit panel type",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Cockpit Type",
                    Id = DataRefId.AircraftViewAcfCockpitType,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftViewAcfHasSCFd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_has_SC_fd",
                    Units = "bool",
                    Description = "has single cue flight director?",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Has SC Fd",
                    Id = DataRefId.AircraftViewAcfHasSCFd,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftViewAcfHasStallwarn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_has_stallwarn",
                    Units = "bool",
                    Description = "has audio stall warning?",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Has Stallwarn",
                    Id = DataRefId.AircraftViewAcfHasStallwarn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftViewAcfPex
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_peX",
                    Units = "pos",
                    Description = "Position of pilot's head relative to CG, X",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Pex",
                    Id = DataRefId.AircraftViewAcfPex,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfPey
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_peY",
                    Units = "pos",
                    Description = "Position of pilot's head relative to CG, Y",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Pey",
                    Id = DataRefId.AircraftViewAcfPey,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfPez
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_peZ",
                    Units = "pos",
                    Description = "Position of pilot's head relative to CG, Z",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Pez",
                    Id = DataRefId.AircraftViewAcfPez,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfVso
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_Vso",
                    Units = "kias",
                    Description = "Various speed maxes for the aircraft.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Vso",
                    Id = DataRefId.AircraftViewAcfVso,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfVs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_Vs",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Vs",
                    Id = DataRefId.AircraftViewAcfVs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfVfe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_Vfe",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Vfe",
                    Id = DataRefId.AircraftViewAcfVfe,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfVno
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_Vno",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Vno",
                    Id = DataRefId.AircraftViewAcfVno,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfVne
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_Vne",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Vne",
                    Id = DataRefId.AircraftViewAcfVne,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfMmo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_Mmo",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Mmo",
                    Id = DataRefId.AircraftViewAcfMmo,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfGneg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_Gneg",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Gneg",
                    Id = DataRefId.AircraftViewAcfGneg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfGpos
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_Gpos",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Gpos",
                    Id = DataRefId.AircraftViewAcfGpos,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfYawstringx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_yawstringx",
                    Units = "???",
                    Description = "The yaw string, that thing that no one knows how to get rid of.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Yawstringx",
                    Id = DataRefId.AircraftViewAcfYawstringx,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfYawstringy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_yawstringy",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Yawstringy",
                    Id = DataRefId.AircraftViewAcfYawstringy,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfHUDCntry
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_HUD_cntry",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF HUD Cntry",
                    Id = DataRefId.AircraftViewAcfHUDCntry,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfHUDDelx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_HUD_delx",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF HUD Delx",
                    Id = DataRefId.AircraftViewAcfHUDDelx,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfHUDDely
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_HUD_dely",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF HUD Dely",
                    Id = DataRefId.AircraftViewAcfHUDDely,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private StringDataRefElement AircraftViewAcfICAO
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_ICAO",
                    StringLength = 40,
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF ICAO",
                    Id = DataRefId.AircraftViewAcfICAO,
                    Writable = true,
                    DataType = "byte[40]"
                };
            }
        }
        private DataRefElement AircraftViewAcfDoorX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_door_x",
                    Units = "meters",
                    Description = "position of door relative to CG, latitude offset in meters",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Door X",
                    Id = DataRefId.AircraftViewAcfDoorX,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfDoorY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_door_y",
                    Units = "meters",
                    Description = "position of door relative to CG, vertical offset in meters",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Door Y",
                    Id = DataRefId.AircraftViewAcfDoorY,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfDoorZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_door_z",
                    Units = "meters",
                    Description = "position of door relative to CG, longitude offset in meters",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Door Z",
                    Id = DataRefId.AircraftViewAcfDoorZ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftViewAcfHasHOOPSHUD
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_has_HOOPS_HUD",
                    Units = "???",
                    Description = "has Hoops HUD",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Has HOOPSHUD",
                    Id = DataRefId.AircraftViewAcfHasHOOPSHUD,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftViewAcfLiveryIndex
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_livery_index",
                    Units = "index",
                    Description = "index number of livery",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Livery Index",
                    Id = DataRefId.AircraftViewAcfLiveryIndex,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private StringDataRefElement AircraftViewAcfLiveryPath
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_livery_path",
                    StringLength = 1024,
                    Frequency = DefaultFrequency,
                    Name = "Aircraft View ACF Livery Path",
                    Id = DataRefId.AircraftViewAcfLiveryPath,
                    Writable = false,
                    DataType = "byte[1024]"
                };
            }
        }
        private DataRefElement AircraftForcefeedbackAcfFfHydraulic
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/forcefeedback/acf_ff_hydraulic",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Forcefeedback ACF Ff Hydraulic",
                    Id = DataRefId.AircraftForcefeedbackAcfFfHydraulic,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftForcefeedbackAcfFfStickshaker
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/forcefeedback/acf_ff_stickshaker",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Forcefeedback ACF Ff Stickshaker",
                    Id = DataRefId.AircraftForcefeedbackAcfFfStickshaker,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftElectricalNumBatteries
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/electrical/num_batteries",
                    Units = "count",
                    Description = "The number of batteries on this plane",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Electrical Num Batteries",
                    Id = DataRefId.AircraftElectricalNumBatteries,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftElectricalNumGenerators
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/electrical/num_generators",
                    Units = "count",
                    Description = "The number of generators on this plane",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Electrical Num Generators",
                    Id = DataRefId.AircraftElectricalNumGenerators,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftElectricalNumInverters
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/electrical/num_inverters",
                    Units = "count",
                    Description = "The number of inverters on this plane",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Electrical Num Inverters",
                    Id = DataRefId.AircraftElectricalNumInverters,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftElectricalNumBuses
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/electrical/num_buses",
                    Units = "count",
                    Description = "The number of busses on this plane",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Electrical Num Buses",
                    Id = DataRefId.AircraftElectricalNumBuses,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftEngineAcfNumEngines
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_num_engines",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Num Engines",
                    Id = DataRefId.AircraftEngineAcfNumEngines,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftEngineAcfAutoFeathereq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_auto_featherEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Auto Feathereq",
                    Id = DataRefId.AircraftEngineAcfAutoFeathereq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftEngineAcfPropFailMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_prop_fail_mode",
                    Units = "enum",
                    Description = "Where the prop pitch angle goes when the governor loses oil pressure: 0=low pitch, 1=high pitch, 2=feather, 3=start lock",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Prop Fail Mode",
                    Id = DataRefId.AircraftEngineAcfPropFailMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftEngineAcfThrotmaxFWD
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_throtmax_FWD",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Throtmax FWD",
                    Id = DataRefId.AircraftEngineAcfThrotmaxFWD,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfThrotmaxREV
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_throtmax_REV",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Throtmax REV",
                    Id = DataRefId.AircraftEngineAcfThrotmaxREV,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfRSCMingovEng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_RSC_mingov_eng",
                    Units = "rad/sec",
                    Description = "Minimum engine speed with governor on radians/second",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF RSC Mingov Eng",
                    Id = DataRefId.AircraftEngineAcfRSCMingovEng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfRSCIdlespeedEng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_RSC_idlespeed_eng",
                    Units = "rad/sec",
                    Description = "Engine idle speed radians/second.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF RSC Idlespeed Eng",
                    Id = DataRefId.AircraftEngineAcfRSCIdlespeedEng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfRSCRedlineEng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_RSC_redline_eng",
                    Units = "rad/sec",
                    Description = "Max engine speed radians/second.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF RSC Redline Eng",
                    Id = DataRefId.AircraftEngineAcfRSCRedlineEng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfRSCMingreenEng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_RSC_mingreen_eng",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF RSC Mingreen Eng",
                    Id = DataRefId.AircraftEngineAcfRSCMingreenEng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfRSCMaxgreenEng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_RSC_maxgreen_eng",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF RSC Maxgreen Eng",
                    Id = DataRefId.AircraftEngineAcfRSCMaxgreenEng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfPmax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_pmax",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Pmax",
                    Id = DataRefId.AircraftEngineAcfPmax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfTmax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_tmax",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Tmax",
                    Id = DataRefId.AircraftEngineAcfTmax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfBurnerinc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_burnerinc",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Burnerinc",
                    Id = DataRefId.AircraftEngineAcfBurnerinc,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfCritalt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_critalt",
                    Units = "meters",
                    Description = "Critical altitude for props",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Critalt",
                    Id = DataRefId.AircraftEngineAcfCritalt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfMpmax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_mpmax",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Mpmax",
                    Id = DataRefId.AircraftEngineAcfMpmax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfGearRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_gear_rat",
                    Units = "???",
                    Description = "This is for backward compatibility, you can use acf_prop_gear_rat from v700 onwards",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Gear Rat",
                    Id = DataRefId.AircraftEngineAcfGearRat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfFaceJet
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_face_jet",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Face Jet",
                    Id = DataRefId.AircraftEngineAcfFaceJet,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfFaceRocket
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_face_rocket",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Face Rocket",
                    Id = DataRefId.AircraftEngineAcfFaceRocket,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfSpooltimeJet
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_spooltime_jet",
                    Units = "seconds",
                    Description = "This is the delay in increasing the throttle for jet engines - it is the number of seconds to actuate a full advance.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Spooltime Jet",
                    Id = DataRefId.AircraftEngineAcfSpooltimeJet,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfSpooltimeProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_spooltime_prop",
                    Units = "seconds",
                    Description = "This is the delay in increasing the throttle for prop/turboprop engines - it is the number of seconds to actuate a full advance.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Spooltime Prop",
                    Id = DataRefId.AircraftEngineAcfSpooltimeProp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfSpooltimeTurbine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_spooltime_turbine",
                    Units = "seconds",
                    Description = "This is the number of seconds it takes for a free turbine to spin up from idle to full RPM.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Spooltime Turbine",
                    Id = DataRefId.AircraftEngineAcfSpooltimeTurbine,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfFuelIntroTimeProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_fuel_intro_time_prop",
                    Units = "seconds",
                    Description = "This is the number of seconds it takes for full idle fuel flow to be reached on engine start, for propeller engines",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Fuel Intro Time Prop",
                    Id = DataRefId.AircraftEngineAcfFuelIntroTimeProp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineFuelIntroTimeJet
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/fuel_intro_time_jet",
                    Units = "seconds",
                    Description = "This is the number of seconds it takes for full idle fuel flow to be reached on engine start, for jet engines",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine Fuel Intro Time Jet",
                    Id = DataRefId.AircraftEngineFuelIntroTimeJet,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfMaxMachEff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_mach_eff",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Max Mach Eff",
                    Id = DataRefId.AircraftEngineAcfMaxMachEff,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfFmaxSl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_fmax_sl",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Fmax Sl",
                    Id = DataRefId.AircraftEngineAcfFmaxSl,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfFmaxOpt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_fmax_opt",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Fmax Opt",
                    Id = DataRefId.AircraftEngineAcfFmaxOpt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfFmaxVac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_fmax_vac",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Fmax Vac",
                    Id = DataRefId.AircraftEngineAcfFmaxVac,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfHOpt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_h_opt",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF H Opt",
                    Id = DataRefId.AircraftEngineAcfHOpt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAacfTipMachDes50
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/aacf_tip_mach_des_50",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine Aacf Tip Mach Des50",
                    Id = DataRefId.AircraftEngineAacfTipMachDes50,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAacfTipMachDes100
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/aacf_tip_mach_des_100",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine Aacf Tip Mach Des100",
                    Id = DataRefId.AircraftEngineAacfTipMachDes100,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAacfRotorMiRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/aacf_rotor_mi_rat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine Aacf Rotor Mi Rat",
                    Id = DataRefId.AircraftEngineAacfRotorMiRat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAacfTipWeight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/aacf_tip_weight",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine Aacf Tip Weight",
                    Id = DataRefId.AircraftEngineAacfTipWeight,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfMaxITT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_ITT",
                    Units = "???",
                    Description = "Max internal turbine temperature the plane can have before engine failure.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Max ITT",
                    Id = DataRefId.AircraftEngineAcfMaxITT,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfMaxEGT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_EGT",
                    Units = "???",
                    Description = "Max exhaust gas temperature the plane can have before engine failure.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Max EGT",
                    Id = DataRefId.AircraftEngineAcfMaxEGT,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfMaxCHT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_CHT",
                    Units = "???",
                    Description = "MAx cylinder head temperature the plane can have before engine failure.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Max CHT",
                    Id = DataRefId.AircraftEngineAcfMaxCHT,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfMaxOILP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_OILP",
                    Units = "???",
                    Description = "Max Oil Pressure the plane can have before engine failure.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Max OILP",
                    Id = DataRefId.AircraftEngineAcfMaxOILP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfMaxOILT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_OILT",
                    Units = "???",
                    Description = "Max Oil Temperature the plane can have before engine failure.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Max OILT",
                    Id = DataRefId.AircraftEngineAcfMaxOILT,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfOiltIsC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_oilT_is_C",
                    Units = "boolean",
                    Description = "Oil temperature dataref reads in Celsius",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Oilt Is C",
                    Id = DataRefId.AircraftEngineAcfOiltIsC,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftEngineAcfITTIsC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_ITT_is_C",
                    Units = "boolean",
                    Description = "Inter-turbine temperature dataref reads in Celsius",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF ITT Is C",
                    Id = DataRefId.AircraftEngineAcfITTIsC,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftEngineAcfEGTIsC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_EGT_is_C",
                    Units = "boolean",
                    Description = "Exhaust gas temperature dataref reads in Celsius",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF EGT Is C",
                    Id = DataRefId.AircraftEngineAcfEGTIsC,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftEngineAcfCHTIsC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_CHT_is_C",
                    Units = "boolean",
                    Description = "Cylinder head temperature dataref reads in Celsius",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF CHT Is C",
                    Id = DataRefId.AircraftEngineAcfCHTIsC,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftEngineAcfMaxFUELP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_FUELP",
                    Units = "???",
                    Description = "Max Fuel Pressure the plane can have before engine failure.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Max FUELP",
                    Id = DataRefId.AircraftEngineAcfMaxFUELP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfStarterTorqueRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_starter_torque_ratio",
                    Units = "Ratio",
                    Description = "This is the ratio of the engine's maximum torque that the starter applies at its design RPM.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Starter Torque Ratio",
                    Id = DataRefId.AircraftEngineAcfStarterTorqueRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfStarterMaxRpmRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_starter_max_rpm_ratio",
                    Units = "Ratio",
                    Description = "This is the ratio of the engine's max RPM that the starter can spin the engine up to before it loses torque.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF Starter Max Rpm Ratio",
                    Id = DataRefId.AircraftEngineAcfStarterMaxRpmRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineBoostRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/boost_ratio",
                    Units = "ratio",
                    Description = "Boost Amount",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine Boost Ratio",
                    Id = DataRefId.AircraftEngineBoostRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineBoostMaxSeconds
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/boost_max_seconds",
                    Units = "seconds",
                    Description = "Boost Capacity",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine Boost Max Seconds",
                    Id = DataRefId.AircraftEngineBoostMaxSeconds,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfAPUDoorTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_APU_door_time",
                    Units = "seconds",
                    Description = "How long the APU door takes to open or close",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF APU Door Time",
                    Id = DataRefId.AircraftEngineAcfAPUDoorTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfAPUCooldownTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_APU_cooldown_time",
                    Units = "seconds",
                    Description = "How fast the APU EGT cools down after use - influences how long the APU runs in cool down mode before it is shut down",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF APU Cooldown Time",
                    Id = DataRefId.AircraftEngineAcfAPUCooldownTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfAPUSpoolupTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_APU_spoolup_time",
                    Units = "seconds",
                    Description = "How long the APU takes to spool up to 100 percent",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF APU Spoolup Time",
                    Id = DataRefId.AircraftEngineAcfAPUSpoolupTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftEngineAcfAPUSpooldnTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_APU_spooldn_time",
                    Units = "seconds",
                    Description = "How long the APU takes to spool down to 10 percent",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Engine ACF APU Spooldn Time",
                    Id = DataRefId.AircraftEngineAcfAPUSpooldnTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoMP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_MP",
                    Units = "inhg",
                    Description = "Low value of the green arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo MP",
                    Id = DataRefId.AircraftLimitsGreenLoMP,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiMP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_MP",
                    Units = "inhg",
                    Description = "High value of the green arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi MP",
                    Id = DataRefId.AircraftLimitsGreenHiMP,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoMP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_MP",
                    Units = "inhg",
                    Description = "Low value of the yellow arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo MP",
                    Id = DataRefId.AircraftLimitsYellowLoMP,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiMP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_MP",
                    Units = "inhg",
                    Description = "High value of the yellow arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi MP",
                    Id = DataRefId.AircraftLimitsYellowHiMP,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoMP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_MP",
                    Units = "inhg",
                    Description = "Low value of the red arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo MP",
                    Id = DataRefId.AircraftLimitsRedLoMP,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiMP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_MP",
                    Units = "inhg",
                    Description = "High value of the red arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi MP",
                    Id = DataRefId.AircraftLimitsRedHiMP,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoEPR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_EPR",
                    Units = "ratio",
                    Description = "Low value of the green arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo EPR",
                    Id = DataRefId.AircraftLimitsGreenLoEPR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiEPR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_EPR",
                    Units = "ratio",
                    Description = "High value of the green arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi EPR",
                    Id = DataRefId.AircraftLimitsGreenHiEPR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoEPR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_EPR",
                    Units = "ratio",
                    Description = "Low value of the yellow arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo EPR",
                    Id = DataRefId.AircraftLimitsYellowLoEPR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiEPR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_EPR",
                    Units = "ratio",
                    Description = "High value of the yellow arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi EPR",
                    Id = DataRefId.AircraftLimitsYellowHiEPR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoEPR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_EPR",
                    Units = "ratio",
                    Description = "Low value of the red arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo EPR",
                    Id = DataRefId.AircraftLimitsRedLoEPR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiEPR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_EPR",
                    Units = "ratio",
                    Description = "High value of the red arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi EPR",
                    Id = DataRefId.AircraftLimitsRedHiEPR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_TRQ",
                    Units = "ft-lbs",
                    Description = "Low value of the green arc for the torque instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo TRQ",
                    Id = DataRefId.AircraftLimitsGreenLoTRQ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_TRQ",
                    Units = "ft-lbs",
                    Description = "High value of the green arc for the torque instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi TRQ",
                    Id = DataRefId.AircraftLimitsGreenHiTRQ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_TRQ",
                    Units = "ft-lbs",
                    Description = "Low value of the yellow arc for the torque instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo TRQ",
                    Id = DataRefId.AircraftLimitsYellowLoTRQ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_TRQ",
                    Units = "ft-lbs",
                    Description = "High value of the yellow arc for the torque instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi TRQ",
                    Id = DataRefId.AircraftLimitsYellowHiTRQ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_TRQ",
                    Units = "ft-lbs",
                    Description = "Low value of the red arc for the torque instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo TRQ",
                    Id = DataRefId.AircraftLimitsRedLoTRQ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_TRQ",
                    Units = "ft-lbs",
                    Description = "High value of the red arc for the torque instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi TRQ",
                    Id = DataRefId.AircraftLimitsRedHiTRQ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoFF
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "Low value of the green arc for the fuel flow instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo FF",
                    Id = DataRefId.AircraftLimitsGreenLoFF,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiFF
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "High value of the green arc for the fuel flow instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi FF",
                    Id = DataRefId.AircraftLimitsGreenHiFF,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoFF
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "Low value of the yellow arc for the fuel flow instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo FF",
                    Id = DataRefId.AircraftLimitsYellowLoFF,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiFF
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "High value of the yellow arc for the fuel flow instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi FF",
                    Id = DataRefId.AircraftLimitsYellowHiFF,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoFF
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "Low value of the red arc for the fuel flow instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo FF",
                    Id = DataRefId.AircraftLimitsRedLoFF,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiFF
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "High value of the red arc for the fuel flow instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi FF",
                    Id = DataRefId.AircraftLimitsRedHiFF,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoITT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_ITT",
                    Units = "degC",
                    Description = "Low value of the green arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo ITT",
                    Id = DataRefId.AircraftLimitsGreenLoITT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiITT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_ITT",
                    Units = "degC",
                    Description = "High value of the green arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi ITT",
                    Id = DataRefId.AircraftLimitsGreenHiITT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoITT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_ITT",
                    Units = "degC",
                    Description = "Low value of the yellow arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo ITT",
                    Id = DataRefId.AircraftLimitsYellowLoITT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiITT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_ITT",
                    Units = "degC",
                    Description = "High value of the yellow arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi ITT",
                    Id = DataRefId.AircraftLimitsYellowHiITT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoITT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_ITT",
                    Units = "degC",
                    Description = "Low value of the red arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo ITT",
                    Id = DataRefId.AircraftLimitsRedLoITT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiITT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_ITT",
                    Units = "degC",
                    Description = "High value of the red arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi ITT",
                    Id = DataRefId.AircraftLimitsRedHiITT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoEGT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_EGT",
                    Units = "degC",
                    Description = "Low value of the green arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo EGT",
                    Id = DataRefId.AircraftLimitsGreenLoEGT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiEGT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_EGT",
                    Units = "degC",
                    Description = "High value of the green arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi EGT",
                    Id = DataRefId.AircraftLimitsGreenHiEGT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoEGT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_EGT",
                    Units = "degC",
                    Description = "Low value of the yellow arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo EGT",
                    Id = DataRefId.AircraftLimitsYellowLoEGT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiEGT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_EGT",
                    Units = "degC",
                    Description = "High value of the yellow arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi EGT",
                    Id = DataRefId.AircraftLimitsYellowHiEGT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoEGT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_EGT",
                    Units = "degC",
                    Description = "Low value of the red arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo EGT",
                    Id = DataRefId.AircraftLimitsRedLoEGT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiEGT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_EGT",
                    Units = "degC",
                    Description = "High value of the red arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi EGT",
                    Id = DataRefId.AircraftLimitsRedHiEGT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoCHT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_CHT",
                    Units = "degC",
                    Description = "Low value of the green arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo CHT",
                    Id = DataRefId.AircraftLimitsGreenLoCHT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiCHT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_CHT",
                    Units = "degC",
                    Description = "High value of the green arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi CHT",
                    Id = DataRefId.AircraftLimitsGreenHiCHT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoCHT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_CHT",
                    Units = "degC",
                    Description = "Low value of the yellow arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo CHT",
                    Id = DataRefId.AircraftLimitsYellowLoCHT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiCHT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_CHT",
                    Units = "degC",
                    Description = "High value of the yellow arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi CHT",
                    Id = DataRefId.AircraftLimitsYellowHiCHT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoCHT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_CHT",
                    Units = "degC",
                    Description = "Low value of the red arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo CHT",
                    Id = DataRefId.AircraftLimitsRedLoCHT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiCHT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_CHT",
                    Units = "degC",
                    Description = "High value of the red arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi CHT",
                    Id = DataRefId.AircraftLimitsRedHiCHT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoOilt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_oilT",
                    Units = "degC",
                    Description = "Low value of the green arc for the oil temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo Oilt",
                    Id = DataRefId.AircraftLimitsGreenLoOilt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiOilt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_oilT",
                    Units = "degC",
                    Description = "High value of the green arc for the oil temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi Oilt",
                    Id = DataRefId.AircraftLimitsGreenHiOilt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoOilt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_oilT",
                    Units = "degC",
                    Description = "Low value of the yellow arc for the oil temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo Oilt",
                    Id = DataRefId.AircraftLimitsYellowLoOilt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiOilt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_oilT",
                    Units = "degC",
                    Description = "High value of the yellow arc for the oil temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi Oilt",
                    Id = DataRefId.AircraftLimitsYellowHiOilt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoOilt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_oilT",
                    Units = "degC",
                    Description = "Low value of the red arc for the oil temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo Oilt",
                    Id = DataRefId.AircraftLimitsRedLoOilt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiOilt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_oilT",
                    Units = "degC",
                    Description = "High value of the red arc for the oil temperature instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi Oilt",
                    Id = DataRefId.AircraftLimitsRedHiOilt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoOilp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_oilP",
                    Units = "PSI",
                    Description = "Low value of the green arc for the oil pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo Oilp",
                    Id = DataRefId.AircraftLimitsGreenLoOilp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiOilp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_oilP",
                    Units = "PSI",
                    Description = "High value of the green arc for the oil pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi Oilp",
                    Id = DataRefId.AircraftLimitsGreenHiOilp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoOilp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_oilP",
                    Units = "PSI",
                    Description = "Low value of the yellow arc for the oil pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo Oilp",
                    Id = DataRefId.AircraftLimitsYellowLoOilp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiOilp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_oilP",
                    Units = "PSI",
                    Description = "High value of the yellow arc for the oil pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi Oilp",
                    Id = DataRefId.AircraftLimitsYellowHiOilp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoOilp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_oilP",
                    Units = "PSI",
                    Description = "Low value of the red arc for the oil pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo Oilp",
                    Id = DataRefId.AircraftLimitsRedLoOilp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiOilp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_oilP",
                    Units = "PSI",
                    Description = "High value of the red arc for the oil pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi Oilp",
                    Id = DataRefId.AircraftLimitsRedHiOilp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoFuelp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_fuelP",
                    Units = "PSI",
                    Description = "Low value of the green arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo Fuelp",
                    Id = DataRefId.AircraftLimitsGreenLoFuelp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiFuelp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_fuelP",
                    Units = "PSI",
                    Description = "High value of the green arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi Fuelp",
                    Id = DataRefId.AircraftLimitsGreenHiFuelp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoFuelp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_fuelP",
                    Units = "PSI",
                    Description = "Low value of the yellow arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo Fuelp",
                    Id = DataRefId.AircraftLimitsYellowLoFuelp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiFuelp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_fuelP",
                    Units = "PSI",
                    Description = "High value of the yellow arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi Fuelp",
                    Id = DataRefId.AircraftLimitsYellowHiFuelp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoFuelp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_fuelP",
                    Units = "PSI",
                    Description = "Low value of the red arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo Fuelp",
                    Id = DataRefId.AircraftLimitsRedLoFuelp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiFuelp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_fuelP",
                    Units = "PSI",
                    Description = "High value of the red arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi Fuelp",
                    Id = DataRefId.AircraftLimitsRedHiFuelp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoGenAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_gen_amp",
                    Units = "amps",
                    Description = "Low value of the green arc for the generator amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo Gen Amp",
                    Id = DataRefId.AircraftLimitsGreenLoGenAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiGenAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_gen_amp",
                    Units = "amps",
                    Description = "High value of the green arc for the generator amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi Gen Amp",
                    Id = DataRefId.AircraftLimitsGreenHiGenAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoGenAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_gen_amp",
                    Units = "amps",
                    Description = "Low value of the yellow arc for the generator amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo Gen Amp",
                    Id = DataRefId.AircraftLimitsYellowLoGenAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiGenAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_gen_amp",
                    Units = "amps",
                    Description = "High value of the yellow arc for the generator amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi Gen Amp",
                    Id = DataRefId.AircraftLimitsYellowHiGenAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoGenAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_gen_amp",
                    Units = "amps",
                    Description = "Low value of the red arc for the generator amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo Gen Amp",
                    Id = DataRefId.AircraftLimitsRedLoGenAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiGenAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_gen_amp",
                    Units = "amps",
                    Description = "High value of the red arc for the generator amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi Gen Amp",
                    Id = DataRefId.AircraftLimitsRedHiGenAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoBatAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_bat_amp",
                    Units = "amps",
                    Description = "Low value of the green arc for the battery amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo Bat Amp",
                    Id = DataRefId.AircraftLimitsGreenLoBatAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiBatAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_bat_amp",
                    Units = "amps",
                    Description = "High value of the green arc for the battery amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi Bat Amp",
                    Id = DataRefId.AircraftLimitsGreenHiBatAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoBatAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_bat_amp",
                    Units = "amps",
                    Description = "Low value of the yellow arc for the battery amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo Bat Amp",
                    Id = DataRefId.AircraftLimitsYellowLoBatAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiBatAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_bat_amp",
                    Units = "amps",
                    Description = "High value of the yellow arc for the battery amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi Bat Amp",
                    Id = DataRefId.AircraftLimitsYellowHiBatAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoBatAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_bat_amp",
                    Units = "amps",
                    Description = "Low value of the red arc for the battery amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo Bat Amp",
                    Id = DataRefId.AircraftLimitsRedLoBatAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiBatAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_bat_amp",
                    Units = "amps",
                    Description = "High value of the red arc for the battery amperage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi Bat Amp",
                    Id = DataRefId.AircraftLimitsRedHiBatAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsMaxBatAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/max_bat_amp",
                    Units = "amps",
                    Description = "Battery amp when the non-standby batteries are fully charged.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Max Bat Amp",
                    Id = DataRefId.AircraftLimitsMaxBatAmp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoBatVolt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_bat_volt",
                    Units = "volts",
                    Description = "Low value of the green arc for the battery voltage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo Bat Volt",
                    Id = DataRefId.AircraftLimitsGreenLoBatVolt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiBatVolt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_bat_volt",
                    Units = "volts",
                    Description = "High value of the green arc for the battery voltage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi Bat Volt",
                    Id = DataRefId.AircraftLimitsGreenHiBatVolt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoBatVolt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_bat_volt",
                    Units = "volts",
                    Description = "Low value of the yellow arc for the battery voltage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo Bat Volt",
                    Id = DataRefId.AircraftLimitsYellowLoBatVolt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiBatVolt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_bat_volt",
                    Units = "volts",
                    Description = "High value of the yellow arc for the battery voltage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi Bat Volt",
                    Id = DataRefId.AircraftLimitsYellowHiBatVolt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoBatVolt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_bat_volt",
                    Units = "volts",
                    Description = "Low value of the red arc for the battery voltage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo Bat Volt",
                    Id = DataRefId.AircraftLimitsRedLoBatVolt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiBatVolt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_bat_volt",
                    Units = "volts",
                    Description = "High value of the red arc for the battery voltage instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi Bat Volt",
                    Id = DataRefId.AircraftLimitsRedHiBatVolt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsMaxBatVoltStandard
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/max_bat_volt_standard",
                    Units = "volts",
                    Description = "This is the voltage when the standard (non-standby) batteries are fully charged.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Max Bat Volt Standard",
                    Id = DataRefId.AircraftLimitsMaxBatVoltStandard,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoVac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_vac",
                    Units = "psi",
                    Description = "Low value of the green arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo Vac",
                    Id = DataRefId.AircraftLimitsGreenLoVac,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiVac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_vac",
                    Units = "psi",
                    Description = "High value of the green arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi Vac",
                    Id = DataRefId.AircraftLimitsGreenHiVac,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoVac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_vac",
                    Units = "psi",
                    Description = "Low value of the yellow arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo Vac",
                    Id = DataRefId.AircraftLimitsYellowLoVac,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiVac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_vac",
                    Units = "psi",
                    Description = "High value of the yellow arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi Vac",
                    Id = DataRefId.AircraftLimitsYellowHiVac,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoVac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_vac",
                    Units = "psi",
                    Description = "Low value of the red arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo Vac",
                    Id = DataRefId.AircraftLimitsRedLoVac,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiVac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_vac",
                    Units = "psi",
                    Description = "High value of the red arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi Vac",
                    Id = DataRefId.AircraftLimitsRedHiVac,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsMaxVac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/max_vac",
                    Units = "psi",
                    Description = "Vacuum pressure put out when the engine is running at the bottom of red line (max vacuum).",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Max Vac",
                    Id = DataRefId.AircraftLimitsMaxVac,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoN1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_N1",
                    Units = "percent",
                    Description = "Low value of the green arc for the N1 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo N1",
                    Id = DataRefId.AircraftLimitsGreenLoN1,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiN1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_N1",
                    Units = "percent",
                    Description = "High value of the green arc for the N1 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi N1",
                    Id = DataRefId.AircraftLimitsGreenHiN1,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoN1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_N1",
                    Units = "percent",
                    Description = "Low value of the yellow arc for the N1 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo N1",
                    Id = DataRefId.AircraftLimitsYellowLoN1,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiN1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_N1",
                    Units = "percent",
                    Description = "High value of the yellow arc for the N1 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi N1",
                    Id = DataRefId.AircraftLimitsYellowHiN1,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoN1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_N1",
                    Units = "percent",
                    Description = "Low value of the red arc for the N1 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo N1",
                    Id = DataRefId.AircraftLimitsRedLoN1,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiN1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_N1",
                    Units = "percent",
                    Description = "High value of the red arc for the N1 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi N1",
                    Id = DataRefId.AircraftLimitsRedHiN1,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenLoN2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_N2",
                    Units = "percent",
                    Description = "Low value of the green arc for the N2 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Lo N2",
                    Id = DataRefId.AircraftLimitsGreenLoN2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsGreenHiN2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_N2",
                    Units = "percent",
                    Description = "High value of the green arc for the N2 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Green Hi N2",
                    Id = DataRefId.AircraftLimitsGreenHiN2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowLoN2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_N2",
                    Units = "percent",
                    Description = "Low value of the yellow arc for the N2 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Lo N2",
                    Id = DataRefId.AircraftLimitsYellowLoN2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsYellowHiN2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_N2",
                    Units = "percent",
                    Description = "High value of the yellow arc for the N2 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Yellow Hi N2",
                    Id = DataRefId.AircraftLimitsYellowHiN2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedLoN2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_N2",
                    Units = "percent",
                    Description = "Low value of the red arc for the N2 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Lo N2",
                    Id = DataRefId.AircraftLimitsRedLoN2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftLimitsRedHiN2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_N2",
                    Units = "percent",
                    Description = "High value of the red arc for the N2 instrument",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Limits Red Hi N2",
                    Id = DataRefId.AircraftLimitsRedHiN2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftPropAcfEnType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_en_type",
                    Units = "enum",
                    Description = "engine type - read only in v11, but you should NEVER EVER write this in v10 or earlier.  0=recip carb, 1=recip injected, 2=free turbine, 3=electric, 4=lo bypass jet, 5=hi bypass jet, 6=rocket, 7=tip rockets, 8=fixed turbine",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF En Type",
                    Id = DataRefId.AircraftPropAcfEnType,
                    Writable = false,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfRevthrustEq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_revthrust_eq",
                    Units = "???",
                    Description = "better organization to do it this way, NOTE : Used to be i8 in version 6",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Revthrust Eq",
                    Id = DataRefId.AircraftPropAcfRevthrustEq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftPropAcfPropType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_prop_type",
                    Units = "???",
                    Description = "prop type",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Prop Type",
                    Id = DataRefId.AircraftPropAcfPropType,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfPropGearRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_prop_gear_rat",
                    Units = "???",
                    Description = "prop to engine or common power source",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Prop Gear Rat",
                    Id = DataRefId.AircraftPropAcfPropGearRat,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfPropDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_prop_dir",
                    Units = "???",
                    Description = "1.0=CW, -1.0=CCW, float so we can multiply effects by floats - made NOT writable in 11.10.  YOU SHOULD NEVER WRITE THIS IN ANY VERSION OF X-PLANE.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Prop Dir",
                    Id = DataRefId.AircraftPropAcfPropDir,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfNumBlades
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_num_blades",
                    Units = "???",
                    Description = "float so we can multiply effects by floats",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Num Blades",
                    Id = DataRefId.AircraftPropAcfNumBlades,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfMinPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_min_pitch",
                    Units = "???",
                    Description = "by governor",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Min Pitch",
                    Id = DataRefId.AircraftPropAcfMinPitch,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfMaxPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_max_pitch",
                    Units = "???",
                    Description = "by governor",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Max Pitch",
                    Id = DataRefId.AircraftPropAcfMaxPitch,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfReversedPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_reversed_pitch",
                    Units = "???",
                    Description = "in reverse",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Reversed Pitch",
                    Id = DataRefId.AircraftPropAcfReversedPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftPropAcfSidecant
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_sidecant",
                    Units = "???",
                    Description = "this is physical geometry,",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Sidecant",
                    Id = DataRefId.AircraftPropAcfSidecant,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfVertcant
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_vertcant",
                    Units = "???",
                    Description = "built into planes & helos and changed with thrust vector",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Vertcant",
                    Id = DataRefId.AircraftPropAcfVertcant,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfPropMass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_prop_mass",
                    Units = "???",
                    Description = "mass of prop",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Prop Mass",
                    Id = DataRefId.AircraftPropAcfPropMass,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfMipropRpm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_miprop_rpm",
                    Units = "???",
                    Description = "MI for changing prop RPM",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Miprop Rpm",
                    Id = DataRefId.AircraftPropAcfMipropRpm,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfDiscarea
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_discarea",
                    Units = "???",
                    Description = "for total propwash",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Discarea",
                    Id = DataRefId.AircraftPropAcfDiscarea,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfRingarea
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_ringarea",
                    Units = "???",
                    Description = "area each ring of prop",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Ringarea",
                    Id = DataRefId.AircraftPropAcfRingarea,
                    Writable = true,
                    DataType = "float[16][10]"
                };
            }
        }
        private DataRefElement AircraftPropAcfDesRpmPrp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_des_rpm_prp",
                    Units = "???",
                    Description = "design point",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Des Rpm Prp",
                    Id = DataRefId.AircraftPropAcfDesRpmPrp,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfDesKtsAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_des_kts_acf",
                    Units = "???",
                    Description = "design point",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Des Kts ACF",
                    Id = DataRefId.AircraftPropAcfDesKtsAcf,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftPropAcfPartEq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_part_eq",
                    Units = "???",
                    Description = "[PART]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Prop ACF Part Eq",
                    Id = DataRefId.AircraftPropAcfPartEq,
                    Writable = false,
                    DataType = "int[95]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfRafl0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Rafl0",
                    Units = "string[40]",
                    Description = "array of airfoil names, per part",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Rafl0",
                    Id = DataRefId.AircraftPartsAcfRafl0,
                    Writable = false,
                    DataType = "byte[2920]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfRafl1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Rafl1",
                    Units = "string[40]",
                    Description = "file, not path",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Rafl1",
                    Id = DataRefId.AircraftPartsAcfRafl1,
                    Writable = true,
                    DataType = "byte[2920]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfTafl0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Tafl0",
                    Units = "string[40]",
                    Description = "file, not path",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Tafl0",
                    Id = DataRefId.AircraftPartsAcfTafl0,
                    Writable = false,
                    DataType = "byte[2920]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfTafl1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Tafl1",
                    Units = "string[40]",
                    Description = "file, not path",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Tafl1",
                    Id = DataRefId.AircraftPartsAcfTafl1,
                    Writable = true,
                    DataType = "byte[2920]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfEls
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_els",
                    Units = "???",
                    Description = "[WING]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Els",
                    Id = DataRefId.AircraftPartsAcfEls,
                    Writable = true,
                    DataType = "int[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfXarm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Xarm",
                    Units = "???",
                    Description = "[GEAR]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Xarm",
                    Id = DataRefId.AircraftPartsAcfXarm,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfYarm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Yarm",
                    Units = "???",
                    Description = "[GEAR]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Yarm",
                    Id = DataRefId.AircraftPartsAcfYarm,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfZarm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Zarm",
                    Units = "???",
                    Description = "[GEAR]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Zarm",
                    Id = DataRefId.AircraftPartsAcfZarm,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfXBodyAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_X_body_aero",
                    Units = "???",
                    Description = "[PART] body aero center offset from it's reference",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF X Body Aero",
                    Id = DataRefId.AircraftPartsAcfXBodyAero,
                    Writable = true,
                    DataType = "float[95]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfYBodyAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Y_body_aero",
                    Units = "???",
                    Description = "[PART] used for force build-up",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Y Body Aero",
                    Id = DataRefId.AircraftPartsAcfYBodyAero,
                    Writable = true,
                    DataType = "float[95]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfZBodyAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Z_body_aero",
                    Units = "???",
                    Description = "[PART]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Z Body Aero",
                    Id = DataRefId.AircraftPartsAcfZBodyAero,
                    Writable = true,
                    DataType = "float[95]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfCroot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Croot",
                    Units = "???",
                    Description = "[WING]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Croot",
                    Id = DataRefId.AircraftPartsAcfCroot,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfCtip
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_Ctip",
                    Units = "???",
                    Description = "[WING]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Ctip",
                    Id = DataRefId.AircraftPartsAcfCtip,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfDihed1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_dihed1",
                    Units = "???",
                    Description = "[WING]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Dihed1",
                    Id = DataRefId.AircraftPartsAcfDihed1,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfSweep1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_sweep1",
                    Units = "???",
                    Description = "[WING]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Sweep1",
                    Id = DataRefId.AircraftPartsAcfSweep1,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfSweep2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_sweep2",
                    Units = "???",
                    Description = "[WING]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Sweep2",
                    Id = DataRefId.AircraftPartsAcfSweep2,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfSemilenSEG
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_semilen_SEG",
                    Units = "???",
                    Description = "[WING] semilen this segment only",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Semilen SEG",
                    Id = DataRefId.AircraftPartsAcfSemilenSEG,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfSemilenJND
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_semilen_JND",
                    Units = "???",
                    Description = "[WING] semilen of the JOINED wing segments, all JOINED SEGMENTS, for AR and CDi and ground effect, etc.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Semilen JND",
                    Id = DataRefId.AircraftPartsAcfSemilenJND,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfE
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_e",
                    Units = "???",
                    Description = "[WING] Oswald's E",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF E",
                    Id = DataRefId.AircraftPartsAcfE,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfAR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_AR",
                    Units = "???",
                    Description = "[WING]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF AR",
                    Id = DataRefId.AircraftPartsAcfAR,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfDeltaFac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_delta_fac",
                    Units = "???",
                    Description = "[WING]",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Delta Fac",
                    Id = DataRefId.AircraftPartsAcfDeltaFac,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfS
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_s",
                    Units = "???",
                    Description = "s for each element for foils, and FRONT, SIDE, TOP for BODIES.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF S",
                    Id = DataRefId.AircraftPartsAcfS,
                    Writable = true,
                    DataType = "float[730]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfMac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_mac",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Mac",
                    Id = DataRefId.AircraftPartsAcfMac,
                    Writable = true,
                    DataType = "float[730]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfAnginc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_anginc",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Anginc",
                    Id = DataRefId.AircraftPartsAcfAnginc,
                    Writable = true,
                    DataType = "float[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfFlapeq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_flapEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Flapeq",
                    Id = DataRefId.AircraftPartsAcfFlapeq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftPartsAcfSlateq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_slatEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Slateq",
                    Id = DataRefId.AircraftPartsAcfSlateq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftPartsAcfSbrkeq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_sbrkEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Sbrkeq",
                    Id = DataRefId.AircraftPartsAcfSbrkeq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftPartsAcfAil1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_ail1",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Ail1",
                    Id = DataRefId.AircraftPartsAcfAil1,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfAil2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_ail2",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Ail2",
                    Id = DataRefId.AircraftPartsAcfAil2,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfSplr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_splr",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Splr",
                    Id = DataRefId.AircraftPartsAcfSplr,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfFlap
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_flap",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Flap",
                    Id = DataRefId.AircraftPartsAcfFlap,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfFlap2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_flap2",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Flap2",
                    Id = DataRefId.AircraftPartsAcfFlap2,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfSlat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_slat",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Slat",
                    Id = DataRefId.AircraftPartsAcfSlat,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfSbrk
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_sbrk",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Sbrk",
                    Id = DataRefId.AircraftPartsAcfSbrk,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfDrud
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_drud",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Drud",
                    Id = DataRefId.AircraftPartsAcfDrud,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfElev
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_elev",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Elev",
                    Id = DataRefId.AircraftPartsAcfElev,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfRudd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_rudd",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Rudd",
                    Id = DataRefId.AircraftPartsAcfRudd,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfRudd2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_rudd2",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Rudd2",
                    Id = DataRefId.AircraftPartsAcfRudd2,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfBodyR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_body_r",
                    Units = "meters",
                    Description = "[PART] Radius of part",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Body R",
                    Id = DataRefId.AircraftPartsAcfBodyR,
                    Writable = true,
                    DataType = "float[95]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_type",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Type",
                    Id = DataRefId.AircraftPartsAcfGearType,
                    Writable = true,
                    DataType = "int[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearLate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_latE",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Late",
                    Id = DataRefId.AircraftPartsAcfGearLate,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearLone
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_lonE",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Lone",
                    Id = DataRefId.AircraftPartsAcfGearLone,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearAxie
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_axiE",
                    Units = "???",
                    Description = "extended",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Axie",
                    Id = DataRefId.AircraftPartsAcfGearAxie,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearLatr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_latR",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Latr",
                    Id = DataRefId.AircraftPartsAcfGearLatr,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearLonr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_lonR",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Lonr",
                    Id = DataRefId.AircraftPartsAcfGearLonr,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearAxir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_axiR",
                    Units = "???",
                    Description = "retracted",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Axir",
                    Id = DataRefId.AircraftPartsAcfGearAxir,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearLatn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_latN",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Latn",
                    Id = DataRefId.AircraftPartsAcfGearLatn,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearLonn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_lonN",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Lonn",
                    Id = DataRefId.AircraftPartsAcfGearLonn,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearAxin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_axiN",
                    Units = "???",
                    Description = "now",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Axin",
                    Id = DataRefId.AircraftPartsAcfGearAxin,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearLeglen
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_leglen",
                    Units = "???",
                    Description = "gear param",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Leglen",
                    Id = DataRefId.AircraftPartsAcfGearLeglen,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearTirrad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_tirrad",
                    Units = "???",
                    Description = "gear param",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Tirrad",
                    Id = DataRefId.AircraftPartsAcfGearTirrad,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearcon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gearcon",
                    Units = "???",
                    Description = "gear param",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gearcon",
                    Id = DataRefId.AircraftPartsAcfGearcon,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGeardmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_geardmp",
                    Units = "???",
                    Description = "gear param",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Geardmp",
                    Id = DataRefId.AircraftPartsAcfGeardmp,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearstatdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gearstatdef",
                    Units = "???",
                    Description = "deflection... the gear TIRE LOCATION IS OFFSET DOWN BY THIS MUCH IN X-PLANE since people ALWAYS enter gear location UNDER DEFLECTION!",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gearstatdef",
                    Id = DataRefId.AircraftPartsAcfGearstatdef,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_deploy",
                    Units = "???",
                    Description = "landing gear deployment, 0.0->1.0",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Deploy",
                    Id = DataRefId.AircraftPartsAcfGearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearXnodef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_xnodef",
                    Units = "meters",
                    Description = "x location of the Nth gear's attach point relative to the CG, airplane coordinates.  This does not change as gear is raised.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Xnodef",
                    Id = DataRefId.AircraftPartsAcfGearXnodef,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearYnodef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_ynodef",
                    Units = "meters",
                    Description = "y location of the Nth gear's attach point relative to the CG, airplane coordinates.  This does not change as gear is raised.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Ynodef",
                    Id = DataRefId.AircraftPartsAcfGearYnodef,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftPartsAcfGearZnodef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/parts/acf_gear_znodef",
                    Units = "meters",
                    Description = "z location of the Nth gear's attach point relative to the CG, airplane coordinates.  This does not change as gear is raised.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Parts ACF Gear Znodef",
                    Id = DataRefId.AircraftPartsAcfGearZnodef,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftBodiesAcfFuseCd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/bodies/acf_fuse_cd",
                    Units = "???",
                    Description = "cd for fuselage",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Bodies ACF Fuse Cd",
                    Id = DataRefId.AircraftBodiesAcfFuseCd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftBodiesAcfFuseCdArray
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/bodies/acf_fuse_cd_array",
                    Units = "???",
                    Description = "[PART] cd for all parts",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Bodies ACF Fuse Cd Array",
                    Id = DataRefId.AircraftBodiesAcfFuseCdArray,
                    Writable = true,
                    DataType = "float[95]"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAil1Crat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ail1_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ail1crat",
                    Id = DataRefId.AircraftControlsAcfAil1Crat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAil1Up
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ail1_up",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ail1up",
                    Id = DataRefId.AircraftControlsAcfAil1Up,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAil1Dn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ail1_dn",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ail1dn",
                    Id = DataRefId.AircraftControlsAcfAil1Dn,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRSCMingovPrp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_RSC_mingov_prp",
                    Units = "rad/sec",
                    Description = "Minimum prop speed with governor on, radians/second",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF RSC Mingov Prp",
                    Id = DataRefId.AircraftControlsAcfRSCMingovPrp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRSCIdlespeedPrp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_RSC_idlespeed_prp",
                    Units = "rad/sec",
                    Description = "Prop idle speed radians/second",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF RSC Idlespeed Prp",
                    Id = DataRefId.AircraftControlsAcfRSCIdlespeedPrp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRSCRedlinePrp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_RSC_redline_prp",
                    Units = "rad/sec",
                    Description = "Max prop speed radians/second",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF RSC Redline Prp",
                    Id = DataRefId.AircraftControlsAcfRSCRedlinePrp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAil2Crat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ail2_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ail2crat",
                    Id = DataRefId.AircraftControlsAcfAil2Crat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAil2Up
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ail2_up",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ail2up",
                    Id = DataRefId.AircraftControlsAcfAil2Up,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAil2Dn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ail2_dn",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ail2dn",
                    Id = DataRefId.AircraftControlsAcfAil2Dn,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRSCMingreenPrp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_RSC_mingreen_prp",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF RSC Mingreen Prp",
                    Id = DataRefId.AircraftControlsAcfRSCMingreenPrp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRSCMaxgreenPrp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_RSC_maxgreen_prp",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF RSC Maxgreen Prp",
                    Id = DataRefId.AircraftControlsAcfRSCMaxgreenPrp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfElevCrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Elev Crat",
                    Id = DataRefId.AircraftControlsAcfElevCrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfElevUp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_up",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Elev Up",
                    Id = DataRefId.AircraftControlsAcfElevUp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfElevDn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_dn",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Elev Dn",
                    Id = DataRefId.AircraftControlsAcfElevDn,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfTrqMaxEng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_trq_max_eng",
                    Units = "newtonmeters",
                    Description = "????",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Trq Max Eng",
                    Id = DataRefId.AircraftControlsAcfTrqMaxEng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfTrqMaxPrp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_trq_max_prp",
                    Units = "newtonmeters",
                    Description = "NOTE : This is now the same as acf_trq_max_en in v7",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Trq Max Prp",
                    Id = DataRefId.AircraftControlsAcfTrqMaxPrp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRuddCrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rudd Crat",
                    Id = DataRefId.AircraftControlsAcfRuddCrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRuddLr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_lr",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rudd Lr",
                    Id = DataRefId.AircraftControlsAcfRuddLr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRuddRr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_rr",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rudd Rr",
                    Id = DataRefId.AircraftControlsAcfRuddRr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRud2Crat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rud2_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rud2crat",
                    Id = DataRefId.AircraftControlsAcfRud2Crat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRud2Lr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rud2_lr",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rud2lr",
                    Id = DataRefId.AircraftControlsAcfRud2Lr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRud2Rr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rud2_rr",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rud2rr",
                    Id = DataRefId.AircraftControlsAcfRud2Rr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfSplrCrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_splr_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Splr Crat",
                    Id = DataRefId.AircraftControlsAcfSplrCrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfSplrUp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_splr_up",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Splr Up",
                    Id = DataRefId.AircraftControlsAcfSplrUp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfSbrkCrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_sbrk_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Sbrk Crat",
                    Id = DataRefId.AircraftControlsAcfSbrkCrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfSbrk2Crat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_sbrk2_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Sbrk2crat",
                    Id = DataRefId.AircraftControlsAcfSbrk2Crat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfSbrkUp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_sbrk_up",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Sbrk Up",
                    Id = DataRefId.AircraftControlsAcfSbrkUp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfSbrk2Up
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_sbrk2_up",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Sbrk2up",
                    Id = DataRefId.AircraftControlsAcfSbrk2Up,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlapCrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap Crat",
                    Id = DataRefId.AircraftControlsAcfFlapCrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlap2Crat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap2_crat",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap2crat",
                    Id = DataRefId.AircraftControlsAcfFlap2Crat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlapDn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap_dn",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap Dn",
                    Id = DataRefId.AircraftControlsAcfFlapDn,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlap2Dn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap2_dn",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap2dn",
                    Id = DataRefId.AircraftControlsAcfFlap2Dn,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftControlsAcfHstbTrimUp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_hstb_trim_up",
                    Units = "degrees",
                    Description = "This is the maximum degrees deflection up for a horizontal stabilizer that moves during trim",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Hstb Trim Up",
                    Id = DataRefId.AircraftControlsAcfHstbTrimUp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfHstbTrimDn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_hstb_trim_dn",
                    Units = "degrees",
                    Description = "This is the maximum degrees deflection down for a horizontal stabilizer that moves during trim",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Hstb Trim Dn",
                    Id = DataRefId.AircraftControlsAcfHstbTrimDn,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlapType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap_type",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap Type",
                    Id = DataRefId.AircraftControlsAcfFlapType,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlap2Type
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap2_type",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap2type",
                    Id = DataRefId.AircraftControlsAcfFlap2Type,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlapCl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap_cl",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap Cl",
                    Id = DataRefId.AircraftControlsAcfFlapCl,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlapCd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap_cd",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap Cd",
                    Id = DataRefId.AircraftControlsAcfFlapCd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlapCm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap_cm",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap Cm",
                    Id = DataRefId.AircraftControlsAcfFlapCm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlap2Cl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap2_cl",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap2cl",
                    Id = DataRefId.AircraftControlsAcfFlap2Cl,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlap2Cd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap2_cd",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap2cd",
                    Id = DataRefId.AircraftControlsAcfFlap2Cd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlap2Cm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap2_cm",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap2cm",
                    Id = DataRefId.AircraftControlsAcfFlap2Cm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlapDetents
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap_detents",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap Detents",
                    Id = DataRefId.AircraftControlsAcfFlapDetents,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftControlsAcfFlapDeftime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_flap_deftime",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Flap Deftime",
                    Id = DataRefId.AircraftControlsAcfFlapDeftime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfSlatInc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_slat_inc",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Slat Inc",
                    Id = DataRefId.AircraftControlsAcfSlatInc,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfBlownFlapMinEngag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_blown_flap_min_engag",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Blown Flap Min Engag",
                    Id = DataRefId.AircraftControlsAcfBlownFlapMinEngag,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfTakeoffTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_takeoff_trim",
                    Units = "[-1..1]",
                    Description = "This is the trim position for takeoff expressed as a ratio, 1 = max up trim, -1 = max down trim.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Takeoff Trim",
                    Id = DataRefId.AircraftControlsAcfTakeoffTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfMinTrimElev
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_min_trim_elev",
                    Units = "[0..1]",
                    Description = "Maximum nose-down trim, expressed as a ratio of maximum nose-down elevator deflection",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Min Trim Elev",
                    Id = DataRefId.AircraftControlsAcfMinTrimElev,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfMaxTrimElev
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_max_trim_elev",
                    Units = "[0..1]",
                    Description = "Maximum nose-up trim, expressed as a ratio of maximum nose-up elevator deflection",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Max Trim Elev",
                    Id = DataRefId.AircraftControlsAcfMaxTrimElev,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfElevTrimSpeedrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_trim_speedrat",
                    Units = "ratio",
                    Description = "This is the speed of trim time, expressed as a ratio, where 1.0 means it takes 20 seconds to fully move trim from one extreme to the other.  2.0 means trim is twice as fast.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Elev Trim Speedrat",
                    Id = DataRefId.AircraftControlsAcfElevTrimSpeedrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfElevTab
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_tab",
                    Units = "[-1..1]",
                    Description = "This is the amount of elevator deflection (as a ratio of max) induced by the aerodynamic effect of trim tabs.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Elev Tab",
                    Id = DataRefId.AircraftControlsAcfElevTab,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfMinTrimAiln
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_min_trim_ailn",
                    Units = "[0..1]",
                    Description = "Maximum aileron downward trim, expressed as a ratio of maximum aileron downward travel",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Min Trim Ailn",
                    Id = DataRefId.AircraftControlsAcfMinTrimAiln,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfMaxTrimAiln
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_max_trim_ailn",
                    Units = "[0..1]",
                    Description = "Maximum aileron upward trim, expressed as a ratio of maximum aileron upward travel",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Max Trim Ailn",
                    Id = DataRefId.AircraftControlsAcfMaxTrimAiln,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAilnTrimSpeedrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ailn_trim_speedrat",
                    Units = "ratio",
                    Description = "This is the speed of trim time, expressed as a ratio, where 1.0 means it takes 20 seconds to fully move trim from one extreme to the other.  2.0 means trim is twice as fast.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ailn Trim Speedrat",
                    Id = DataRefId.AircraftControlsAcfAilnTrimSpeedrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAilnTab
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ailn_tab",
                    Units = "[-1..1]",
                    Description = "This is the amount of aileron deflection (as a ratio of max) induced by the aerodynamic effect of trim tabs.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ailn Tab",
                    Id = DataRefId.AircraftControlsAcfAilnTab,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfMinTrimRudd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_min_trim_rudd",
                    Units = "[0..1]",
                    Description = "Maximum rudder left trim, expressed as a ratio of maximum rudder left travel",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Min Trim Rudd",
                    Id = DataRefId.AircraftControlsAcfMinTrimRudd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfMaxTrimRudd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_max_trim_rudd",
                    Units = "[0..1]",
                    Description = "Maximum rudder right trim, expressed as a ratio of maximum rudder right travel",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Max Trim Rudd",
                    Id = DataRefId.AircraftControlsAcfMaxTrimRudd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRuddTrimSpeedrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_trim_speedrat",
                    Units = "ratio",
                    Description = "This is the speed of trim time, expressed as a ratio, where 1.0 means it takes 20 seconds to fully move trim from one extreme to the other.  2.0 means trim is twice as fast.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rudd Trim Speedrat",
                    Id = DataRefId.AircraftControlsAcfRuddTrimSpeedrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRuddTab
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_tab",
                    Units = "[0..1]",
                    Description = "This is the amount of rudder deflection (as a ratio of max) induced by the aerodynamic effect of trim tabs.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rudd Tab",
                    Id = DataRefId.AircraftControlsAcfRuddTab,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfElevDefTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_def_time",
                    Units = "secs",
                    Description = "Enter 0.0 to be able to deflect the controls as fast as the pilot can move the stick or the art stab system can command a deflection. If the plane has a hydraulic system and a max rate of control deflection, though, enter how long it takes to go from center to fully-deflected.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Elev Def Time",
                    Id = DataRefId.AircraftControlsAcfElevDefTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAilnDefTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ailn_def_time",
                    Units = "secs",
                    Description = "Enter 0.0 to be able to deflect the controls as fast as the pilot can move the stick or the art stab system can command a deflection. If the plane has a hydraulic system and a max rate of control deflection, though, enter how long it takes to go from center to fully-deflected.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ailn Def Time",
                    Id = DataRefId.AircraftControlsAcfAilnDefTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRuddDefTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_def_time",
                    Units = "secs",
                    Description = "Enter 0.0 to be able to deflect the controls as fast as the pilot can move the stick or the art stab system can command a deflection. If the plane has a hydraulic system and a max rate of control deflection, though, enter how long it takes to go from center to fully-deflected.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rudd Def Time",
                    Id = DataRefId.AircraftControlsAcfRuddDefTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfElevTrimTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_trim_time",
                    Units = "secs",
                    Description = "This is the total time taken for the elevator trim to go from one extreme to the other.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Elev Trim Time",
                    Id = DataRefId.AircraftControlsAcfElevTrimTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfAilnTrimTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ailn_trim_time",
                    Units = "secs",
                    Description = "This is the total time taken for the aileron trim to go from one extreme to the other.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Ailn Trim Time",
                    Id = DataRefId.AircraftControlsAcfAilnTrimTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfRuddTrimTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_trim_time",
                    Units = "secs",
                    Description = "This is the total time taken for the rudder trim to go from one extreme to the other.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Rudd Trim Time",
                    Id = DataRefId.AircraftControlsAcfRuddTrimTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfSpeedbrakeExtTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_speedbrake_ext_time",
                    Units = "secs",
                    Description = "Speedbrake time to extend.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Speedbrake Ext Time",
                    Id = DataRefId.AircraftControlsAcfSpeedbrakeExtTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftControlsAcfSpeedbrakeRetTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_speedbrake_ret_time",
                    Units = "secs",
                    Description = "Speedbrake time to retract.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Controls ACF Speedbrake Ret Time",
                    Id = DataRefId.AircraftControlsAcfSpeedbrakeRetTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftGearAcfGearRetract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_gear_retract",
                    Units = "bool",
                    Description = "Are any of the gear on this plane retractable.  We strongly recommend you DO NOT write to this dataref.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF Gear Retract",
                    Id = DataRefId.AircraftGearAcfGearRetract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftGearAcfGearIsSkid
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_gear_is_skid",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF Gear Is Skid",
                    Id = DataRefId.AircraftGearAcfGearIsSkid,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftGearAcfNwSteerdeg1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_nw_steerdeg1",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF Nw Steerdeg1",
                    Id = DataRefId.AircraftGearAcfNwSteerdeg1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftGearAcfNwSteerdeg2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_nw_steerdeg2",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF Nw Steerdeg2",
                    Id = DataRefId.AircraftGearAcfNwSteerdeg2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftGearAcfWaterRudLongarm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_water_rud_longarm",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF Water Rud Longarm",
                    Id = DataRefId.AircraftGearAcfWaterRudLongarm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftGearAcfWaterRudArea
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_water_rud_area",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF Water Rud Area",
                    Id = DataRefId.AircraftGearAcfWaterRudArea,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftGearAcfWaterRudMaxdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_water_rud_maxdef",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF Water Rud Maxdef",
                    Id = DataRefId.AircraftGearAcfWaterRudMaxdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftGearAcfHEqlbm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_h_eqlbm",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF H Eqlbm",
                    Id = DataRefId.AircraftGearAcfHEqlbm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftGearAcfTheEqlbm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_the_eqlbm",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF The Eqlbm",
                    Id = DataRefId.AircraftGearAcfTheEqlbm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftGearAcfGearDoorAngNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_gear_door_ang_now",
                    Units = "???",
                    Description = "door current angle, not in flite since it is geo and this is a nice place to keep all the door geo.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Gear ACF Gear Door Ang Now",
                    Id = DataRefId.AircraftGearAcfGearDoorAngNow,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement AircraftWeightAcfCgyOriginal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_cgY_original",
                    Units = "feet",
                    Description = "This is the ORIGINAL reference point in PM in _feet_.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF Cgy Original",
                    Id = DataRefId.AircraftWeightAcfCgyOriginal,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfCgzOriginal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_cgZ_original",
                    Units = "feet",
                    Description = "This is the ORIGINAL reference point in PM in _feet_.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF Cgz Original",
                    Id = DataRefId.AircraftWeightAcfCgzOriginal,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfJxxUnitmass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_Jxx_unitmass",
                    Units = "meters^2",
                    Description = "Moment of inertia per kg for the aircraft as a whole",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF Jxx Unitmass",
                    Id = DataRefId.AircraftWeightAcfJxxUnitmass,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfJyyUnitmass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_Jyy_unitmass",
                    Units = "meters^2",
                    Description = "Moment of inertia per kg for the aircraft as a whole",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF Jyy Unitmass",
                    Id = DataRefId.AircraftWeightAcfJyyUnitmass,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfJzzUnitmass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_Jzz_unitmass",
                    Units = "meters^2",
                    Description = "Moment of inertia per kg for the aircraft as a whole",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF Jzz Unitmass",
                    Id = DataRefId.AircraftWeightAcfJzzUnitmass,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfMEmpty
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_m_empty",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF M Empty",
                    Id = DataRefId.AircraftWeightAcfMEmpty,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfMDisplaced
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_m_displaced",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF M Displaced",
                    Id = DataRefId.AircraftWeightAcfMDisplaced,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfMMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_m_max",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF M Max",
                    Id = DataRefId.AircraftWeightAcfMMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfMFuelTot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_m_fuel_tot",
                    Units = "lbs",
                    Description = "Weight of total fuel - appears to be in lbs.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF M Fuel Tot",
                    Id = DataRefId.AircraftWeightAcfMFuelTot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfMJettison
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_m_jettison",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF M Jettison",
                    Id = DataRefId.AircraftWeightAcfMJettison,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftWeightAcfMDisplacedY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_m_displaced_y",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Weight ACF M Displaced Y",
                    Id = DataRefId.AircraftWeightAcfMDisplacedY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfJatoTheta
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_jato_theta",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Jato Theta",
                    Id = DataRefId.AircraftSpecialcontrolsAcfJatoTheta,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfJatoThrust
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_jato_thrust",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Jato Thrust",
                    Id = DataRefId.AircraftSpecialcontrolsAcfJatoThrust,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfJatoDur
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_jato_dur",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Jato Dur",
                    Id = DataRefId.AircraftSpecialcontrolsAcfJatoDur,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfJatoSfc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_jato_sfc",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Jato Sfc",
                    Id = DataRefId.AircraftSpecialcontrolsAcfJatoSfc,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfJatoY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_jato_Y",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Jato Y",
                    Id = DataRefId.AircraftSpecialcontrolsAcfJatoY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfJatoZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_jato_Z",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Jato Z",
                    Id = DataRefId.AircraftSpecialcontrolsAcfJatoZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfChuteArea
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_chute_area",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Chute Area",
                    Id = DataRefId.AircraftSpecialcontrolsAcfChuteArea,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfChuteY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_chute_Y",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Chute Y",
                    Id = DataRefId.AircraftSpecialcontrolsAcfChuteY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfChuteZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_chute_Z",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Chute Z",
                    Id = DataRefId.AircraftSpecialcontrolsAcfChuteZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfAil1pitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_ail1pitch",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Ail1pitch",
                    Id = DataRefId.AircraftSpecialcontrolsAcfAil1pitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfAil1flaps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_ail1flaps",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Ail1flaps",
                    Id = DataRefId.AircraftSpecialcontrolsAcfAil1flaps,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfAil2pitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_ail2pitch",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Ail2pitch",
                    Id = DataRefId.AircraftSpecialcontrolsAcfAil2pitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfAil2flaps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_ail2flaps",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Ail2flaps",
                    Id = DataRefId.AircraftSpecialcontrolsAcfAil2flaps,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfStabroll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_stabroll",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Stabroll",
                    Id = DataRefId.AircraftSpecialcontrolsAcfStabroll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfStabhdng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_stabhdng",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Stabhdng",
                    Id = DataRefId.AircraftSpecialcontrolsAcfStabhdng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfTvecPtch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_tvec_ptch",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Tvec Ptch",
                    Id = DataRefId.AircraftSpecialcontrolsAcfTvecPtch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfTvecRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_tvec_roll",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Tvec Roll",
                    Id = DataRefId.AircraftSpecialcontrolsAcfTvecRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfTvecHdng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_tvec_hdng",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Tvec Hdng",
                    Id = DataRefId.AircraftSpecialcontrolsAcfTvecHdng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfDiffThroWithHdng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_diff_thro_with_hdng",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Diff Thro With Hdng",
                    Id = DataRefId.AircraftSpecialcontrolsAcfDiffThroWithHdng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfTksCapLiter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_tks_cap_liter",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Tks Cap Liter",
                    Id = DataRefId.AircraftSpecialcontrolsAcfTksCapLiter,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfWarn1eq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_warn1EQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Warn1eq",
                    Id = DataRefId.AircraftSpecialcontrolsAcfWarn1eq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfGearhorneq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_gearhornEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Gearhorneq",
                    Id = DataRefId.AircraftSpecialcontrolsAcfGearhorneq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfAutosbrkeq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_autosbrkEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Autosbrkeq",
                    Id = DataRefId.AircraftSpecialcontrolsAcfAutosbrkeq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfAutofbrkeq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_autofbrkEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Autofbrkeq",
                    Id = DataRefId.AircraftSpecialcontrolsAcfAutofbrkeq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfAutosweepeq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_autosweepEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Autosweepeq",
                    Id = DataRefId.AircraftSpecialcontrolsAcfAutosweepeq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftSpecialcontrolsAcfAutoslateq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/specialcontrols/acf_autoslatEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Specialcontrols ACF Autoslateq",
                    Id = DataRefId.AircraftSpecialcontrolsAcfAutoslateq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfVecteq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_vectEQ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Vecteq",
                    Id = DataRefId.AircraftVtolcontrolsAcfVecteq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfVectarmz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_vectarmZ",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Vectarmz",
                    Id = DataRefId.AircraftVtolcontrolsAcfVectarmz,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfCyclicElev
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_cyclic_elev",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Cyclic Elev",
                    Id = DataRefId.AircraftVtolcontrolsAcfCyclicElev,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfCyclicAiln
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_cyclic_ailn",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Cyclic Ailn",
                    Id = DataRefId.AircraftVtolcontrolsAcfCyclicAiln,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfDelta3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_delta3",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Delta3",
                    Id = DataRefId.AircraftVtolcontrolsAcfDelta3,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfPuffl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_puffL",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Puffl",
                    Id = DataRefId.AircraftVtolcontrolsAcfPuffl,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfPuffm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_puffM",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Puffm",
                    Id = DataRefId.AircraftVtolcontrolsAcfPuffm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfPuffn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_puffN",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Puffn",
                    Id = DataRefId.AircraftVtolcontrolsAcfPuffn,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfTailWithColl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_tail_with_coll",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Tail With Coll",
                    Id = DataRefId.AircraftVtolcontrolsAcfTailWithColl,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfDiffCollWithRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_diff_coll_with_roll",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Diff Coll With Roll",
                    Id = DataRefId.AircraftVtolcontrolsAcfDiffCollWithRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfDiffCollWithHdng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_diff_coll_with_hdng",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Diff Coll With Hdng",
                    Id = DataRefId.AircraftVtolcontrolsAcfDiffCollWithHdng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfDiffCyclWithHdngLon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_diff_cycl_with_hdng_lon",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Diff Cycl With Hdng Lon",
                    Id = DataRefId.AircraftVtolcontrolsAcfDiffCyclWithHdngLon,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfAutoRpmWithTvec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_auto_rpm_with_tvec",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Auto Rpm With Tvec",
                    Id = DataRefId.AircraftVtolcontrolsAcfAutoRpmWithTvec,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfRotorTrimMaxFwd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_rotor_trim_max_fwd",
                    Units = "degrees",
                    Description = "max rotor trim aft when stick fully forward",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Rotor Trim Max Fwd",
                    Id = DataRefId.AircraftVtolcontrolsAcfRotorTrimMaxFwd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftVtolcontrolsAcfRotorTrimMaxAft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_rotor_trim_max_aft",
                    Units = "degrees",
                    Description = "max rotor trim aft when stick fully aft",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Vtolcontrols ACF Rotor Trim Max Aft",
                    Id = DataRefId.AircraftVtolcontrolsAcfRotorTrimMaxAft,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAshiv
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_AShiV",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Ashiv",
                    Id = DataRefId.AircraftArtstabilityAcfAshiv,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAslov
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASloV",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Aslov",
                    Id = DataRefId.AircraftArtstabilityAcfAslov,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAsmaxpLo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASmaxp_lo",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asmaxp Lo",
                    Id = DataRefId.AircraftArtstabilityAcfAsmaxpLo,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAspLoRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASp_lo_rate",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asp Lo Rate",
                    Id = DataRefId.AircraftArtstabilityAcfAspLoRate,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAsmaxpHi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASmaxp_hi",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asmaxp Hi",
                    Id = DataRefId.AircraftArtstabilityAcfAsmaxpHi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAspHiPos
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASp_hi_pos",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asp Hi Pos",
                    Id = DataRefId.AircraftArtstabilityAcfAspHiPos,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAsmaxhLo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASmaxh_lo",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asmaxh Lo",
                    Id = DataRefId.AircraftArtstabilityAcfAsmaxhLo,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAshLoRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASh_lo_rate",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Ash Lo Rate",
                    Id = DataRefId.AircraftArtstabilityAcfAshLoRate,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAsmaxhHi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASmaxh_hi",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asmaxh Hi",
                    Id = DataRefId.AircraftArtstabilityAcfAsmaxhHi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAshHiPos
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASh_hi_pos",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Ash Hi Pos",
                    Id = DataRefId.AircraftArtstabilityAcfAshHiPos,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAsmaxrLo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASmaxr_lo",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asmaxr Lo",
                    Id = DataRefId.AircraftArtstabilityAcfAsmaxrLo,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAsrLoRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASr_lo_rate",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asr Lo Rate",
                    Id = DataRefId.AircraftArtstabilityAcfAsrLoRate,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAsmaxrHi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASmaxr_hi",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asmaxr Hi",
                    Id = DataRefId.AircraftArtstabilityAcfAsmaxrHi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfAsrHiRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_ASr_hi_rate",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Asr Hi Rate",
                    Id = DataRefId.AircraftArtstabilityAcfAsrHiRate,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftArtstabilityAcfHasClutch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/artstability/acf_has_clutch",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Artstability ACF Has Clutch",
                    Id = DataRefId.AircraftArtstabilityAcfHasClutch,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfStabDelincToVne
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_stab_delinc_to_Vne",
                    Units = "degree",
                    Description = "amount the stab moves in trim automatically as you go to redline (zero at zero airspeed)",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Stab Delinc To Vne",
                    Id = DataRefId.AircraftOverflowAcfStabDelincToVne,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfVmca
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_Vmca",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Vmca",
                    Id = DataRefId.AircraftOverflowAcfVmca,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfVyse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_Vyse",
                    Units = "???",
                    Description = "v-speeds",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Vyse",
                    Id = DataRefId.AircraftOverflowAcfVyse,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfFlapArm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_flap_arm",
                    Units = "???",
                    Description = "flapping hinge arm",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Flap Arm",
                    Id = DataRefId.AircraftOverflowAcfFlapArm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCgzFwd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cgZ_fwd",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cgz Fwd",
                    Id = DataRefId.AircraftOverflowAcfCgzFwd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCgzAft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cgZ_aft",
                    Units = "???",
                    Description = "cg limits",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cgz Aft",
                    Id = DataRefId.AircraftOverflowAcfCgzAft,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfGearCycTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_gear_cyc_time",
                    Units = "???",
                    Description = "gear cycle time... different for different gear in some cases, NOTE : This used to be f5 in v6",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Gear Cyc Time",
                    Id = DataRefId.AircraftOverflowAcfGearCycTime,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfRefuelX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_refuel_X",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Refuel X",
                    Id = DataRefId.AircraftOverflowAcfRefuelX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfRefuelY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_refuel_Y",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Refuel Y",
                    Id = DataRefId.AircraftOverflowAcfRefuelY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfRefuelZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_refuel_Z",
                    Units = "???",
                    Description = "refueling port location",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Refuel Z",
                    Id = DataRefId.AircraftOverflowAcfRefuelZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfGearSteers
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_gear_steers",
                    Units = "???",
                    Description = "this gear turns with rudder input - writable until v10",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Gear Steers",
                    Id = DataRefId.AircraftOverflowAcfGearSteers,
                    Writable = false,
                    DataType = "int[10]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfDihed2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_dihed2",
                    Units = "???",
                    Description = "[WING] variable dihedral",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Dihed2",
                    Id = DataRefId.AircraftOverflowAcfDihed2,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement AircraftOverflowJettX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/jett_X",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow Jett X",
                    Id = DataRefId.AircraftOverflowJettX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowJettY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/jett_Y",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow Jett Y",
                    Id = DataRefId.AircraftOverflowJettY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowJettZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/jett_Z",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow Jett Z",
                    Id = DataRefId.AircraftOverflowJettZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfPuffx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_puffX",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Puffx",
                    Id = DataRefId.AircraftOverflowAcfPuffx,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfPuffy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_puffY",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Puffy",
                    Id = DataRefId.AircraftOverflowAcfPuffy,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfPuffz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_puffZ",
                    Units = "???",
                    Description = "manuevering rocket forces",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Puffz",
                    Id = DataRefId.AircraftOverflowAcfPuffz,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfVle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_Vle",
                    Units = "???",
                    Description = "Vle",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Vle",
                    Id = DataRefId.AircraftOverflowAcfVle,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfAspHiRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_ASp_hi_rate",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Asp Hi Rate",
                    Id = DataRefId.AircraftOverflowAcfAspHiRate,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfAshHiRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_ASh_hi_rate",
                    Units = "???",
                    Description = "astab stuff i should have had in there the first time!",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Ash Hi Rate",
                    Id = DataRefId.AircraftOverflowAcfAshHiRate,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfElevflaps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_elevflaps",
                    Units = "???",
                    Description = "elevator align with flaps",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Elevflaps",
                    Id = DataRefId.AircraftOverflowAcfElevflaps,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfTankX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_tank_X",
                    Units = "???",
                    Description = "fuel tank locations when empty - was dim 3 in XP8 and earlier",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Tank X",
                    Id = DataRefId.AircraftOverflowAcfTankX,
                    Writable = true,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfTankY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_tank_Y",
                    Units = "???",
                    Description = "fuel tank locations when empty - was dim 3 in XP8 and earlier",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Tank Y",
                    Id = DataRefId.AircraftOverflowAcfTankY,
                    Writable = true,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfTankZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_tank_Z",
                    Units = "???",
                    Description = "fuel tank locations when empty - was dim 3 in XP8 and earlier",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Tank Z",
                    Id = DataRefId.AircraftOverflowAcfTankZ,
                    Writable = true,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfTankXFull
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_tank_X_full",
                    Units = "???",
                    Description = "fuel tank locations when full - was dim 3 in XP8 and earlier",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Tank X Full",
                    Id = DataRefId.AircraftOverflowAcfTankXFull,
                    Writable = true,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfTankYFull
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_tank_Y_full",
                    Units = "???",
                    Description = "fuel tank locations when full - was dim 3 in XP8 and earlier",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Tank Y Full",
                    Id = DataRefId.AircraftOverflowAcfTankYFull,
                    Writable = true,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfTankZFull
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_tank_Z_full",
                    Units = "???",
                    Description = "fuel tank locations when full - was dim 3 in XP8 and earlier",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Tank Z Full",
                    Id = DataRefId.AircraftOverflowAcfTankZFull,
                    Writable = true,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfTankRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_tank_rat",
                    Units = "???",
                    Description = "fuel tank ratio per tank -- was dim 3 in xp 8 and earlier",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Tank Rat",
                    Id = DataRefId.AircraftOverflowAcfTankRat,
                    Writable = true,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfStallWarnAlpha
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_stall_warn_alpha",
                    Units = "???",
                    Description = "alpha of stall warning... user must specify since warning different for different planes.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Stall Warn Alpha",
                    Id = DataRefId.AircraftOverflowAcfStallWarnAlpha,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfMassShift
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_mass_shift",
                    Units = "???",
                    Description = "hang-gliders and wright gliders",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Mass Shift",
                    Id = DataRefId.AircraftOverflowAcfMassShift,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfMassShiftDx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_mass_shift_dx",
                    Units = "???",
                    Description = "hang-gliders and wright gliders",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Mass Shift Dx",
                    Id = DataRefId.AircraftOverflowAcfMassShiftDx,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfMassShiftDz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_mass_shift_dz",
                    Units = "???",
                    Description = "hang-gliders and wright gliders",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Mass Shift Dz",
                    Id = DataRefId.AircraftOverflowAcfMassShiftDz,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfFeatheredPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_feathered_pitch",
                    Units = "???",
                    Description = "let people decide feathered pitch to get right for their plane.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Feathered Pitch",
                    Id = DataRefId.AircraftOverflowAcfFeatheredPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfAsmaxgHi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_ASmaxg_hi",
                    Units = "???",
                    Description = "astab stuff I should have had in there the first time!",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Asmaxg Hi",
                    Id = DataRefId.AircraftOverflowAcfAsmaxgHi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfAsgHiPos
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_ASg_hi_pos",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Asg Hi Pos",
                    Id = DataRefId.AircraftOverflowAcfAsgHiPos,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfAsgHiRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_ASg_hi_rate",
                    Units = "???",
                    Description = "astab stuff I should have had in there the first time!",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Asg Hi Rate",
                    Id = DataRefId.AircraftOverflowAcfAsgHiRate,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfWingTiltPtch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_wing_tilt_ptch",
                    Units = "???",
                    Description = "wing-tilt steering",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Wing Tilt Ptch",
                    Id = DataRefId.AircraftOverflowAcfWingTiltPtch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfWingTiltRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_wing_tilt_roll",
                    Units = "???",
                    Description = "wing-tilt steering",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Wing Tilt Roll",
                    Id = DataRefId.AircraftOverflowAcfWingTiltRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfMaxPressDiff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_max_press_diff",
                    Units = "pascals",
                    Description = "max pressurization of the fuselage",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Max Press Diff",
                    Id = DataRefId.AircraftOverflowAcfMaxPressDiff,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfO2BottleCapLiters
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_o2_bottle_cap_liters",
                    Units = "liters",
                    Description = "capacity of the crew oxygen reserve",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF O2bottle Cap Liters",
                    Id = DataRefId.AircraftOverflowAcfO2BottleCapLiters,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfDiffCollWithPtch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_diff_coll_with_ptch",
                    Units = "???",
                    Description = "used by x-19",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Diff Coll With Ptch",
                    Id = DataRefId.AircraftOverflowAcfDiffCollWithPtch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfFlapRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_flap_roll",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Flap Roll",
                    Id = DataRefId.AircraftOverflowAcfFlapRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfFlapPtch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_flap_ptch",
                    Units = "???",
                    Description = "flap actuation... like for really high-lift guys still manuevering at low speeds.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Flap Ptch",
                    Id = DataRefId.AircraftOverflowAcfFlapPtch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfDiffCyclWithHdngLat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_diff_cycl_with_hdng_lat",
                    Units = "???",
                    Description = "ch-47 chinook performance",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Diff Cycl With Hdng Lat",
                    Id = DataRefId.AircraftOverflowAcfDiffCyclWithHdngLat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfPhaseTvectOutAt90
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_phase_tvect_out_at_90",
                    Units = "???",
                    Description = "phase thrust-vectoring maneuvering in as we go from 90 to 0, going from hover with puffers to f-22 dogfight",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Phase Tvect Out At90",
                    Id = DataRefId.AircraftOverflowAcfPhaseTvectOutAt90,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfRollCo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_roll_co",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Roll Co",
                    Id = DataRefId.AircraftOverflowAcfRollCo,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfBrakeCo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_brake_co",
                    Units = "???",
                    Description = "rolling and braking",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Brake Co",
                    Id = DataRefId.AircraftOverflowAcfBrakeCo,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfDriveByWire
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_drive_by_wire",
                    Units = "???",
                    Description = "engine always runs at optimum mixture... like FADEC or auto conversions.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Drive By Wire",
                    Id = DataRefId.AircraftOverflowAcfDriveByWire,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfIsGlossy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_is_glossy",
                    Units = "???",
                    Description = "plane has specularity lighting.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Is Glossy",
                    Id = DataRefId.AircraftOverflowAcfIsGlossy,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfNumTanks
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_num_tanks",
                    Units = "count",
                    Description = "number fuel tanks - as of 860, all planes have 9 tanks and ratios for each - ratio of 0.0 means tank is not used",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Num Tanks",
                    Id = DataRefId.AircraftOverflowAcfNumTanks,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfHasRefuel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_has_refuel",
                    Units = "???",
                    Description = "refueling port",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Has Refuel",
                    Id = DataRefId.AircraftOverflowAcfHasRefuel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfJettIsSlung
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_jett_is_slung",
                    Units = "???",
                    Description = "jettisonable load is slung now",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Jett Is Slung",
                    Id = DataRefId.AircraftOverflowAcfJettIsSlung,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfEngMass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_eng_mass",
                    Units = "???",
                    Description = "mass of each engine for distribution and loss on engine separation. NOTE : This used to be f57 in v6",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Eng Mass",
                    Id = DataRefId.AircraftOverflowAcfEngMass,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfPhaseTvectOutAt00
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_phase_tvect_out_at_00",
                    Units = "???",
                    Description = "phase thrust-vectoring maneuvering out as we go from 90 to 0 deg tvec, going from maneuver-to-hover to regular thrust",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Phase Tvect Out At00",
                    Id = DataRefId.AircraftOverflowAcfPhaseTvectOutAt00,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfAutoTrimeq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_auto_trimEQ",
                    Units = "boolean",
                    Description = "auto-trim out any flight loads... numerous planes have this.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Auto Trimeq",
                    Id = DataRefId.AircraftOverflowAcfAutoTrimeq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfHasDCFd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_has_DC_fd",
                    Units = "???",
                    Description = "has dual-cue flight-dir",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Has DC Fd",
                    Id = DataRefId.AircraftOverflowAcfHasDCFd,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfFlapsWithGeareq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_flaps_with_gearEQ",
                    Units = "???",
                    Description = "the Jatviggen does flaps with gear automatically",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Flaps With Geareq",
                    Id = DataRefId.AircraftOverflowAcfFlapsWithGeareq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfRevOnTouchdown
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_rev_on_touchdown",
                    Units = "???",
                    Description = "viggen does this!",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Rev On Touchdown",
                    Id = DataRefId.AircraftOverflowAcfRevOnTouchdown,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfFlapsWithVeceq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_flaps_with_vecEQ",
                    Units = "???",
                    Description = "bring in the flaps with thrust vector",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Flaps With Veceq",
                    Id = DataRefId.AircraftOverflowAcfFlapsWithVeceq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfWarn2eq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_warn2EQ",
                    Units = "???",
                    Description = "bitchin betty 2... for fighters",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Warn2eq",
                    Id = DataRefId.AircraftOverflowAcfWarn2eq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfNumThrustpoints
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_num_thrustpoints",
                    Units = "???",
                    Description = "number props can be different than number of engines - * This can crash Xplane, use at your own risk.  Not writeable in v10.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Num Thrustpoints",
                    Id = DataRefId.AircraftOverflowAcfNumThrustpoints,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusRndUse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_rnd_use",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Rnd Use",
                    Id = DataRefId.AircraftOverflowAcfCusRndUse,
                    Writable = true,
                    DataType = "int[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusRndLoVal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_rnd_lo_val",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Rnd Lo Val",
                    Id = DataRefId.AircraftOverflowAcfCusRndLoVal,
                    Writable = true,
                    DataType = "float[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusRndHiVal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_rnd_hi_val",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Rnd Hi Val",
                    Id = DataRefId.AircraftOverflowAcfCusRndHiVal,
                    Writable = true,
                    DataType = "float[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusRndLoAng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_rnd_lo_ang",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Rnd Lo Ang",
                    Id = DataRefId.AircraftOverflowAcfCusRndLoAng,
                    Writable = true,
                    DataType = "float[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusRndHiAng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_rnd_hi_ang",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Rnd Hi Ang",
                    Id = DataRefId.AircraftOverflowAcfCusRndHiAng,
                    Writable = true,
                    DataType = "float[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfHasBeta
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_has_beta",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Has Beta",
                    Id = DataRefId.AircraftOverflowAcfHasBeta,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusRndMirror
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_rnd_mirror",
                    Units = "???",
                    Description = "mirror the angles on even-number engines on the twins",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Rnd Mirror",
                    Id = DataRefId.AircraftOverflowAcfCusRndMirror,
                    Writable = true,
                    DataType = "int[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusRndLabel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_rnd_label",
                    Units = "???",
                    Description = "draw labels on the instruments... many do not label the scales, only draw digital numbers.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Rnd Label",
                    Id = DataRefId.AircraftOverflowAcfCusRndLabel,
                    Writable = true,
                    DataType = "int[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusDigUse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_dig_use",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Dig Use",
                    Id = DataRefId.AircraftOverflowAcfCusDigUse,
                    Writable = true,
                    DataType = "int[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusDigOffset
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_dig_offset",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Dig Offset",
                    Id = DataRefId.AircraftOverflowAcfCusDigOffset,
                    Writable = true,
                    DataType = "float[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusDigScale
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_dig_scale",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Dig Scale",
                    Id = DataRefId.AircraftOverflowAcfCusDigScale,
                    Writable = true,
                    DataType = "float[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusDigDig
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_dig_dig",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Dig Dig",
                    Id = DataRefId.AircraftOverflowAcfCusDigDig,
                    Writable = true,
                    DataType = "int[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfCusDigDec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cus_dig_dec",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Cus Dig Dec",
                    Id = DataRefId.AircraftOverflowAcfCusDigDec,
                    Writable = true,
                    DataType = "int[50]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfIncAil
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_inc_ail",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Inc Ail",
                    Id = DataRefId.AircraftOverflowAcfIncAil,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfIncAil2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_inc_ail2",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Inc Ail2",
                    Id = DataRefId.AircraftOverflowAcfIncAil2,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfIncVec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_inc_vec",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Inc Vec",
                    Id = DataRefId.AircraftOverflowAcfIncVec,
                    Writable = true,
                    DataType = "int[56][10]"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfTowHookY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_tow_hook_Y",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Tow Hook Y",
                    Id = DataRefId.AircraftOverflowAcfTowHookY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfTowHookZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_tow_hook_Z",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Tow Hook Z",
                    Id = DataRefId.AircraftOverflowAcfTowHookZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfWinHookY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_win_hook_Y",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Win Hook Y",
                    Id = DataRefId.AircraftOverflowAcfWinHookY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfWinHookZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_win_hook_Z",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Win Hook Z",
                    Id = DataRefId.AircraftOverflowAcfWinHookZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfNosewheelK
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_nosewheel_k",
                    Units = "???",
                    Description = "tail wheel spring constant (per degree offset from centered)",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Nosewheel K",
                    Id = DataRefId.AircraftOverflowAcfNosewheelK,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfVectarmy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_vectarmY",
                    Units = "???",
                    Description = "prop needs offset in z and y from the pivot point... z for V-22, y for motorgliders",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Vectarmy",
                    Id = DataRefId.AircraftOverflowAcfVectarmy,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfHidePropAt90Vect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_hide_prop_at_90_vect",
                    Units = "???",
                    Description = "for those motorgliders or prop/jet combos or what have you that hide their props when not in use",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Hide Prop At90vect",
                    Id = DataRefId.AircraftOverflowAcfHidePropAt90Vect,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfHasFuelAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_has_fuel_all",
                    Units = "???",
                    Description = "Aircraft has option to draw from any tank",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Has Fuel All",
                    Id = DataRefId.AircraftOverflowAcfHasFuelAll,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowAcfHasFuelAny
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_has_fuel_any",
                    Units = "boolean",
                    Description = "Aircraft has Fuel selector",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow ACF Has Fuel Any",
                    Id = DataRefId.AircraftOverflowAcfHasFuelAny,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowHasHsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/has_hsi",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow Has Hsi",
                    Id = DataRefId.AircraftOverflowHasHsi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowHasYawdampBut
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/has_yawdamp_but",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow Has Yawdamp But",
                    Id = DataRefId.AircraftOverflowHasYawdampBut,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowHasTransonicAudio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/has_transonic_audio",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow Has Transonic Audio",
                    Id = DataRefId.AircraftOverflowHasTransonicAudio,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowHasPreRotate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/has_pre_rotate",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow Has Pre Rotate",
                    Id = DataRefId.AircraftOverflowHasPreRotate,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCAltLoPRP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_alt_lo_PRP",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Alt Lo PRP",
                    Id = DataRefId.AircraftOverflowSFCAltLoPRP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCHalfLoPRP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_half_lo_PRP",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Half Lo PRP",
                    Id = DataRefId.AircraftOverflowSFCHalfLoPRP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCFullLoPRP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_full_lo_PRP",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Full Lo PRP",
                    Id = DataRefId.AircraftOverflowSFCFullLoPRP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCAltHiPRP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_alt_hi_PRP",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Alt Hi PRP",
                    Id = DataRefId.AircraftOverflowSFCAltHiPRP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCHalfHiPRP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_half_hi_PRP",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Half Hi PRP",
                    Id = DataRefId.AircraftOverflowSFCHalfHiPRP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCFullHiPRP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_full_hi_PRP",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Full Hi PRP",
                    Id = DataRefId.AircraftOverflowSFCFullHiPRP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowFfRatIdlePRP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/ff_rat_idle_PRP",
                    Units = "ratio",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow Ff Rat Idle PRP",
                    Id = DataRefId.AircraftOverflowFfRatIdlePRP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCAltLoJET
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_alt_lo_JET",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Alt Lo JET",
                    Id = DataRefId.AircraftOverflowSFCAltLoJET,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCHalfLoJET
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_half_lo_JET",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Half Lo JET",
                    Id = DataRefId.AircraftOverflowSFCHalfLoJET,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCFullLoJET
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_full_lo_JET",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Full Lo JET",
                    Id = DataRefId.AircraftOverflowSFCFullLoJET,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCAltHiJET
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_alt_hi_JET",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Alt Hi JET",
                    Id = DataRefId.AircraftOverflowSFCAltHiJET,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCHalfHiJET
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_half_hi_JET",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Half Hi JET",
                    Id = DataRefId.AircraftOverflowSFCHalfHiJET,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowSFCFullHiJET
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_full_hi_JET",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow SFC Full Hi JET",
                    Id = DataRefId.AircraftOverflowSFCFullHiJET,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftOverflowFfRatIdleJET
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/overflow/ff_rat_idle_JET",
                    Units = "ratio",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Overflow Ff Rat Idle JET",
                    Id = DataRefId.AircraftOverflowFfRatIdleJET,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement AircraftSystemsFdirNeededToEngageServos
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft/systems/fdir_needed_to_engage_servos",
                    Units = "boolean",
                    Description = "If this is true, commands to engage the AP servos will be ignored if the FD is not on.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft Systems Fdir Needed To Engage Servos",
                    Id = DataRefId.AircraftSystemsFdirNeededToEngageServos,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AirfoilsAflClb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_clB",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl Clb",
                    Id = DataRefId.AirfoilsAflClb,
                    Writable = true,
                    DataType = "float[56][2][2]"
                };
            }
        }
        private DataRefElement AirfoilsAflAlminArray
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_almin_array",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl Almin Array",
                    Id = DataRefId.AirfoilsAflAlminArray,
                    Writable = true,
                    DataType = "float[56][2][2]"
                };
            }
        }
        private DataRefElement AirfoilsAflAlmaxArray
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_almax_array",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl Almax Array",
                    Id = DataRefId.AirfoilsAflAlmaxArray,
                    Writable = true,
                    DataType = "float[56][2][2]"
                };
            }
        }
        private DataRefElement AirfoilsAflReNum
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_re_num",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl Re Num",
                    Id = DataRefId.AirfoilsAflReNum,
                    Writable = true,
                    DataType = "float[56][2][2]"
                };
            }
        }
        private DataRefElement AirfoilsAflTRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_t_rat",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl T Rat",
                    Id = DataRefId.AirfoilsAflTRat,
                    Writable = true,
                    DataType = "float[56][2]"
                };
            }
        }
        private DataRefElement AirfoilsAflMachDiv
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_mach_div",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl Mach Div",
                    Id = DataRefId.AirfoilsAflMachDiv,
                    Writable = true,
                    DataType = "float[56][2]"
                };
            }
        }
        private DataRefElement AirfoilsAflClm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_clM",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl Clm",
                    Id = DataRefId.AirfoilsAflClm,
                    Writable = true,
                    DataType = "float[56][2][2]"
                };
            }
        }
        private DataRefElement AirfoilsAflCl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_cl",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl Cl",
                    Id = DataRefId.AirfoilsAflCl,
                    Writable = true,
                    DataType = "float[56][2][2][721]"
                };
            }
        }
        private DataRefElement AirfoilsAflCd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_cd",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl Cd",
                    Id = DataRefId.AirfoilsAflCd,
                    Writable = true,
                    DataType = "float[56][2][2][721]"
                };
            }
        }
        private DataRefElement AirfoilsAflCm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/airfoils/afl_cm",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Airfoils Afl Cm",
                    Id = DataRefId.AirfoilsAflCm,
                    Writable = true,
                    DataType = "float[56][2][2][721]"
                };
            }
        }
        private DataRefElement AtcUserAircraftTransmitting
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/user_aircraft_transmitting",
                    Units = "boolean",
                    Description = "Is the Users/P0 aircraft currently transmitting on the radio?",
                    Frequency = DefaultFrequency,
                    Name = "ATC User Aircraft Transmitting",
                    Id = DataRefId.AtcUserAircraftTransmitting,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AtcCom1TunedFacility
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/com1_tuned_facility",
                    Units = "enum",
                    Description = "The ATC facility type that the user's aircraft is tuned to. 0=None, 1=Del, 2=Gnd, 3=Twr, 4=Tracon, 5=Ctr",
                    Frequency = DefaultFrequency,
                    Name = "ATC Com1tuned Facility",
                    Id = DataRefId.AtcCom1TunedFacility,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AtcCom2TunedFacility
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/com2_tuned_facility",
                    Units = "enum",
                    Description = "The ATC facility type that the user's aircraft is tuned to. 0=None, 1=Del, 2=Gnd, 3=Twr, 4=Tracon, 5=Ctr",
                    Frequency = DefaultFrequency,
                    Name = "ATC Com2tuned Facility",
                    Id = DataRefId.AtcCom2TunedFacility,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AtcCom1Active
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/com1_active",
                    Units = "boolean",
                    Description = "Is the user's COM1 radio tuned to a freq that's actively being transmitted on by a pilot or ATC?",
                    Frequency = DefaultFrequency,
                    Name = "ATC Com1active",
                    Id = DataRefId.AtcCom1Active,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AtcCom2Active
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/com2_active",
                    Units = "boolean",
                    Description = "Is the user's COM1 radio tuned to a freq that's actively being transmitted on by a pilot or ATC?",
                    Frequency = DefaultFrequency,
                    Name = "ATC Com2active",
                    Id = DataRefId.AtcCom2Active,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AtcCom1Rx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/com1_rx",
                    Units = "boolean",
                    Description = "Is COM1 currently receiving ATC transmission, ATIS, or plugin transmission?",
                    Frequency = DefaultFrequency,
                    Name = "ATC Com1rx",
                    Id = DataRefId.AtcCom1Rx,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AtcCom2Rx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/com2_rx",
                    Units = "boolean",
                    Description = "Is COM2 currently receiving ATC transmission, ATIS, or plugin transmission?",
                    Frequency = DefaultFrequency,
                    Name = "ATC Com2rx",
                    Id = DataRefId.AtcCom2Rx,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AtcCom1Tx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/com1_tx",
                    Units = "boolean",
                    Description = "Is COM1 currently transmitting the pilot's voice to ATC or a plugin?",
                    Frequency = DefaultFrequency,
                    Name = "ATC Com1tx",
                    Id = DataRefId.AtcCom1Tx,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AtcCom2Tx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/com2_tx",
                    Units = "boolean",
                    Description = "Is COM2 currently transmitting the pilot's voice to ATC or a plugin?",
                    Frequency = DefaultFrequency,
                    Name = "ATC Com2tx",
                    Id = DataRefId.AtcCom2Tx,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement AtcAtisEnabled
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/atc/atis_enabled",
                    Units = "boolean",
                    Description = "Is the ATIS system enabled? If not, no ATIS text or audio will appear even when tuned to a proper frequency.",
                    Frequency = DefaultFrequency,
                    Name = "ATC Atis Enabled",
                    Id = DataRefId.AtcAtisEnabled,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotAutopilotMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/autopilot_mode",
                    Units = "enum",
                    Description = "The autopilot master mode (off=0, flight director=1, on=2)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Autopilot Mode",
                    Id = DataRefId.CockpitAutopilotAutopilotMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotAirspeedMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/airspeed_mode",
                    Units = "enum",
                    Description = "Airspeed mode for the autopilot. DEPRECATED",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Airspeed Mode",
                    Id = DataRefId.CockpitAutopilotAirspeedMode,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotHeadingMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading_mode",
                    Units = "enum",
                    Description = "Lateral navigation mode (GPS, heading, L-Nav approach). DEPRECATED",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Heading Mode",
                    Id = DataRefId.CockpitAutopilotHeadingMode,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotAltitudeMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/altitude_mode",
                    Units = "enum",
                    Description = "Vertical navigation (alt hold, VVI hold, V-Nav approach). DEPRECATED",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Altitude Mode",
                    Id = DataRefId.CockpitAutopilotAltitudeMode,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotBackcourseOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/backcourse_on",
                    Units = "boolean",
                    Description = "Back course selection",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Backcourse On",
                    Id = DataRefId.CockpitAutopilotBackcourseOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotAltitude
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/altitude",
                    Units = "ftmsl",
                    Description = "Altitude dialed into the AP",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Altitude",
                    Id = DataRefId.CockpitAutopilotAltitude,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotCurrentAltitude
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/current_altitude",
                    Units = "ftmsl",
                    Description = "Currently held altitude (remembered until you hit flchg)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Current Altitude",
                    Id = DataRefId.CockpitAutopilotCurrentAltitude,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotVerticalVelocity
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/vertical_velocity",
                    Units = "fpm",
                    Description = "Vertical speed to hold",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Vertical Velocity",
                    Id = DataRefId.CockpitAutopilotVerticalVelocity,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotAirspeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/airspeed",
                    Units = "knots_mach",
                    Description = "Airspeed to hold, this changes from knots to a mach number",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Airspeed",
                    Id = DataRefId.CockpitAutopilotAirspeed,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading",
                    Units = "degt",
                    Description = "The heading to fly (true, legacy)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Heading",
                    Id = DataRefId.CockpitAutopilotHeading,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotHeadingMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading_mag",
                    Units = "degm",
                    Description = "The heading to fly (magnetic, preferred) pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Heading Mag",
                    Id = DataRefId.CockpitAutopilotHeadingMag,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotHeadingMag2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading_mag2",
                    Units = "degm",
                    Description = "The heading to fly (magnetic, preferred) copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Heading Mag2",
                    Id = DataRefId.CockpitAutopilotHeadingMag2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotAirspeedIsMach
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/airspeed_is_mach",
                    Units = "boolean",
                    Description = "Is our airspeed a mach number (this is writable if the panel has the button, otherwise sim controls)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Airspeed Is Mach",
                    Id = DataRefId.CockpitAutopilotAirspeedIsMach,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotFlightDirectorPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/flight_director_pitch",
                    Units = "degrees",
                    Description = "The recommended pitch from the Flight Director.  Use override_flightdir",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Flight Director Pitch",
                    Id = DataRefId.CockpitAutopilotFlightDirectorPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotFlightDirectorRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/flight_director_roll",
                    Units = "degrees",
                    Description = "The recommended roll from the Flight Director.  Use override_flightdir",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Flight Director Roll",
                    Id = DataRefId.CockpitAutopilotFlightDirectorRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotAutopilotState
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/autopilot_state",
                    Units = "flags",
                    Description = "Various autopilot engage modes, etc.  See docs for flags",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Autopilot State",
                    Id = DataRefId.CockpitAutopilotAutopilotState,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotHeadingRollMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading_roll_mode",
                    Units = "enum",
                    Description = "Bank limit - 0 = auto, 1-6 = 5-30 degrees of bank",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Heading Roll Mode",
                    Id = DataRefId.CockpitAutopilotHeadingRollMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotModeHnav
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/mode_hnav",
                    Units = "enum",
                    Description = "Localizer mode (off, armed, engaged). DEPRECATED",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Mode Hnav",
                    Id = DataRefId.CockpitAutopilotModeHnav,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotModeGls
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/mode_gls",
                    Units = "enum",
                    Description = "Glide-slope mode (off, armed, engaged). DEPRECATED",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Mode Gls",
                    Id = DataRefId.CockpitAutopilotModeGls,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAutopilotSynHoldDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/syn_hold_deg",
                    Units = "degrees",
                    Description = "The pitch held when in pitch-hold mode.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Syn Hold Deg",
                    Id = DataRefId.CockpitAutopilotSynHoldDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAutopilotNavSteerDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/nav_steer_deg_mag",
                    Units = "degrees",
                    Description = "Heading to fly in nav mode - write this when override_nav_heading is set.  Useful for making a custom GPS that flies arcs.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Autopilot Nav Steer Deg Mag",
                    Id = DataRefId.CockpitAutopilotNavSteerDegMag,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitAvidyneLftHil
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/lft_hil",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Avidyne Lft Hil",
                    Id = DataRefId.CockpitAvidyneLftHil,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAvidyneRgtHil
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/rgt_hil",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Avidyne Rgt Hil",
                    Id = DataRefId.CockpitAvidyneRgtHil,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAvidyneAltHil
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/alt_hil",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Avidyne Alt Hil",
                    Id = DataRefId.CockpitAvidyneAltHil,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAvidyneSrc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/src",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Avidyne Src",
                    Id = DataRefId.CockpitAvidyneSrc,
                    Writable = true,
                    DataType = "int[3]"
                };
            }
        }
        private DataRefElement CockpitAvidyneHsiMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/hsi_mode",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Avidyne Hsi Mode",
                    Id = DataRefId.CockpitAvidyneHsiMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitAvidyneMapRangeSel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/map_range_sel",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Avidyne Map Range Sel",
                    Id = DataRefId.CockpitAvidyneMapRangeSel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalBatteryOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/battery_on",
                    Units = "bool",
                    Description = "Is the main battery on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Battery On",
                    Id = DataRefId.CockpitElectricalBatteryOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalBatteryArrayOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/battery_array_on",
                    Units = "bool",
                    Description = "Is the battery selected on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Battery Array On",
                    Id = DataRefId.CockpitElectricalBatteryArrayOn,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitElectricalBatteryEQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/battery_EQ",
                    Units = "bool",
                    Description = "Does this cockpit have a battery switch",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Battery EQ",
                    Id = DataRefId.CockpitElectricalBatteryEQ,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalAvionicsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/avionics_on",
                    Units = "bool",
                    Description = "Is there power to the avionics",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Avionics On",
                    Id = DataRefId.CockpitElectricalAvionicsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalAvionicsEQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/avionics_EQ",
                    Units = "bool",
                    Description = "Does this cockpit have an avionics switch",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Avionics EQ",
                    Id = DataRefId.CockpitElectricalAvionicsEQ,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalGeneratorOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/generator_on",
                    Units = "bool",
                    Description = "Is the generator on (to charge batteries) - one for each engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Generator On",
                    Id = DataRefId.CockpitElectricalGeneratorOn,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitElectricalGeneratorEQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/generator_EQ",
                    Units = "bool",
                    Description = "Does this cockpit have generator switches?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Generator EQ",
                    Id = DataRefId.CockpitElectricalGeneratorEQ,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalGeneratorApuOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/generator_apu_on",
                    Units = "bool",
                    Description = "Is the APU Generator on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Generator Apu On",
                    Id = DataRefId.CockpitElectricalGeneratorApuOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalGpuOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/gpu_on",
                    Units = "bool",
                    Description = "Is the GPU on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Gpu On",
                    Id = DataRefId.CockpitElectricalGpuOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalGeneratorApuAmps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/generator_apu_amps",
                    Units = "amps",
                    Description = "APU Generator amps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Generator Apu Amps",
                    Id = DataRefId.CockpitElectricalGeneratorApuAmps,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitElectricalGpuAmps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/gpu_amps",
                    Units = "amps",
                    Description = "GPU Amps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Gpu Amps",
                    Id = DataRefId.CockpitElectricalGpuAmps,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitElectricalHUDOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/HUD_on",
                    Units = "bool",
                    Description = "Is the HUD on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical HUD On",
                    Id = DataRefId.CockpitElectricalHUDOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalHUDBrightness
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/HUD_brightness",
                    Units = "ratio",
                    Description = "HUD brightness level (0-1)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical HUD Brightness",
                    Id = DataRefId.CockpitElectricalHUDBrightness,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitElectricalBeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/beacon_lights_on",
                    Units = "bool",
                    Description = "Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Beacon Lights On",
                    Id = DataRefId.CockpitElectricalBeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalLandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/landing_lights_on",
                    Units = "bool",
                    Description = "Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Landing Lights On",
                    Id = DataRefId.CockpitElectricalLandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalNavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/nav_lights_on",
                    Units = "bool",
                    Description = "Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Nav Lights On",
                    Id = DataRefId.CockpitElectricalNavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalStrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/strobe_lights_on",
                    Units = "bool",
                    Description = "Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Strobe Lights On",
                    Id = DataRefId.CockpitElectricalStrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalTaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/taxi_light_on",
                    Units = "bool",
                    Description = "Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Taxi Light On",
                    Id = DataRefId.CockpitElectricalTaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalCockpitLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/cockpit_lights_on",
                    Units = "bool",
                    Description = "Are cockpit lights on.  (NOTE - previous docs were wrong, this is always read-only)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Cockpit Lights On",
                    Id = DataRefId.CockpitElectricalCockpitLightsOn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalCockpitLights
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/cockpit_lights",
                    Units = "ratio",
                    Description = "Cockpit light level",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Cockpit Lights",
                    Id = DataRefId.CockpitElectricalCockpitLights,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitElectricalInstrumentBrightness
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/instrument_brightness",
                    Units = "ratio",
                    Description = "Instrument LED lighting level",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Instrument Brightness",
                    Id = DataRefId.CockpitElectricalInstrumentBrightness,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitElectricalSunglassesOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/sunglasses_on",
                    Units = "bool",
                    Description = "Sunglasses on?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Sunglasses On",
                    Id = DataRefId.CockpitElectricalSunglassesOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalNightVisionOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/night_vision_on",
                    Units = "bool",
                    Description = "Night vision goggles on?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Night Vision On",
                    Id = DataRefId.CockpitElectricalNightVisionOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitElectricalAhBar
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/ah_bar",
                    Units = "???",
                    Description = "Cockpit light rheostat - this appears to be legacy and no longer used.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Ah Bar",
                    Id = DataRefId.CockpitElectricalAhBar,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitElectricalBatteryChargeWattHr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/electrical/battery_charge_watt_hr",
                    Units = "watt/hours",
                    Description = "Current charge of each of the 8 batteries in watt-hours.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Electrical Battery Charge Watt Hr",
                    Id = DataRefId.CockpitElectricalBatteryChargeWattHr,
                    Writable = true,
                    DataType = "float[8]"
                };
            }
        }
        private DataRefElement CockpitEngineInverterOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/inverter_on",
                    Units = "bool",
                    Description = "Is the inverter providing power (was one per engine, now 2 max.)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Inverter On",
                    Id = DataRefId.CockpitEngineInverterOn,
                    Writable = true,
                    DataType = "int[2]"
                };
            }
        }
        private DataRefElement CockpitEngineInverterEq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/inverter_eq",
                    Units = "bool",
                    Description = "Does this cockpit have inverter switches?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Inverter Eq",
                    Id = DataRefId.CockpitEngineInverterEq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitEngineFuelPumpOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/fuel_pump_on",
                    Units = "bool",
                    Description = "Is the fuel pump on (one per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Fuel Pump On",
                    Id = DataRefId.CockpitEngineFuelPumpOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement CockpitEngineFadecOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/fadec_on",
                    Units = "bool",
                    Description = "Is the fadec on (one per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Fadec On",
                    Id = DataRefId.CockpitEngineFadecOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement CockpitEngineIdleSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/idle_speed",
                    Units = "bool",
                    Description = "Idle speed (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Idle Speed",
                    Id = DataRefId.CockpitEngineIdleSpeed,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement CockpitEngineFuelTankSelector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/fuel_tank_selector",
                    Units = "???",
                    Description = "Which fuel tank is open for flight",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Fuel Tank Selector",
                    Id = DataRefId.CockpitEngineFuelTankSelector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitEngineFuelTankTransfer
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/fuel_tank_transfer",
                    Units = "???",
                    Description = "Which fuel tank is open for transfers (destination)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Fuel Tank Transfer",
                    Id = DataRefId.CockpitEngineFuelTankTransfer,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitEngineFuelTankTransferFrom
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/fuel_tank_transfer_from",
                    Units = "???",
                    Description = "Which fuel tank is open for transfers (source)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Fuel Tank Transfer From",
                    Id = DataRefId.CockpitEngineFuelTankTransferFrom,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitEngineIgnitionOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/ignition_on",
                    Units = "enum",
                    Description = "ignition key position 0 = off, 1 = left, 2 = right, 3 = both",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Ignition On",
                    Id = DataRefId.CockpitEngineIgnitionOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement CockpitEngineIgnitersOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/igniters_on",
                    Units = "boolean",
                    Description = "starter ignition",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Igniters On",
                    Id = DataRefId.CockpitEngineIgnitersOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement CockpitEngineStarterDuration
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/starter_duration",
                    Units = "seconds",
                    Description = "time since ignition was pressed or something",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Starter Duration",
                    Id = DataRefId.CockpitEngineStarterDuration,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement CockpitEngineClutchEngage
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/clutch_engage",
                    Units = "???",
                    Description = "Clutch engaged",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine Clutch Engage",
                    Id = DataRefId.CockpitEngineClutchEngage,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitEngineAPUSwitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/APU_switch",
                    Units = "enum",
                    Description = "APU starter switch 0 = off, 1 = on, 2 = start",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine APU Switch",
                    Id = DataRefId.CockpitEngineAPUSwitch,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitEngineAPURunning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/APU_running",
                    Units = "boolean",
                    Description = "APU running - 1 = on, 0 = off.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine APU Running",
                    Id = DataRefId.CockpitEngineAPURunning,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitEngineAPUN1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/engine/APU_N1",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Engine APUN1",
                    Id = DataRefId.CockpitEngineAPUN1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitG430G430NavComSel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/g430/g430_nav_com_sel",
                    Units = "enum",
                    Description = "enter com=0, enter_nav=1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit G430g430nav Com Sel",
                    Id = DataRefId.CockpitG430G430NavComSel,
                    Writable = true,
                    DataType = "int[2]"
                };
            }
        }
        private DataRefElement CockpitG1000Gcu478InputSel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/g1000/gcu478_input_sel",
                    Units = "enum",
                    Description = "FMS=0",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit G1000gcu478input Sel",
                    Id = DataRefId.CockpitG1000Gcu478InputSel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitGpsCourse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gps/course",
                    Units = "???",
                    Description = "The currently programmed GPS course (true degrees)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit GPS Course",
                    Id = DataRefId.CockpitGpsCourse,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGpsDestinationType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gps/destination_type",
                    Units = "???",
                    Description = "The current type of navaid we're flying to",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit GPS Destination Type",
                    Id = DataRefId.CockpitGpsDestinationType,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitGpsDestinationIndex
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gps/destination_index",
                    Units = "???",
                    Description = "The index of the navaid we're flying to",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit GPS Destination Index",
                    Id = DataRefId.CockpitGpsDestinationIndex,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitGyrosTheVacIndDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_vac_ind_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the first vacuum instrument",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Vac Ind Deg",
                    Id = DataRefId.CockpitGyrosTheVacIndDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosTheEleIndDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ele_ind_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the second vacuum instrument - dataref name is worng!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Ele Ind Deg",
                    Id = DataRefId.CockpitGyrosTheEleIndDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosTheIndDeg3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_deg3",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the first elect instrument",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Ind Deg3",
                    Id = DataRefId.CockpitGyrosTheIndDeg3,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosTheIndDeg4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_deg4",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the second elect instrument",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Ind Deg4",
                    Id = DataRefId.CockpitGyrosTheIndDeg4,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosTheIndVacPilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_vac_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the pilot's side, vacuum driven",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Ind Vac Pilot Deg",
                    Id = DataRefId.CockpitGyrosTheIndVacPilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosTheIndVacCopilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_vac_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the copilot's side, vacuum driven",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Ind Vac Copilot Deg",
                    Id = DataRefId.CockpitGyrosTheIndVacCopilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosTheIndElecPilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_elec_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the pilot's side, electric",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Ind Elec Pilot Deg",
                    Id = DataRefId.CockpitGyrosTheIndElecPilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosTheIndElecCopilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_elec_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the copilot's side, electric",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Ind Elec Copilot Deg",
                    Id = DataRefId.CockpitGyrosTheIndElecCopilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosTheIndAharsPilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_ahars_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the pilot's side, AHARS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Ind Ahars Pilot Deg",
                    Id = DataRefId.CockpitGyrosTheIndAharsPilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosTheIndAharsCopilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_ahars_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the copilot's side, AHARS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros The Ind Ahars Copilot Deg",
                    Id = DataRefId.CockpitGyrosTheIndAharsCopilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiVacIndDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_vac_ind_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated heading on the panel for the first vacuum instrument",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Vac Ind Degm",
                    Id = DataRefId.CockpitGyrosPsiVacIndDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiEleIndDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ele_ind_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated heading on the panel for the second vacuum instrument - dataref name is worng!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Ele Ind Degm",
                    Id = DataRefId.CockpitGyrosPsiEleIndDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiIndDegm3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_degm3",
                    Units = "degrees_magnetic",
                    Description = "The indicated heading on the panel for the first elect instrument",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Ind Degm3",
                    Id = DataRefId.CockpitGyrosPsiIndDegm3,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiIndDegm4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_degm4",
                    Units = "degrees_magnetic",
                    Description = "The indicated heading on the panel for the second elect instrument",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Ind Degm4",
                    Id = DataRefId.CockpitGyrosPsiIndDegm4,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiIndVacPilotDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_vac_pilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the pilot's side, vacuum driven",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Ind Vac Pilot Degm",
                    Id = DataRefId.CockpitGyrosPsiIndVacPilotDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiIndVacCopilotDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_vac_copilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the copilot's side, vacuum driven",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Ind Vac Copilot Degm",
                    Id = DataRefId.CockpitGyrosPsiIndVacCopilotDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiIndElecPilotDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_elec_pilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the pilot's side, electric",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Ind Elec Pilot Degm",
                    Id = DataRefId.CockpitGyrosPsiIndElecPilotDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiIndElecCopilotDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_elec_copilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the copilot's side, electric",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Ind Elec Copilot Degm",
                    Id = DataRefId.CockpitGyrosPsiIndElecCopilotDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiIndAharsPilotDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_ahars_pilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the pilot's side, AHARS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Ind Ahars Pilot Degm",
                    Id = DataRefId.CockpitGyrosPsiIndAharsPilotDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPsiIndAharsCopilotDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_ahars_copilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the copilot's side, AHARS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Psi Ind Ahars Copilot Degm",
                    Id = DataRefId.CockpitGyrosPsiIndAharsCopilotDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiVacIndDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_vac_ind_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the first vacuum instrument",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Vac Ind Deg",
                    Id = DataRefId.CockpitGyrosPhiVacIndDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiEleIndDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ele_ind_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the second vacuum instrument - dataref name is worng!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Ele Ind Deg",
                    Id = DataRefId.CockpitGyrosPhiEleIndDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiIndDeg3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_deg3",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the first elect instrument",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Ind Deg3",
                    Id = DataRefId.CockpitGyrosPhiIndDeg3,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiIndDeg4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_deg4",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the second elect instrument",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Ind Deg4",
                    Id = DataRefId.CockpitGyrosPhiIndDeg4,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiIndVacPilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_vac_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the pilot's side, vacuum driven",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Ind Vac Pilot Deg",
                    Id = DataRefId.CockpitGyrosPhiIndVacPilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiIndVacCopilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_vac_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the copilot's side, vacuum driven",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Ind Vac Copilot Deg",
                    Id = DataRefId.CockpitGyrosPhiIndVacCopilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiIndElecPilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_elec_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the pilot's side, electric",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Ind Elec Pilot Deg",
                    Id = DataRefId.CockpitGyrosPhiIndElecPilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiIndElecCopilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_elec_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the copilot's side, electric",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Ind Elec Copilot Deg",
                    Id = DataRefId.CockpitGyrosPhiIndElecCopilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiIndAharsPilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_ahars_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the pilot's side, AHARS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Ind Ahars Pilot Deg",
                    Id = DataRefId.CockpitGyrosPhiIndAharsPilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosPhiIndAharsCopilotDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_ahars_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the copilot's side, AHARS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Phi Ind Ahars Copilot Deg",
                    Id = DataRefId.CockpitGyrosPhiIndAharsCopilotDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosDgDriftVacDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_vac_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for vacuum 1 powered DGs",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros DG Drift Vac Deg",
                    Id = DataRefId.CockpitGyrosDgDriftVacDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosDgDriftVac2Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_vac2_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for vacuum 2 powered DGs",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros DG Drift Vac2deg",
                    Id = DataRefId.CockpitGyrosDgDriftVac2Deg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosDgDriftEleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_ele_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for electric 1 powered DGs",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros DG Drift Ele Deg",
                    Id = DataRefId.CockpitGyrosDgDriftEleDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosDgDriftEle2Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_ele2_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for electric 2 powered DGs",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros DG Drift Ele2deg",
                    Id = DataRefId.CockpitGyrosDgDriftEle2Deg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosDgDriftAharsDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_ahars_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for AHARS 1 powered DGs",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros DG Drift Ahars Deg",
                    Id = DataRefId.CockpitGyrosDgDriftAharsDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosDgDriftAhars2Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_ahars2_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for AHARS 2 powered DGs",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros DG Drift Ahars2deg",
                    Id = DataRefId.CockpitGyrosDgDriftAhars2Deg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitGyrosGyrForce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/gyr_force",
                    Units = "???",
                    Description = "was dim 4 until 920 enums are ahrs1,ahrs2,elec1,elec2,vac1,vac2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Gyr Force",
                    Id = DataRefId.CockpitGyrosGyrForce,
                    Writable = true,
                    DataType = "float[6]"
                };
            }
        }
        private DataRefElement CockpitGyrosGyrSpin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/gyr_spin",
                    Units = "???",
                    Description = "was dim 4 until 920 enums are ahrs1,ahrs2,elec1,elec2,vac1,vac2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Gyr Spin",
                    Id = DataRefId.CockpitGyrosGyrSpin,
                    Writable = true,
                    DataType = "float[6]"
                };
            }
        }
        private DataRefElement CockpitGyrosGyrFreeSlaved
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/gyr_free_slaved",
                    Units = "boolean",
                    Description = "free or slaved to magnetometer, the enums are ahrs1,ahrs2,elec1,elec2,vac1,vac2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Gyr Free Slaved",
                    Id = DataRefId.CockpitGyrosGyrFreeSlaved,
                    Writable = true,
                    DataType = "int[6]"
                };
            }
        }
        private DataRefElement CockpitGyrosGyrFlag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/gyr_flag",
                    Units = "boolean",
                    Description = "DG/HSI instrument for this gyro must show flag because gyro is not spinning, or magnetometer failure, or adjustment in progress",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Gyr Flag",
                    Id = DataRefId.CockpitGyrosGyrFlag,
                    Writable = false,
                    DataType = "int[6]"
                };
            }
        }
        private DataRefElement CockpitGyrosGyrCageRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/gyros/gyr_cage_ratio",
                    Units = "ratio",
                    Description = "attitude indicator for this gyro is caged. 0 for fully free, 1 for fully caged.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Gyros Gyr Cage Ratio",
                    Id = DataRefId.CockpitGyrosGyrCageRatio,
                    Writable = true,
                    DataType = "float[6]"
                };
            }
        }
        private DataRefElement CockpitMiscOuterMarkerLit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/outer_marker_lit",
                    Units = "???",
                    Description = "Is the outer marker beacon lit right now",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Outer Marker Lit",
                    Id = DataRefId.CockpitMiscOuterMarkerLit,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitMiscMiddleMarkerLit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/middle_marker_lit",
                    Units = "???",
                    Description = "Is the middle marker beacon lit right now",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Middle Marker Lit",
                    Id = DataRefId.CockpitMiscMiddleMarkerLit,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitMiscInnerMarkerLit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/inner_marker_lit",
                    Units = "???",
                    Description = "Is the inner marker beacon lit right now",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Inner Marker Lit",
                    Id = DataRefId.CockpitMiscInnerMarkerLit,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitMiscOverOuterMarker
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/over_outer_marker",
                    Units = "???",
                    Description = "Are we over the outer marker beacon",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Over Outer Marker",
                    Id = DataRefId.CockpitMiscOverOuterMarker,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitMiscOverMiddleMarker
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/over_middle_marker",
                    Units = "???",
                    Description = "Are we over the middle marker beacon",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Over Middle Marker",
                    Id = DataRefId.CockpitMiscOverMiddleMarker,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitMiscOverInnerMarker
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/over_inner_marker",
                    Units = "???",
                    Description = "Are we over the inner marker beacon",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Over Inner Marker",
                    Id = DataRefId.CockpitMiscOverInnerMarker,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitMiscBarometerSetting
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/barometer_setting",
                    Units = "???",
                    Description = "The pilots altimeter setting",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Barometer Setting",
                    Id = DataRefId.CockpitMiscBarometerSetting,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscBarometerSetting2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/barometer_setting2",
                    Units = "???",
                    Description = "The copilots altimeter setting",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Barometer Setting2",
                    Id = DataRefId.CockpitMiscBarometerSetting2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscRadioAltimeterMinimum
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/radio_altimeter_minimum",
                    Units = "Feet",
                    Description = "The decision height for the radio altimeter",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Radio Altimeter Minimum",
                    Id = DataRefId.CockpitMiscRadioAltimeterMinimum,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscShowPath
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/show_path",
                    Units = "???",
                    Description = "Show our path as we fly?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Show Path",
                    Id = DataRefId.CockpitMiscShowPath,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscVacuum
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/vacuum",
                    Units = "???",
                    Description = "Vacuum Ratio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Vacuum",
                    Id = DataRefId.CockpitMiscVacuum,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscVacuum2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/vacuum2",
                    Units = "???",
                    Description = "Vacuum 2 Ratio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Vacuum2",
                    Id = DataRefId.CockpitMiscVacuum2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscAhAdjust
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/ah_adjust",
                    Units = "pixels",
                    Description = "Adjustment to the artificial horizon bars (pilot)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Ah Adjust",
                    Id = DataRefId.CockpitMiscAhAdjust,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscAhAdjust2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/ah_adjust2",
                    Units = "pixels",
                    Description = "Adjustment to the artificial horizon bars (copilot)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Ah Adjust2",
                    Id = DataRefId.CockpitMiscAhAdjust2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscCompassIndicated
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/compass_indicated",
                    Units = "degm",
                    Description = "Indicated cockpit heading in magnetic degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Compass Indicated",
                    Id = DataRefId.CockpitMiscCompassIndicated,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscHydraulicQuantity
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/hydraulic_quantity",
                    Units = "???",
                    Description = "Hydraulic Quantity 1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Hydraulic Quantity",
                    Id = DataRefId.CockpitMiscHydraulicQuantity,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitMiscHydraulicQuantity2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/misc/hydraulic_quantity2",
                    Units = "???",
                    Description = "Hydraulic Quantity 2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Misc Hydraulic Quantity2",
                    Id = DataRefId.CockpitMiscHydraulicQuantity2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitPressureBleedAirOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/bleed_air_on",
                    Units = "bool",
                    Description = "Bleed air is on (legacy)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Bleed Air On",
                    Id = DataRefId.CockpitPressureBleedAirOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitPressureBleedAirMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/bleed_air_mode",
                    Units = "enum",
                    Description = "0=off,1=L,2=B,3=R,4=APU",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Bleed Air Mode",
                    Id = DataRefId.CockpitPressureBleedAirMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitPressureCabinAltitudeSetMMsl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_altitude_set_m_msl",
                    Units = "???",
                    Description = "The desired cabin altitude (BEFORE 730 this was incorrectly int type)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Cabin Altitude Set M Msl",
                    Id = DataRefId.CockpitPressureCabinAltitudeSetMMsl,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitPressureCabinVviSetMMsec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_vvi_set_m_msec",
                    Units = "???",
                    Description = "The desired cabin altitude rate change (BEFORE 730 this was incorrectly int type)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Cabin VVI Set M Msec",
                    Id = DataRefId.CockpitPressureCabinVviSetMMsec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitPressureCabinPressureDifferentialPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_pressure_differential_psi",
                    Units = "psi",
                    Description = "????",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Cabin Pressure Differential Psi",
                    Id = DataRefId.CockpitPressureCabinPressureDifferentialPsi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitPressureCabinAltitudeActualMMsl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_altitude_actual_m_msl",
                    Units = "???",
                    Description = "The real cabin altitude (BEFORE 730 this was incorrectly int type). Writeable with override_pressurization",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Cabin Altitude Actual M Msl",
                    Id = DataRefId.CockpitPressureCabinAltitudeActualMMsl,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitPressureCabinVviActualMMsec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_vvi_actual_m_msec",
                    Units = "???",
                    Description = "The real cabin altitude rate change (BEFORE 730 this was incorrectly int type). Writeable with override_pressurization",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Cabin VVI Actual M Msec",
                    Id = DataRefId.CockpitPressureCabinVviActualMMsec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitPressurePressureTestTimeout
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/pressure_test_timeout",
                    Units = "???",
                    Description = "Timeout for some kind of pressure test/",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Pressure Test Timeout",
                    Id = DataRefId.CockpitPressurePressureTestTimeout,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitPressureMaxAllowableAltitude
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/max_allowable_altitude",
                    Units = "???",
                    Description = "Max altitude the plane can keep pressure at?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Max Allowable Altitude",
                    Id = DataRefId.CockpitPressureMaxAllowableAltitude,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitPressureDumpAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/dump_all",
                    Units = "bool",
                    Description = "Pressure dump switch",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Dump All",
                    Id = DataRefId.CockpitPressureDumpAll,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitPressureDumpToAlt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/dump_to_alt",
                    Units = "bool",
                    Description = "Pressure dump to altitude switch",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Dump To Alt",
                    Id = DataRefId.CockpitPressureDumpToAlt,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitPressureOutflowValve
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/pressure/outflow_valve",
                    Units = "ratio",
                    Description = "Pressurization outflow valve ratio. 0 for fully closed, 1 for fully open. Writeable with override_pressurization",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Pressure Outflow Valve",
                    Id = DataRefId.CockpitPressureOutflowValve,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1FreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the nav1 radio.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1freq Hz",
                    Id = DataRefId.CockpitRadiosNav1FreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2FreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the nav2 radio.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2freq Hz",
                    Id = DataRefId.CockpitRadiosNav2FreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosCom1FreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/com1_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the copm1 radio.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Com1freq Hz",
                    Id = DataRefId.CockpitRadiosCom1FreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosCom2FreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/com2_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the com2 radio.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Com2freq Hz",
                    Id = DataRefId.CockpitRadiosCom2FreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf1FreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the first automatic direction finder.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf1freq Hz",
                    Id = DataRefId.CockpitRadiosAdf1FreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf2FreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the second automatic direction finder.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf2freq Hz",
                    Id = DataRefId.CockpitRadiosAdf2FreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosDmeFreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/dme_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the standalone DME receiver.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Dme Freq Hz",
                    Id = DataRefId.CockpitRadiosDmeFreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1StdbyFreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1stdby Freq Hz",
                    Id = DataRefId.CockpitRadiosNav1StdbyFreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2StdbyFreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2stdby Freq Hz",
                    Id = DataRefId.CockpitRadiosNav2StdbyFreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosCom1StdbyFreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/com1_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Com1stdby Freq Hz",
                    Id = DataRefId.CockpitRadiosCom1StdbyFreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosCom2StdbyFreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/com2_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Com2stdby Freq Hz",
                    Id = DataRefId.CockpitRadiosCom2StdbyFreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf1StdbyFreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf1stdby Freq Hz",
                    Id = DataRefId.CockpitRadiosAdf1StdbyFreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf2StdbyFreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf2stdby Freq Hz",
                    Id = DataRefId.CockpitRadiosAdf2StdbyFreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosDmeStdbyFreqHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/dme_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.<p>NOTE: X-Plane does not currently feature a flip-flop standalone DME instrument, but the data exists.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Dme Stdby Freq Hz",
                    Id = DataRefId.CockpitRadiosDmeStdbyFreqHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1ObsDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_obs_degt",
                    Units = "degt",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 1. (true: legacy)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1obs Degt",
                    Id = DataRefId.CockpitRadiosNav1ObsDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2ObsDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_obs_degt",
                    Units = "degt",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 2. (true: legacy)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2obs Degt",
                    Id = DataRefId.CockpitRadiosNav2ObsDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1ObsDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_obs_degm",
                    Units = "degm",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 1. (mag: modern) pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1obs Degm",
                    Id = DataRefId.CockpitRadiosNav1ObsDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1ObsDegm2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_obs_degm2",
                    Units = "degm",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 1. (mag: modern) copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1obs Degm2",
                    Id = DataRefId.CockpitRadiosNav1ObsDegm2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2ObsDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_obs_degm",
                    Units = "degm",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 2. (mag: modern) pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2obs Degm",
                    Id = DataRefId.CockpitRadiosNav2ObsDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2ObsDegm2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_obs_degm2",
                    Units = "degm",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 2. (mag: modern) copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2obs Degm2",
                    Id = DataRefId.CockpitRadiosNav2ObsDegm2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1DirDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the beacon indicated by nav1.  Set override with override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1dir Degt",
                    Id = DataRefId.CockpitRadiosNav1DirDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2DirDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the beacon indicated by nav2.  Set override with override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2dir Degt",
                    Id = DataRefId.CockpitRadiosNav2DirDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf1DirDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the beacon indicated by adf1.  Use override_adf to stg.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf1dir Degt",
                    Id = DataRefId.CockpitRadiosAdf1DirDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf2DirDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the beacon indicated by adf2.  Use override_adf to stg.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf2dir Degt",
                    Id = DataRefId.CockpitRadiosAdf2DirDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsDirDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the GPS 1 destination.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Dir Degt",
                    Id = DataRefId.CockpitRadiosGpsDirDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2DirDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the GPS 2 destination.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2dir Degt",
                    Id = DataRefId.CockpitRadiosGps2DirDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosDmeDirDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/dme_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to whatever becaon the standalone DME is programmed for.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Dme Dir Degt",
                    Id = DataRefId.CockpitRadiosDmeDirDegt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1HdefDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_hdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1hdef Dot",
                    Id = DataRefId.CockpitRadiosNav1HdefDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1HdefDot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_hdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1hdef Dot2",
                    Id = DataRefId.CockpitRadiosNav1HdefDot2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2HdefDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_hdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2hdef Dot",
                    Id = DataRefId.CockpitRadiosNav2HdefDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2HdefDot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_hdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2hdef Dot2",
                    Id = DataRefId.CockpitRadiosNav2HdefDot2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsHdefDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_hdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Hdef Dot",
                    Id = DataRefId.CockpitRadiosGpsHdefDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsHdefDot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_hdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Hdef Dot2",
                    Id = DataRefId.CockpitRadiosGpsHdefDot2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2HdefDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_hdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2hdef Dot",
                    Id = DataRefId.CockpitRadiosGps2HdefDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2HdefDot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_hdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2hdef Dot2",
                    Id = DataRefId.CockpitRadiosGps2HdefDot2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1VdefDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_vdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1vdef Dot",
                    Id = DataRefId.CockpitRadiosNav1VdefDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1VdefDot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_vdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1vdef Dot2",
                    Id = DataRefId.CockpitRadiosNav1VdefDot2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2VdefDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_vdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2vdef Dot",
                    Id = DataRefId.CockpitRadiosNav2VdefDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2VdefDot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_vdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2vdef Dot2",
                    Id = DataRefId.CockpitRadiosNav2VdefDot2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsVdefDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_vdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot. override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Vdef Dot",
                    Id = DataRefId.CockpitRadiosGpsVdefDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsVdefDot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_vdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot. override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Vdef Dot2",
                    Id = DataRefId.CockpitRadiosGpsVdefDot2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2VdefDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_vdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot. override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2vdef Dot",
                    Id = DataRefId.CockpitRadiosGps2VdefDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2VdefDot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_vdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot. override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2vdef Dot2",
                    Id = DataRefId.CockpitRadiosGps2VdefDot2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1Fromto
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_fromto",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav1 beacon - pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1fromto",
                    Id = DataRefId.CockpitRadiosNav1Fromto,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1Fromto2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_fromto2",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav1 beacon - copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1fromto2",
                    Id = DataRefId.CockpitRadiosNav1Fromto2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2Fromto
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_fromto",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2fromto",
                    Id = DataRefId.CockpitRadiosNav2Fromto,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2Fromto2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_fromto2",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2fromto2",
                    Id = DataRefId.CockpitRadiosNav2Fromto2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsFromto
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_fromto",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Fromto",
                    Id = DataRefId.CockpitRadiosGpsFromto,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsFromto2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_fromto2",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Fromto2",
                    Id = DataRefId.CockpitRadiosGpsFromto2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2Fromto
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_fromto",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2fromto",
                    Id = DataRefId.CockpitRadiosGps2Fromto,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2Fromto2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_fromto2",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2fromto2",
                    Id = DataRefId.CockpitRadiosGps2Fromto2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1CDI
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_CDI",
                    Units = "bool",
                    Description = "Are we receiving an expected glide slope for nav1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1cdi",
                    Id = DataRefId.CockpitRadiosNav1CDI,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2CDI
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_CDI",
                    Units = "bool",
                    Description = "Are we receiving an expected glide slope for nav2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2cdi",
                    Id = DataRefId.CockpitRadiosNav2CDI,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1DmeDistM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on nav1.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1dme Dist M",
                    Id = DataRefId.CockpitRadiosNav1DmeDistM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2DmeDistM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on nav2.  override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2dme Dist M",
                    Id = DataRefId.CockpitRadiosNav2DmeDistM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf1DmeDistM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on adf1.  override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf1dme Dist M",
                    Id = DataRefId.CockpitRadiosAdf1DmeDistM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf2DmeDistM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on adf2.  override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf2dme Dist M",
                    Id = DataRefId.CockpitRadiosAdf2DmeDistM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsDmeDistM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on the GPS.  override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Dme Dist M",
                    Id = DataRefId.CockpitRadiosGpsDmeDistM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2DmeDistM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on the GPS.  override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2dme Dist M",
                    Id = DataRefId.CockpitRadiosGps2DmeDistM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosStandaloneDmeDistM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/standalone_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on the standalone DME receiver. override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Standalone Dme Dist M",
                    Id = DataRefId.CockpitRadiosStandaloneDmeDistM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on nav1. override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1dme Speed Kts",
                    Id = DataRefId.CockpitRadiosNav1DmeSpeedKts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on nav2. override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2dme Speed Kts",
                    Id = DataRefId.CockpitRadiosNav2DmeSpeedKts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf1DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on adf1. override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf1dme Speed Kts",
                    Id = DataRefId.CockpitRadiosAdf1DmeSpeedKts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf2DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on adf2. override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf2dme Speed Kts",
                    Id = DataRefId.CockpitRadiosAdf2DmeSpeedKts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsDmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on the GPS. override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Dme Speed Kts",
                    Id = DataRefId.CockpitRadiosGpsDmeSpeedKts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on the GPS. override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2dme Speed Kts",
                    Id = DataRefId.CockpitRadiosGps2DmeSpeedKts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosStandaloneDmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/standalone_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on the standalone DME receiver. override_dme",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Standalone Dme Speed Kts",
                    Id = DataRefId.CockpitRadiosStandaloneDmeSpeedKts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1DmeTimeSecs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on nav1. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1dme Time Secs",
                    Id = DataRefId.CockpitRadiosNav1DmeTimeSecs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2DmeTimeSecs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on nav2. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2dme Time Secs",
                    Id = DataRefId.CockpitRadiosNav2DmeTimeSecs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf1DmeTimeSecs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on adf1. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf1dme Time Secs",
                    Id = DataRefId.CockpitRadiosAdf1DmeTimeSecs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf2DmeTimeSecs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on adf2. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf2dme Time Secs",
                    Id = DataRefId.CockpitRadiosAdf2DmeTimeSecs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsDmeTimeSecs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on the GPS 1. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Dme Time Secs",
                    Id = DataRefId.CockpitRadiosGpsDmeTimeSecs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2DmeTimeSecs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on the GPS 2. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2dme Time Secs",
                    Id = DataRefId.CockpitRadiosGps2DmeTimeSecs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosStandaloneDmeTimeSecs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/standalone_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on the standalone DME. override_dme  (Dataref is labeled - this has always been minutes.)\"",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Standalone Dme Time Secs",
                    Id = DataRefId.CockpitRadiosStandaloneDmeTimeSecs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1CourseDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_course_degm",
                    Units = "degm",
                    Description = "The localizer course for Nav1 or tuned in radial for a VOR. (Magnetic, new) - pilot use override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1course Degm",
                    Id = DataRefId.CockpitRadiosNav1CourseDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1CourseDegm2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_course_degm2",
                    Units = "degm",
                    Description = "The localizer course for Nav1 or tuned in radial for a VOR. (Magnetic, new) - copilot use override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1course Degm2",
                    Id = DataRefId.CockpitRadiosNav1CourseDegm2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2CourseDegm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_course_degm",
                    Units = "degm",
                    Description = "The localizer course for Nav2 or tuned in radial for a VOR. (Magnetic, new) - pilot use override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2course Degm",
                    Id = DataRefId.CockpitRadiosNav2CourseDegm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2CourseDegm2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_course_degm2",
                    Units = "degm",
                    Description = "The localizer course for Nav2 or tuned in radial for a VOR. (Magnetic, new) - copilot use override_navneedles",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2course Degm2",
                    Id = DataRefId.CockpitRadiosNav2CourseDegm2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsCourseDegtm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_course_degtm",
                    Units = "degm",
                    Description = "The localizer course for GPS 1 or tuned in radial for a VOR (Magnetic, new) - pilot - use override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Course Degtm",
                    Id = DataRefId.CockpitRadiosGpsCourseDegtm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsCourseDegtm2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_course_degtm2",
                    Units = "degm",
                    Description = "The localizer course for GPS 1 or tuned in radial for a VOR (Magnetic, new) - copilot - use override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Course Degtm2",
                    Id = DataRefId.CockpitRadiosGpsCourseDegtm2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2CourseDegtm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_course_degtm",
                    Units = "degm",
                    Description = "The localizer course for GPS 2 or tuned in radial for a VOR (Magnetic, new) - pilot - use override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2course Degtm",
                    Id = DataRefId.CockpitRadiosGps2CourseDegtm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2CourseDegtm2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_course_degtm2",
                    Units = "degm",
                    Description = "The localizer course for GPS 2 or tuned in radial for a VOR (Magnetic, new) - copilot - use override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2course Degtm2",
                    Id = DataRefId.CockpitRadiosGps2CourseDegtm2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1SlopeDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_slope_degt",
                    Units = "deg",
                    Description = "The glide slope slope for nav1.  Writable with override_navneedles starting in 940.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1slope Degt",
                    Id = DataRefId.CockpitRadiosNav1SlopeDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2SlopeDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_slope_degt",
                    Units = "deg",
                    Description = "The glide slope slope for nav2.  Writable with override_navneedles starting in 940.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2slope Degt",
                    Id = DataRefId.CockpitRadiosNav2SlopeDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsSlopeDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_slope_degt",
                    Units = "deg",
                    Description = "The glide slope slope for the GPS 1.  Writable with override_gps.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Slope Degt",
                    Id = DataRefId.CockpitRadiosGpsSlopeDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2SlopeDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_slope_degt",
                    Units = "deg",
                    Description = "The glide slope slope for the GPS 2.  Writable with override_gps.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2slope Degt",
                    Id = DataRefId.CockpitRadiosGps2SlopeDegt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsGpMtrPerDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_gp_mtr_per_dot",
                    Units = "meter",
                    Description = "Baro-VNAV vertical path sensitivity in meters per dot of deflection.  Writable with override_gps.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Gp Mtr Per Dot",
                    Id = DataRefId.CockpitRadiosGpsGpMtrPerDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2GpMtrPerDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_gp_mtr_per_dot",
                    Units = "meter",
                    Description = "Baro-VNAV vertical path sensitivity in meters per dot of deflection.  Writable with override_gps.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2gp Mtr Per Dot",
                    Id = DataRefId.CockpitRadiosGps2GpMtrPerDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsHdefNmPerDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_hdef_nm_per_dot",
                    Units = "nautical_miles",
                    Description = "GPS CDI sensitivity in nautical miles per dot of deflection.  Writable with override_gps.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Hdef Nm Per Dot",
                    Id = DataRefId.CockpitRadiosGpsHdefNmPerDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2HdefNmPerDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_hdef_nm_per_dot",
                    Units = "nautical_miles",
                    Description = "GPS CDI sensitivity in nautical miles per dot of deflection.  Writable with override_gps.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2hdef Nm Per Dot",
                    Id = DataRefId.CockpitRadiosGps2HdefNmPerDot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosTransponderCode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_code",
                    Units = "code",
                    Description = "Our transponder code.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Transponder Code",
                    Id = DataRefId.CockpitRadiosTransponderCode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosTransponderId
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_id",
                    Units = "bool",
                    Description = "Whether we are squawking ident right now.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Transponder Id",
                    Id = DataRefId.CockpitRadiosTransponderId,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosTransponderLight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_light",
                    Units = "???",
                    Description = "Whether the transponder is lit",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Transponder Light",
                    Id = DataRefId.CockpitRadiosTransponderLight,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosTransponderBrightness
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_brightness",
                    Units = "ratio",
                    Description = "Transponder light brightness ratio from 0 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Transponder Brightness",
                    Id = DataRefId.CockpitRadiosTransponderBrightness,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosTransponderMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_mode",
                    Units = "enum",
                    Description = "Transponder mode (off=0,stdby=1,on=2,test=3)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Transponder Mode",
                    Id = DataRefId.CockpitRadiosTransponderMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1CardinalDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_cardinal_dir",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for VOR 1 - pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1cardinal Dir",
                    Id = DataRefId.CockpitRadiosNav1CardinalDir,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1CardinalDir2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_cardinal_dir2",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for VOR 1 - copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1cardinal Dir2",
                    Id = DataRefId.CockpitRadiosNav1CardinalDir2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2CardinalDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_cardinal_dir",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for VOR 2 - pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2cardinal Dir",
                    Id = DataRefId.CockpitRadiosNav2CardinalDir,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2CardinalDir2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_cardinal_dir2",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for VOR 2 - copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2cardinal Dir2",
                    Id = DataRefId.CockpitRadiosNav2CardinalDir2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf1CardinalDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_cardinal_dir",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for ADF 1 - pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf1cardinal Dir",
                    Id = DataRefId.CockpitRadiosAdf1CardinalDir,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf1CardinalDir2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_cardinal_dir2",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for ADF 1 - copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf1cardinal Dir2",
                    Id = DataRefId.CockpitRadiosAdf1CardinalDir2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf2CardinalDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_cardinal_dir",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for ADF 2 - pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf2cardinal Dir",
                    Id = DataRefId.CockpitRadiosAdf2CardinalDir,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf2CardinalDir2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_cardinal_dir2",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for ADF 2 - copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf2cardinal Dir2",
                    Id = DataRefId.CockpitRadiosAdf2CardinalDir2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosNav1HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_has_dme",
                    Units = "bool",
                    Description = "Does this nav aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav1has Dme",
                    Id = DataRefId.CockpitRadiosNav1HasDme,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNav2HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_has_dme",
                    Units = "bool",
                    Description = "Does this nav aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav2has Dme",
                    Id = DataRefId.CockpitRadiosNav2HasDme,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf1HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_has_dme",
                    Units = "bool",
                    Description = "Does this adf aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf1has Dme",
                    Id = DataRefId.CockpitRadiosAdf1HasDme,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosAdf2HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_has_dme",
                    Units = "bool",
                    Description = "Does this adf aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Adf2has Dme",
                    Id = DataRefId.CockpitRadiosAdf2HasDme,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosDme5HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/dme5_has_dme",
                    Units = "bool",
                    Description = "Does this adf aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Dme5has Dme",
                    Id = DataRefId.CockpitRadiosDme5HasDme,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosObsMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/obs_mag",
                    Units = "???",
                    Description = "OBS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Obs Mag",
                    Id = DataRefId.CockpitRadiosObsMag,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitRadiosGearAudioWorking
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gear_audio_working",
                    Units = "???",
                    Description = "Suppresses Gear Audio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Gear Audio Working",
                    Id = DataRefId.CockpitRadiosGearAudioWorking,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosMarkerAudioWorking
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/marker_audio_working",
                    Units = "???",
                    Description = "Suppresses Marker Audio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Marker Audio Working",
                    Id = DataRefId.CockpitRadiosMarkerAudioWorking,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNavType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav_type",
                    Units = "enum",
                    Description = "Type of NAVAID that is tuned in.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav Type",
                    Id = DataRefId.CockpitRadiosNavType,
                    Writable = false,
                    DataType = "int[6]"
                };
            }
        }
        private DataRefElement CockpitRadiosApSrc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/ap_src",
                    Units = "int",
                    Description = "autopilot source 0 is pilot, 1 is copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios AP Src",
                    Id = DataRefId.CockpitRadiosApSrc,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosNavComAdfMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav_com_adf_mode",
                    Units = "int",
                    Description = "for a multifunction receiver...0-5 for nav1,nav2,com1,com2,adf1,adf2.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios Nav Com Adf Mode",
                    Id = DataRefId.CockpitRadiosNavComAdfMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosGpsHasGlideslope
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_has_glideslope",
                    Units = "int",
                    Description = "does the GPS 1 provide vertical guidance?  Write with override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS Has Glideslope",
                    Id = DataRefId.CockpitRadiosGpsHasGlideslope,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitRadiosGps2HasGlideslope
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_has_glideslope",
                    Units = "int",
                    Description = "does the GPS 2 provide vertical guidance?  Write with override_gps",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Radios GPS2has Glideslope",
                    Id = DataRefId.CockpitRadiosGps2HasGlideslope,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesDMERadioSelector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/DME_radio_selector",
                    Units = "???",
                    Description = "Which nav radio is the slaved DME connected to",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches DME Radio Selector",
                    Id = DataRefId.CockpitSwitchesDMERadioSelector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesDMEDistanceOrTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/DME_distance_or_time",
                    Units = "???",
                    Description = "Is the standalone DME showing distance or groundspeed/time",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches DME Distance Or Time",
                    Id = DataRefId.CockpitSwitchesDMEDistanceOrTime,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesHSISelector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/HSI_selector",
                    Units = "???",
                    Description = "Is the HSI showing nav1, nav2, or GPS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches HSI Selector",
                    Id = DataRefId.CockpitSwitchesHSISelector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesHSISelector2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/HSI_selector2",
                    Units = "???",
                    Description = "Is the HSI showing nav1, nav2, or GPS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches HSI Selector2",
                    Id = DataRefId.CockpitSwitchesHSISelector2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesRMISelector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_selector",
                    Units = "???",
                    Description = "Is the RMI showing nav1, nav2, or GPS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches RMI Selector",
                    Id = DataRefId.CockpitSwitchesRMISelector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesRMISelector2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_selector2",
                    Units = "???",
                    Description = "Is the RMI showing nav1, nav2, or GPS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches RMI Selector2",
                    Id = DataRefId.CockpitSwitchesRMISelector2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesRMILVorAdfSelector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_l_vor_adf_selector",
                    Units = "???",
                    Description = "Is the left side of a VOR/ADF RMI showing the VOR or ADF",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches RMIL Vor Adf Selector",
                    Id = DataRefId.CockpitSwitchesRMILVorAdfSelector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesRMILVorAdfSelector2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_l_vor_adf_selector2",
                    Units = "???",
                    Description = "Is the left side of a VOR/ADF RMI showing the VOR or ADF",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches RMIL Vor Adf Selector2",
                    Id = DataRefId.CockpitSwitchesRMILVorAdfSelector2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesRMIRVorAdfSelector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_r_vor_adf_selector",
                    Units = "???",
                    Description = "Is the right side of a VOR/ADF RMI showing the VOR or ADF",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches RMIR Vor Adf Selector",
                    Id = DataRefId.CockpitSwitchesRMIRVorAdfSelector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesRMIRVorAdfSelector2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_r_vor_adf_selector2",
                    Units = "???",
                    Description = "Is the right side of a VOR/ADF RMI showing the VOR or ADF",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches RMIR Vor Adf Selector2",
                    Id = DataRefId.CockpitSwitchesRMIRVorAdfSelector2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISDme1Selector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_dme_1_selector",
                    Units = "???",
                    Description = "Is the first EFIS DME showing nothing, dist to VOR, or dist to ADF",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Dme1selector",
                    Id = DataRefId.CockpitSwitchesEFISDme1Selector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISDme2Selector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_dme_2_selector",
                    Units = "???",
                    Description = "Is the second EFIS DME showing nothing, dist to VOR, or dist to ADF",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Dme2selector",
                    Id = DataRefId.CockpitSwitchesEFISDme2Selector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesMarkerPanelOut
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/marker_panel_out",
                    Units = "???",
                    Description = "Settings for the marker beacon audio panel",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Marker Panel Out",
                    Id = DataRefId.CockpitSwitchesMarkerPanelOut,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAudioPanelOut
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/audio_panel_out",
                    Units = "???",
                    Description = "Settings for the com radio audio panel. 6=com1,7=com2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Audio Panel Out",
                    Id = DataRefId.CockpitSwitchesAudioPanelOut,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_on",
                    Units = "bool",
                    Description = "Is the anti-icing system on.  This turns on EVERY anti-ice system.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice On",
                    Id = DataRefId.CockpitSwitchesAntiIceOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceInletHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_inlet_heat",
                    Units = "bool",
                    Description = "Turns on inlet heating for engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Inlet Heat",
                    Id = DataRefId.CockpitSwitchesAntiIceInletHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceInletHeatPerEnigne
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_inlet_heat_per_enigne",
                    Units = "bool",
                    Description = "Turns on inlet heating - array access to all engines, up to 8. (Deprecated - use correct spelled dataref)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Inlet Heat Per Enigne",
                    Id = DataRefId.CockpitSwitchesAntiIceInletHeatPerEnigne,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceInletHeatPerEngine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_inlet_heat_per_engine",
                    Units = "bool",
                    Description = "Turns on inlet heating - array access to all engines, up to 8.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Inlet Heat Per Engine",
                    Id = DataRefId.CockpitSwitchesAntiIceInletHeatPerEngine,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIcePropHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_prop_heat",
                    Units = "bool",
                    Description = "Turns on prop heat for prop 1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Prop Heat",
                    Id = DataRefId.CockpitSwitchesAntiIcePropHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIcePropHeatPerEngine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_prop_heat_per_engine",
                    Units = "bool",
                    Description = "Turns on prop heat - array access to all props, up to 8.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Prop Heat Per Engine",
                    Id = DataRefId.CockpitSwitchesAntiIcePropHeatPerEngine,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceWindowHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_window_heat",
                    Units = "bool",
                    Description = "Turns on anti-icing fr the windshield",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Window Heat",
                    Id = DataRefId.CockpitSwitchesAntiIceWindowHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesPitotHeatOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/pitot_heat_on",
                    Units = "bool",
                    Description = "Is the pitot heat on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Pitot Heat On",
                    Id = DataRefId.CockpitSwitchesPitotHeatOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesPitotHeatOn2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/pitot_heat_on2",
                    Units = "bool",
                    Description = "Is the backup pitot heat on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Pitot Heat On2",
                    Id = DataRefId.CockpitSwitchesPitotHeatOn2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesStaticHeatOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/static_heat_on",
                    Units = "bool",
                    Description = "Is the port heat on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Static Heat On",
                    Id = DataRefId.CockpitSwitchesStaticHeatOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesStaticHeatOn2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/static_heat_on2",
                    Units = "bool",
                    Description = "Is the backup port heat on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Static Heat On2",
                    Id = DataRefId.CockpitSwitchesStaticHeatOn2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceAOAHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_AOA_heat",
                    Units = "bool",
                    Description = "Turns on anti-icing for alpha vane heater, pilot side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice AOA Heat",
                    Id = DataRefId.CockpitSwitchesAntiIceAOAHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceAOAHeat2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_AOA_heat2",
                    Units = "bool",
                    Description = "Turns on anti-icing for alpha vane heater, copilot side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice AOA Heat2",
                    Id = DataRefId.CockpitSwitchesAntiIceAOAHeat2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceSurfHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_surf_heat",
                    Units = "bool",
                    Description = "Turns on surface heat on the wings",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Surf Heat",
                    Id = DataRefId.CockpitSwitchesAntiIceSurfHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceSurfHeatLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_surf_heat_left",
                    Units = "bool",
                    Description = "Turns on surface heat on the left wing",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Surf Heat Left",
                    Id = DataRefId.CockpitSwitchesAntiIceSurfHeatLeft,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceSurfHeatRight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_surf_heat_right",
                    Units = "bool",
                    Description = "Turns on surface heat on the right wing",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Surf Heat Right",
                    Id = DataRefId.CockpitSwitchesAntiIceSurfHeatRight,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceSurfBoot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_surf_boot",
                    Units = "bool",
                    Description = "Turns on the wing-surface anti-ice boot, which knocks ice off the leading edge, once a certain thickness has accumulated.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Surf Boot",
                    Id = DataRefId.CockpitSwitchesAntiIceSurfBoot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceEngineAir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_engine_air",
                    Units = "ratio",
                    Description = "????",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Engine Air",
                    Id = DataRefId.CockpitSwitchesAntiIceEngineAir,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement CockpitSwitchesAntiIceAutoIgnite
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_auto_ignite",
                    Units = "bool",
                    Description = "ignition source is turned on automatically on low N1 to prevent flameout",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Anti Ice Auto Ignite",
                    Id = DataRefId.CockpitSwitchesAntiIceAutoIgnite,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesIceDetect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/ice_detect",
                    Units = "bool",
                    Description = "Turns on ice detect",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Ice Detect",
                    Id = DataRefId.CockpitSwitchesIceDetect,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAutoBrakeSettings
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/auto_brake_settings",
                    Units = "???",
                    Description = "Settings for the autobrake control",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Auto Brake Settings",
                    Id = DataRefId.CockpitSwitchesAutoBrakeSettings,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesAutoFeatherMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/auto_feather_mode",
                    Units = "???",
                    Description = "Settings for auto-feathering mode",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Auto Feather Mode",
                    Id = DataRefId.CockpitSwitchesAutoFeatherMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesYawDamperOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/yaw_damper_on",
                    Units = "???",
                    Description = "Is the yaw damper on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Yaw Damper On",
                    Id = DataRefId.CockpitSwitchesYawDamperOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesArtStabOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/art_stab_on",
                    Units = "???",
                    Description = "Is the artificial stability system on?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Art Stab On",
                    Id = DataRefId.CockpitSwitchesArtStabOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesPreRotateLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/pre_rotate_level",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Pre Rotate Level",
                    Id = DataRefId.CockpitSwitchesPreRotateLevel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesParachuteOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/parachute_on",
                    Units = "???",
                    Description = "Is the parachute deployed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Parachute On",
                    Id = DataRefId.CockpitSwitchesParachuteOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesJatoOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/jato_on",
                    Units = "???",
                    Description = "Are jatos on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Jato On",
                    Id = DataRefId.CockpitSwitchesJatoOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesPropSyncOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/prop_sync_on",
                    Units = "???",
                    Description = "Is prop sync on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Prop Sync On",
                    Id = DataRefId.CockpitSwitchesPropSyncOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesPuffersOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/puffers_on",
                    Units = "???",
                    Description = "Are puffers on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Puffers On",
                    Id = DataRefId.CockpitSwitchesPuffersOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesWaterScoop
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/water_scoop",
                    Units = "???",
                    Description = "Is water scoop active",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Water Scoop",
                    Id = DataRefId.CockpitSwitchesWaterScoop,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesArrestingGear
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/arresting_gear",
                    Units = "???",
                    Description = "Is the arresting gear deployed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Arresting Gear",
                    Id = DataRefId.CockpitSwitchesArrestingGear,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesCanopyReq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/canopy_req",
                    Units = "???",
                    Description = "Is the canopy handle open",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Canopy Req",
                    Id = DataRefId.CockpitSwitchesCanopyReq,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesDumpingFuel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/dumping_fuel",
                    Units = "???",
                    Description = "Are we dumping fuel",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Dumping Fuel",
                    Id = DataRefId.CockpitSwitchesDumpingFuel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesTotEnerAudio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/tot_ener_audio",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Tot Ener Audio",
                    Id = DataRefId.CockpitSwitchesTotEnerAudio,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISMapMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_map_mode",
                    Units = "???",
                    Description = "Is the moving map showing the map or another HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Map Mode",
                    Id = DataRefId.CockpitSwitchesEFISMapMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISMapSubmode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_map_submode",
                    Units = "enum",
                    Description = "0=app,1=vor,2=map,3=nav,4=pln specific mode of the map (or HSI)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Map Submode",
                    Id = DataRefId.CockpitSwitchesEFISMapSubmode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISMapRangeSelector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_map_range_selector",
                    Units = "???",
                    Description = "The display range for the moving map",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Map Range Selector",
                    Id = DataRefId.CockpitSwitchesEFISMapRangeSelector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesECAMMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/ECAM_mode",
                    Units = "???",
                    Description = "The display mode for the ECAM",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches ECAM Mode",
                    Id = DataRefId.CockpitSwitchesECAMMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesGearHandleStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/gear_handle_status",
                    Units = "boolean",
                    Description = "Gear handle is up or down?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Gear Handle Status",
                    Id = DataRefId.CockpitSwitchesGearHandleStatus,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFIFSShowsWeather
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIFS_shows_weather",
                    Units = "boolean",
                    Description = "Does the EFIS display show storms/weather? - legacy - origin dataref contained a typo",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIFS Shows Weather",
                    Id = DataRefId.CockpitSwitchesEFIFSShowsWeather,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISShowsWeather
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_weather",
                    Units = "boolean",
                    Description = "Does the EFIS display show storms/weather?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Shows Weather",
                    Id = DataRefId.CockpitSwitchesEFISShowsWeather,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISWeatherAlpha
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_weather_alpha",
                    Units = "ratio",
                    Description = "Alpha level of EFIS weather from 0 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Weather Alpha",
                    Id = DataRefId.CockpitSwitchesEFISWeatherAlpha,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISShowsTcas
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_tcas",
                    Units = "boolean",
                    Description = "Does the EFIS show other aircraft?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Shows Tcas",
                    Id = DataRefId.CockpitSwitchesEFISShowsTcas,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISShowsAirports
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_airports",
                    Units = "boolean",
                    Description = "Does the EFIS show other airports?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Shows Airports",
                    Id = DataRefId.CockpitSwitchesEFISShowsAirports,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISShowsWaypoints
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_waypoints",
                    Units = "boolean",
                    Description = "Does the EFIS show waypoints?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Shows Waypoints",
                    Id = DataRefId.CockpitSwitchesEFISShowsWaypoints,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISShowsVors
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_VORs",
                    Units = "boolean",
                    Description = "Does the EFIS show VORs?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Shows Vors",
                    Id = DataRefId.CockpitSwitchesEFISShowsVors,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesEFISShowsNdbs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_NDBs",
                    Units = "boolean",
                    Description = "Does the EFIS show NDBs?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches EFIS Shows Ndbs",
                    Id = DataRefId.CockpitSwitchesEFISShowsNdbs,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesArgusMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/argus_mode",
                    Units = "enum",
                    Description = "What mode is the Argus 2000 in",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Argus Mode",
                    Id = DataRefId.CockpitSwitchesArgusMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesNoSmoking
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/no_smoking",
                    Units = "boolean",
                    Description = "No Smoking",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches No Smoking",
                    Id = DataRefId.CockpitSwitchesNoSmoking,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitSwitchesFastenSeatBelts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/switches/fasten_seat_belts",
                    Units = "boolean",
                    Description = "Fasten Seat Belts",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Switches Fasten Seat Belts",
                    Id = DataRefId.CockpitSwitchesFastenSeatBelts,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsMasterCautionTimeout
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/master_caution_timeout",
                    Units = "seconds",
                    Description = "Time master caution will go out.  (Use command-system instead of this dataref.)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Master Caution Timeout",
                    Id = DataRefId.CockpitWarningsMasterCautionTimeout,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitWarningsMasterCautionOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/master_caution_on",
                    Units = "boolean",
                    Description = "Master caution is enabled for being lit (because it is not pressed)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Master Caution On",
                    Id = DataRefId.CockpitWarningsMasterCautionOn,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitWarningsMasterWarningOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/master_warning_on",
                    Units = "boolean",
                    Description = "Master warning is enabled for being lit (because it is not pressed)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Master Warning On",
                    Id = DataRefId.CockpitWarningsMasterWarningOn,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitWarningsMasterAcceptOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/master_accept_on",
                    Units = "boolean",
                    Description = "Master accept is enabled for being lit (because it is not pressed)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Master Accept On",
                    Id = DataRefId.CockpitWarningsMasterAcceptOn,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorTestTimeout
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciator_test_timeout",
                    Units = "seconds",
                    Description = "Time annunciator test will end (use annunciator_test_pressed instead)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciator Test Timeout",
                    Id = DataRefId.CockpitWarningsAnnunciatorTestTimeout,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorTestPressed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciator_test_pressed",
                    Units = "boolean",
                    Description = "True if the annunciator test button is pressed now.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciator Test Pressed",
                    Id = DataRefId.CockpitWarningsAnnunciatorTestPressed,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAutopilotTestBeeping
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/autopilot_test_beeping",
                    Units = "boolean",
                    Description = "The autopilot is beeping as part of its self-test",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Autopilot Test Beeping",
                    Id = DataRefId.CockpitWarningsAutopilotTestBeeping,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAutopilotTestModesLit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/autopilot_test_modes_lit",
                    Units = "boolean",
                    Description = "The autopilot mode lights are on as part of its self test",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Autopilot Test Modes Lit",
                    Id = DataRefId.CockpitWarningsAutopilotTestModesLit,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAutopilotTestTrimLit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/autopilot_test_trim_lit",
                    Units = "boolean",
                    Description = "The autopilot trim lights are on as part of its self test",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Autopilot Test Trim Lit",
                    Id = DataRefId.CockpitWarningsAutopilotTestTrimLit,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAutopilotTestApLit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/autopilot_test_ap_lit",
                    Units = "boolean",
                    Description = "The autopilot engaged lights are on as part of their self test",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Autopilot Test AP Lit",
                    Id = DataRefId.CockpitWarningsAutopilotTestApLit,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsMasterCaution
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/master_caution",
                    Units = "boolean",
                    Description = "Master caution light on/off",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Master Caution",
                    Id = DataRefId.CockpitWarningsAnnunciatorsMasterCaution,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsMasterWarning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/master_warning",
                    Units = "boolean",
                    Description = "Master warning",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Master Warning",
                    Id = DataRefId.CockpitWarningsAnnunciatorsMasterWarning,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsMasterAccept
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/master_accept",
                    Units = "boolean",
                    Description = "Master accept light on/off",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Master Accept",
                    Id = DataRefId.CockpitWarningsAnnunciatorsMasterAccept,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAutopilotDisconnect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_disconnect",
                    Units = "boolean",
                    Description = "autopilot has been disconnected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Autopilot Disconnect",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAutopilotDisconnect,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsLowVacuum
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/low_vacuum",
                    Units = "boolean",
                    Description = "low vacuum pressure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Low Vacuum",
                    Id = DataRefId.CockpitWarningsAnnunciatorsLowVacuum,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsLowVoltage
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/low_voltage",
                    Units = "boolean",
                    Description = "low battery voltage",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Low Voltage",
                    Id = DataRefId.CockpitWarningsAnnunciatorsLowVoltage,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsFuelQuantity
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/fuel_quantity",
                    Units = "boolean",
                    Description = "running out of fuel",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Fuel Quantity",
                    Id = DataRefId.CockpitWarningsAnnunciatorsFuelQuantity,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsHydraulicPressure
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/hydraulic_pressure",
                    Units = "boolean",
                    Description = "hydraulic pressure low",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Hydraulic Pressure",
                    Id = DataRefId.CockpitWarningsAnnunciatorsHydraulicPressure,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsSpeedbrake
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/speedbrake",
                    Units = "boolean",
                    Description = "speedbrakes deployed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Speedbrake",
                    Id = DataRefId.CockpitWarningsAnnunciatorsSpeedbrake,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsGPWS
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/GPWS",
                    Units = "boolean",
                    Description = "GPWS failed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators GPWS",
                    Id = DataRefId.CockpitWarningsAnnunciatorsGPWS,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsIce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/ice",
                    Units = "boolean",
                    Description = "ice detected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Ice",
                    Id = DataRefId.CockpitWarningsAnnunciatorsIce,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsLoRotor
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/lo_rotor",
                    Units = "boolean",
                    Description = "low rotor speed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Lo Rotor",
                    Id = DataRefId.CockpitWarningsAnnunciatorsLoRotor,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsHiRotor
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/hi_rotor",
                    Units = "boolean",
                    Description = "high rotor speed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Hi Rotor",
                    Id = DataRefId.CockpitWarningsAnnunciatorsHiRotor,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsPitotHeatOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/pitot_heat_off",
                    Units = "boolean",
                    Description = "pitot heat off",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Pitot Heat Off",
                    Id = DataRefId.CockpitWarningsAnnunciatorsPitotHeatOff,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsTransonic
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/transonic",
                    Units = "boolean",
                    Description = "transonic",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Transonic",
                    Id = DataRefId.CockpitWarningsAnnunciatorsTransonic,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsSlats
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/slats",
                    Units = "boolean",
                    Description = "slats deployed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Slats",
                    Id = DataRefId.CockpitWarningsAnnunciatorsSlats,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsFlightDirector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/flight_director",
                    Units = "boolean",
                    Description = "flight director failure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Flight Director",
                    Id = DataRefId.CockpitWarningsAnnunciatorsFlightDirector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAutopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot",
                    Units = "boolean",
                    Description = "autopilot failure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Autopilot",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAutopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsYawDamper
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/yaw_damper",
                    Units = "boolean",
                    Description = "yaw damper failure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Yaw Damper",
                    Id = DataRefId.CockpitWarningsAnnunciatorsYawDamper,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsFuelPressureLow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/fuel_pressure_low",
                    Units = "boolean",
                    Description = "fuel pressure low - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Fuel Pressure Low",
                    Id = DataRefId.CockpitWarningsAnnunciatorsFuelPressureLow,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsOilPressureLow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/oil_pressure_low",
                    Units = "boolean",
                    Description = "fuel pressure low - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Oil Pressure Low",
                    Id = DataRefId.CockpitWarningsAnnunciatorsOilPressureLow,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsOilTemperatureHigh
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/oil_temperature_high",
                    Units = "boolean",
                    Description = "oil temperature high - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Oil Temperature High",
                    Id = DataRefId.CockpitWarningsAnnunciatorsOilTemperatureHigh,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsGeneratorOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/generator_off",
                    Units = "boolean",
                    Description = "generator off - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Generator Off",
                    Id = DataRefId.CockpitWarningsAnnunciatorsGeneratorOff,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsChipDetected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/chip_detected",
                    Units = "boolean",
                    Description = "chip detected - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Chip Detected",
                    Id = DataRefId.CockpitWarningsAnnunciatorsChipDetected,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsEngineFires
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/engine_fires",
                    Units = "boolean",
                    Description = "engine fire - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Engine Fires",
                    Id = DataRefId.CockpitWarningsAnnunciatorsEngineFires,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsIgniterOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/igniter_on",
                    Units = "boolean",
                    Description = "igniter on - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Igniter On",
                    Id = DataRefId.CockpitWarningsAnnunciatorsIgniterOn,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsReverserOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/reverser_on",
                    Units = "boolean",
                    Description = "reverser on - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Reverser On",
                    Id = DataRefId.CockpitWarningsAnnunciatorsReverserOn,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsBurnerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/burner_on",
                    Units = "boolean",
                    Description = "burner on - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Burner On",
                    Id = DataRefId.CockpitWarningsAnnunciatorsBurnerOn,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsInverterOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/inverter_off",
                    Units = "boolean",
                    Description = "inverter off - per 2 inverters",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Inverter Off",
                    Id = DataRefId.CockpitWarningsAnnunciatorsInverterOff,
                    Writable = true,
                    DataType = "int[2]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsN1Low
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/N1_low",
                    Units = "boolean",
                    Description = "N1 of engine is too low for AC - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators N1low",
                    Id = DataRefId.CockpitWarningsAnnunciatorsN1Low,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsN1High
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/N1_high",
                    Units = "boolean",
                    Description = "N1 too high - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators N1high",
                    Id = DataRefId.CockpitWarningsAnnunciatorsN1High,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsReverserNotReady
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/reverser_not_ready",
                    Units = "boolean",
                    Description = "reversers not ready",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Reverser Not Ready",
                    Id = DataRefId.CockpitWarningsAnnunciatorsReverserNotReady,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsIceVaneExtend
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/ice_vane_extend",
                    Units = "boolean",
                    Description = "ice vain extended (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Ice Vane Extend",
                    Id = DataRefId.CockpitWarningsAnnunciatorsIceVaneExtend,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsIceVaneFail
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/ice_vane_fail",
                    Units = "boolean",
                    Description = "ice vain failed (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Ice Vane Fail",
                    Id = DataRefId.CockpitWarningsAnnunciatorsIceVaneFail,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsBleedAirOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/bleed_air_off",
                    Units = "boolean",
                    Description = "bleed air off (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Bleed Air Off",
                    Id = DataRefId.CockpitWarningsAnnunciatorsBleedAirOff,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsBleedAirFail
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/bleed_air_fail",
                    Units = "boolean",
                    Description = "bleed air failed (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Bleed Air Fail",
                    Id = DataRefId.CockpitWarningsAnnunciatorsBleedAirFail,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAutoFeatherArm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/auto_feather_arm",
                    Units = "boolean",
                    Description = "auto feather armed (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Auto Feather Arm",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAutoFeatherArm,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsFuelTransfer
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/fuel_transfer",
                    Units = "boolean",
                    Description = "fuel transfer on (per tank)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Fuel Transfer",
                    Id = DataRefId.CockpitWarningsAnnunciatorsFuelTransfer,
                    Writable = true,
                    DataType = "int[9]"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsHvac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/hvac",
                    Units = "boolean",
                    Description = "duct overheated",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Hvac",
                    Id = DataRefId.CockpitWarningsAnnunciatorsHvac,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsBatteryChargeHi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/battery_charge_hi",
                    Units = "boolean",
                    Description = "battery is charging too rapidly - may overheat",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Battery Charge Hi",
                    Id = DataRefId.CockpitWarningsAnnunciatorsBatteryChargeHi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsCabinAltitude12500
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/cabin_altitude_12500",
                    Units = "boolean",
                    Description = "cabin altitude at or above 12500",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Cabin Altitude12500",
                    Id = DataRefId.CockpitWarningsAnnunciatorsCabinAltitude12500,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAutopilotTrimFail
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_trim_fail",
                    Units = "boolean",
                    Description = "autopilot trim failure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Autopilot Trim Fail",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAutopilotTrimFail,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsElectricTrimOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/electric_trim_off",
                    Units = "boolean",
                    Description = "electric trim is off",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Electric Trim Off",
                    Id = DataRefId.CockpitWarningsAnnunciatorsElectricTrimOff,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsCrossfeedOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/crossfeed_on",
                    Units = "boolean",
                    Description = "crossfeed on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Crossfeed On",
                    Id = DataRefId.CockpitWarningsAnnunciatorsCrossfeedOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsLandingTaxiLite
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/landing_taxi_lite",
                    Units = "boolean",
                    Description = "landing or taxiway light on but gear up",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Landing Taxi Lite",
                    Id = DataRefId.CockpitWarningsAnnunciatorsLandingTaxiLite,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsCabinDoorOpen
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/cabin_door_open",
                    Units = "boolean",
                    Description = "cabin door is open",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Cabin Door Open",
                    Id = DataRefId.CockpitWarningsAnnunciatorsCabinDoorOpen,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsExternalPowerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/external_power_on",
                    Units = "boolean",
                    Description = "external power is on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators External Power On",
                    Id = DataRefId.CockpitWarningsAnnunciatorsExternalPowerOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsPassengerOxyOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/passenger_oxy_on",
                    Units = "boolean",
                    Description = "passenger oxygen on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Passenger Oxy On",
                    Id = DataRefId.CockpitWarningsAnnunciatorsPassengerOxyOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsGearUnsafe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/gear_unsafe",
                    Units = "boolean",
                    Description = "gear is unsafe",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Gear Unsafe",
                    Id = DataRefId.CockpitWarningsAnnunciatorsGearUnsafe,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAutopilotTrimDown
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_trim_down",
                    Units = "boolean",
                    Description = "autopilot trimming down",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Autopilot Trim Down",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAutopilotTrimDown,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAutopilotTrimUp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_trim_up",
                    Units = "boolean",
                    Description = "autopilot trimming up",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Autopilot Trim Up",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAutopilotTrimUp,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAutopilotBankLimit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_bank_limit",
                    Units = "boolean",
                    Description = "autopilot bank limit is turned ON, autopilot will keep bank below 12.5 degrees of bank",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Autopilot Bank Limit",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAutopilotBankLimit,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAutopilotSoftRide
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_soft_ride",
                    Units = "boolean",
                    Description = "autopilot soft ride is on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Autopilot Soft Ride",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAutopilotSoftRide,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsNoInverters
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/no_inverters",
                    Units = "boolean",
                    Description = "no inverters are on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators No Inverters",
                    Id = DataRefId.CockpitWarningsAnnunciatorsNoInverters,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsGlideslope
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/glideslope",
                    Units = "boolean",
                    Description = "glideslope deviation",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Glideslope",
                    Id = DataRefId.CockpitWarningsAnnunciatorsGlideslope,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsFuelPressure
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/fuel_pressure",
                    Units = "bitfield",
                    Description = "fuel pressure low",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Fuel Pressure",
                    Id = DataRefId.CockpitWarningsAnnunciatorsFuelPressure,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsOilPressure
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/oil_pressure",
                    Units = "bitfield",
                    Description = "oil pressure low",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Oil Pressure",
                    Id = DataRefId.CockpitWarningsAnnunciatorsOilPressure,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsOilTemperature
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/oil_temperature",
                    Units = "bitfield",
                    Description = "oil temperature too high",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Oil Temperature",
                    Id = DataRefId.CockpitWarningsAnnunciatorsOilTemperature,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsGenerator
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/generator",
                    Units = "bitfield",
                    Description = "generators are off or broken",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Generator",
                    Id = DataRefId.CockpitWarningsAnnunciatorsGenerator,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsChipDetect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/chip_detect",
                    Units = "bitfield",
                    Description = "a chip has been detected in, um, a prop or turbine?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Chip Detect",
                    Id = DataRefId.CockpitWarningsAnnunciatorsChipDetect,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsEngineFire
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/engine_fire",
                    Units = "bitfield",
                    Description = "yer engines are on fire, fer cryin out loud",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Engine Fire",
                    Id = DataRefId.CockpitWarningsAnnunciatorsEngineFire,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAutoIgnition
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/auto_ignition",
                    Units = "bitfield",
                    Description = "auto ignition ???",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Auto Ignition",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAutoIgnition,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsReverse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/reverse",
                    Units = "bitfield",
                    Description = "reversers deployed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Reverse",
                    Id = DataRefId.CockpitWarningsAnnunciatorsReverse,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsAfterburnersOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/afterburners_on",
                    Units = "bitfield",
                    Description = "afterburners on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Afterburners On",
                    Id = DataRefId.CockpitWarningsAnnunciatorsAfterburnersOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWarningsAnnunciatorsInverter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/inverter",
                    Units = "bitfield",
                    Description = "inverters are off or broken",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Warnings Annunciators Inverter",
                    Id = DataRefId.CockpitWarningsAnnunciatorsInverter,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsGunsArmed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/guns_armed",
                    Units = "???",
                    Description = "Are guns armed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Guns Armed",
                    Id = DataRefId.CockpitWeaponsGunsArmed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsRocketsArmed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/rockets_armed",
                    Units = "???",
                    Description = "Are rockets armed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Rockets Armed",
                    Id = DataRefId.CockpitWeaponsRocketsArmed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsMissilesArmed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/missiles_armed",
                    Units = "???",
                    Description = "Are missiles armed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Missiles Armed",
                    Id = DataRefId.CockpitWeaponsMissilesArmed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsBombsArmed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/bombs_armed",
                    Units = "???",
                    Description = "Are bombs armed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Bombs Armed",
                    Id = DataRefId.CockpitWeaponsBombsArmed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsFiringMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/firing_mode",
                    Units = "???",
                    Description = "Firing mode (single, ripple, etc. for bombs)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Firing Mode",
                    Id = DataRefId.CockpitWeaponsFiringMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsFiringRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/firing_rate",
                    Units = "???",
                    Description = "Firing rate (for bombs)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Firing Rate",
                    Id = DataRefId.CockpitWeaponsFiringRate,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsPlaneTargetIndex
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/plane_target_index",
                    Units = "???",
                    Description = "Index of plane that is being targeted",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Plane Target Index",
                    Id = DataRefId.CockpitWeaponsPlaneTargetIndex,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsChaffNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/chaff_now",
                    Units = "count",
                    Description = "Number of rounds left in the sum of all chaff weapons on aircraft. Missing in 11.00-11.05.  Writable in v10 and earlier.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Chaff Now",
                    Id = DataRefId.CockpitWeaponsChaffNow,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsFlareNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/flare_now",
                    Units = "count",
                    Description = "Number of rounds left in all flare weapons on the aircraft.  Missing in 11.00-11.05.  Writable in v10 and earlier.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Flare Now",
                    Id = DataRefId.CockpitWeaponsFlareNow,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement CockpitWeaponsWpnSelConsole
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit/weapons/wpn_sel_console",
                    Units = "???",
                    Description = "INDIVIDUAL weapon selected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit Weapons Wpn Sel Console",
                    Id = DataRefId.CockpitWeaponsWpnSelConsole,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsSbrkrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/sbrkrat",
                    Units = "[0..1.5]",
                    Description = "Actual speed brake deployment [0..1 = schedule for in-air, 1..1.5 = extra deployment when on ground]",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Sbrkrat",
                    Id = DataRefId.FlightmodelControlsSbrkrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsFlaprqst
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/flaprqst",
                    Units = "[0..1]",
                    Description = "Requested flap deployment, 0 = off, 1 = max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Flaprqst",
                    Id = DataRefId.FlightmodelControlsFlaprqst,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsTailLockRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/tail_lock_rat",
                    Units = "ratio",
                    Description = "This is how locked the tail-wheel is ... 0 is free castoring, 1 is locked.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Tail Lock Rat",
                    Id = DataRefId.FlightmodelControlsTailLockRat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsAilTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/ail_trim",
                    Units = "[-1..1]",
                    Description = "Current Aileron Trim, -1 = max left, 1 = max right",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Ail Trim",
                    Id = DataRefId.FlightmodelControlsAilTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsDist
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/dist",
                    Units = "meters",
                    Description = "Distance Traveled",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Dist",
                    Id = DataRefId.FlightmodelControlsDist,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsElvTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/elv_trim",
                    Units = "[-1..1]",
                    Description = "Elevation Trim, -1 = max nose down, 1 = max nose up",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Elv Trim",
                    Id = DataRefId.FlightmodelControlsElvTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsFlaprat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/flaprat",
                    Units = "[0..1]",
                    Description = "Actual flap 1 deployment ratio",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Flaprat",
                    Id = DataRefId.FlightmodelControlsFlaprat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsFlap2rat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/flap2rat",
                    Units = "[0..1]",
                    Description = "Actual flap 2 deployment ratio",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Flap2rat",
                    Id = DataRefId.FlightmodelControlsFlap2rat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsLBrakeAdd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/l_brake_add",
                    Units = "[0..1]",
                    Description = "Left Brake - additional braking force (",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls L Brake Add",
                    Id = DataRefId.FlightmodelControlsLBrakeAdd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsRBrakeAdd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/r_brake_add",
                    Units = "[0..1]",
                    Description = "Right Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls R Brake Add",
                    Id = DataRefId.FlightmodelControlsRBrakeAdd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsLail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/lail1def",
                    Units = "degrees",
                    Description = "Deflection Left Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Lail1def",
                    Id = DataRefId.FlightmodelControlsLail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsLail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/lail2def",
                    Units = "degrees",
                    Description = "Deflection Left Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Lail2def",
                    Id = DataRefId.FlightmodelControlsLail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsRail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rail1def",
                    Units = "degrees",
                    Description = "Deflection Right Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Rail1def",
                    Id = DataRefId.FlightmodelControlsRail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsRail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rail2def",
                    Units = "degrees",
                    Description = "Deflection Right Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Rail2def",
                    Id = DataRefId.FlightmodelControlsRail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsLdruddef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/ldruddef",
                    Units = "degrees",
                    Description = "Deflection Left Rudder",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Ldruddef",
                    Id = DataRefId.FlightmodelControlsLdruddef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsRdruddef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rdruddef",
                    Units = "degrees",
                    Description = "Deflection Right Rudder",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Rdruddef",
                    Id = DataRefId.FlightmodelControlsRdruddef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsLsplrdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/lsplrdef",
                    Units = "degrees",
                    Description = "Deflection Left Spoiler",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Lsplrdef",
                    Id = DataRefId.FlightmodelControlsLsplrdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsRsplrdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rsplrdef",
                    Units = "degrees",
                    Description = "Deflection Right Spoiler",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Rsplrdef",
                    Id = DataRefId.FlightmodelControlsRsplrdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsAil1Def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/ail1_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Ail1def",
                    Id = DataRefId.FlightmodelControlsAil1Def,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsAil2Def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/ail2_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Ail2def",
                    Id = DataRefId.FlightmodelControlsAil2Def,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsSplrDef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/splr_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Spoilers",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Splr Def",
                    Id = DataRefId.FlightmodelControlsSplrDef,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsSplr2Def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/splr2_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Spoilers 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Splr2def",
                    Id = DataRefId.FlightmodelControlsSplr2Def,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsYawbDef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/yawb_def",
                    Units = "degrees",
                    Description = "[WING]",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Yawb Def",
                    Id = DataRefId.FlightmodelControlsYawbDef,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsRuddDef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rudd_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Rudders",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Rudd Def",
                    Id = DataRefId.FlightmodelControlsRuddDef,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsRudd2Def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rudd2_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Rudders",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Rudd2def",
                    Id = DataRefId.FlightmodelControlsRudd2Def,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsElv1Def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/elv1_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Elevators",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Elv1def",
                    Id = DataRefId.FlightmodelControlsElv1Def,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsElv2Def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/elv2_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Elevators",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Elv2def",
                    Id = DataRefId.FlightmodelControlsElv2Def,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsFla1Def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/fla1_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Flaps",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Fla1def",
                    Id = DataRefId.FlightmodelControlsFla1Def,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsFla2Def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/fla2_def",
                    Units = "degrees",
                    Description = "[WING] Deflection Flaps",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Fla2def",
                    Id = DataRefId.FlightmodelControlsFla2Def,
                    Writable = true,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelControlsSbrkrqst
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/sbrkrqst",
                    Units = "[-0.5..1]",
                    Description = "Speed Brake, -0.5 = armed, 0 = off, 1 = max deployment",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Sbrkrqst",
                    Id = DataRefId.FlightmodelControlsSbrkrqst,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVectrqst
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vectrqst",
                    Units = "[0..1]",
                    Description = "Requested thrust vector",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vectrqst",
                    Id = DataRefId.FlightmodelControlsVectrqst,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsSwdi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/swdi",
                    Units = "[0..1]",
                    Description = "Actual wing sweep ratio",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Swdi",
                    Id = DataRefId.FlightmodelControlsSwdi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsSwdirqst
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/swdirqst",
                    Units = "[0..1]",
                    Description = "Requested sweep ratio",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Swdirqst",
                    Id = DataRefId.FlightmodelControlsSwdirqst,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsSlatrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/slatrat",
                    Units = "[0..1]",
                    Description = "Actual slat deployment ratio",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Slatrat",
                    Id = DataRefId.FlightmodelControlsSlatrat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsParkbrake
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/parkbrake",
                    Units = "[0..1]",
                    Description = "Parking Brake, 1 = max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Parkbrake",
                    Id = DataRefId.FlightmodelControlsParkbrake,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsRotTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rot_trim",
                    Units = "[-1..1]",
                    Description = "Rotor Trim",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Rot Trim",
                    Id = DataRefId.FlightmodelControlsRotTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsRudTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rud_trim",
                    Units = "[-1..1]",
                    Description = "Rudder Trim, -1 = max left, 1 = max right",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Rud Trim",
                    Id = DataRefId.FlightmodelControlsRudTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsIncidRqst
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/incid_rqst",
                    Units = "[0..1]",
                    Description = "Requested incidence",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Incid Rqst",
                    Id = DataRefId.FlightmodelControlsIncidRqst,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsDihedRqst
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/dihed_rqst",
                    Units = "[0..1]",
                    Description = "Requested dihedral",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Dihed Rqst",
                    Id = DataRefId.FlightmodelControlsDihedRqst,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVectRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vect_rat",
                    Units = "[0..1]",
                    Description = "Actual thrust vector",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vect Rat",
                    Id = DataRefId.FlightmodelControlsVectRat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsIncidRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/incid_rat",
                    Units = "[0..1]",
                    Description = "Actual incidence",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Incid Rat",
                    Id = DataRefId.FlightmodelControlsIncidRat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsDihedRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/dihed_rat",
                    Units = "[0..1]",
                    Description = "Actual dihedral",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Dihed Rat",
                    Id = DataRefId.FlightmodelControlsDihedRat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsTailhookRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/tailhook_ratio",
                    Units = "ratio",
                    Description = "tailhook deployment ratio, 0 is up 1 is down",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Tailhook Ratio",
                    Id = DataRefId.FlightmodelControlsTailhookRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsCanopyRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/canopy_ratio",
                    Units = "ratio",
                    Description = "canopy deployment ratio, 0 is down 1 is up",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Canopy Ratio",
                    Id = DataRefId.FlightmodelControlsCanopyRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lAil1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Ail1def",
                    Id = DataRefId.FlightmodelControlsWing1lAil1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lAil2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Ail2def",
                    Id = DataRefId.FlightmodelControlsWing1lAil2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rAil1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Ail1def",
                    Id = DataRefId.FlightmodelControlsWing1rAil1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rAil2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Ail2def",
                    Id = DataRefId.FlightmodelControlsWing1rAil2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lAil1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Ail1def",
                    Id = DataRefId.FlightmodelControlsWing2lAil1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lAil2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Ail2def",
                    Id = DataRefId.FlightmodelControlsWing2lAil2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rAil1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Ail1def",
                    Id = DataRefId.FlightmodelControlsWing2rAil1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rAil2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Ail2def",
                    Id = DataRefId.FlightmodelControlsWing2rAil2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lAil1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Ail1def",
                    Id = DataRefId.FlightmodelControlsWing3lAil1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lAil2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Ail2def",
                    Id = DataRefId.FlightmodelControlsWing3lAil2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rAil1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Ail1def",
                    Id = DataRefId.FlightmodelControlsWing3rAil1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rAil2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Ail2def",
                    Id = DataRefId.FlightmodelControlsWing3rAil2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lAil1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Ail1def",
                    Id = DataRefId.FlightmodelControlsWing4lAil1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lAil2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Ail2def",
                    Id = DataRefId.FlightmodelControlsWing4lAil2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rAil1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Ail1def",
                    Id = DataRefId.FlightmodelControlsWing4rAil1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rAil2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Ail2def",
                    Id = DataRefId.FlightmodelControlsWing4rAil2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lSpo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Spo1def",
                    Id = DataRefId.FlightmodelControlsWing1lSpo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lSpo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Spo2def",
                    Id = DataRefId.FlightmodelControlsWing1lSpo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rSpo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Spo1def",
                    Id = DataRefId.FlightmodelControlsWing1rSpo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rSpo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Spo2def",
                    Id = DataRefId.FlightmodelControlsWing1rSpo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lSpo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Spo1def",
                    Id = DataRefId.FlightmodelControlsWing2lSpo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lSpo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Spo2def",
                    Id = DataRefId.FlightmodelControlsWing2lSpo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rSpo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Spo1def",
                    Id = DataRefId.FlightmodelControlsWing2rSpo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rSpo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Spo2def",
                    Id = DataRefId.FlightmodelControlsWing2rSpo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lSpo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Spo1def",
                    Id = DataRefId.FlightmodelControlsWing3lSpo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lSpo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Spo2def",
                    Id = DataRefId.FlightmodelControlsWing3lSpo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rSpo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Spo1def",
                    Id = DataRefId.FlightmodelControlsWing3rSpo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rSpo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Spo2def",
                    Id = DataRefId.FlightmodelControlsWing3rSpo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lSpo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Spo1def",
                    Id = DataRefId.FlightmodelControlsWing4lSpo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lSpo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Spo2def",
                    Id = DataRefId.FlightmodelControlsWing4lSpo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rSpo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Spo1def",
                    Id = DataRefId.FlightmodelControlsWing4rSpo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rSpo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Spo2def",
                    Id = DataRefId.FlightmodelControlsWing4rSpo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lFla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Fla1def",
                    Id = DataRefId.FlightmodelControlsWing1lFla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lFla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Fla2def",
                    Id = DataRefId.FlightmodelControlsWing1lFla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rFla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Fla1def",
                    Id = DataRefId.FlightmodelControlsWing1rFla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rFla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Fla2def",
                    Id = DataRefId.FlightmodelControlsWing1rFla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lFla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Fla1def",
                    Id = DataRefId.FlightmodelControlsWing2lFla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lFla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Fla2def",
                    Id = DataRefId.FlightmodelControlsWing2lFla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rFla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Fla1def",
                    Id = DataRefId.FlightmodelControlsWing2rFla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rFla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Fla2def",
                    Id = DataRefId.FlightmodelControlsWing2rFla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lFla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Fla1def",
                    Id = DataRefId.FlightmodelControlsWing3lFla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lFla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Fla2def",
                    Id = DataRefId.FlightmodelControlsWing3lFla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rFla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Fla1def",
                    Id = DataRefId.FlightmodelControlsWing3rFla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rFla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Fla2def",
                    Id = DataRefId.FlightmodelControlsWing3rFla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lFla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Fla1def",
                    Id = DataRefId.FlightmodelControlsWing4lFla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lFla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Fla2def",
                    Id = DataRefId.FlightmodelControlsWing4lFla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rFla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Fla1def",
                    Id = DataRefId.FlightmodelControlsWing4rFla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rFla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Fla2def",
                    Id = DataRefId.FlightmodelControlsWing4rFla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lYawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Yawbdef",
                    Id = DataRefId.FlightmodelControlsWing1lYawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rYawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Yawbdef",
                    Id = DataRefId.FlightmodelControlsWing1rYawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lYawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Yawbdef",
                    Id = DataRefId.FlightmodelControlsWing2lYawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rYawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Yawbdef",
                    Id = DataRefId.FlightmodelControlsWing2rYawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lYawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Yawbdef",
                    Id = DataRefId.FlightmodelControlsWing3lYawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rYawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Yawbdef",
                    Id = DataRefId.FlightmodelControlsWing3rYawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lYawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Yawbdef",
                    Id = DataRefId.FlightmodelControlsWing4lYawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rYawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Yawbdef",
                    Id = DataRefId.FlightmodelControlsWing4rYawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab1Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab1elv1def",
                    Id = DataRefId.FlightmodelControlsHstab1Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab1Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab1elv2def",
                    Id = DataRefId.FlightmodelControlsHstab1Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab2Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab2elv1def",
                    Id = DataRefId.FlightmodelControlsHstab2Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab2Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab2elv2def",
                    Id = DataRefId.FlightmodelControlsHstab2Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab1Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_rud1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab1rud1def",
                    Id = DataRefId.FlightmodelControlsVstab1Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab1Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_rud2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab1rud2def",
                    Id = DataRefId.FlightmodelControlsVstab1Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab2Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_rud1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab2rud1def",
                    Id = DataRefId.FlightmodelControlsVstab2Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab2Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_rud2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab2rud2def",
                    Id = DataRefId.FlightmodelControlsVstab2Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01ail1def",
                    Id = DataRefId.FlightmodelControlsMwing01Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01ail2def",
                    Id = DataRefId.FlightmodelControlsMwing01Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01spo1def",
                    Id = DataRefId.FlightmodelControlsMwing01Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01spo2def",
                    Id = DataRefId.FlightmodelControlsMwing01Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01fla1def",
                    Id = DataRefId.FlightmodelControlsMwing01Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01fla2def",
                    Id = DataRefId.FlightmodelControlsMwing01Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing01Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01elv1def",
                    Id = DataRefId.FlightmodelControlsMwing01Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01elv2def",
                    Id = DataRefId.FlightmodelControlsMwing01Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01rud1def",
                    Id = DataRefId.FlightmodelControlsMwing01Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01rud2def",
                    Id = DataRefId.FlightmodelControlsMwing01Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02ail1def",
                    Id = DataRefId.FlightmodelControlsMwing02Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02ail2def",
                    Id = DataRefId.FlightmodelControlsMwing02Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02spo1def",
                    Id = DataRefId.FlightmodelControlsMwing02Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02spo2def",
                    Id = DataRefId.FlightmodelControlsMwing02Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02fla1def",
                    Id = DataRefId.FlightmodelControlsMwing02Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02fla2def",
                    Id = DataRefId.FlightmodelControlsMwing02Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing02Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02elv1def",
                    Id = DataRefId.FlightmodelControlsMwing02Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02elv2def",
                    Id = DataRefId.FlightmodelControlsMwing02Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02rud1def",
                    Id = DataRefId.FlightmodelControlsMwing02Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02rud2def",
                    Id = DataRefId.FlightmodelControlsMwing02Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03ail1def",
                    Id = DataRefId.FlightmodelControlsMwing03Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03ail2def",
                    Id = DataRefId.FlightmodelControlsMwing03Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03spo1def",
                    Id = DataRefId.FlightmodelControlsMwing03Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03spo2def",
                    Id = DataRefId.FlightmodelControlsMwing03Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03fla1def",
                    Id = DataRefId.FlightmodelControlsMwing03Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03fla2def",
                    Id = DataRefId.FlightmodelControlsMwing03Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing03Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03elv1def",
                    Id = DataRefId.FlightmodelControlsMwing03Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03elv2def",
                    Id = DataRefId.FlightmodelControlsMwing03Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03rud1def",
                    Id = DataRefId.FlightmodelControlsMwing03Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03rud2def",
                    Id = DataRefId.FlightmodelControlsMwing03Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04ail1def",
                    Id = DataRefId.FlightmodelControlsMwing04Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04ail2def",
                    Id = DataRefId.FlightmodelControlsMwing04Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04spo1def",
                    Id = DataRefId.FlightmodelControlsMwing04Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04spo2def",
                    Id = DataRefId.FlightmodelControlsMwing04Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04fla1def",
                    Id = DataRefId.FlightmodelControlsMwing04Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04fla2def",
                    Id = DataRefId.FlightmodelControlsMwing04Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing04Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04elv1def",
                    Id = DataRefId.FlightmodelControlsMwing04Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04elv2def",
                    Id = DataRefId.FlightmodelControlsMwing04Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04rud1def",
                    Id = DataRefId.FlightmodelControlsMwing04Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04rud2def",
                    Id = DataRefId.FlightmodelControlsMwing04Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05ail1def",
                    Id = DataRefId.FlightmodelControlsMwing05Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05ail2def",
                    Id = DataRefId.FlightmodelControlsMwing05Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05spo1def",
                    Id = DataRefId.FlightmodelControlsMwing05Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05spo2def",
                    Id = DataRefId.FlightmodelControlsMwing05Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05fla1def",
                    Id = DataRefId.FlightmodelControlsMwing05Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05fla2def",
                    Id = DataRefId.FlightmodelControlsMwing05Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing05Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05elv1def",
                    Id = DataRefId.FlightmodelControlsMwing05Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05elv2def",
                    Id = DataRefId.FlightmodelControlsMwing05Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05rud1def",
                    Id = DataRefId.FlightmodelControlsMwing05Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05rud2def",
                    Id = DataRefId.FlightmodelControlsMwing05Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06ail1def",
                    Id = DataRefId.FlightmodelControlsMwing06Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06ail2def",
                    Id = DataRefId.FlightmodelControlsMwing06Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06spo1def",
                    Id = DataRefId.FlightmodelControlsMwing06Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06spo2def",
                    Id = DataRefId.FlightmodelControlsMwing06Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06fla1def",
                    Id = DataRefId.FlightmodelControlsMwing06Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06fla2def",
                    Id = DataRefId.FlightmodelControlsMwing06Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing06Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06elv1def",
                    Id = DataRefId.FlightmodelControlsMwing06Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06elv2def",
                    Id = DataRefId.FlightmodelControlsMwing06Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06rud1def",
                    Id = DataRefId.FlightmodelControlsMwing06Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06rud2def",
                    Id = DataRefId.FlightmodelControlsMwing06Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07ail1def",
                    Id = DataRefId.FlightmodelControlsMwing07Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07ail2def",
                    Id = DataRefId.FlightmodelControlsMwing07Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07spo1def",
                    Id = DataRefId.FlightmodelControlsMwing07Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07spo2def",
                    Id = DataRefId.FlightmodelControlsMwing07Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07fla1def",
                    Id = DataRefId.FlightmodelControlsMwing07Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07fla2def",
                    Id = DataRefId.FlightmodelControlsMwing07Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing07Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07elv1def",
                    Id = DataRefId.FlightmodelControlsMwing07Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07elv2def",
                    Id = DataRefId.FlightmodelControlsMwing07Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07rud1def",
                    Id = DataRefId.FlightmodelControlsMwing07Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07rud2def",
                    Id = DataRefId.FlightmodelControlsMwing07Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08ail1def",
                    Id = DataRefId.FlightmodelControlsMwing08Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08ail2def",
                    Id = DataRefId.FlightmodelControlsMwing08Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08spo1def",
                    Id = DataRefId.FlightmodelControlsMwing08Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08spo2def",
                    Id = DataRefId.FlightmodelControlsMwing08Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08fla1def",
                    Id = DataRefId.FlightmodelControlsMwing08Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08fla2def",
                    Id = DataRefId.FlightmodelControlsMwing08Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing08Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08elv1def",
                    Id = DataRefId.FlightmodelControlsMwing08Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08elv2def",
                    Id = DataRefId.FlightmodelControlsMwing08Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08rud1def",
                    Id = DataRefId.FlightmodelControlsMwing08Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08rud2def",
                    Id = DataRefId.FlightmodelControlsMwing08Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09ail1def",
                    Id = DataRefId.FlightmodelControlsMwing09Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09ail2def",
                    Id = DataRefId.FlightmodelControlsMwing09Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09spo1def",
                    Id = DataRefId.FlightmodelControlsMwing09Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09spo2def",
                    Id = DataRefId.FlightmodelControlsMwing09Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09fla1def",
                    Id = DataRefId.FlightmodelControlsMwing09Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09fla2def",
                    Id = DataRefId.FlightmodelControlsMwing09Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing09Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09elv1def",
                    Id = DataRefId.FlightmodelControlsMwing09Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09elv2def",
                    Id = DataRefId.FlightmodelControlsMwing09Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09rud1def",
                    Id = DataRefId.FlightmodelControlsMwing09Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09rud2def",
                    Id = DataRefId.FlightmodelControlsMwing09Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10ail1def",
                    Id = DataRefId.FlightmodelControlsMwing10Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10ail2def",
                    Id = DataRefId.FlightmodelControlsMwing10Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10spo1def",
                    Id = DataRefId.FlightmodelControlsMwing10Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10spo2def",
                    Id = DataRefId.FlightmodelControlsMwing10Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10fla1def",
                    Id = DataRefId.FlightmodelControlsMwing10Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10fla2def",
                    Id = DataRefId.FlightmodelControlsMwing10Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing10Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10elv1def",
                    Id = DataRefId.FlightmodelControlsMwing10Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10elv2def",
                    Id = DataRefId.FlightmodelControlsMwing10Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10rud1def",
                    Id = DataRefId.FlightmodelControlsMwing10Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10rud2def",
                    Id = DataRefId.FlightmodelControlsMwing10Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11ail1def",
                    Id = DataRefId.FlightmodelControlsMwing11Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11ail2def",
                    Id = DataRefId.FlightmodelControlsMwing11Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11spo1def",
                    Id = DataRefId.FlightmodelControlsMwing11Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11spo2def",
                    Id = DataRefId.FlightmodelControlsMwing11Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11fla1def",
                    Id = DataRefId.FlightmodelControlsMwing11Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11fla2def",
                    Id = DataRefId.FlightmodelControlsMwing11Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing11Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11elv1def",
                    Id = DataRefId.FlightmodelControlsMwing11Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11elv2def",
                    Id = DataRefId.FlightmodelControlsMwing11Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11rud1def",
                    Id = DataRefId.FlightmodelControlsMwing11Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11rud2def",
                    Id = DataRefId.FlightmodelControlsMwing11Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12ail1def",
                    Id = DataRefId.FlightmodelControlsMwing12Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12ail2def",
                    Id = DataRefId.FlightmodelControlsMwing12Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12spo1def",
                    Id = DataRefId.FlightmodelControlsMwing12Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12spo2def",
                    Id = DataRefId.FlightmodelControlsMwing12Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12fla1def",
                    Id = DataRefId.FlightmodelControlsMwing12Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12fla2def",
                    Id = DataRefId.FlightmodelControlsMwing12Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing12Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12elv1def",
                    Id = DataRefId.FlightmodelControlsMwing12Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12elv2def",
                    Id = DataRefId.FlightmodelControlsMwing12Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12rud1def",
                    Id = DataRefId.FlightmodelControlsMwing12Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12rud2def",
                    Id = DataRefId.FlightmodelControlsMwing12Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13ail1def",
                    Id = DataRefId.FlightmodelControlsMwing13Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13ail2def",
                    Id = DataRefId.FlightmodelControlsMwing13Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13spo1def",
                    Id = DataRefId.FlightmodelControlsMwing13Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13spo2def",
                    Id = DataRefId.FlightmodelControlsMwing13Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13fla1def",
                    Id = DataRefId.FlightmodelControlsMwing13Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13fla2def",
                    Id = DataRefId.FlightmodelControlsMwing13Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing13Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13elv1def",
                    Id = DataRefId.FlightmodelControlsMwing13Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13elv2def",
                    Id = DataRefId.FlightmodelControlsMwing13Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13rud1def",
                    Id = DataRefId.FlightmodelControlsMwing13Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13rud2def",
                    Id = DataRefId.FlightmodelControlsMwing13Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14ail1def",
                    Id = DataRefId.FlightmodelControlsMwing14Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14ail2def",
                    Id = DataRefId.FlightmodelControlsMwing14Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14spo1def",
                    Id = DataRefId.FlightmodelControlsMwing14Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14spo2def",
                    Id = DataRefId.FlightmodelControlsMwing14Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14fla1def",
                    Id = DataRefId.FlightmodelControlsMwing14Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14fla2def",
                    Id = DataRefId.FlightmodelControlsMwing14Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing14Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14elv1def",
                    Id = DataRefId.FlightmodelControlsMwing14Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14elv2def",
                    Id = DataRefId.FlightmodelControlsMwing14Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14rud1def",
                    Id = DataRefId.FlightmodelControlsMwing14Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14rud2def",
                    Id = DataRefId.FlightmodelControlsMwing14Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15ail1def",
                    Id = DataRefId.FlightmodelControlsMwing15Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15ail2def",
                    Id = DataRefId.FlightmodelControlsMwing15Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15spo1def",
                    Id = DataRefId.FlightmodelControlsMwing15Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15spo2def",
                    Id = DataRefId.FlightmodelControlsMwing15Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15fla1def",
                    Id = DataRefId.FlightmodelControlsMwing15Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15fla2def",
                    Id = DataRefId.FlightmodelControlsMwing15Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing15Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15elv1def",
                    Id = DataRefId.FlightmodelControlsMwing15Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15elv2def",
                    Id = DataRefId.FlightmodelControlsMwing15Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15rud1def",
                    Id = DataRefId.FlightmodelControlsMwing15Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15rud2def",
                    Id = DataRefId.FlightmodelControlsMwing15Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16ail1def",
                    Id = DataRefId.FlightmodelControlsMwing16Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16ail2def",
                    Id = DataRefId.FlightmodelControlsMwing16Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16spo1def",
                    Id = DataRefId.FlightmodelControlsMwing16Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16spo2def",
                    Id = DataRefId.FlightmodelControlsMwing16Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16fla1def",
                    Id = DataRefId.FlightmodelControlsMwing16Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16fla2def",
                    Id = DataRefId.FlightmodelControlsMwing16Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing16Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16elv1def",
                    Id = DataRefId.FlightmodelControlsMwing16Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16elv2def",
                    Id = DataRefId.FlightmodelControlsMwing16Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16rud1def",
                    Id = DataRefId.FlightmodelControlsMwing16Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16rud2def",
                    Id = DataRefId.FlightmodelControlsMwing16Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17ail1def",
                    Id = DataRefId.FlightmodelControlsMwing17Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17ail2def",
                    Id = DataRefId.FlightmodelControlsMwing17Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17spo1def",
                    Id = DataRefId.FlightmodelControlsMwing17Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17spo2def",
                    Id = DataRefId.FlightmodelControlsMwing17Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17fla1def",
                    Id = DataRefId.FlightmodelControlsMwing17Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17fla2def",
                    Id = DataRefId.FlightmodelControlsMwing17Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing17Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17elv1def",
                    Id = DataRefId.FlightmodelControlsMwing17Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17elv2def",
                    Id = DataRefId.FlightmodelControlsMwing17Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17rud1def",
                    Id = DataRefId.FlightmodelControlsMwing17Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17rud2def",
                    Id = DataRefId.FlightmodelControlsMwing17Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18ail1def",
                    Id = DataRefId.FlightmodelControlsMwing18Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18ail2def",
                    Id = DataRefId.FlightmodelControlsMwing18Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18spo1def",
                    Id = DataRefId.FlightmodelControlsMwing18Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18spo2def",
                    Id = DataRefId.FlightmodelControlsMwing18Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18fla1def",
                    Id = DataRefId.FlightmodelControlsMwing18Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18fla2def",
                    Id = DataRefId.FlightmodelControlsMwing18Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing18Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18elv1def",
                    Id = DataRefId.FlightmodelControlsMwing18Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18elv2def",
                    Id = DataRefId.FlightmodelControlsMwing18Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18rud1def",
                    Id = DataRefId.FlightmodelControlsMwing18Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18rud2def",
                    Id = DataRefId.FlightmodelControlsMwing18Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19ail1def",
                    Id = DataRefId.FlightmodelControlsMwing19Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19ail2def",
                    Id = DataRefId.FlightmodelControlsMwing19Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19spo1def",
                    Id = DataRefId.FlightmodelControlsMwing19Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19spo2def",
                    Id = DataRefId.FlightmodelControlsMwing19Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19fla1def",
                    Id = DataRefId.FlightmodelControlsMwing19Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19fla2def",
                    Id = DataRefId.FlightmodelControlsMwing19Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing19Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19elv1def",
                    Id = DataRefId.FlightmodelControlsMwing19Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19elv2def",
                    Id = DataRefId.FlightmodelControlsMwing19Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19rud1def",
                    Id = DataRefId.FlightmodelControlsMwing19Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19rud2def",
                    Id = DataRefId.FlightmodelControlsMwing19Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Ail1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Aileron 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20ail1def",
                    Id = DataRefId.FlightmodelControlsMwing20Ail1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Ail2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Aileron 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20ail2def",
                    Id = DataRefId.FlightmodelControlsMwing20Ail2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Spo1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Spoiler 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20spo1def",
                    Id = DataRefId.FlightmodelControlsMwing20Spo1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Spo2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Spoiler 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20spo2def",
                    Id = DataRefId.FlightmodelControlsMwing20Spo2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Fla1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Flap 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20fla1def",
                    Id = DataRefId.FlightmodelControlsMwing20Fla1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Fla2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Flap 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20fla2def",
                    Id = DataRefId.FlightmodelControlsMwing20Fla2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Yawbdef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Yaw Brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20yawbdef",
                    Id = DataRefId.FlightmodelControlsMwing20Yawbdef,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Elv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20elv1def",
                    Id = DataRefId.FlightmodelControlsMwing20Elv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Elv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20elv2def",
                    Id = DataRefId.FlightmodelControlsMwing20Elv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Rud1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Rudder 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20rud1def",
                    Id = DataRefId.FlightmodelControlsMwing20Rud1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Rud2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Rudder 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20rud2def",
                    Id = DataRefId.FlightmodelControlsMwing20Rud2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lRetract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_retract",
                    Units = "boolean",
                    Description = "Wing 1 Left Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Retract",
                    Id = DataRefId.FlightmodelControlsWing1lRetract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rRetract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_retract",
                    Units = "boolean",
                    Description = "Wing 1 Right Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Retract",
                    Id = DataRefId.FlightmodelControlsWing1rRetract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lRetract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_retract",
                    Units = "boolean",
                    Description = "Wing 2 Left Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Retract",
                    Id = DataRefId.FlightmodelControlsWing2lRetract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rRetract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_retract",
                    Units = "boolean",
                    Description = "Wing 2 Right Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Retract",
                    Id = DataRefId.FlightmodelControlsWing2rRetract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lRetract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_retract",
                    Units = "boolean",
                    Description = "Wing 3 Left Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Retract",
                    Id = DataRefId.FlightmodelControlsWing3lRetract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rRetract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_retract",
                    Units = "boolean",
                    Description = "Wing 3 Right Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Retract",
                    Id = DataRefId.FlightmodelControlsWing3rRetract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lRetract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_retract",
                    Units = "boolean",
                    Description = "Wing 4 Left Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Retract",
                    Id = DataRefId.FlightmodelControlsWing4lRetract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rRetract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_retract",
                    Units = "boolean",
                    Description = "Wing 4 Right Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Retract",
                    Id = DataRefId.FlightmodelControlsWing4rRetract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab1Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_retract",
                    Units = "boolean",
                    Description = "Horiz Stab Left Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab1retract",
                    Id = DataRefId.FlightmodelControlsHstab1Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab2Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_retract",
                    Units = "boolean",
                    Description = "Horiz Stab Right Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab2retract",
                    Id = DataRefId.FlightmodelControlsHstab2Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab1Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_retract",
                    Units = "boolean",
                    Description = "Vert Stab 1 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab1retract",
                    Id = DataRefId.FlightmodelControlsVstab1Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab2Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_retract",
                    Units = "boolean",
                    Description = "Vert Stab 2 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab2retract",
                    Id = DataRefId.FlightmodelControlsVstab2Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_retract",
                    Units = "boolean",
                    Description = "Misc Wing 1 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01retract",
                    Id = DataRefId.FlightmodelControlsMwing01Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_retract",
                    Units = "boolean",
                    Description = "Misc Wing 2 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02retract",
                    Id = DataRefId.FlightmodelControlsMwing02Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_retract",
                    Units = "boolean",
                    Description = "Misc Wing 3 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03retract",
                    Id = DataRefId.FlightmodelControlsMwing03Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_retract",
                    Units = "boolean",
                    Description = "Misc Wing 4 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04retract",
                    Id = DataRefId.FlightmodelControlsMwing04Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_retract",
                    Units = "boolean",
                    Description = "Misc Wing 5 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05retract",
                    Id = DataRefId.FlightmodelControlsMwing05Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_retract",
                    Units = "boolean",
                    Description = "Misc Wing 6 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06retract",
                    Id = DataRefId.FlightmodelControlsMwing06Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_retract",
                    Units = "boolean",
                    Description = "Misc Wing 7 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07retract",
                    Id = DataRefId.FlightmodelControlsMwing07Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_retract",
                    Units = "boolean",
                    Description = "Misc Wing 8 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08retract",
                    Id = DataRefId.FlightmodelControlsMwing08Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_retract",
                    Units = "boolean",
                    Description = "Misc Wing 9 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09retract",
                    Id = DataRefId.FlightmodelControlsMwing09Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_retract",
                    Units = "boolean",
                    Description = "Misc Wing 10 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10retract",
                    Id = DataRefId.FlightmodelControlsMwing10Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_retract",
                    Units = "boolean",
                    Description = "Misc Wing 11 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11retract",
                    Id = DataRefId.FlightmodelControlsMwing11Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_retract",
                    Units = "boolean",
                    Description = "Misc Wing 12 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12retract",
                    Id = DataRefId.FlightmodelControlsMwing12Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_retract",
                    Units = "boolean",
                    Description = "Misc Wing 13 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13retract",
                    Id = DataRefId.FlightmodelControlsMwing13Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_retract",
                    Units = "boolean",
                    Description = "Misc Wing 14 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14retract",
                    Id = DataRefId.FlightmodelControlsMwing14Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_retract",
                    Units = "boolean",
                    Description = "Misc Wing 15 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15retract",
                    Id = DataRefId.FlightmodelControlsMwing15Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_retract",
                    Units = "boolean",
                    Description = "Misc Wing 16 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16retract",
                    Id = DataRefId.FlightmodelControlsMwing16Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_retract",
                    Units = "boolean",
                    Description = "Misc Wing 17 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17retract",
                    Id = DataRefId.FlightmodelControlsMwing17Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_retract",
                    Units = "boolean",
                    Description = "Misc Wing 18 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18retract",
                    Id = DataRefId.FlightmodelControlsMwing18Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_retract",
                    Units = "boolean",
                    Description = "Misc Wing 19 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19retract",
                    Id = DataRefId.FlightmodelControlsMwing19Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20Retract
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_retract",
                    Units = "boolean",
                    Description = "Misc Wing 20 Retract",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20retract",
                    Id = DataRefId.FlightmodelControlsMwing20Retract,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lRetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_retract_now",
                    Units = "ratio",
                    Description = "Wing 1 Left Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Retract Now",
                    Id = DataRefId.FlightmodelControlsWing1lRetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rRetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_retract_now",
                    Units = "ratio",
                    Description = "Wing 1 Right Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Retract Now",
                    Id = DataRefId.FlightmodelControlsWing1rRetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lRetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_retract_now",
                    Units = "ratio",
                    Description = "Wing 2 Left Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Retract Now",
                    Id = DataRefId.FlightmodelControlsWing2lRetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rRetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_retract_now",
                    Units = "ratio",
                    Description = "Wing 2 Right Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Retract Now",
                    Id = DataRefId.FlightmodelControlsWing2rRetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lRetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_retract_now",
                    Units = "ratio",
                    Description = "Wing 3 Left Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Retract Now",
                    Id = DataRefId.FlightmodelControlsWing3lRetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rRetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_retract_now",
                    Units = "ratio",
                    Description = "Wing 3 Right Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Retract Now",
                    Id = DataRefId.FlightmodelControlsWing3rRetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lRetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_retract_now",
                    Units = "ratio",
                    Description = "Wing 4 Left Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Retract Now",
                    Id = DataRefId.FlightmodelControlsWing4lRetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rRetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_retract_now",
                    Units = "ratio",
                    Description = "Wing 4 Right Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Retract Now",
                    Id = DataRefId.FlightmodelControlsWing4rRetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab1RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_retract_now",
                    Units = "ratio",
                    Description = "Horiz Stab Left Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab1retract Now",
                    Id = DataRefId.FlightmodelControlsHstab1RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab2RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_retract_now",
                    Units = "ratio",
                    Description = "Horiz Stab Right Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab2retract Now",
                    Id = DataRefId.FlightmodelControlsHstab2RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab1RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_retract_now",
                    Units = "ratio",
                    Description = "Vert Stab 1 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab1retract Now",
                    Id = DataRefId.FlightmodelControlsVstab1RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab2RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_retract_now",
                    Units = "ratio",
                    Description = "Vert Stab 2 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab2retract Now",
                    Id = DataRefId.FlightmodelControlsVstab2RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 1 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01retract Now",
                    Id = DataRefId.FlightmodelControlsMwing01RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 2 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02retract Now",
                    Id = DataRefId.FlightmodelControlsMwing02RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 3 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03retract Now",
                    Id = DataRefId.FlightmodelControlsMwing03RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 4 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04retract Now",
                    Id = DataRefId.FlightmodelControlsMwing04RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 5 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05retract Now",
                    Id = DataRefId.FlightmodelControlsMwing05RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 6 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06retract Now",
                    Id = DataRefId.FlightmodelControlsMwing06RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 7 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07retract Now",
                    Id = DataRefId.FlightmodelControlsMwing07RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 8 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08retract Now",
                    Id = DataRefId.FlightmodelControlsMwing08RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 9 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09retract Now",
                    Id = DataRefId.FlightmodelControlsMwing09RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 10 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10retract Now",
                    Id = DataRefId.FlightmodelControlsMwing10RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 11 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11retract Now",
                    Id = DataRefId.FlightmodelControlsMwing11RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 12 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12retract Now",
                    Id = DataRefId.FlightmodelControlsMwing12RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 13 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13retract Now",
                    Id = DataRefId.FlightmodelControlsMwing13RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 14 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14retract Now",
                    Id = DataRefId.FlightmodelControlsMwing14RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 15 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15retract Now",
                    Id = DataRefId.FlightmodelControlsMwing15RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 16 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16retract Now",
                    Id = DataRefId.FlightmodelControlsMwing16RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 17 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17retract Now",
                    Id = DataRefId.FlightmodelControlsMwing17RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 18 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18retract Now",
                    Id = DataRefId.FlightmodelControlsMwing18RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 19 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19retract Now",
                    Id = DataRefId.FlightmodelControlsMwing19RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20RetractNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 20 Retract Now",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20retract Now",
                    Id = DataRefId.FlightmodelControlsMwing20RetractNow,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lRetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_retract_max",
                    Units = "ratio",
                    Description = "Wing 1 Left Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Retract Max",
                    Id = DataRefId.FlightmodelControlsWing1lRetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rRetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_retract_max",
                    Units = "ratio",
                    Description = "Wing 1 Right Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Retract Max",
                    Id = DataRefId.FlightmodelControlsWing1rRetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lRetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_retract_max",
                    Units = "ratio",
                    Description = "Wing 2 Left Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Retract Max",
                    Id = DataRefId.FlightmodelControlsWing2lRetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rRetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_retract_max",
                    Units = "ratio",
                    Description = "Wing 2 Right Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Retract Max",
                    Id = DataRefId.FlightmodelControlsWing2rRetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lRetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_retract_max",
                    Units = "ratio",
                    Description = "Wing 3 Left Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Retract Max",
                    Id = DataRefId.FlightmodelControlsWing3lRetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rRetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_retract_max",
                    Units = "ratio",
                    Description = "Wing 3 Right Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Retract Max",
                    Id = DataRefId.FlightmodelControlsWing3rRetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lRetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_retract_max",
                    Units = "ratio",
                    Description = "Wing 4 Left Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Retract Max",
                    Id = DataRefId.FlightmodelControlsWing4lRetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rRetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_retract_max",
                    Units = "ratio",
                    Description = "Wing 4 Right Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Retract Max",
                    Id = DataRefId.FlightmodelControlsWing4rRetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab1RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_retract_max",
                    Units = "ratio",
                    Description = "Horiz Stab Left Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab1retract Max",
                    Id = DataRefId.FlightmodelControlsHstab1RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsHstab2RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_retract_max",
                    Units = "ratio",
                    Description = "Horiz Stab Right Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Hstab2retract Max",
                    Id = DataRefId.FlightmodelControlsHstab2RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab1RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_retract_max",
                    Units = "ratio",
                    Description = "Vert Stab 1 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab1retract Max",
                    Id = DataRefId.FlightmodelControlsVstab1RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsVstab2RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_retract_max",
                    Units = "ratio",
                    Description = "Vert Stab 2 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Vstab2retract Max",
                    Id = DataRefId.FlightmodelControlsVstab2RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing01RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 1 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing01retract Max",
                    Id = DataRefId.FlightmodelControlsMwing01RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing02RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 2 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing02retract Max",
                    Id = DataRefId.FlightmodelControlsMwing02RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing03RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 3 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing03retract Max",
                    Id = DataRefId.FlightmodelControlsMwing03RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing04RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 4 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing04retract Max",
                    Id = DataRefId.FlightmodelControlsMwing04RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing05RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 5 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing05retract Max",
                    Id = DataRefId.FlightmodelControlsMwing05RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing06RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 6 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing06retract Max",
                    Id = DataRefId.FlightmodelControlsMwing06RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing07RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 7 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing07retract Max",
                    Id = DataRefId.FlightmodelControlsMwing07RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing08RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 8 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing08retract Max",
                    Id = DataRefId.FlightmodelControlsMwing08RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing09RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 9 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing09retract Max",
                    Id = DataRefId.FlightmodelControlsMwing09RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing10RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 10 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing10retract Max",
                    Id = DataRefId.FlightmodelControlsMwing10RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing11RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 11 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing11retract Max",
                    Id = DataRefId.FlightmodelControlsMwing11RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing12RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 12 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing12retract Max",
                    Id = DataRefId.FlightmodelControlsMwing12RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing13RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 13 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing13retract Max",
                    Id = DataRefId.FlightmodelControlsMwing13RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing14RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 14 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing14retract Max",
                    Id = DataRefId.FlightmodelControlsMwing14RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing15RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 15 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing15retract Max",
                    Id = DataRefId.FlightmodelControlsMwing15RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing16RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 16 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing16retract Max",
                    Id = DataRefId.FlightmodelControlsMwing16RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing17RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 17 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing17retract Max",
                    Id = DataRefId.FlightmodelControlsMwing17RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing18RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 18 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing18retract Max",
                    Id = DataRefId.FlightmodelControlsMwing18RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing19RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 19 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing19retract Max",
                    Id = DataRefId.FlightmodelControlsMwing19RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsMwing20RetractMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 20 Retract Max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Mwing20retract Max",
                    Id = DataRefId.FlightmodelControlsMwing20RetractMax,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lElv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Elv1def",
                    Id = DataRefId.FlightmodelControlsWing1lElv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1lElv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1l Elv2def",
                    Id = DataRefId.FlightmodelControlsWing1lElv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rElv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Elv1def",
                    Id = DataRefId.FlightmodelControlsWing1rElv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing1rElv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing1r Elv2def",
                    Id = DataRefId.FlightmodelControlsWing1rElv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lElv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Elv1def",
                    Id = DataRefId.FlightmodelControlsWing2lElv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2lElv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2l Elv2def",
                    Id = DataRefId.FlightmodelControlsWing2lElv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rElv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Elv1def",
                    Id = DataRefId.FlightmodelControlsWing2rElv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing2rElv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing2r Elv2def",
                    Id = DataRefId.FlightmodelControlsWing2rElv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lElv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Elv1def",
                    Id = DataRefId.FlightmodelControlsWing3lElv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3lElv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3l Elv2def",
                    Id = DataRefId.FlightmodelControlsWing3lElv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rElv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Elv1def",
                    Id = DataRefId.FlightmodelControlsWing3rElv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing3rElv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing3r Elv2def",
                    Id = DataRefId.FlightmodelControlsWing3rElv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lElv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Elv1def",
                    Id = DataRefId.FlightmodelControlsWing4lElv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4lElv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4l Elv2def",
                    Id = DataRefId.FlightmodelControlsWing4lElv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rElv1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Elevator 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Elv1def",
                    Id = DataRefId.FlightmodelControlsWing4rElv1def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelControlsWing4rElv2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Elevator 2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Controls Wing4r Elv2def",
                    Id = DataRefId.FlightmodelControlsWing4rElv2def,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelCyclicCyclicAilnBladAlph
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/cyclic/cyclic_ailn_blad_alph",
                    Units = "???",
                    Description = "Blade alpha",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Cyclic Cyclic Ailn Blad Alph",
                    Id = DataRefId.FlightmodelCyclicCyclicAilnBladAlph,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelCyclicCyclicAilnDiscTilt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/cyclic/cyclic_ailn_disc_tilt",
                    Units = "???",
                    Description = "Disc tilt",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Cyclic Cyclic Ailn Disc Tilt",
                    Id = DataRefId.FlightmodelCyclicCyclicAilnDiscTilt,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelCyclicCyclicElevBladAlph
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/cyclic/cyclic_elev_blad_alph",
                    Units = "???",
                    Description = "Blade alpha",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Cyclic Cyclic Elev Blad Alph",
                    Id = DataRefId.FlightmodelCyclicCyclicElevBladAlph,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelCyclicCyclicElevDiscTilt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/cyclic/cyclic_elev_disc_tilt",
                    Units = "???",
                    Description = "Disc tilt",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Cyclic Cyclic Elev Disc Tilt",
                    Id = DataRefId.FlightmodelCyclicCyclicElevDiscTilt,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelCyclicCyclicElevCommand
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/cyclic/cyclic_elev_command",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Cyclic Cyclic Elev Command",
                    Id = DataRefId.FlightmodelCyclicCyclicElevCommand,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelCyclicCyclicAilnCommand
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/cyclic/cyclic_ailn_command",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Cyclic Cyclic Ailn Command",
                    Id = DataRefId.FlightmodelCyclicCyclicAilnCommand,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelCyclicSidecant
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/cyclic/sidecant",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Cyclic Sidecant",
                    Id = DataRefId.FlightmodelCyclicSidecant,
                    Writable = true,
                    DataType = "float[8]"
                };
            }
        }
        private DataRefElement FlightmodelCyclicVertcant
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/cyclic/vertcant",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Cyclic Vertcant",
                    Id = DataRefId.FlightmodelCyclicVertcant,
                    Writable = true,
                    DataType = "float[8]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNN2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_N2_",
                    Units = "percent",
                    Description = "N2 speed as percent of max (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNN2",
                    Id = DataRefId.FlightmodelEngineENGNN2,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNEGT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_EGT",
                    Units = "ratio",
                    Description = "Exhaust Gas Temperature (ratio from min to max)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNEGT",
                    Id = DataRefId.FlightmodelEngineENGNEGT,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNITT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_ITT",
                    Units = "ratio",
                    Description = "Interturbine Temperature per engine (ratio from min to max, min = 0, max = 700)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNITT",
                    Id = DataRefId.FlightmodelEngineENGNITT,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNCHT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_CHT",
                    Units = "ratio",
                    Description = "Cylinder Head Temperature (ratio from min to max)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNCHT",
                    Id = DataRefId.FlightmodelEngineENGNCHT,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNEGTC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_EGT_c",
                    Units = "degc_or_f",
                    Description = "EGT (per engine) in degrees  - units depend on plane, label wrong",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNEGTC",
                    Id = DataRefId.FlightmodelEngineENGNEGTC,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNITTC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_ITT_c",
                    Units = "degc_or_f",
                    Description = "ITT (per engine) in degrees - units depend on plane, label wrong",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNITTC",
                    Id = DataRefId.FlightmodelEngineENGNITTC,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNCHTC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_CHT_c",
                    Units = "degc_or_f",
                    Description = "CHT (per engine in degrees  - units depend on plane, label wrong",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNCHTC",
                    Id = DataRefId.FlightmodelEngineENGNCHTC,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNBatAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_bat_amp",
                    Units = "???",
                    Description = "Battery amps (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Bat Amp",
                    Id = DataRefId.FlightmodelEngineENGNBatAmp,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNBatVolt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_bat_volt",
                    Units = "???",
                    Description = "Batery volts (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Bat Volt",
                    Id = DataRefId.FlightmodelEngineENGNBatVolt,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNCowl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_cowl",
                    Units = "ratio",
                    Description = "Cowl flaps control (per engine) 0 = closed, 1 = open",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Cowl",
                    Id = DataRefId.FlightmodelEngineENGNCowl,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNEPR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_EPR",
                    Units = "EPR",
                    Description = "Engine Pressure Ratio (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNEPR",
                    Id = DataRefId.FlightmodelEngineENGNEPR,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNFF
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_FF_",
                    Units = "kg/s",
                    Description = "Fuel flow (per engine) in kg/second",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNFF",
                    Id = DataRefId.FlightmodelEngineENGNFF,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNGenAmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_gen_amp",
                    Units = "???",
                    Description = "Generator amps (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Gen Amp",
                    Id = DataRefId.FlightmodelEngineENGNGenAmp,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_heat",
                    Units = "ratio",
                    Description = "Carb Heat Control (per engine), 0 = off, 1 = on",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Heat",
                    Id = DataRefId.FlightmodelEngineENGNHeat,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNMixt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_mixt",
                    Units = "ratio",
                    Description = "Mixture Control (per engine), 0 = cutoff, 1 = full rich",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Mixt",
                    Id = DataRefId.FlightmodelEngineENGNMixt,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNMPR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_MPR",
                    Units = "???",
                    Description = "MPR (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNMPR",
                    Id = DataRefId.FlightmodelEngineENGNMPR,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNN1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_N1_",
                    Units = "percent",
                    Description = "N1 speed as percent of max (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNN1",
                    Id = DataRefId.FlightmodelEngineENGNN1,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNOilPressPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_oil_press_psi",
                    Units = "psi",
                    Description = "Oil pressure (per engine) in PSI",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Oil Press Psi",
                    Id = DataRefId.FlightmodelEngineENGNOilPressPsi,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNOilTempC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_oil_temp_c",
                    Units = "degc_or_f",
                    Description = "Oil temp (per engine) in degs - units depend on plane, dref name wrong",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Oil Temp C",
                    Id = DataRefId.FlightmodelEngineENGNOilTempC,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNOilTemp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_oil_temp",
                    Units = "ratio",
                    Description = "Oil pressure (per engine) as ratio of max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Oil Temp",
                    Id = DataRefId.FlightmodelEngineENGNOilTemp,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNOilPress
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_oil_press",
                    Units = "ratio",
                    Description = "Oil temp (per engine) a ratio of max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Oil Press",
                    Id = DataRefId.FlightmodelEngineENGNOilPress,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNPower
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_power",
                    Units = "???",
                    Description = "Power (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Power",
                    Id = DataRefId.FlightmodelEngineENGNPower,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_prop",
                    Units = "rad/sec",
                    Description = "Commanded Prop Speed (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Prop",
                    Id = DataRefId.FlightmodelEngineENGNProp,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNSigma
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_sigma",
                    Units = "???",
                    Description = "Sigma (per engine) - YOU SHOULD NEVER WRITE TO THIS DATAREF!  Read only in v11.00",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Sigma",
                    Id = DataRefId.FlightmodelEngineENGNSigma,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNThro
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_thro",
                    Units = "ratio",
                    Description = "Throttle (per engine) as set by user, 0 = idle, 1 = max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Thro",
                    Id = DataRefId.FlightmodelEngineENGNThro,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNThroUse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_thro_use",
                    Units = "ratio",
                    Description = "Throttle (per engine) when overridden by you, plus with thrust vectors - use override_throttles to change.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Thro Use",
                    Id = DataRefId.FlightmodelEngineENGNThroUse,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNThroOverride
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_thro_override",
                    Units = "ratio",
                    Description = "An override from 0.0 to max fwd thrust for overriding all throttles.  Set to -2.0 to disengage.  DEPRECATED",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Thro Override",
                    Id = DataRefId.FlightmodelEngineENGNThroOverride,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_TRQ",
                    Units = "NewtonMeters",
                    Description = "Torque (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGNTRQ",
                    Id = DataRefId.FlightmodelEngineENGNTRQ,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNRunning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_running",
                    Units = "boolean",
                    Description = "Engine on and using fuel (only reliable in 740 and later)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Running",
                    Id = DataRefId.FlightmodelEngineENGNRunning,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNBurning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_burning",
                    Units = "boolean",
                    Description = "Afterburner on (only reliable in 740 and later)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Burning",
                    Id = DataRefId.FlightmodelEngineENGNBurning,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNPropmode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_propmode",
                    Units = "enum",
                    Description = "Prop mode: feather=0,normal=1,beta=2,reverse=3",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Propmode",
                    Id = DataRefId.FlightmodelEngineENGNPropmode,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNBurnrat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_burnrat",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Burnrat",
                    Id = DataRefId.FlightmodelEngineENGNBurnrat,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNOilQuan
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_oil_quan",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Oil Quan",
                    Id = DataRefId.FlightmodelEngineENGNOilQuan,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNOilLubeRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_oil_lube_rat",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Oil Lube Rat",
                    Id = DataRefId.FlightmodelEngineENGNOilLubeRat,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNCrbice
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_crbice",
                    Units = "ratio",
                    Description = "Amount of carb ice buildup (0-1)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Crbice",
                    Id = DataRefId.FlightmodelEngineENGNCrbice,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineENGNTacrad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_tacrad",
                    Units = "rad/sec",
                    Description = "Engine speed in radians/second",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine ENGN Tacrad",
                    Id = DataRefId.FlightmodelEngineENGNTacrad,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTPitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_pitch_deg",
                    Units = "degrees",
                    Description = "Prop Pitch as commanded by the user.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Pitch Deg",
                    Id = DataRefId.FlightmodelEnginePOINTPitchDeg,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTPropEff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_prop_eff",
                    Units = "???",
                    Description = "Efficiency",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Prop Eff",
                    Id = DataRefId.FlightmodelEnginePOINTPropEff,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTTacrad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_tacrad",
                    Units = "rad/sec",
                    Description = "Prop speed in radians/second",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Tacrad",
                    Id = DataRefId.FlightmodelEnginePOINTTacrad,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTThrust
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_thrust",
                    Units = "???",
                    Description = "Thrust",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Thrust",
                    Id = DataRefId.FlightmodelEnginePOINTThrust,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTDragTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_drag_TRQ",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Drag TRQ",
                    Id = DataRefId.FlightmodelEnginePOINTDragTRQ,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTDrivTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_driv_TRQ",
                    Units = "newton-meters",
                    Description = "Torque for this prop after transmissions",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Driv TRQ",
                    Id = DataRefId.FlightmodelEnginePOINTDrivTRQ,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTMaxTRQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_max_TRQ",
                    Units = "newton-meters",
                    Description = "Maximum torque this prop will get after transmissions",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Max TRQ",
                    Id = DataRefId.FlightmodelEnginePOINTMaxTRQ,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTConeRad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_cone_rad",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Cone Rad",
                    Id = DataRefId.FlightmodelEnginePOINTConeRad,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTSideWash
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_side_wash",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Side Wash",
                    Id = DataRefId.FlightmodelEnginePOINTSideWash,
                    Writable = true,
                    DataType = "float[8]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTXYZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_XYZ",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINTXYZ",
                    Id = DataRefId.FlightmodelEnginePOINTXYZ,
                    Writable = false,
                    DataType = "float[16][3]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTPitchDegUse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_pitch_deg_use",
                    Units = "degrees",
                    Description = "Pitch as we use, after all effects.   Use override_prop_pitch to change.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Pitch Deg Use",
                    Id = DataRefId.FlightmodelEnginePOINTPitchDegUse,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEnginePOINTPropAngDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/POINT_prop_ang_deg",
                    Units = "degrees",
                    Description = "This is the angle of the prop or engine-fan as it rotates. You will see this value circulate 0 to 360 degrees over and over as the engine runs and the prop or fan turns.  Override with /prop_disc/override per engine!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine POINT Prop Ang Deg",
                    Id = DataRefId.FlightmodelEnginePOINTPropAngDeg,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineBurnerEnabled
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/burner_enabled",
                    Units = "boolean",
                    Description = "Burner is on or off",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine Burner Enabled",
                    Id = DataRefId.FlightmodelEngineBurnerEnabled,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelEngineBurnerLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/burner_level",
                    Units = "boolean",
                    Description = "Burner is high or low",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine Burner Level",
                    Id = DataRefId.FlightmodelEngineBurnerLevel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelEngineAprMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/apr_mode",
                    Units = "enum",
                    Description = "0=Stdby (will arm at sufficient throttle), 1=Armed, 2=Active",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine Apr Mode",
                    Id = DataRefId.FlightmodelEngineAprMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelEngineDescentSpeedRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/descent_speed_ratio",
                    Units = "ratio",
                    Description = "descent-speed ratio of the aircraft in units of propwash-speed",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine Descent Speed Ratio",
                    Id = DataRefId.FlightmodelEngineDescentSpeedRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelEngineVortexRingState
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/engine/vortex_ring_state",
                    Units = "ratio",
                    Description = "wash-multiplier - vortex ring state - which are the airflows through the rotor disc normal flow is 0.5 (50%) VRS flow is 1.0 (100%)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Engine Vortex Ring State",
                    Id = DataRefId.FlightmodelEngineVortexRingState,
                    Writable = false,
                    DataType = "float[16][10]"
                };
            }
        }
        private DataRefElement FlightmodelFailuresFrmIce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/frm_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on wings/airframe - left wing",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Frm Ice",
                    Id = DataRefId.FlightmodelFailuresFrmIce,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresFrmIce2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/frm_ice2",
                    Units = "ratio",
                    Description = "Ratio of icing on wings/airframe - right wing",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Frm Ice2",
                    Id = DataRefId.FlightmodelFailuresFrmIce2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresPitotIce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/pitot_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on pitot tube",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Pitot Ice",
                    Id = DataRefId.FlightmodelFailuresPitotIce,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresPitotIce2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/pitot_ice2",
                    Units = "ratio",
                    Description = "Ratio of icing on pitot tube2",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Pitot Ice2",
                    Id = DataRefId.FlightmodelFailuresPitotIce2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresPropIce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/prop_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on the prop - first prop",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Prop Ice",
                    Id = DataRefId.FlightmodelFailuresPropIce,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresStatIce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/stat_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on the port - pilot side",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Stat Ice",
                    Id = DataRefId.FlightmodelFailuresStatIce,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresStatIce2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/stat_ice2",
                    Units = "ratio",
                    Description = "Ratio of icing on the port - copilot side",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Stat Ice2",
                    Id = DataRefId.FlightmodelFailuresStatIce2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresInletIce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/inlet_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on the air inlets - first engine",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Inlet Ice",
                    Id = DataRefId.FlightmodelFailuresInletIce,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresPropIcePerEngine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/prop_ice_per_engine",
                    Units = "ratio",
                    Description = "Ratio of icing on the prop - array access to all props.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Prop Ice Per Engine",
                    Id = DataRefId.FlightmodelFailuresPropIcePerEngine,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelFailuresInletIcePerEngine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/inlet_ice_per_engine",
                    Units = "ratio",
                    Description = "Ratio of icing on the air inlets - array access to all engines.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Inlet Ice Per Engine",
                    Id = DataRefId.FlightmodelFailuresInletIcePerEngine,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelFailuresWindowIce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/window_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on the windshield",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Window Ice",
                    Id = DataRefId.FlightmodelFailuresWindowIce,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresAoaIce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/aoa_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on alpha vane - pilot AoA",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Aoa Ice",
                    Id = DataRefId.FlightmodelFailuresAoaIce,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresAoaIce2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/aoa_ice2",
                    Units = "ratio",
                    Description = "Ratio of icing on alpha vane - copilot AoA",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Aoa Ice2",
                    Id = DataRefId.FlightmodelFailuresAoaIce2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelFailuresStallwarning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/stallwarning",
                    Units = "???",
                    Description = "Stall Warning",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Stallwarning",
                    Id = DataRefId.FlightmodelFailuresStallwarning,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelFailuresOverG
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/over_g",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Over G",
                    Id = DataRefId.FlightmodelFailuresOverG,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelFailuresOverVne
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/over_vne",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Over Vne",
                    Id = DataRefId.FlightmodelFailuresOverVne,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelFailuresOverVfe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/over_vfe",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Over Vfe",
                    Id = DataRefId.FlightmodelFailuresOverVfe,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelFailuresOverVle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/over_vle",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Over Vle",
                    Id = DataRefId.FlightmodelFailuresOverVle,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelFailuresOngroundAny
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/onground_any",
                    Units = "???",
                    Description = "User Aircraft is on the ground when this is set to 1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Onground Any",
                    Id = DataRefId.FlightmodelFailuresOngroundAny,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelFailuresOngroundAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/onground_all",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Onground All",
                    Id = DataRefId.FlightmodelFailuresOngroundAll,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelFailuresSmoking
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/smoking",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Smoking",
                    Id = DataRefId.FlightmodelFailuresSmoking,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelFailuresLoRotorWarning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/failures/lo_rotor_warning",
                    Units = "???",
                    Description = "Lo Rotor Warning",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Failures Lo Rotor Warning",
                    Id = DataRefId.FlightmodelFailuresLoRotorWarning,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelForcesFsideAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_aero",
                    Units = "Newtons",
                    Description = "Aerodynamic forces - sideways - ACF X.  Override with override_wing_forces",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fside Aero",
                    Id = DataRefId.FlightmodelForcesFsideAero,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFnrmlAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_aero",
                    Units = "Newtons",
                    Description = "Aerodynamic forces - upward - ACF Y.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fnrml Aero",
                    Id = DataRefId.FlightmodelForcesFnrmlAero,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFaxilAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_aero",
                    Units = "Newtons",
                    Description = "Aerodynamic forces - backward - ACF Z",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Faxil Aero",
                    Id = DataRefId.FlightmodelForcesFaxilAero,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFsideProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_prop",
                    Units = "Newtons",
                    Description = "force sideways by all engines on the ACF.  Override with override_engines or override_engine_forces",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fside Prop",
                    Id = DataRefId.FlightmodelForcesFsideProp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFnrmlProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_prop",
                    Units = "Newtons",
                    Description = "force upward by all engines on the ACF.  Override with override_engines  Writable in v10 only or v11 with override",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fnrml Prop",
                    Id = DataRefId.FlightmodelForcesFnrmlProp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFaxilProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_prop",
                    Units = "Newtons",
                    Description = "force backward by all engines on the ACF (usually this is a negative number).  Override with override_engines",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Faxil Prop",
                    Id = DataRefId.FlightmodelForcesFaxilProp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFsideGear
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_gear",
                    Units = "Newtons",
                    Description = "Gear/ground forces - sideways - ACF X.  Override with override_gear_forces",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fside Gear",
                    Id = DataRefId.FlightmodelForcesFsideGear,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFnrmlGear
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_gear",
                    Units = "Newtons",
                    Description = "Gear/ground forces - upward - ACF Y",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fnrml Gear",
                    Id = DataRefId.FlightmodelForcesFnrmlGear,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFaxilGear
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_gear",
                    Units = "Newtons",
                    Description = "Gear/ground forces - backward - ACF Z",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Faxil Gear",
                    Id = DataRefId.FlightmodelForcesFaxilGear,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFsideTotal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_total",
                    Units = "Newtons",
                    Description = "total/ground forces - ACF X axis.  Override with override_forces",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fside Total",
                    Id = DataRefId.FlightmodelForcesFsideTotal,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFnrmlTotal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_total",
                    Units = "Newtons",
                    Description = "Total/ground forces - ACF Y axis.  Override with override_forces",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fnrml Total",
                    Id = DataRefId.FlightmodelForcesFnrmlTotal,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFaxilTotal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_total",
                    Units = "Newtons",
                    Description = "total/ground forces - ACF Z axis.  Override with override_forces",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Faxil Total",
                    Id = DataRefId.FlightmodelForcesFaxilTotal,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesLAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_aero",
                    Units = "NM",
                    Description = "The roll moment due to aerodynamic forces - positive = right roll.  Override with Override with override_wing_Forces",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces L Aero",
                    Id = DataRefId.FlightmodelForcesLAero,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesMAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_aero",
                    Units = "NM",
                    Description = "The pitch moment due to aerodynamic forces - positive = pitch up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces M Aero",
                    Id = DataRefId.FlightmodelForcesMAero,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesNAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_aero",
                    Units = "NM",
                    Description = "The yaw moment due to aerodynamic forces - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces N Aero",
                    Id = DataRefId.FlightmodelForcesNAero,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesLProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_prop",
                    Units = "NM",
                    Description = "The roll moment due to prop forces. Override with override_engines or override_engine_forces - positive = right roll.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces L Prop",
                    Id = DataRefId.FlightmodelForcesLProp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesMProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_prop",
                    Units = "NM",
                    Description = "The pitch moment due to prop forces. Override with override_engines - positive = pitch up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces M Prop",
                    Id = DataRefId.FlightmodelForcesMProp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesNProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_prop",
                    Units = "NM",
                    Description = "The yaw moment due to prop forces. Override with override_engines - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces N Prop",
                    Id = DataRefId.FlightmodelForcesNProp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesLGear
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_gear",
                    Units = "NM",
                    Description = "The roll moment due to gear forces - positive = right roll.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces L Gear",
                    Id = DataRefId.FlightmodelForcesLGear,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesMGear
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_gear",
                    Units = "NM",
                    Description = "The pitch moment due to gear forces - positive = pitch up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces M Gear",
                    Id = DataRefId.FlightmodelForcesMGear,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesNGear
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_gear",
                    Units = "NM",
                    Description = "The yaw moment due to gear forces positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces N Gear",
                    Id = DataRefId.FlightmodelForcesNGear,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesLMass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_mass",
                    Units = "NM",
                    Description = "The roll moment due to asymmetric loading - positive = right roll.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces L Mass",
                    Id = DataRefId.FlightmodelForcesLMass,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesMMass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_mass",
                    Units = "NM",
                    Description = "The pitch moment due to asymmetric loading - positive = pitch up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces M Mass",
                    Id = DataRefId.FlightmodelForcesMMass,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesNMass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_mass",
                    Units = "NM",
                    Description = "The yaw moment due to asymmetric loading - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces N Mass",
                    Id = DataRefId.FlightmodelForcesNMass,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesLTotal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_total",
                    Units = "NM",
                    Description = "The roll moment total.  Override with override_force - positive = right roll.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces L Total",
                    Id = DataRefId.FlightmodelForcesLTotal,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesMTotal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_total",
                    Units = "NM",
                    Description = "The pitch moment total.  Override with override_force - positive = pitch up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces M Total",
                    Id = DataRefId.FlightmodelForcesMTotal,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesNTotal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_total",
                    Units = "NM",
                    Description = "The yaw moment total.  Override with override_forces - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces N Total",
                    Id = DataRefId.FlightmodelForcesNTotal,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFsidePlugAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_plug_acf",
                    Units = "Newtons",
                    Description = "Extra plugin-provided sideways force (ACF X axis, positive pushes airplane to the right). ADD to this dataref to apply extra force.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fside Plug ACF",
                    Id = DataRefId.FlightmodelForcesFsidePlugAcf,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFnrmlPlugAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_plug_acf",
                    Units = "Newtons",
                    Description = "Extra plugin-provided upward force (ACF Y axis, positive pushes airplane up). ADD to this dataref to apply extra force.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Fnrml Plug ACF",
                    Id = DataRefId.FlightmodelForcesFnrmlPlugAcf,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesFaxilPlugAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_plug_acf",
                    Units = "Newtons",
                    Description = "Extra plugin-provided forward force.  (ACF Z axis, positive pushes airplane backward). ADD to this dataref to apply extra force.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Faxil Plug ACF",
                    Id = DataRefId.FlightmodelForcesFaxilPlugAcf,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesLPlugAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_plug_acf",
                    Units = "NM",
                    Description = "Extra plugin-provided roll moment - ADD to this dataref to apply extra force - positive = right roll.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces L Plug ACF",
                    Id = DataRefId.FlightmodelForcesLPlugAcf,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesMPlugAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_plug_acf",
                    Units = "NM",
                    Description = "Extra plugin-provided pitch moment - ADD to this dataref to apply extra force - positive = pitch up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces M Plug ACF",
                    Id = DataRefId.FlightmodelForcesMPlugAcf,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesNPlugAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_plug_acf",
                    Units = "NM",
                    Description = "Extra plugin-provided yaw moment - ADD to this dataref to apply extra force - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces N Plug ACF",
                    Id = DataRefId.FlightmodelForcesNPlugAcf,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesGNrml
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/g_nrml",
                    Units = "Gs",
                    Description = "Total g-forces on the plane as a multiple, downward",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces G Nrml",
                    Id = DataRefId.FlightmodelForcesGNrml,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesGAxil
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/g_axil",
                    Units = "Gs",
                    Description = "Total g-forces on the plane as a multiple, along the plane",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces G Axil",
                    Id = DataRefId.FlightmodelForcesGAxil,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesGSide
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/g_side",
                    Units = "Gs",
                    Description = "Total g-forces on the plane as a multiple, sideways",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces G Side",
                    Id = DataRefId.FlightmodelForcesGSide,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesVxAirOnAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vx_air_on_acf",
                    Units = "mtr/sec",
                    Description = "Velocity of air relative to airplane",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Vx Air On ACF",
                    Id = DataRefId.FlightmodelForcesVxAirOnAcf,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesVyAirOnAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vy_air_on_acf",
                    Units = "mtr/sec",
                    Description = "Velocity of air relative to airplane",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Vy Air On ACF",
                    Id = DataRefId.FlightmodelForcesVyAirOnAcf,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesVzAirOnAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vz_air_on_acf",
                    Units = "mtr/sec",
                    Description = "Velocity of air relative to airplane",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Vz Air On ACF",
                    Id = DataRefId.FlightmodelForcesVzAirOnAcf,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesVxAcfAxis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vx_acf_axis",
                    Units = "mtr/sec",
                    Description = "Velocity of aircraft in its own coordinate system",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Vx ACF Axis",
                    Id = DataRefId.FlightmodelForcesVxAcfAxis,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesVyAcfAxis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vy_acf_axis",
                    Units = "mtr/sec",
                    Description = "Velocity of aircraft in its own coordinate system",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Vy ACF Axis",
                    Id = DataRefId.FlightmodelForcesVyAcfAxis,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesVzAcfAxis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vz_acf_axis",
                    Units = "mtr/sec",
                    Description = "Velocity of aircraft in its own coordinate system",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Vz ACF Axis",
                    Id = DataRefId.FlightmodelForcesVzAcfAxis,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesQRotorRad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/Q_rotor_rad",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Q Rotor Rad",
                    Id = DataRefId.FlightmodelForcesQRotorRad,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelForcesRRotorRad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/R_rotor_rad",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces R Rotor Rad",
                    Id = DataRefId.FlightmodelForcesRRotorRad,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelForcesLiftPathAxis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/lift_path_axis",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Lift Path Axis",
                    Id = DataRefId.FlightmodelForcesLiftPathAxis,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesDragPathAxis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/drag_path_axis",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Drag Path Axis",
                    Id = DataRefId.FlightmodelForcesDragPathAxis,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelForcesSidePathAxis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/forces/side_path_axis",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Forces Side Path Axis",
                    Id = DataRefId.FlightmodelForcesSidePathAxis,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelJetwashDvinc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/jetwash/DVinc",
                    Units = "???",
                    Description = "DVinc",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Jetwash Dvinc",
                    Id = DataRefId.FlightmodelJetwashDvinc,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement FlightmodelJetwashRingdvinc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/jetwash/ringDVinc",
                    Units = "???",
                    Description = "ringDVinc",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Jetwash Ringdvinc",
                    Id = DataRefId.FlightmodelJetwashRingdvinc,
                    Writable = false,
                    DataType = "float[16][10]"
                };
            }
        }
        private DataRefElement FlightmodelMiscJettSize
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/jett_size",
                    Units = "???",
                    Description = "??? Slung/jettisonable load size - this fixes the typo above.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Jett Size",
                    Id = DataRefId.FlightmodelMiscJettSize,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscJettLen
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/jett_len",
                    Units = "???",
                    Description = "??? slung jettisonable load length (length of cable??!)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Jett Len",
                    Id = DataRefId.FlightmodelMiscJettLen,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscGTotal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/g_total",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc G Total",
                    Id = DataRefId.FlightmodelMiscGTotal,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscNosewheelSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/nosewheel_speed",
                    Units = "???",
                    Description = "[GEAR]",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Nosewheel Speed",
                    Id = DataRefId.FlightmodelMiscNosewheelSpeed,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscWingTiltPtch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/wing_tilt_ptch",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Wing Tilt Ptch",
                    Id = DataRefId.FlightmodelMiscWingTiltPtch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscWingTiltRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/wing_tilt_roll",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Wing Tilt Roll",
                    Id = DataRefId.FlightmodelMiscWingTiltRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscJatoLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/jato_left",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Jato Left",
                    Id = DataRefId.FlightmodelMiscJatoLeft,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscDisplaceRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/displace_rat",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Displace Rat",
                    Id = DataRefId.FlightmodelMiscDisplaceRat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscHInd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/h_ind",
                    Units = "feet",
                    Description = "Indicated barometric altitude",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc H Ind",
                    Id = DataRefId.FlightmodelMiscHInd,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscHInd2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/h_ind2",
                    Units = "feet",
                    Description = "Indicated barometric altitude",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc H Ind2",
                    Id = DataRefId.FlightmodelMiscHInd2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscHIndCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/h_ind_copilot",
                    Units = "feet",
                    Description = "Indicated barometric altitude",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc H Ind Copilot",
                    Id = DataRefId.FlightmodelMiscHIndCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscHIndCopilot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/h_ind_copilot2",
                    Units = "feet",
                    Description = "Indicated barometric altitude",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc H Ind Copilot2",
                    Id = DataRefId.FlightmodelMiscHIndCopilot2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscMachno
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/machno",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Machno",
                    Id = DataRefId.FlightmodelMiscMachno,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscQstatic
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/Qstatic",
                    Units = "psf",
                    Description = "Ambient Q",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Qstatic",
                    Id = DataRefId.FlightmodelMiscQstatic,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscTurnrateRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/turnrate_roll",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Turnrate Roll",
                    Id = DataRefId.FlightmodelMiscTurnrateRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscTurnrateRoll2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/turnrate_roll2",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Turnrate Roll2",
                    Id = DataRefId.FlightmodelMiscTurnrateRoll2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscTurnrateNoroll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/turnrate_noroll",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Turnrate Noroll",
                    Id = DataRefId.FlightmodelMiscTurnrateNoroll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscTurnrateNoroll2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/turnrate_noroll2",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Turnrate Noroll2",
                    Id = DataRefId.FlightmodelMiscTurnrateNoroll2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscSlip
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/slip",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Slip",
                    Id = DataRefId.FlightmodelMiscSlip,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscRocketMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/rocket_mode",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Rocket Mode",
                    Id = DataRefId.FlightmodelMiscRocketMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelMiscRocketTimeout
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/rocket_timeout",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Rocket Timeout",
                    Id = DataRefId.FlightmodelMiscRocketTimeout,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscPropOspeedTestTimeout
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/prop_ospeed_test_timeout",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Prop Ospeed Test Timeout",
                    Id = DataRefId.FlightmodelMiscPropOspeedTestTimeout,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscBlownFlapEngageRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/blown_flap_engage_rat",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Blown Flap Engage Rat",
                    Id = DataRefId.FlightmodelMiscBlownFlapEngageRat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscLiftFanTotalPower
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/lift_fan_total_power",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Lift Fan Total Power",
                    Id = DataRefId.FlightmodelMiscLiftFanTotalPower,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscStabPtchTest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/stab_ptch_test",
                    Units = "???",
                    Description = "Computed stability derivative - pitch",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Stab Ptch Test",
                    Id = DataRefId.FlightmodelMiscStabPtchTest,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelMiscStabHdngTest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/stab_hdng_test",
                    Units = "???",
                    Description = "Computed Stability drivative - heading",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Stab Hdng Test",
                    Id = DataRefId.FlightmodelMiscStabHdngTest,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelMiscCgzRefToDefault
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/cgz_ref_to_default",
                    Units = "meters",
                    Description = "Center of Gravity",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Cgz Ref To Default",
                    Id = DataRefId.FlightmodelMiscCgzRefToDefault,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscQCentroidMULT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/Q_centroid_MULT",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Q Centroid MULT",
                    Id = DataRefId.FlightmodelMiscQCentroidMULT,
                    Writable = false,
                    DataType = "float[56][4]"
                };
            }
        }
        private DataRefElement FlightmodelMiscCM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/C_m",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc CM",
                    Id = DataRefId.FlightmodelMiscCM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscCN
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/C_n",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc CN",
                    Id = DataRefId.FlightmodelMiscCN,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscClOverall
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/cl_overall",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Cl Overall",
                    Id = DataRefId.FlightmodelMiscClOverall,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscCdOverall
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/cd_overall",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Cd Overall",
                    Id = DataRefId.FlightmodelMiscCdOverall,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscLOD
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/l_o_d",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc LOD",
                    Id = DataRefId.FlightmodelMiscLOD,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscActFrcPtchLb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_ptch_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on yoke by ACF due to pitch",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Act Frc Ptch Lb",
                    Id = DataRefId.FlightmodelMiscActFrcPtchLb,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscActFrcRollLb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_roll_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on yoke by ACF due to roll",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Act Frc Roll Lb",
                    Id = DataRefId.FlightmodelMiscActFrcRollLb,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscActFrcHdngLb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_hdng_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on pedals by ACF due to heading",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Act Frc Hdng Lb",
                    Id = DataRefId.FlightmodelMiscActFrcHdngLb,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscActFrcLbrkLb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_lbrk_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on pedals by ACF due to left brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Act Frc Lbrk Lb",
                    Id = DataRefId.FlightmodelMiscActFrcLbrkLb,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscActFrcRbrkLb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_rbrk_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on pedals by ACF due to right brake",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Act Frc Rbrk Lb",
                    Id = DataRefId.FlightmodelMiscActFrcRbrkLb,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscSlungLoadX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/slung_load_x",
                    Units = "meters",
                    Description = "Global location of slung load, meters, x coordinate",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Slung Load X",
                    Id = DataRefId.FlightmodelMiscSlungLoadX,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscSlungLoadY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/slung_load_y",
                    Units = "meters",
                    Description = "Global location of slung load, meters, y coordinate",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Slung Load Y",
                    Id = DataRefId.FlightmodelMiscSlungLoadY,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMiscSlungLoadZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/misc/slung_load_z",
                    Units = "meters",
                    Description = "Global location of slung load, meters, z coordinate",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Misc Slung Load Z",
                    Id = DataRefId.FlightmodelMiscSlungLoadZ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelGroundSurfaceTextureType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/ground/surface_texture_type",
                    Units = "enum",
                    Description = "tbd - writable only with override_groundplane",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Ground Surface Texture Type",
                    Id = DataRefId.FlightmodelGroundSurfaceTextureType,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement FlightmodelGroundPluginGroundCenter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/ground/plugin_ground_center",
                    Units = "meters",
                    Description = "Location of a pt on the ground in local coords",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Ground Plugin Ground Center",
                    Id = DataRefId.FlightmodelGroundPluginGroundCenter,
                    Writable = true,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement FlightmodelGroundPluginGroundSlopeNormal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/ground/plugin_ground_slope_normal",
                    Units = "vector",
                    Description = "Normal vector of the terrain (must be normalized)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Ground Plugin Ground Slope Normal",
                    Id = DataRefId.FlightmodelGroundPluginGroundSlopeNormal,
                    Writable = true,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement FlightmodelGroundPluginGroundTerrainVelocity
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/ground/plugin_ground_terrain_velocity",
                    Units = "m/s",
                    Description = "speed of deck moving under us (this is a velocity vector)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Ground Plugin Ground Terrain Velocity",
                    Id = DataRefId.FlightmodelGroundPluginGroundTerrainVelocity,
                    Writable = true,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement FlightmodelMovingpartsGear1def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear1def",
                    Units = "???",
                    Description = "landing gear1 def",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Movingparts Gear1def",
                    Id = DataRefId.FlightmodelMovingpartsGear1def,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMovingpartsGear2def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear2def",
                    Units = "???",
                    Description = "landing gear2 def",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Movingparts Gear2def",
                    Id = DataRefId.FlightmodelMovingpartsGear2def,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMovingpartsGear3def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear3def",
                    Units = "???",
                    Description = "landing gear3 def",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Movingparts Gear3def",
                    Id = DataRefId.FlightmodelMovingpartsGear3def,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMovingpartsGear4def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear4def",
                    Units = "???",
                    Description = "landing gear4 def",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Movingparts Gear4def",
                    Id = DataRefId.FlightmodelMovingpartsGear4def,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelMovingpartsGear5def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear5def",
                    Units = "???",
                    Description = "landing gear5 def",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Movingparts Gear5def",
                    Id = DataRefId.FlightmodelMovingpartsGear5def,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPartsVEl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/v_el",
                    Units = "???",
                    Description = "73x10x4 speed is DIFFERENT FOR EACH BLADE!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts V El",
                    Id = DataRefId.FlightmodelPartsVEl,
                    Writable = false,
                    DataType = "float[56][10][4]"
                };
            }
        }
        private DataRefElement FlightmodelPartsAlphaEl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/alpha_el",
                    Units = "???",
                    Description = "73x10x4 alpha is DIFFERENT FOR EACH BLADE!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Alpha El",
                    Id = DataRefId.FlightmodelPartsAlphaEl,
                    Writable = false,
                    DataType = "float[56][10][4]"
                };
            }
        }
        private DataRefElement FlightmodelPartsDelDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/del_dir",
                    Units = "???",
                    Description = "73x10x4 corkscrew path is DIFFERENT FOR EACH BLADE!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Del Dir",
                    Id = DataRefId.FlightmodelPartsDelDir,
                    Writable = false,
                    DataType = "float[2920]"
                };
            }
        }
        private DataRefElement FlightmodelPartsClElRaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/cl_el_raw",
                    Units = "???",
                    Description = "56x10x4 [WING]",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Cl El Raw",
                    Id = DataRefId.FlightmodelPartsClElRaw,
                    Writable = false,
                    DataType = "float[56][10][4]"
                };
            }
        }
        private DataRefElement FlightmodelPartsCLGrndeffect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/CL_grndeffect",
                    Units = "???",
                    Description = "73 [WING]",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts CL Grndeffect",
                    Id = DataRefId.FlightmodelPartsCLGrndeffect,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsCDGrndeffect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/CD_grndeffect",
                    Units = "???",
                    Description = "73 [WING]",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts CD Grndeffect",
                    Id = DataRefId.FlightmodelPartsCDGrndeffect,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsWashGrndeffect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/wash_grndeffect",
                    Units = "???",
                    Description = "56 [WING]",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Wash Grndeffect",
                    Id = DataRefId.FlightmodelPartsWashGrndeffect,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsQCentroidLoc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/Q_centroid_loc",
                    Units = "???",
                    Description = "73x4 centroid is TOTALLY DIFFERENT FOR EACH BLADE on helos and gyros!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Q Centroid Loc",
                    Id = DataRefId.FlightmodelPartsQCentroidLoc,
                    Writable = false,
                    DataType = "float[56][4]"
                };
            }
        }
        private DataRefElement FlightmodelPartsQCentroidMULT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/Q_centroid_MULT",
                    Units = "???",
                    Description = "73x4 centroid is TOTALLY DIFFERENT FOR EACH BLADE on helos and gyros!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Q Centroid MULT",
                    Id = DataRefId.FlightmodelPartsQCentroidMULT,
                    Writable = false,
                    DataType = "float[56][4]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireDragDis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_drag_dis",
                    Units = "???",
                    Description = "73",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Drag Dis",
                    Id = DataRefId.FlightmodelPartsTireDragDis,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireSpeedTerm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_speed_term",
                    Units = "???",
                    Description = "73",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Speed Term",
                    Id = DataRefId.FlightmodelPartsTireSpeedTerm,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireSpeedNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_speed_now",
                    Units = "???",
                    Description = "73",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Speed Now",
                    Id = DataRefId.FlightmodelPartsTireSpeedNow,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTirePropRot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_prop_rot",
                    Units = "???",
                    Description = "73",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Prop Rot",
                    Id = DataRefId.FlightmodelPartsTirePropRot,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireXNoDeflection
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_x_no_deflection",
                    Units = "meters",
                    Description = "[GEAR] x location of the Nth gear's wheel relative to the CG, airplane coordinates.  This doesn't take into account strut compression.  Writable in v8/9, read-only in v10.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire X No Deflection",
                    Id = DataRefId.FlightmodelPartsTireXNoDeflection,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireYNoDeflection
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_y_no_deflection",
                    Units = "meters",
                    Description = "[GEAR] y location of the Nth gear's wheel relative to the CG, airplane coordinates.  This doesn't take into account strut compression.  Writable in v8/9, read-only in v10.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Y No Deflection",
                    Id = DataRefId.FlightmodelPartsTireYNoDeflection,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireZNoDeflection
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_z_no_deflection",
                    Units = "meters",
                    Description = "[GEAR] z location of the Nth gear's wheel relative to the CG, airplane coordinates.  This doesn't take into account strut compression.  Writable in v8/9, read-only in v10.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Z No Deflection",
                    Id = DataRefId.FlightmodelPartsTireZNoDeflection,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireVrtDefVeh
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_vrt_def_veh",
                    Units = "meters",
                    Description = "[GEAR] This is amount the Nth gear is deflected upwards due to vehicle weight on struts.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Vrt Def Veh",
                    Id = DataRefId.FlightmodelPartsTireVrtDefVeh,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireVrtFrcVeh
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_vrt_frc_veh",
                    Units = "???",
                    Description = "73",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Vrt Frc Veh",
                    Id = DataRefId.FlightmodelPartsTireVrtFrcVeh,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireSteerCmd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_steer_cmd",
                    Units = "degrees",
                    Description = "Steering command being sent to this gear, degrees positive right.  This takes into account steering algorithms for big planes like 747, but does not free castoring and springiness. Writable in 1030.  Override via override_wheel_steer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Steer Cmd",
                    Id = DataRefId.FlightmodelPartsTireSteerCmd,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsTireSteerAct
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/tire_steer_act",
                    Units = "degrees",
                    Description = "Steering command actually enacted by the gear, degrees positive right. Writable in 1030.  Override via override_wheel_steer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Tire Steer Act",
                    Id = DataRefId.FlightmodelPartsTireSteerAct,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement FlightmodelPartsNrmlForce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/nrml_force",
                    Units = "???",
                    Description = "73 [WING] for data output, for the entire flying surface",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Nrml Force",
                    Id = DataRefId.FlightmodelPartsNrmlForce,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsAxilForce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/axil_force",
                    Units = "???",
                    Description = "73 [WING] for data output, for the entire flying surface",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Axil Force",
                    Id = DataRefId.FlightmodelPartsAxilForce,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsFlapDef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/flap_def",
                    Units = "degrees",
                    Description = "73 [WING] with flap setting, and then variation with pitch and roll input, on a 4 wing plane, with flaps on every wing, some going up and down with pitch input, we better find the flap def on each surface!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Flap Def",
                    Id = DataRefId.FlightmodelPartsFlapDef,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsFlap2Def
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/flap2_def",
                    Units = "degrees",
                    Description = "56 [WING] with flap setting, and then variation with pitch and roll input, on a 4 wing plane, with flaps on every wing, some going up and down with pitch input, we better find the flap def on each surface!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Flap2def",
                    Id = DataRefId.FlightmodelPartsFlap2Def,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsElevContDef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/elev_cont_def",
                    Units = "degrees",
                    Description = "73 [WING] different for each part since def may be positive on a canard and negative on an aft wing... ON THE SAME PLANE AT THE SAME TIME!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Elev Cont Def",
                    Id = DataRefId.FlightmodelPartsElevContDef,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsElevTrimDef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/elev_trim_def",
                    Units = "degrees",
                    Description = "73 [WING] different for each part since def may be positive on a canard and negative on an aft wing... ON THE SAME PLANE AT THE SAME TIME!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Elev Trim Def",
                    Id = DataRefId.FlightmodelPartsElevTrimDef,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsRuddContDef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/rudd_cont_def",
                    Units = "degrees",
                    Description = "73 [WING] different for each part since def may be positive on top vstab and neg on the bottom one.... ON THE SAME PLANE AT THE SAME TIME!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Rudd Cont Def",
                    Id = DataRefId.FlightmodelPartsRuddContDef,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsRudd2ContDef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/rudd2_cont_def",
                    Units = "degrees",
                    Description = "56 [WING] different for each part since def may be positive on top vstab and neg on the bottom one.... ON THE SAME PLANE AT THE SAME TIME!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Rudd2cont Def",
                    Id = DataRefId.FlightmodelPartsRudd2ContDef,
                    Writable = false,
                    DataType = "float[56]"
                };
            }
        }
        private DataRefElement FlightmodelPartsElemInc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/parts/elem_inc",
                    Units = "degrees",
                    Description = "73x10",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Parts Elem Inc",
                    Id = DataRefId.FlightmodelPartsElemInc,
                    Writable = false,
                    DataType = "float[56][10]"
                };
            }
        }
        private DataRefElement FlightmodelPositionLocalX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_x",
                    Units = "meters",
                    Description = "The location of the plane in OpenGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Local X",
                    Id = DataRefId.FlightmodelPositionLocalX,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement FlightmodelPositionLocalY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_y",
                    Units = "meters",
                    Description = "The location of the plane in OpenGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Local Y",
                    Id = DataRefId.FlightmodelPositionLocalY,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement FlightmodelPositionLocalZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_z",
                    Units = "meters",
                    Description = "The location of the plane in OpenGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Local Z",
                    Id = DataRefId.FlightmodelPositionLocalZ,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement FlightmodelPositionLatRef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/lat_ref",
                    Units = "degrees",
                    Description = "The latitude of the point 0,0,0 in OpenGL coordinates (Writing NOT recommended!!)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Lat Ref",
                    Id = DataRefId.FlightmodelPositionLatRef,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionLonRef
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/lon_ref",
                    Units = "degrees",
                    Description = "The longitude of the point 0,0,0 in OpenGL coordinates.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Lon Ref",
                    Id = DataRefId.FlightmodelPositionLonRef,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionLatitude
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/latitude",
                    Units = "degrees",
                    Description = "The latitude of the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Latitude",
                    Id = DataRefId.FlightmodelPositionLatitude,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement FlightmodelPositionLongitude
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/longitude",
                    Units = "degrees",
                    Description = "The longitude of the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Longitude",
                    Id = DataRefId.FlightmodelPositionLongitude,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement FlightmodelPositionElevation
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/elevation",
                    Units = "meters",
                    Description = "The elevation above MSL of the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Elevation",
                    Id = DataRefId.FlightmodelPositionElevation,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement FlightmodelPositionTheta
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/theta",
                    Units = "degrees",
                    Description = "The pitch relative to the plane normal to the Y axis in degrees - OpenGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Theta",
                    Id = DataRefId.FlightmodelPositionTheta,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionPhi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/phi",
                    Units = "degrees",
                    Description = "The roll of the aircraft in degrees - OpenGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Phi",
                    Id = DataRefId.FlightmodelPositionPhi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/psi",
                    Units = "degrees",
                    Description = "The true heading of the aircraft in degrees from the Z axis - OpenGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Psi",
                    Id = DataRefId.FlightmodelPositionPsi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionMagpsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/magpsi",
                    Units = "degrees",
                    Description = "DO NOT USE THIS",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Magpsi",
                    Id = DataRefId.FlightmodelPositionMagpsi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionTrueTheta
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/true_theta",
                    Units = "degrees",
                    Description = "The pitch of the aircraft relative to the earth precisely below the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position True Theta",
                    Id = DataRefId.FlightmodelPositionTrueTheta,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionTruePhi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/true_phi",
                    Units = "degrees",
                    Description = "The roll of the aircraft relative to the earth precisely below the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position True Phi",
                    Id = DataRefId.FlightmodelPositionTruePhi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionTruePsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/true_psi",
                    Units = "degrees",
                    Description = "The heading of the aircraft relative to the earth precisely below the aircraft - true degrees north, always",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position True Psi",
                    Id = DataRefId.FlightmodelPositionTruePsi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionMagPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/mag_psi",
                    Units = "degrees",
                    Description = "The real magnetic heading of the aircraft - the old magpsi dataref was FUBAR",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Mag Psi",
                    Id = DataRefId.FlightmodelPositionMagPsi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionLocalVx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_vx",
                    Units = "mtr/sec",
                    Description = "The velocity in local OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Local Vx",
                    Id = DataRefId.FlightmodelPositionLocalVx,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionLocalVy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_vy",
                    Units = "mtr/sec",
                    Description = "The velocity in local OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Local Vy",
                    Id = DataRefId.FlightmodelPositionLocalVy,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionLocalVz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_vz",
                    Units = "mtr/sec",
                    Description = "The velocity in local OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Local Vz",
                    Id = DataRefId.FlightmodelPositionLocalVz,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionLocalAx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_ax",
                    Units = "mtr/sec2",
                    Description = "The acceleration in local OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Local Ax",
                    Id = DataRefId.FlightmodelPositionLocalAx,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionLocalAy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_ay",
                    Units = "mtr/sec2",
                    Description = "The acceleration in local OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Local Ay",
                    Id = DataRefId.FlightmodelPositionLocalAy,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionLocalAz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_az",
                    Units = "mtr/sec2",
                    Description = "The acceleration in local OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Local Az",
                    Id = DataRefId.FlightmodelPositionLocalAz,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionAlpha
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/alpha",
                    Units = "degrees",
                    Description = "The pitch relative to the flown path (angle of attack)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Alpha",
                    Id = DataRefId.FlightmodelPositionAlpha,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionBeta
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/beta",
                    Units = "degrees",
                    Description = "The heading relative to the flown path (yaw)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Beta",
                    Id = DataRefId.FlightmodelPositionBeta,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionVpath
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/vpath",
                    Units = "degrees",
                    Description = "The pitch the aircraft actually flies.  (vpath+alpha=theta)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Vpath",
                    Id = DataRefId.FlightmodelPositionVpath,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionHpath
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/hpath",
                    Units = "degrees",
                    Description = "The heading the aircraft actually flies.  (hpath+beta=psi)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Hpath",
                    Id = DataRefId.FlightmodelPositionHpath,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionGroundspeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/groundspeed",
                    Units = "meters/sec",
                    Description = "The ground speed of the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Groundspeed",
                    Id = DataRefId.FlightmodelPositionGroundspeed,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionIndicatedAirspeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/indicated_airspeed",
                    Units = "kias",
                    Description = "Air speed indicated - this takes into account air density and wind direction",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Indicated Airspeed",
                    Id = DataRefId.FlightmodelPositionIndicatedAirspeed,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionIndicatedAirspeed2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/indicated_airspeed2",
                    Units = "kias",
                    Description = "Air speed indicated - this takes into account air density and wind direction",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Indicated Airspeed2",
                    Id = DataRefId.FlightmodelPositionIndicatedAirspeed2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionTrueAirspeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/true_airspeed",
                    Units = "meters/sec",
                    Description = "Air speed true - this does not take into account air density at altitude!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position True Airspeed",
                    Id = DataRefId.FlightmodelPositionTrueAirspeed,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionMagneticVariation
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/magnetic_variation",
                    Units = "degrees",
                    Description = "The local magnetic variation",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Magnetic Variation",
                    Id = DataRefId.FlightmodelPositionMagneticVariation,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/M",
                    Units = "NM",
                    Description = "The angular momentum of the aircraft (relative to flight axis).",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position M",
                    Id = DataRefId.FlightmodelPositionM,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionN
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/N",
                    Units = "NM",
                    Description = "The angular momentum of the aircraft (relative to flight axis)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position N",
                    Id = DataRefId.FlightmodelPositionN,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionL
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/L",
                    Units = "NM",
                    Description = "The angular momentum of the aircraft (relative to flight axis)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position L",
                    Id = DataRefId.FlightmodelPositionL,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/P",
                    Units = "deg/sec",
                    Description = "The roll rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position P",
                    Id = DataRefId.FlightmodelPositionP,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionQ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/Q",
                    Units = "deg/sec",
                    Description = "The pitch rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Q",
                    Id = DataRefId.FlightmodelPositionQ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/R",
                    Units = "deg/sec",
                    Description = "The yaw rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position R",
                    Id = DataRefId.FlightmodelPositionR,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionPDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/P_dot",
                    Units = "deg/sec2",
                    Description = "The roll angular acceleration (relative to the flight)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position P Dot",
                    Id = DataRefId.FlightmodelPositionPDot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionQDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/Q_dot",
                    Units = "deg/sec2",
                    Description = "The pitch angular acceleration (relative to the flight)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Q Dot",
                    Id = DataRefId.FlightmodelPositionQDot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionRDot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/R_dot",
                    Units = "deg/sec2",
                    Description = "The yaw angular acceleration rates (relative to the flight)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position R Dot",
                    Id = DataRefId.FlightmodelPositionRDot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionPrad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/Prad",
                    Units = "rad/sec",
                    Description = "The roll rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Prad",
                    Id = DataRefId.FlightmodelPositionPrad,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionQrad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/Qrad",
                    Units = "rad/sec",
                    Description = "The pitch rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Qrad",
                    Id = DataRefId.FlightmodelPositionQrad,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionRrad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/Rrad",
                    Units = "rad/sec",
                    Description = "The yaw rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Rrad",
                    Id = DataRefId.FlightmodelPositionRrad,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/q",
                    Units = "quaternion",
                    Description = "A quaternion representing the rotation from local OpenGL coordinates to the aircraft's coordinates.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Positionq",
                    Id = DataRefId.FlightmodelPositionq,
                    Writable = true,
                    DataType = "float[4]"
                };
            }
        }
        private DataRefElement FlightmodelPositionVhInd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/vh_ind",
                    Units = "meters/second",
                    Description = "VVI (vertical velocity in meters per second)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Vh Ind",
                    Id = DataRefId.FlightmodelPositionVhInd,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionVhIndFpm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/vh_ind_fpm",
                    Units = "fpm",
                    Description = "VVI (vertical velocity in feet per second)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Vh Ind Fpm",
                    Id = DataRefId.FlightmodelPositionVhIndFpm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionVhIndFpm2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/vh_ind_fpm2",
                    Units = "fpm",
                    Description = "VVI (vertical velocity in feet per second)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Vh Ind Fpm2",
                    Id = DataRefId.FlightmodelPositionVhIndFpm2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelPositionYAgl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/position/y_agl",
                    Units = "meters",
                    Description = "AGL",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Position Y Agl",
                    Id = DataRefId.FlightmodelPositionYAgl,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelTransmissionsXmsnPress
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/transmissions/xmsn_press",
                    Units = "???",
                    Description = "transmission pressure",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Transmissions Xmsn Press",
                    Id = DataRefId.FlightmodelTransmissionsXmsnPress,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelTransmissionsXmsnTemp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/transmissions/xmsn_temp",
                    Units = "???",
                    Description = "transmission temperature",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Transmissions Xmsn Temp",
                    Id = DataRefId.FlightmodelTransmissionsXmsnTemp,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelWeightMFixed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fixed",
                    Units = "kgs",
                    Description = "Payload Weight",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Weight M Fixed",
                    Id = DataRefId.FlightmodelWeightMFixed,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelWeightMTotal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_total",
                    Units = "kgs",
                    Description = "Total Weight",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Weight M Total",
                    Id = DataRefId.FlightmodelWeightMTotal,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelWeightMFuel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fuel",
                    Units = "kgs",
                    Description = "Fuel Tank Weight - for 9 tanks",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Weight M Fuel",
                    Id = DataRefId.FlightmodelWeightMFuel,
                    Writable = true,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement FlightmodelWeightMFuel1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fuel1",
                    Units = "kgs",
                    Description = "Fuel Tank 1 Weight",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Weight M Fuel1",
                    Id = DataRefId.FlightmodelWeightMFuel1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelWeightMFuel2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fuel2",
                    Units = "kgs",
                    Description = "Fuel Tank 2 Weight",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Weight M Fuel2",
                    Id = DataRefId.FlightmodelWeightMFuel2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelWeightMFuel3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fuel3",
                    Units = "kgs",
                    Description = "Fuel Tank 3 Weight",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Weight M Fuel3",
                    Id = DataRefId.FlightmodelWeightMFuel3,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelWeightMJettison
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_jettison",
                    Units = "kgs",
                    Description = "Jettison",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Weight M Jettison",
                    Id = DataRefId.FlightmodelWeightMJettison,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement FlightmodelWeightMFuelTotal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fuel_total",
                    Units = "kgs",
                    Description = "Fuel Total Weight",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel Weight M Fuel Total",
                    Id = DataRefId.FlightmodelWeightMFuelTotal,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationDrawObjectX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_object_x",
                    Units = "float",
                    Description = "X position in cartesian space of currently drawn object",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Draw Object X",
                    Id = DataRefId.GraphicsAnimationDrawObjectX,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationDrawObjectY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_object_y",
                    Units = "float",
                    Description = "Y position in cartesian space of currently drawn object",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Draw Object Y",
                    Id = DataRefId.GraphicsAnimationDrawObjectY,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationDrawObjectZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_object_z",
                    Units = "float",
                    Description = "Z position in cartesian space of currently drawn object",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Draw Object Z",
                    Id = DataRefId.GraphicsAnimationDrawObjectZ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationDrawObjectPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_object_psi",
                    Units = "float",
                    Description = "rotation in cartesian space of currently drawn object",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Draw Object Psi",
                    Id = DataRefId.GraphicsAnimationDrawObjectPsi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationDrawLightLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_light_level",
                    Units = "float",
                    Description = "This is the default _LIT light level that the object is being drawn at, before ATTR_light_level is applied.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Draw Light Level",
                    Id = DataRefId.GraphicsAnimationDrawLightLevel,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationAirportBeaconRotation
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/airport_beacon_rotation",
                    Units = "degrees",
                    Description = "angle this beacon is rotating (0-360). Civillian beacons rotate at 11-13 RPM, giving 22-26 flashes/min for an airport and 33-39/min flashes for a heliport. ",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Airport Beacon Rotation",
                    Id = DataRefId.GraphicsAnimationAirportBeaconRotation,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationAirportBeaconRotationMilitary
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/airport_beacon_rotation_military",
                    Units = "degrees",
                    Description = "angle this military airport beacon is rotating (0-360). Military beacons rotate at 8-10 RPM, giving off 16-20 flashes/min where the double white counts as one flash. ",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Airport Beacon Rotation Military",
                    Id = DataRefId.GraphicsAnimationAirportBeaconRotationMilitary,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationWindsockPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/windsock_psi",
                    Units = "degrees",
                    Description = "windsock heading",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Windsock Psi",
                    Id = DataRefId.GraphicsAnimationWindsockPsi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationWindsockThe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/windsock_the",
                    Units = "degrees",
                    Description = "windsock pitch",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Windsock The",
                    Id = DataRefId.GraphicsAnimationWindsockThe,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationWindsockPhi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/windsock_phi",
                    Units = "degrees",
                    Description = "windsock roll",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Windsock Phi",
                    Id = DataRefId.GraphicsAnimationWindsockPhi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationCranePsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/crane_psi",
                    Units = "ratio",
                    Description = "crane heading",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Crane Psi",
                    Id = DataRefId.GraphicsAnimationCranePsi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationBuoyHeight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/buoy_height",
                    Units = "meters",
                    Description = "how high above MSL 0 is this buoy riding?",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Buoy Height",
                    Id = DataRefId.GraphicsAnimationBuoyHeight,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationPingPong2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/ping_pong_2",
                    Units = "ratio",
                    Description = "-1 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Ping Pong2",
                    Id = DataRefId.GraphicsAnimationPingPong2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationSinWave2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/sin_wave_2",
                    Units = "ratio",
                    Description = "-1 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Sin Wave2",
                    Id = DataRefId.GraphicsAnimationSinWave2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationObjWigwagBrightness
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/obj_wigwag_brightness",
                    Units = "ratio",
                    Description = "Brightness of the wig-wag lights - stays in sync with sim/graphics/animation/lights/wigwag",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Obj Wigwag Brightness",
                    Id = DataRefId.GraphicsAnimationObjWigwagBrightness,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationCarrierBlastDefLf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/carrier_blast_def_lf",
                    Units = "ratio",
                    Description = "Ratio of deployment of carrier blast door (left front)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Carrier Blast Def Lf",
                    Id = DataRefId.GraphicsAnimationCarrierBlastDefLf,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationCarrierBlastDefRf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/carrier_blast_def_rf",
                    Units = "ratio",
                    Description = "Ratio of deployment of carrier blast door (right front)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Carrier Blast Def Rf",
                    Id = DataRefId.GraphicsAnimationCarrierBlastDefRf,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationCarrierBlastDefLr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/carrier_blast_def_lr",
                    Units = "ratio",
                    Description = "Ratio of deployment of carrier blast door (left rear)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Carrier Blast Def Lr",
                    Id = DataRefId.GraphicsAnimationCarrierBlastDefLr,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationCarrierBlastDefRr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/carrier_blast_def_rr",
                    Units = "ratio",
                    Description = "Ratio of deployment of carrier blast door (right rear)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Carrier Blast Def Rr",
                    Id = DataRefId.GraphicsAnimationCarrierBlastDefRr,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationLevelCrossingGate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/level_crossing_gate",
                    Units = "ratio",
                    Description = "Ratio of the position of all level crossing gates, 0 is up, 1 is down",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Level Crossing Gate",
                    Id = DataRefId.GraphicsAnimationLevelCrossingGate,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationBirdsWingFlapDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/birds/wing_flap_deg",
                    Units = "float",
                    Description = "degree of wing flap for the currently drawn bird",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Birds Wing Flap Deg",
                    Id = DataRefId.GraphicsAnimationBirdsWingFlapDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationBirdsFeetRetractDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/birds/feet_retract_deg",
                    Units = "float",
                    Description = "angle the bird's feet are retracted for the flock of birds.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Birds Feet Retract Deg",
                    Id = DataRefId.GraphicsAnimationBirdsFeetRetractDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationDeerDeerRunCycle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/deer/deer_run_cycle",
                    Units = "float",
                    Description = "ratio for deer running",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Deer Deer Run Cycle",
                    Id = DataRefId.GraphicsAnimationDeerDeerRunCycle,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationDeerDeerTurnCycle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/deer/deer_turn_cycle",
                    Units = "float",
                    Description = "ratio for deer turning",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Deer Deer Turn Cycle",
                    Id = DataRefId.GraphicsAnimationDeerDeerTurnCycle,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsFlasher
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/flasher",
                    Units = "light",
                    Description = "A flashing light, on only at night, matches v7",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Flasher",
                    Id = DataRefId.GraphicsAnimationLightsFlasher,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsPulse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/pulse",
                    Units = "light",
                    Description = "A red pulsing light, on only at night, matches v7",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Pulse",
                    Id = DataRefId.GraphicsAnimationLightsPulse,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsStrobeV7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/strobe_v7",
                    Units = "light",
                    Description = "A white strobe light, on only at night, matches v7",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Strobe V7",
                    Id = DataRefId.GraphicsAnimationLightsStrobeV7,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsTrafficLight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/traffic_light",
                    Units = "light",
                    Description = "A 3-color traffic light, matches v7",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Traffic Light",
                    Id = DataRefId.GraphicsAnimationLightsTrafficLight,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsNormal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/normal",
                    Units = "light",
                    Description = "A normal on-at-night light, matches v7",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Normal",
                    Id = DataRefId.GraphicsAnimationLightsNormal,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsVasiPapi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/vasi_papi",
                    Units = "light",
                    Description = "VASI light, RG = rescaling of brightness",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Vasi Papi",
                    Id = DataRefId.GraphicsAnimationLightsVasiPapi,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsVasi3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/vasi3",
                    Units = "light",
                    Description = "VASI light, RG = rescaling of brightness, B= beam+, A=beam-",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Vasi3",
                    Id = DataRefId.GraphicsAnimationLightsVasi3,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsRabbit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/rabbit",
                    Units = "light",
                    Description = "RG = rescaling, B = flash frequency",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Rabbit",
                    Id = DataRefId.GraphicsAnimationLightsRabbit,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsRabbitSp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/rabbit_sp",
                    Units = "light",
                    Description = "RGB = ignored, A = frequency",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Rabbit Sp",
                    Id = DataRefId.GraphicsAnimationLightsRabbitSp,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsStrobe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/strobe",
                    Units = "light",
                    Description = "RG = rescaling, B = flash frequency, A= phase",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Strobe",
                    Id = DataRefId.GraphicsAnimationLightsStrobe,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsStrobeSp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/strobe_sp",
                    Units = "light",
                    Description = "RGB = ignored, A = frequency",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Strobe Sp",
                    Id = DataRefId.GraphicsAnimationLightsStrobeSp,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsWigwag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/wigwag",
                    Units = "light",
                    Description = "RG = rescaling, B = flash frequency, A= phase",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Wigwag",
                    Id = DataRefId.GraphicsAnimationLightsWigwag,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsWigwagSp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/wigwag_sp",
                    Units = "light",
                    Description = "RGB = ignored, A = phase, dx = frequency",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Wigwag Sp",
                    Id = DataRefId.GraphicsAnimationLightsWigwagSp,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsCarrierWaveoff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/carrier_waveoff",
                    Units = "light",
                    Description = "A light that turns on when the carrier app is waved off",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Carrier Waveoff",
                    Id = DataRefId.GraphicsAnimationLightsCarrierWaveoff,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsFresnelVertical
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/fresnel_vertical",
                    Units = "light",
                    Description = "A vertical fresnel.  RG = long range, BA = vert range",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Fresnel Vertical",
                    Id = DataRefId.GraphicsAnimationLightsFresnelVertical,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsFresnelHorizontal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/fresnel_horizontal",
                    Units = "light",
                    Description = "A horizontal fresnel.  RG = long range, BA = vert range",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Fresnel Horizontal",
                    Id = DataRefId.GraphicsAnimationLightsFresnelHorizontal,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneLandingLight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_landing_light",
                    Units = "light",
                    Description = "Airplane landing light.   RGB = dir, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Landing Light",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneLandingLight,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneLandingLightFlash
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_landing_light_flash",
                    Units = "light",
                    Description = "Airplane landing light.   RGB = dir, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Landing Light Flash",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneLandingLightFlash,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneLandingLightSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_landing_light_spill",
                    Units = "light",
                    Description = "Airplane landing light.   RGB = dir, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Landing Light Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneLandingLightSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneGenericLight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_generic_light",
                    Units = "light",
                    Description = "Airplane generic light.   RGB = dir, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Generic Light",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneGenericLight,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneGenericLightFlash
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_generic_light_flash",
                    Units = "light",
                    Description = "Airplane generic light.   RGB = dir, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Generic Light Flash",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneGenericLightFlash,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneGenericLightSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_generic_light_spill",
                    Units = "light",
                    Description = "Airplane generic light.   RGB = dir, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Generic Light Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneGenericLightSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneTaxiLight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_taxi_light",
                    Units = "light",
                    Description = "AIrplane taxi light.   RGB = dir, A = reserved, use 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Taxi Light",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneTaxiLight,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneTaxiLightFlash
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_taxi_light_flash",
                    Units = "light",
                    Description = "AIrplane taxi light.   RGB = dir, A = reserved, use 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Taxi Light Flash",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneTaxiLightFlash,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneTaxiLightSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_taxi_light_spill",
                    Units = "light",
                    Description = "AIrplane taxi light.   RGB = dir, A = reserved, use 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Taxi Light Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneTaxiLightSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneSpotLight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_spot_light",
                    Units = "light",
                    Description = "AIrplane spot light.   RGB = dir, A = reserved, use 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Spot Light",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneSpotLight,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneSpotLightFlash
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_spot_light_flash",
                    Units = "light",
                    Description = "AIrplane spot light.   RGB = dir, A = reserved, use 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Spot Light Flash",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneSpotLightFlash,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneSpotLightSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_spot_light_spill",
                    Units = "light",
                    Description = "AIrplane spot light.   RGB = dir, A = reserved, use 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Spot Light Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneSpotLightSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneBeaconLight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_beacon_light",
                    Units = "light",
                    Description = "Airplane beacon light.   RGB = ignore, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Beacon Light",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneBeaconLight,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneNavigationLight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_navigation_light",
                    Units = "light",
                    Description = "Airplane navigation light.   RGB = ignore, A = reserved, use 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Navigation Light",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneNavigationLight,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneStrobeLight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_strobe_light",
                    Units = "light",
                    Description = "Airplane strobe light.   RGB = ignore, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Strobe Light",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneStrobeLight,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneBeaconLightDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_beacon_light_dir",
                    Units = "light",
                    Description = "Airplane beacon light.   RGB = direction, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Beacon Light Dir",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneBeaconLightDir,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneNavigationLightDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_navigation_light_dir",
                    Units = "light",
                    Description = "Airplane navigation light.   RGB = ignored, A = reserved, use 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Navigation Light Dir",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneNavigationLightDir,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneStrobeLightDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_strobe_light_dir",
                    Units = "light",
                    Description = "Airplane strobe light.   RGB = direction, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Strobe Light Dir",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneStrobeLightDir,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneBeaconLightSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_beacon_light_spill",
                    Units = "light",
                    Description = "Airplane beacon light.   RGB = direction, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Beacon Light Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneBeaconLightSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneNavigationLightSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_navigation_light_spill",
                    Units = "light",
                    Description = "Airplane navigation light.   RGB = ignored, A = reserved, use 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Navigation Light Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneNavigationLightSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneStrobeLightSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_strobe_light_spill",
                    Units = "light",
                    Description = "Airplane strobe light.   RGB = direction, A = light number",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Strobe Light Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneStrobeLightSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplanePanelSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_panel_spill",
                    Units = "light",
                    Description = "Internal panel floods, A = index",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Panel Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplanePanelSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneInstSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_inst_spill",
                    Units = "light",
                    Description = "Internal instrument post lights, A = index",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Inst Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneInstSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneBeaconLightRotate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_beacon_light_rotate",
                    Units = "light",
                    Description = "Airplane beacon light for rotating beacon billboard.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Beacon Light Rotate",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneBeaconLightRotate,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationLightsAirplaneBeaconLightRotateSpill
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/lights/airplane_beacon_light_rotate_spill",
                    Units = "light",
                    Description = "Airplane beacon light for rotating beacon spill.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Lights Airplane Beacon Light Rotate Spill",
                    Id = DataRefId.GraphicsAnimationLightsAirplaneBeaconLightRotateSpill,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement GraphicsAnimationGroundTrafficTireSteerDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/tire_steer_deg",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Ground Traffic Tire Steer Deg",
                    Id = DataRefId.GraphicsAnimationGroundTrafficTireSteerDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationGroundTrafficTireRotationAngleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/tire_rotation_angle_deg",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Ground Traffic Tire Rotation Angle Deg",
                    Id = DataRefId.GraphicsAnimationGroundTrafficTireRotationAngleDeg,
                    Writable = false,
                    DataType = "float[5]"
                };
            }
        }
        private DataRefElement GraphicsAnimationGroundTrafficWiperAngleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/wiper_angle_deg",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Ground Traffic Wiper Angle Deg",
                    Id = DataRefId.GraphicsAnimationGroundTrafficWiperAngleDeg,
                    Writable = false,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement GraphicsAnimationGroundTrafficTowbarHeadingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/towbar_heading_deg",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Ground Traffic Towbar Heading Deg",
                    Id = DataRefId.GraphicsAnimationGroundTrafficTowbarHeadingDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationGroundTrafficTowbarPitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/towbar_pitch_deg",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Ground Traffic Towbar Pitch Deg",
                    Id = DataRefId.GraphicsAnimationGroundTrafficTowbarPitchDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationGroundTrafficBeltLoaderHeightMeters
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/belt_loader_height_meters",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Ground Traffic Belt Loader Height Meters",
                    Id = DataRefId.GraphicsAnimationGroundTrafficBeltLoaderHeightMeters,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsAnimationGroundTrafficDoorOpen
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/door_open",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Animation Ground Traffic Door Open",
                    Id = DataRefId.GraphicsAnimationGroundTrafficDoorOpen,
                    Writable = false,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement GraphicsColorsBackgroundRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/background_rgb",
                    Units = "RGB",
                    Description = "Background color behind a modal window",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Background Rgb",
                    Id = DataRefId.GraphicsColorsBackgroundRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsMenuDarkRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/menu_dark_rgb",
                    Units = "RGB",
                    Description = "Dark tinging for menus",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Menu Dark Rgb",
                    Id = DataRefId.GraphicsColorsMenuDarkRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsMenuHiliteRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/menu_hilite_rgb",
                    Units = "RGB",
                    Description = "Menu color of a selected item",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Menu Hilite Rgb",
                    Id = DataRefId.GraphicsColorsMenuHiliteRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsMenuLiteRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/menu_lite_rgb",
                    Units = "RGB",
                    Description = "Light tinging for menus",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Menu Lite Rgb",
                    Id = DataRefId.GraphicsColorsMenuLiteRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsMenuTextRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/menu_text_rgb",
                    Units = "RGB",
                    Description = "Menu Item Text Color",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Menu Text Rgb",
                    Id = DataRefId.GraphicsColorsMenuTextRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsMenuTextDisabledRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/menu_text_disabled_rgb",
                    Units = "RGB",
                    Description = "Menu Item Text Color When Disabled",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Menu Text Disabled Rgb",
                    Id = DataRefId.GraphicsColorsMenuTextDisabledRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsSubtitleTextRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/subtitle_text_rgb",
                    Units = "RGB",
                    Description = "Subtitle text colors",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Subtitle Text Rgb",
                    Id = DataRefId.GraphicsColorsSubtitleTextRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsTabFrontRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/tab_front_rgb",
                    Units = "RGB",
                    Description = "Color of text on tabs that are forward",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Tab Front Rgb",
                    Id = DataRefId.GraphicsColorsTabFrontRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsTabBackRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/tab_back_rgb",
                    Units = "RGB",
                    Description = "Color of text on tabs that are in the bkgnd",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Tab Back Rgb",
                    Id = DataRefId.GraphicsColorsTabBackRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsCaptionTextRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/caption_text_rgb",
                    Units = "RGB",
                    Description = "Caption text (for on a main window)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Caption Text Rgb",
                    Id = DataRefId.GraphicsColorsCaptionTextRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsListTextRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/list_text_rgb",
                    Units = "RGB",
                    Description = "Text Color for scrolling lists",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors List Text Rgb",
                    Id = DataRefId.GraphicsColorsListTextRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsGlassTextRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/glass_text_rgb",
                    Units = "RGB",
                    Description = "Text color for on a 'glass' screen",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Glass Text Rgb",
                    Id = DataRefId.GraphicsColorsGlassTextRgb,
                    Writable = false,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsPlanePath13DRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/plane_path1_3d_rgb",
                    Units = "RGB",
                    Description = "Color for 3-d plane path",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Plane Path13d Rgb",
                    Id = DataRefId.GraphicsColorsPlanePath13DRgb,
                    Writable = true,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsColorsPlanePath23DRgb
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/colors/plane_path2_3d_rgb",
                    Units = "RGB",
                    Description = "Striping color for 3-d plane path",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Colors Plane Path23d Rgb",
                    Id = DataRefId.GraphicsColorsPlanePath23DRgb,
                    Writable = true,
                    DataType = "float[3]"
                };
            }
        }
        private DataRefElement GraphicsMiscShowPanelClickSpots
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/show_panel_click_spots",
                    Units = "boolean",
                    Description = "Show the clickable parts of the panel?",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Show Panel Click Spots",
                    Id = DataRefId.GraphicsMiscShowPanelClickSpots,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsMiscShowInstrumentDescriptions
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/show_instrument_descriptions",
                    Units = "boolean",
                    Description = "Show instrument descriptions on the panel?",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Show Instrument Descriptions",
                    Id = DataRefId.GraphicsMiscShowInstrumentDescriptions,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsMiscCockpitLightLevelR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/cockpit_light_level_r",
                    Units = "ratio",
                    Description = "The red level for the cockpit 'night' tinting, from 0 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Cockpit Light Level R",
                    Id = DataRefId.GraphicsMiscCockpitLightLevelR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscCockpitLightLevelG
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/cockpit_light_level_g",
                    Units = "ratio",
                    Description = "The green level for the cockpit 'night' tinting, from 0 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Cockpit Light Level G",
                    Id = DataRefId.GraphicsMiscCockpitLightLevelG,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscCockpitLightLevelB
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/cockpit_light_level_b",
                    Units = "ratio",
                    Description = "The blue level for the cockpit 'night' tinting, from 0 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Cockpit Light Level B",
                    Id = DataRefId.GraphicsMiscCockpitLightLevelB,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscOutsideLightLevelR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/outside_light_level_r",
                    Units = "ratio",
                    Description = "The red level for the world, from 0 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Outside Light Level R",
                    Id = DataRefId.GraphicsMiscOutsideLightLevelR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscOutsideLightLevelG
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/outside_light_level_g",
                    Units = "ratio",
                    Description = "The green level for the world, from 0 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Outside Light Level G",
                    Id = DataRefId.GraphicsMiscOutsideLightLevelG,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscOutsideLightLevelB
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/outside_light_level_b",
                    Units = "ratio",
                    Description = "The blue level for the world, from 0 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Outside Light Level B",
                    Id = DataRefId.GraphicsMiscOutsideLightLevelB,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscLightAttenuation
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/light_attenuation",
                    Units = "ratio",
                    Description = "Amount that artificial light is dimmed due to the sun's magnitude",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Light Attenuation",
                    Id = DataRefId.GraphicsMiscLightAttenuation,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscUseProportionalFonts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/use_proportional_fonts",
                    Units = "boolean",
                    Description = "Set this to 1 to enable proportional fonts when available.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Use Proportional Fonts",
                    Id = DataRefId.GraphicsMiscUseProportionalFonts,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsMiscKillMapFmsLine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/kill_map_fms_line",
                    Units = "boolean",
                    Description = "If set to true, the map instruments won't draw the red FMS course line. SET THIS BACK TO 0 WHEN YOUR PLANE UNLOADS!",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Kill Map Fms Line",
                    Id = DataRefId.GraphicsMiscKillMapFmsLine,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsMiscKillG1000Ah
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/kill_g1000_ah",
                    Units = "boolean",
                    Description = "If set to true, the G1000 PFD instrument won't draw the attitude indicator background. SET THIS BACK TO 0 WHEN YOUR PLANE UNLOADS!",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Kill G1000ah",
                    Id = DataRefId.GraphicsMiscKillG1000Ah,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsMiscRedFlashlightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/red_flashlight_on",
                    Units = "boolean",
                    Description = "Is the red flashlight on now.  Note that the flashlight is inop when HDR is off.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Red Flashlight On",
                    Id = DataRefId.GraphicsMiscRedFlashlightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsMiscWhiteFlashlightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/white_flashlight_on",
                    Units = "boolean",
                    Description = "Is the white flashlight on now.  Note that the flashlight is inop when HDR is off.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc White Flashlight On",
                    Id = DataRefId.GraphicsMiscWhiteFlashlightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsMiscKillRunwaySnow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/kill_runway_snow",
                    Units = "boolean",
                    Description = "Kill blowing snow effect on runways.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Kill Runway Snow",
                    Id = DataRefId.GraphicsMiscKillRunwaySnow,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsMiscDefaultScrollPos
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/default_scroll_pos",
                    Units = "pixels",
                    Description = "Default position for a scrolling plane panel",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Default Scroll Pos",
                    Id = DataRefId.GraphicsMiscDefaultScrollPos,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscCurrentScrollPos
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/current_scroll_pos",
                    Units = "pixels",
                    Description = "Current position of that panel",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Current Scroll Pos",
                    Id = DataRefId.GraphicsMiscCurrentScrollPos,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscDefaultScrollPosX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/default_scroll_pos_x",
                    Units = "pixels",
                    Description = "Default position for a scrolling plane panel",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Default Scroll Pos X",
                    Id = DataRefId.GraphicsMiscDefaultScrollPosX,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsMiscCurrentScrollPosX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/misc/current_scroll_pos_x",
                    Units = "pixels",
                    Description = "Current position of that panel",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Misc Current Scroll Pos X",
                    Id = DataRefId.GraphicsMiscCurrentScrollPosX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsSceneryCurrentPlanet
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/scenery/current_planet",
                    Units = "enum",
                    Description = "What planet are we on?  (Earth = 0, mars = 1)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Scenery Current Planet",
                    Id = DataRefId.GraphicsSceneryCurrentPlanet,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsSceneryPercentLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/scenery/percent_lights_on",
                    Units = "percent",
                    Description = "what percentage of city lites are on as night hits",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Scenery Percent Lights On",
                    Id = DataRefId.GraphicsSceneryPercentLightsOn,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsScenerySunPitchDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/scenery/sun_pitch_degrees",
                    Units = "degrees",
                    Description = "sun pitch from flat in OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Scenery Sun Pitch Degrees",
                    Id = DataRefId.GraphicsScenerySunPitchDegrees,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsScenerySunHeadingDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/scenery/sun_heading_degrees",
                    Units = "degrees",
                    Description = "sun heading from true north in OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Scenery Sun Heading Degrees",
                    Id = DataRefId.GraphicsScenerySunHeadingDegrees,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsSceneryMoonPitchDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/scenery/moon_pitch_degrees",
                    Units = "degrees",
                    Description = "moon pitch from flat in OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Scenery Moon Pitch Degrees",
                    Id = DataRefId.GraphicsSceneryMoonPitchDegrees,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsSceneryMoonHeadingDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/scenery/moon_heading_degrees",
                    Units = "degrees",
                    Description = "moon heading from true north in OGL coordinates",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Scenery Moon Heading Degrees",
                    Id = DataRefId.GraphicsSceneryMoonHeadingDegrees,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsSceneryAirportLightLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/scenery/airport_light_level",
                    Units = "ratio",
                    Description = "Level of airport light illumination, 0 = off, 1 = max brightness",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Scenery Airport Light Level",
                    Id = DataRefId.GraphicsSceneryAirportLightLevel,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsSceneryAirportLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/scenery/airport_lights_on",
                    Units = "boolean",
                    Description = "Are the airport lites on?  set override_airport_lites to 1t o write this.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Scenery Airport Lights On",
                    Id = DataRefId.GraphicsSceneryAirportLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsSceneryAsyncSceneryLoadInProgress
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/scenery/async_scenery_load_in_progress",
                    Units = "boolean",
                    Description = "True when some kind of asynchronous scenery load or unload is in progress.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Scenery Async Scenery Load In Progress",
                    Id = DataRefId.GraphicsSceneryAsyncSceneryLoadInProgress,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsSettingsRenderingRes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/settings/rendering_res",
                    Units = "int",
                    Description = "Texture Rendering Level",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Settings Rendering Res",
                    Id = DataRefId.GraphicsSettingsRenderingRes,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsSettingsDimGload
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/settings/dim_gload",
                    Units = "boolean",
                    Description = "dim under high g-load?",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Settings Dim Gload",
                    Id = DataRefId.GraphicsSettingsDimGload,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsSettingsDrawForestfires
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/settings/draw_forestfires",
                    Units = "boolean",
                    Description = "draw forest fires?",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Settings Draw Forestfires",
                    Id = DataRefId.GraphicsSettingsDrawForestfires,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsSettingsNonProportionalVerticalFOV
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/settings/non_proportional_vertical_FOV",
                    Units = "boolean",
                    Description = "FOV is non proportional, use if sim/graphics/view/vertical_field_of_view_deg needs to be written to.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Settings Non Proportional Vertical FOV",
                    Id = DataRefId.GraphicsSettingsNonProportionalVerticalFOV,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsSettingsHDROn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/settings/HDR_on",
                    Units = "boolean",
                    Description = "True if HDR rendering is enabled.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Settings HDR On",
                    Id = DataRefId.GraphicsSettingsHDROn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsSettingsScatteringOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/settings/scattering_on",
                    Units = "boolean",
                    Description = "True if atmospheric scattering is enabled.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics Settings Scattering On",
                    Id = DataRefId.GraphicsSettingsScatteringOn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewViewType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/view_type",
                    Units = "enum",
                    Description = "The current camera view",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View View Type",
                    Id = DataRefId.GraphicsViewViewType,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewPanelRenderType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_render_type",
                    Units = "enum",
                    Description = "How to draw the panel?  0=2-d panel, 1=3-d, non-lit, 2=3-d, lit",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Render Type",
                    Id = DataRefId.GraphicsViewPanelRenderType,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewPanelRenderNewBlending
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_render_new_blending",
                    Units = "boolean",
                    Description = "True if modern correct RGBA blending is being used to draw panels; false if the legacy alpha-max equation is being used.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Render New Blending",
                    Id = DataRefId.GraphicsViewPanelRenderNewBlending,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewWorldRenderType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/world_render_type",
                    Units = "enum",
                    Description = "What kind of 3-d rendering pass are we on? 0=normal,1=reflections in water",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View World Render Type",
                    Id = DataRefId.GraphicsViewWorldRenderType,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewPlaneRenderType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/plane_render_type",
                    Units = "enum",
                    Description = "What kind of rendering is being done during the xplm_Phase_Airplanes callback.  solid = 1, blended/alpha = 2 (0 = N/A, outside draw callback)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Plane Render Type",
                    Id = DataRefId.GraphicsViewPlaneRenderType,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewDrawCallType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/draw_call_type",
                    Units = "enum",
                    Description = "Stereo status of the draw callback. 0 = not in draw callback, 1 = mono, 2 = direct stereo (only use XPLMDrawObjects), 3 = left eye, 4 = right eye",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Draw Call Type",
                    Id = DataRefId.GraphicsViewDrawCallType,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewViewIsExternal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/view_is_external",
                    Units = "boolean",
                    Description = "Is the view in the cockpit or outside?  Affects sound!",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View View Is External",
                    Id = DataRefId.GraphicsViewViewIsExternal,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewViewX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/view_x",
                    Units = "OGLcoords",
                    Description = "The location of the camera, X coordinate (OpenGL)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View View X",
                    Id = DataRefId.GraphicsViewViewX,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewViewY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/view_y",
                    Units = "OGLcoords",
                    Description = "The location of the camera, Y coordinate (OpenGL)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View View Y",
                    Id = DataRefId.GraphicsViewViewY,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewViewZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/view_z",
                    Units = "OGLcoords",
                    Description = "The location of the camera, Z coordinate (OpenGL)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View View Z",
                    Id = DataRefId.GraphicsViewViewZ,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewViewPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/view_pitch",
                    Units = "degrees",
                    Description = "The camera's pitch",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View View Pitch",
                    Id = DataRefId.GraphicsViewViewPitch,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewViewRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/view_roll",
                    Units = "degrees",
                    Description = "The camera's roll",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View View Roll",
                    Id = DataRefId.GraphicsViewViewRoll,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewViewHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/view_heading",
                    Units = "degrees",
                    Description = "the camera's heading, CW frmo true north",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View View Heading",
                    Id = DataRefId.GraphicsViewViewHeading,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewCockpitPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/cockpit_pitch",
                    Units = "degrees",
                    Description = "The cockpit's pitch",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Cockpit Pitch",
                    Id = DataRefId.GraphicsViewCockpitPitch,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewCockpitRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/cockpit_roll",
                    Units = "degrees",
                    Description = "The cockpit's heading (the dataref name is wrong - this is really true heading)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Cockpit Roll",
                    Id = DataRefId.GraphicsViewCockpitRoll,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewCockpitHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/cockpit_heading",
                    Units = "degrees",
                    Description = "the cockpit's roll (the dataref is name wrong - this is really roll)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Cockpit Heading",
                    Id = DataRefId.GraphicsViewCockpitHeading,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewFieldOfViewDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_deg",
                    Units = "degrees",
                    Description = "horizontal field of view in degrees",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Field Of View Deg",
                    Id = DataRefId.GraphicsViewFieldOfViewDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewVerticalFieldOfViewDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/vertical_field_of_view_deg",
                    Units = "degrees",
                    Description = "vertical field of view in degrees, see sim/graphics/settings/non_proportional_vertical_FOV.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Vertical Field Of View Deg",
                    Id = DataRefId.GraphicsViewVerticalFieldOfViewDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewFieldOfViewVerticalDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_vertical_deg",
                    Units = "degrees",
                    Description = "pitch rotation for multi-monitor setup.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Field Of View Vertical Deg",
                    Id = DataRefId.GraphicsViewFieldOfViewVerticalDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewFieldOfViewHorizontalDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_horizontal_deg",
                    Units = "degrees",
                    Description = "heading rotation for multi-monitor setup.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Field Of View Horizontal Deg",
                    Id = DataRefId.GraphicsViewFieldOfViewHorizontalDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewFieldOfViewRollDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_roll_deg",
                    Units = "degrees",
                    Description = "Roll rotation for multi-monitor setup.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Field Of View Roll Deg",
                    Id = DataRefId.GraphicsViewFieldOfViewRollDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewFieldOfViewHorizontalRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_horizontal_ratio",
                    Units = "ratio",
                    Description = "horizontal frustum shift (xp 6,7,8,10) - 1 unit shifts frustum by screen width",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Field Of View Horizontal Ratio",
                    Id = DataRefId.GraphicsViewFieldOfViewHorizontalRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewWindowWidth
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/window_width",
                    Units = "pixels",
                    Description = "Size of rendering window",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Window Width",
                    Id = DataRefId.GraphicsViewWindowWidth,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewWindowHeight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/window_height",
                    Units = "pixels",
                    Description = "Size of rendering window",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Window Height",
                    Id = DataRefId.GraphicsViewWindowHeight,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewVisibilityEffectiveM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/visibility_effective_m",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Visibility Effective M",
                    Id = DataRefId.GraphicsViewVisibilityEffectiveM,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewVisibilityTerrainM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/visibility_terrain_m",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Visibility Terrain M",
                    Id = DataRefId.GraphicsViewVisibilityTerrainM,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewVisibilityFramerateRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/visibility_framerate_ratio",
                    Units = "[0.0",
                    Description = "- 1.0]",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Visibility Framerate Ratio",
                    Id = DataRefId.GraphicsViewVisibilityFramerateRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewVisibilityMathLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/visibility_math_level",
                    Units = "enum",
                    Description = "This used to indicate what level of 3-d force visualization was shown to the user in 3-d.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Visibility Math Level",
                    Id = DataRefId.GraphicsViewVisibilityMathLevel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewCinemaVerite
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/cinema_verite",
                    Units = "boolean",
                    Description = "True if cinema verite camera is on.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Cinema Verite",
                    Id = DataRefId.GraphicsViewCinemaVerite,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewPanelTotalPnlL
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_pnl_l",
                    Units = "pixels",
                    Description = "This is the location of the left edge of the panel, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Total Pnl L",
                    Id = DataRefId.GraphicsViewPanelTotalPnlL,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelTotalPnlB
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_pnl_b",
                    Units = "pixels",
                    Description = "This is the location of the bottom edge of the panel, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Total Pnl B",
                    Id = DataRefId.GraphicsViewPanelTotalPnlB,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelTotalPnlR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_pnl_r",
                    Units = "pixels",
                    Description = "This is the location of the right edge of the panel, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Total Pnl R",
                    Id = DataRefId.GraphicsViewPanelTotalPnlR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelTotalPnlT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_pnl_t",
                    Units = "pixels",
                    Description = "This is the location of the top edge of the panel, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Total Pnl T",
                    Id = DataRefId.GraphicsViewPanelTotalPnlT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelVisiblePnlL
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_pnl_l",
                    Units = "pixels",
                    Description = "This is the location of the left edge of the screen, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Visible Pnl L",
                    Id = DataRefId.GraphicsViewPanelVisiblePnlL,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelVisiblePnlB
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_pnl_b",
                    Units = "pixels",
                    Description = "This is the location of the bottom edge of the screen, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Visible Pnl B",
                    Id = DataRefId.GraphicsViewPanelVisiblePnlB,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelVisiblePnlR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_pnl_r",
                    Units = "pixels",
                    Description = "This is the location of the right edge of the screen, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Visible Pnl R",
                    Id = DataRefId.GraphicsViewPanelVisiblePnlR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelVisiblePnlT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_pnl_t",
                    Units = "pixels",
                    Description = "This is the location of the top edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Visible Pnl T",
                    Id = DataRefId.GraphicsViewPanelVisiblePnlT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelTotalWinL
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_win_l",
                    Units = "pixels",
                    Description = "This is the location of the left edge of the panel, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Total Win L",
                    Id = DataRefId.GraphicsViewPanelTotalWinL,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelTotalWinB
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_win_b",
                    Units = "pixels",
                    Description = "This is the location of the bottom edge of the panel, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Total Win B",
                    Id = DataRefId.GraphicsViewPanelTotalWinB,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelTotalWinR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_win_r",
                    Units = "pixels",
                    Description = "This is the location of the right edge of the panel, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Total Win R",
                    Id = DataRefId.GraphicsViewPanelTotalWinR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelTotalWinT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_win_t",
                    Units = "pixels",
                    Description = "This is the location of the top edge of the panel, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Total Win T",
                    Id = DataRefId.GraphicsViewPanelTotalWinT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelVisibleWinL
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_win_l",
                    Units = "pixels",
                    Description = "This is the location of the left edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Visible Win L",
                    Id = DataRefId.GraphicsViewPanelVisibleWinL,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelVisibleWinB
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_win_b",
                    Units = "pixels",
                    Description = "This is the location of the bottom edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Visible Win B",
                    Id = DataRefId.GraphicsViewPanelVisibleWinB,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelVisibleWinR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_win_r",
                    Units = "pixels",
                    Description = "This is the location of the right edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Visible Win R",
                    Id = DataRefId.GraphicsViewPanelVisibleWinR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPanelVisibleWinT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_win_t",
                    Units = "pixels",
                    Description = "This is the location of the top edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Panel Visible Win T",
                    Id = DataRefId.GraphicsViewPanelVisibleWinT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPilotsHeadX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_x",
                    Units = "meters",
                    Description = "Position of pilot's head relative to CG, X",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Pilots Head X",
                    Id = DataRefId.GraphicsViewPilotsHeadX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPilotsHeadY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_y",
                    Units = "meters",
                    Description = "Position of pilot's head relative to CG, Y",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Pilots Head Y",
                    Id = DataRefId.GraphicsViewPilotsHeadY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPilotsHeadZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_z",
                    Units = "meters",
                    Description = "Position of pilot's head relative to CG, Z",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Pilots Head Z",
                    Id = DataRefId.GraphicsViewPilotsHeadZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPilotsHeadPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_psi",
                    Units = "degrees",
                    Description = "Position of pilot's head heading",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Pilots Head Psi",
                    Id = DataRefId.GraphicsViewPilotsHeadPsi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPilotsHeadThe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_the",
                    Units = "degrees",
                    Description = "Position of pilot's head pitch",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Pilots Head The",
                    Id = DataRefId.GraphicsViewPilotsHeadThe,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewPilotsHeadPhi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_phi",
                    Units = "degrees",
                    Description = "Position of the pilot's head roll'",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Pilots Head Phi",
                    Id = DataRefId.GraphicsViewPilotsHeadPhi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewClick3DX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/click_3d_x",
                    Units = "0-1",
                    Description = "coordinates of the panel click in 3-d",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Click3dx",
                    Id = DataRefId.GraphicsViewClick3DX,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewClick3DY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/click_3d_y",
                    Units = "0-1",
                    Description = "as texture coords (E.g. 0-1)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Click3dy",
                    Id = DataRefId.GraphicsViewClick3DY,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewClick3DXPixels
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/click_3d_x_pixels",
                    Units = "0-1",
                    Description = "coordinates of the panel click in 3-d",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Click3dx Pixels",
                    Id = DataRefId.GraphicsViewClick3DXPixels,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewClick3DYPixels
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/click_3d_y_pixels",
                    Units = "0-1",
                    Description = "as texture coords (E.g. 0-1)",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Click3dy Pixels",
                    Id = DataRefId.GraphicsViewClick3DYPixels,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewLocalMapL
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/local_map_l",
                    Units = "pixels",
                    Description = "Bounds of the local map window during callbacks - left",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Local Map L",
                    Id = DataRefId.GraphicsViewLocalMapL,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewLocalMapB
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/local_map_b",
                    Units = "pixels",
                    Description = "Bounds of the local map window during callbacks - bottom",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Local Map B",
                    Id = DataRefId.GraphicsViewLocalMapB,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewLocalMapR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/local_map_r",
                    Units = "pixels",
                    Description = "Bounds of the local map window during callbacks - right",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Local Map R",
                    Id = DataRefId.GraphicsViewLocalMapR,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewLocalMapT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/local_map_t",
                    Units = "pixels",
                    Description = "Bounds of the local map window during callbacks - top",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Local Map T",
                    Id = DataRefId.GraphicsViewLocalMapT,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsViewDomeOffsetHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/dome_offset_heading",
                    Units = "degrees",
                    Description = "The horizontal offset for this pass, in degrees",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Dome Offset Heading",
                    Id = DataRefId.GraphicsViewDomeOffsetHeading,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement GraphicsViewDomeOffsetPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/dome_offset_pitch",
                    Units = "degrees",
                    Description = "The vertical offset for this pass, in degrees",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Dome Offset Pitch",
                    Id = DataRefId.GraphicsViewDomeOffsetPitch,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement GraphicsViewEqTrackir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/eq_trackir",
                    Units = "boolean",
                    Description = "Does the user have trackIR hardware enabled",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Eq Trackir",
                    Id = DataRefId.GraphicsViewEqTrackir,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewHideYoke
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/hide_yoke",
                    Units = "boolean",
                    Description = "Is the yoke visible in the 3-d cockpit?",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Hide Yoke",
                    Id = DataRefId.GraphicsViewHideYoke,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewProjectionMatrix
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/projection_matrix",
                    Units = "Matrix4x4",
                    Description = "The current projection matrix - valid only during draw callbacks",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Projection Matrix",
                    Id = DataRefId.GraphicsViewProjectionMatrix,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement GraphicsViewProjectionMatrix3D
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/projection_matrix_3d",
                    Units = "Matrix4x4",
                    Description = "The current projection matrix during 3-d rendering - it keeps its value during 2-d rendering so youc can figure out how to apply text labels to 3-d stuff.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Projection Matrix3d",
                    Id = DataRefId.GraphicsViewProjectionMatrix3D,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement GraphicsViewWorldMatrix
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/world_matrix",
                    Units = "Matrix4x4",
                    Description = "The current modelview matrix to draw in standard \"OGL\" coordinates - valid only during draw callbacks",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View World Matrix",
                    Id = DataRefId.GraphicsViewWorldMatrix,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement GraphicsViewAcfMatrix
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/acf_matrix",
                    Units = "Matrix4x4",
                    Description = "A modelview matrix to draw in the user's aircraft coordinates - valid only during draw callbacks",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View ACF Matrix",
                    Id = DataRefId.GraphicsViewAcfMatrix,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement GraphicsViewModelviewMatrix
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/modelview_matrix",
                    Units = "Matrix4x4",
                    Description = "Current modelview matrix during window callbacks.  use to map boxels to device pixels for scissors.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Modelview Matrix",
                    Id = DataRefId.GraphicsViewModelviewMatrix,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement GraphicsViewViewport
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/viewport",
                    Units = "Pixels",
                    Description = "Current OpenGL viewport in device window coordinates.  Note thiat this is left, bottom, right top, NOT left, bottom, width, height!!",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Viewport",
                    Id = DataRefId.GraphicsViewViewport,
                    Writable = false,
                    DataType = "int[4]"
                };
            }
        }
        private DataRefElement GraphicsViewIsReverseFloatZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/is_reverse_float_z",
                    Units = "Boolean",
                    Description = "True if current rendering is reverse-float-Z with clip control set ot 0..1.  False for conventional GL rendering.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Is Reverse Float Z",
                    Id = DataRefId.GraphicsViewIsReverseFloatZ,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewIsReverseY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/is_reverse_y",
                    Units = "Boolean",
                    Description = "True if current rendering is reversed-Y (+Y = down) - false for conventional +Y=up rendering.  This indicates how the framebuffer is set up - the transform stack will be set up to correctly flip Y if used.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Is Reverse Y",
                    Id = DataRefId.GraphicsViewIsReverseY,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewUsingModernDriver
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/using_modern_driver",
                    Units = "Boolean",
                    Description = "True if current rendering is being done by a modern Vulkan/Metal driver.  False if we have the GL driver.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Using Modern Driver",
                    Id = DataRefId.GraphicsViewUsingModernDriver,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewCurrentGlFbo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/current_gl_fbo",
                    Units = "GLenum",
                    Description = "During drawing and FL callbacks, this is the correct GL_FRAMEBUFFER binding to restore if you need to render off-screen.  Will be 0 when no bridge FBO is provided",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Current Gl Fbo",
                    Id = DataRefId.GraphicsViewCurrentGlFbo,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsViewHardwareMsaaSamples
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/view/hardware_msaa_samples",
                    Units = "count",
                    Description = "This is the MSAA sample count for rendered windows.  Note that \"1\" means MSAA is not being used, not that MSAA is being used with a single sample count. ",
                    Frequency = DefaultFrequency,
                    Name = "Graphics View Hardware Msaa Samples",
                    Id = DataRefId.GraphicsViewHardwareMsaaSamples,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickHasJoystick
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/has_joystick",
                    Units = "boolean",
                    Description = "Do we have a joystick?",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Has Joystick",
                    Id = DataRefId.JoystickHasJoystick,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickMouseIsJoystick
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/mouse_is_joystick",
                    Units = "boolean",
                    Description = "Is the mouse acting as a joystick?",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Mouse Is Joystick",
                    Id = DataRefId.JoystickMouseIsJoystick,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickMouseCanBeJoystick
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/mouse_can_be_joystick",
                    Units = "boolean",
                    Description = "Can the mouse be used to fly?  False if there is any LEGIT hardware plugged in.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Mouse Can Be Joystick",
                    Id = DataRefId.JoystickMouseCanBeJoystick,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickYokePitchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/yoke_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "The deflection of the joystick axis controlling pitch. Use override_joystick or override_joystick_pitch",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Yoke Pitch Ratio",
                    Id = DataRefId.JoystickYokePitchRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickYolkPitchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/yolk_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "Legacy - this spelling error is still present for",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Yolk Pitch Ratio",
                    Id = DataRefId.JoystickYolkPitchRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickYokeRollRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/yoke_roll_ratio",
                    Units = "[-1..1]",
                    Description = "The deflection of the joystick axis controlling roll. Use override_joystick or override_joystick_roll",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Yoke Roll Ratio",
                    Id = DataRefId.JoystickYokeRollRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickYolkRollRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/yolk_roll_ratio",
                    Units = "[-1..1]",
                    Description = "Legacy - this spelling error is still present for backward compatibility with older plugins.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Yolk Roll Ratio",
                    Id = DataRefId.JoystickYolkRollRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickYokeHeadingRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/yoke_heading_ratio",
                    Units = "[-1..1]",
                    Description = "The deflection of the joystick axis controlling yaw. Use override_joystick or override_joystick_heading",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Yoke Heading Ratio",
                    Id = DataRefId.JoystickYokeHeadingRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickYolkHeadingRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/yolk_heading_ratio",
                    Units = "[-1..1]",
                    Description = "Legacy - this spelling error is still present for backward compatibility with older plugins.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Yolk Heading Ratio",
                    Id = DataRefId.JoystickYolkHeadingRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickArtstabPitchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/artstab_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "The artificial stability input modifications for pitch. Use override_artstab",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Artstab Pitch Ratio",
                    Id = DataRefId.JoystickArtstabPitchRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickArtstabRollRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/artstab_roll_ratio",
                    Units = "[-1..1]",
                    Description = "The artificial stability input modifications for roll. Use override_artstab",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Artstab Roll Ratio",
                    Id = DataRefId.JoystickArtstabRollRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickArtstabHeadingRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/artstab_heading_ratio",
                    Units = "[-1..1]",
                    Description = "The artificial stability input modifications for yaw. Use override_artstab",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Artstab Heading Ratio",
                    Id = DataRefId.JoystickArtstabHeadingRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickServoPitchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/servo_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "Servo input for pitch",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Servo Pitch Ratio",
                    Id = DataRefId.JoystickServoPitchRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickServoRollRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/servo_roll_ratio",
                    Units = "[-1..1]",
                    Description = "Servo input for roll",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Servo Roll Ratio",
                    Id = DataRefId.JoystickServoRollRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickServoHeadingRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/servo_heading_ratio",
                    Units = "[-1..1]",
                    Description = "Servo input for yaw",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Servo Heading Ratio",
                    Id = DataRefId.JoystickServoHeadingRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickFCHdng
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/FC_hdng",
                    Units = "[-1..1]",
                    Description = "Flight Control Heading (sum of yoke plus artificial stability)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick FC Hdng",
                    Id = DataRefId.JoystickFCHdng,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickFCPtch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/FC_ptch",
                    Units = "[-1..1]",
                    Description = "Flight Control Pitch (sum of yoke plus artificial stability)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick FC Ptch",
                    Id = DataRefId.JoystickFCPtch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickFCRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/FC_roll",
                    Units = "[-1..1]",
                    Description = "Flight Control Roll (sum of yoke plus artificial stability)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick FC Roll",
                    Id = DataRefId.JoystickFCRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickPitchNullzone
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_pitch_nullzone",
                    Units = "ratio",
                    Description = "The nullzone size for the pitch axis (as of 940, one null zone serves all 3 axes)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Pitch Nullzone",
                    Id = DataRefId.JoystickJoystickPitchNullzone,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickRollNullzone
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_roll_nullzone",
                    Units = "ratio",
                    Description = "The nullzone size for the roll axis",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Roll Nullzone",
                    Id = DataRefId.JoystickJoystickRollNullzone,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickHeadingNullzone
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_heading_nullzone",
                    Units = "ratio",
                    Description = "The nullzone size for the heading axis",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Heading Nullzone",
                    Id = DataRefId.JoystickJoystickHeadingNullzone,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickPitchCenter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_pitch_center",
                    Units = "ratio",
                    Description = "Joystick center for pitch axis",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Pitch Center",
                    Id = DataRefId.JoystickJoystickPitchCenter,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickRollCenter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_roll_center",
                    Units = "ratio",
                    Description = "Joystick center for roll axis",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Roll Center",
                    Id = DataRefId.JoystickJoystickRollCenter,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickHeadingCenter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_heading_center",
                    Units = "ratio",
                    Description = "Joystick center for heading axis",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Heading Center",
                    Id = DataRefId.JoystickJoystickHeadingCenter,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickPitchAugment
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_pitch_augment",
                    Units = "ratio",
                    Description = "Amount of artificial stability to add to the pitch.  This is AS set by user, not in Plane-Maker.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Pitch Augment",
                    Id = DataRefId.JoystickJoystickPitchAugment,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickRollAugment
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_roll_augment",
                    Units = "ratio",
                    Description = "Amount of artificial stability to add to the roll.  This is AS set by user, not in Plane-Maker.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Roll Augment",
                    Id = DataRefId.JoystickJoystickRollAugment,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickHeadingAugment
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_heading_augment",
                    Units = "ratio",
                    Description = "Amount of artificial stability to add to the heading.  This is AS set by user, not in Plane-Maker.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Heading Augment",
                    Id = DataRefId.JoystickJoystickHeadingAugment,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickPitchSensitivity
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_pitch_sensitivity",
                    Units = "ratio",
                    Description = "The sensitivity for the pitch axis (the power ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Pitch Sensitivity",
                    Id = DataRefId.JoystickJoystickPitchSensitivity,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickRollSensitivity
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_roll_sensitivity",
                    Units = "ratio",
                    Description = "The sensitivity for the roll axis",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Roll Sensitivity",
                    Id = DataRefId.JoystickJoystickRollSensitivity,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickHeadingSensitivity
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_heading_sensitivity",
                    Units = "ratio",
                    Description = "The sensitivity for the heading axis",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Heading Sensitivity",
                    Id = DataRefId.JoystickJoystickHeadingSensitivity,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement JoystickJoystickAxisAssignments
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_axis_assignments",
                    Units = "enums",
                    Description = "Assignments for the joystick axes - what does X-Plane think each one is? [Was 15 before 850][Was 24 before 860][was 32 before 900]",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Axis Assignments",
                    Id = DataRefId.JoystickJoystickAxisAssignments,
                    Writable = true,
                    DataType = "int[500]"
                };
            }
        }
        private DataRefElement JoystickJoystickButtonAssignments
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_button_assignments",
                    Units = "enums",
                    Description = "Assignments for the joystick buttons - what does each one do? [Was 64 before 850][was 160 before 900]",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Button Assignments",
                    Id = DataRefId.JoystickJoystickButtonAssignments,
                    Writable = true,
                    DataType = "int[3200]"
                };
            }
        }
        private DataRefElement JoystickJoystickAxisReverse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_axis_reverse",
                    Units = "boolean",
                    Description = "Reverse this axis? [Was 15 before 850][Was 24 before 860][was 32 before 900]",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Axis Reverse",
                    Id = DataRefId.JoystickJoystickAxisReverse,
                    Writable = true,
                    DataType = "int[500]"
                };
            }
        }
        private DataRefElement JoystickJoystickAxisValues
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_axis_values",
                    Units = "ratio",
                    Description = "The deflection of this joystick [Was 15 before 850][Was 24 before 860][was 32 before 900]",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Axis Values",
                    Id = DataRefId.JoystickJoystickAxisValues,
                    Writable = false,
                    DataType = "float[500]"
                };
            }
        }
        private DataRefElement JoystickJoystickAxisMinimum
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_axis_minimum",
                    Units = "ratio",
                    Description = "Min raw value ever seen [Was 15 before 850][Was 24 before 860][was 32 before 900]",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Axis Minimum",
                    Id = DataRefId.JoystickJoystickAxisMinimum,
                    Writable = true,
                    DataType = "float[500]"
                };
            }
        }
        private DataRefElement JoystickJoystickAxisMaximum
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_axis_maximum",
                    Units = "ratio",
                    Description = "Max raw value ever seen [Was 15 before 850][Was 24 before 860][was 32 before 900]",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Axis Maximum",
                    Id = DataRefId.JoystickJoystickAxisMaximum,
                    Writable = true,
                    DataType = "float[500]"
                };
            }
        }
        private DataRefElement JoystickJoystickButtonValues
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joystick_button_values",
                    Units = "boolean",
                    Description = "Is this button pressed? [Was 64 before 850][was 160 before 900]",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joystick Button Values",
                    Id = DataRefId.JoystickJoystickButtonValues,
                    Writable = false,
                    DataType = "int[3200]"
                };
            }
        }
        private DataRefElement JoystickJoyMappedAxisAvail
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joy_mapped_axis_avail",
                    Units = "boolean",
                    Description = "True if there is joystick hardware of some kind providing this axis right now.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joy Mapped Axis Avail",
                    Id = DataRefId.JoystickJoyMappedAxisAvail,
                    Writable = false,
                    DataType = "int[73]"
                };
            }
        }
        private DataRefElement JoystickJoyMappedAxisValue
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/joy_mapped_axis_value",
                    Units = "float",
                    Description = "Fully processed ratio for each axis - either -1 to 1 or 0 to 1.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Joy Mapped Axis Value",
                    Id = DataRefId.JoystickJoyMappedAxisValue,
                    Writable = false,
                    DataType = "float[73]"
                };
            }
        }
        private DataRefElement JoystickEqPedNobrk
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_ped_nobrk",
                    Units = "boolean",
                    Description = "Hardware settings: Pedal nobrk (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Ped Nobrk",
                    Id = DataRefId.JoystickEqPedNobrk,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickEqPedWibrk
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_ped_wibrk",
                    Units = "boolean",
                    Description = "Hardware settings: Pedal wlbrk (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Ped Wibrk",
                    Id = DataRefId.JoystickEqPedWibrk,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickEqPfcPedals
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_pedals",
                    Units = "boolean",
                    Description = "Equipment settings: PFC pedal (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Pfc Pedals",
                    Id = DataRefId.JoystickEqPfcPedals,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickEqPfcYoke
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_yoke",
                    Units = "boolean",
                    Description = "Equipment settings: PFC yoke (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Pfc Yoke",
                    Id = DataRefId.JoystickEqPfcYoke,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickEqPfcThrot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_throt",
                    Units = "boolean",
                    Description = "Equipment settings: PFC throttle (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Pfc Throt",
                    Id = DataRefId.JoystickEqPfcThrot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickEqPfcAvio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_avio",
                    Units = "boolean",
                    Description = "Equipment settings: PFC avionics (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Pfc Avio",
                    Id = DataRefId.JoystickEqPfcAvio,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickEqPfcCentercon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_centercon",
                    Units = "boolean",
                    Description = "Equipment settings: PFC center console (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Pfc Centercon",
                    Id = DataRefId.JoystickEqPfcCentercon,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickEqPfcElecTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_elec_trim",
                    Units = "boolean",
                    Description = "Equipment settings: PFC electric trim (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Pfc Elec Trim",
                    Id = DataRefId.JoystickEqPfcElecTrim,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickEqPfcBrakeTog
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_brake_tog",
                    Units = "boolean",
                    Description = "Equipment settings: PFC brake toggle (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Pfc Brake Tog",
                    Id = DataRefId.JoystickEqPfcBrakeTog,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickEqPfcDualCowl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_dual_cowl",
                    Units = "boolean",
                    Description = "Equipment settings: PFC dual cowl (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Eq Pfc Dual Cowl",
                    Id = DataRefId.JoystickEqPfcDualCowl,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickFireKeyIsDown
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/fire_key_is_down",
                    Units = "boolean",
                    Description = "True if the fire key is held down",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Fire Key Is Down",
                    Id = DataRefId.JoystickFireKeyIsDown,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickHasCertifiedRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/has_certified_roll",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the roll.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Has Certified Roll",
                    Id = DataRefId.JoystickHasCertifiedRoll,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickHasCertifiedPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/has_certified_pitch",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the pitch.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Has Certified Pitch",
                    Id = DataRefId.JoystickHasCertifiedPitch,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickHasCertifiedHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/has_certified_heading",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the heading.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Has Certified Heading",
                    Id = DataRefId.JoystickHasCertifiedHeading,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickHasCertifiedBrakes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/has_certified_brakes",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the brakes.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Has Certified Brakes",
                    Id = DataRefId.JoystickHasCertifiedBrakes,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickHasCertifiedThrottle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/has_certified_throttle",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the throttle.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Has Certified Throttle",
                    Id = DataRefId.JoystickHasCertifiedThrottle,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickHasCertifiedProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/has_certified_prop",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the pitch.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Has Certified Prop",
                    Id = DataRefId.JoystickHasCertifiedProp,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement JoystickHasCertifiedMixture
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/joystick/has_certified_mixture",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the mixture.",
                    Frequency = DefaultFrequency,
                    Name = "Joystick Has Certified Mixture",
                    Id = DataRefId.JoystickHasCertifiedMixture,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerControlsYokePitchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/yoke_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "The deflection of the axis controlling pitch.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Yoke Pitch Ratio",
                    Id = DataRefId.MultiplayerControlsYokePitchRatio,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsYokeRollRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/yoke_roll_ratio",
                    Units = "[-1..1]",
                    Description = "The deflection of the axis controlling roll.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Yoke Roll Ratio",
                    Id = DataRefId.MultiplayerControlsYokeRollRatio,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsYokeHeadingRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/yoke_heading_ratio",
                    Units = "[-1..1]",
                    Description = "The deflection of the axis controlling yaw.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Yoke Heading Ratio",
                    Id = DataRefId.MultiplayerControlsYokeHeadingRatio,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsGearRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/gear_request",
                    Units = "enum",
                    Description = "0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Gear Request",
                    Id = DataRefId.MultiplayerControlsGearRequest,
                    Writable = true,
                    DataType = "int[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsFlapRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/flap_request",
                    Units = "[0..1]",
                    Description = "Requested flap deployment",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Flap Request",
                    Id = DataRefId.MultiplayerControlsFlapRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsSpeedBrakeRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/speed_brake_request",
                    Units = "[0..1]",
                    Description = "Speed Brake",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Speed Brake Request",
                    Id = DataRefId.MultiplayerControlsSpeedBrakeRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsVectorRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/vector_request",
                    Units = "[0..1]",
                    Description = "Vectored Thrust",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Vector Request",
                    Id = DataRefId.MultiplayerControlsVectorRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsSweepRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/sweep__request",
                    Units = "[0..1]",
                    Description = "Wing Sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Sweep Request",
                    Id = DataRefId.MultiplayerControlsSweepRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsIncidenceRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/incidence_request",
                    Units = "[0..1]",
                    Description = "Variable Wing Incidence",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Incidence Request",
                    Id = DataRefId.MultiplayerControlsIncidenceRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsDihedralRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/dihedral_request",
                    Units = "[0..1]",
                    Description = "Variable Wing Dihedral",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Dihedral Request",
                    Id = DataRefId.MultiplayerControlsDihedralRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsTailLockRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/tail_lock_ratio",
                    Units = "[0..1]",
                    Description = "This is how locked the tail-wheel is ... 0 is free castoring, 1 is locked.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Tail Lock Ratio",
                    Id = DataRefId.MultiplayerControlsTailLockRatio,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsLBrakeAdd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/l_brake_add",
                    Units = "[0..1]",
                    Description = "Left Brake (off to max braking)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls L Brake Add",
                    Id = DataRefId.MultiplayerControlsLBrakeAdd,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsRBrakeAdd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/r_brake_add",
                    Units = "[0..1]",
                    Description = "Right Brake (off to max braking)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls R Brake Add",
                    Id = DataRefId.MultiplayerControlsRBrakeAdd,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsParkingBrake
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/parking_brake",
                    Units = "[0..1]",
                    Description = "Parking Brake (off to max braking)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Parking Brake",
                    Id = DataRefId.MultiplayerControlsParkingBrake,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsAileronTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/aileron_trim",
                    Units = "[-1..1]",
                    Description = "Aileron Trim (as ratio of full control surface deflection) -1=left,1=right",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Aileron Trim",
                    Id = DataRefId.MultiplayerControlsAileronTrim,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsElevatorTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/elevator_trim",
                    Units = "[-1..1]",
                    Description = "Elevation Trim (as ratio of full control surface deflection) -1=down,1=up",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Elevator Trim",
                    Id = DataRefId.MultiplayerControlsElevatorTrim,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsRotorTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/rotor_trim",
                    Units = "[-1..1]",
                    Description = "Rotor Trim (as ratio of full control surface deflection) -1=nose down,1=nose up",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Rotor Trim",
                    Id = DataRefId.MultiplayerControlsRotorTrim,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsRudderTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/rudder_trim",
                    Units = "[-1..1]",
                    Description = "Rudder Trim (as ratio of full control surface deflection) -1=left,1=right",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Rudder Trim",
                    Id = DataRefId.MultiplayerControlsRudderTrim,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsEngineThrottleRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/engine_throttle_request",
                    Units = "[0..1]",
                    Description = "Requested Throttle Position",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Engine Throttle Request",
                    Id = DataRefId.MultiplayerControlsEngineThrottleRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsEnginePropRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/engine_prop_request",
                    Units = "[0..1]",
                    Description = "Requested Prop Position",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Engine Prop Request",
                    Id = DataRefId.MultiplayerControlsEnginePropRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsEnginePitchRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/engine_pitch_request",
                    Units = "[0..1]",
                    Description = "Requested Pitch Position",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Engine Pitch Request",
                    Id = DataRefId.MultiplayerControlsEnginePitchRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerControlsEngineMixtureRequest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/controls/engine_mixture_request",
                    Units = "[0..1]",
                    Description = "Requested Mixture Position",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Controls Engine Mixture Request",
                    Id = DataRefId.MultiplayerControlsEngineMixtureRequest,
                    Writable = true,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_x",
                    Units = "meters",
                    Description = "Plane 1 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1x",
                    Id = DataRefId.MultiplayerPositionPlane1X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_y",
                    Units = "meters",
                    Description = "Plane 1 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1y",
                    Id = DataRefId.MultiplayerPositionPlane1Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_z",
                    Units = "meters",
                    Description = "Plane 1 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1z",
                    Id = DataRefId.MultiplayerPositionPlane1Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_the",
                    Units = "degrees",
                    Description = "Plane 1 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1the",
                    Id = DataRefId.MultiplayerPositionPlane1The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_phi",
                    Units = "degrees",
                    Description = "Plane 1 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1phi",
                    Id = DataRefId.MultiplayerPositionPlane1Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_psi",
                    Units = "degrees",
                    Description = "Plane 1 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1psi",
                    Id = DataRefId.MultiplayerPositionPlane1Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 1 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane1GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane1FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane1FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 1 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane1SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 1 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane1SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1SlatRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_slat_ratio",
                    Units = "ratio",
                    Description = "Plane 1 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1slat Ratio",
                    Id = DataRefId.MultiplayerPositionPlane1SlatRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 1 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane1WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_throttle",
                    Units = "ratio",
                    Description = "Plane 1 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1throttle",
                    Id = DataRefId.MultiplayerPositionPlane1Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 1 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane1YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 1 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane1YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 1 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane1YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_x",
                    Units = "meters",
                    Description = "Plane 2 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2x",
                    Id = DataRefId.MultiplayerPositionPlane2X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_y",
                    Units = "meters",
                    Description = "Plane 2 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2y",
                    Id = DataRefId.MultiplayerPositionPlane2Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_z",
                    Units = "meters",
                    Description = "Plane 2 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2z",
                    Id = DataRefId.MultiplayerPositionPlane2Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_the",
                    Units = "degrees",
                    Description = "Plane 2 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2the",
                    Id = DataRefId.MultiplayerPositionPlane2The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_phi",
                    Units = "degrees",
                    Description = "Plane 2 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2phi",
                    Id = DataRefId.MultiplayerPositionPlane2Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_psi",
                    Units = "degrees",
                    Description = "Plane 2 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2psi",
                    Id = DataRefId.MultiplayerPositionPlane2Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 2 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane2GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 2 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane2FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane2FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 2 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane2SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 2 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane2SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 2 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane2Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 2 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane2WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_throttle",
                    Units = "ratio",
                    Description = "Plane 2 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2throttle",
                    Id = DataRefId.MultiplayerPositionPlane2Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 2 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane2YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 2 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane2YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 2 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane2YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_x",
                    Units = "meters",
                    Description = "Plane 3 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3x",
                    Id = DataRefId.MultiplayerPositionPlane3X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_y",
                    Units = "meters",
                    Description = "Plane 3 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3y",
                    Id = DataRefId.MultiplayerPositionPlane3Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_z",
                    Units = "meters",
                    Description = "Plane 3 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3z",
                    Id = DataRefId.MultiplayerPositionPlane3Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_the",
                    Units = "degrees",
                    Description = "Plane 3 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3the",
                    Id = DataRefId.MultiplayerPositionPlane3The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_phi",
                    Units = "degrees",
                    Description = "Plane 3 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3phi",
                    Id = DataRefId.MultiplayerPositionPlane3Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_psi",
                    Units = "degrees",
                    Description = "Plane 3 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3psi",
                    Id = DataRefId.MultiplayerPositionPlane3Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 3 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane3GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 3 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane3FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane3FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 3 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane3SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 3 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane3SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 3 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane3Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 3 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane3WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_throttle",
                    Units = "ratio",
                    Description = "Plane 3 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3throttle",
                    Id = DataRefId.MultiplayerPositionPlane3Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 3 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane3YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 3 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane3YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 3 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane3YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_x",
                    Units = "meters",
                    Description = "Plane 4 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4x",
                    Id = DataRefId.MultiplayerPositionPlane4X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_y",
                    Units = "meters",
                    Description = "Plane 4 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4y",
                    Id = DataRefId.MultiplayerPositionPlane4Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_z",
                    Units = "meters",
                    Description = "Plane 4 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4z",
                    Id = DataRefId.MultiplayerPositionPlane4Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_the",
                    Units = "degrees",
                    Description = "Plane 4 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4the",
                    Id = DataRefId.MultiplayerPositionPlane4The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_phi",
                    Units = "degrees",
                    Description = "Plane 4 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4phi",
                    Id = DataRefId.MultiplayerPositionPlane4Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_psi",
                    Units = "degrees",
                    Description = "Plane 4 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4psi",
                    Id = DataRefId.MultiplayerPositionPlane4Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 4 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane4GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 4 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane4FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane4FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 4 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane4SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 4 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane4SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 4 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane4Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 4 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane4WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_throttle",
                    Units = "ratio",
                    Description = "Plane 4 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4throttle",
                    Id = DataRefId.MultiplayerPositionPlane4Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 4 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane4YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 4 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane4YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 4 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane4YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_x",
                    Units = "meters",
                    Description = "Plane 5 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5x",
                    Id = DataRefId.MultiplayerPositionPlane5X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_y",
                    Units = "meters",
                    Description = "Plane 5 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5y",
                    Id = DataRefId.MultiplayerPositionPlane5Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_z",
                    Units = "meters",
                    Description = "Plane 5 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5z",
                    Id = DataRefId.MultiplayerPositionPlane5Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_the",
                    Units = "degrees",
                    Description = "Plane 5 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5the",
                    Id = DataRefId.MultiplayerPositionPlane5The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_phi",
                    Units = "degrees",
                    Description = "Plane 5 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5phi",
                    Id = DataRefId.MultiplayerPositionPlane5Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_psi",
                    Units = "degrees",
                    Description = "Plane 5 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5psi",
                    Id = DataRefId.MultiplayerPositionPlane5Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 5 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane5GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 5 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane5FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane5FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 5 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane5SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 5 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane5SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 5 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane5Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 5 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane5WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_throttle",
                    Units = "ratio",
                    Description = "Plane 5 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5throttle",
                    Id = DataRefId.MultiplayerPositionPlane5Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 5 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane5YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 5 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane5YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 5 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane5YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_x",
                    Units = "meters",
                    Description = "Plane 6 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6x",
                    Id = DataRefId.MultiplayerPositionPlane6X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_y",
                    Units = "meters",
                    Description = "Plane 6 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6y",
                    Id = DataRefId.MultiplayerPositionPlane6Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_z",
                    Units = "meters",
                    Description = "Plane 6 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6z",
                    Id = DataRefId.MultiplayerPositionPlane6Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_the",
                    Units = "degrees",
                    Description = "Plane 6 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6the",
                    Id = DataRefId.MultiplayerPositionPlane6The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_phi",
                    Units = "degrees",
                    Description = "Plane 6 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6phi",
                    Id = DataRefId.MultiplayerPositionPlane6Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_psi",
                    Units = "degrees",
                    Description = "Plane 6 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6psi",
                    Id = DataRefId.MultiplayerPositionPlane6Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 6 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane6GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 6 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane6FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane6FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 6 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane6SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 6 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane6SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 6 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane6Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 6 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane6WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_throttle",
                    Units = "ratio",
                    Description = "Plane 6 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6throttle",
                    Id = DataRefId.MultiplayerPositionPlane6Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 6 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane6YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 6 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane6YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 6 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane6YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_x",
                    Units = "meters",
                    Description = "Plane 7 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7x",
                    Id = DataRefId.MultiplayerPositionPlane7X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_y",
                    Units = "meters",
                    Description = "Plane 7 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7y",
                    Id = DataRefId.MultiplayerPositionPlane7Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_z",
                    Units = "meters",
                    Description = "Plane 7 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7z",
                    Id = DataRefId.MultiplayerPositionPlane7Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_the",
                    Units = "degrees",
                    Description = "Plane 7 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7the",
                    Id = DataRefId.MultiplayerPositionPlane7The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_phi",
                    Units = "degrees",
                    Description = "Plane 7 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7phi",
                    Id = DataRefId.MultiplayerPositionPlane7Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_psi",
                    Units = "degrees",
                    Description = "Plane 7 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7psi",
                    Id = DataRefId.MultiplayerPositionPlane7Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 7 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane7GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 7 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane7FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane7FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 7 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane7SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 7 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane7SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 7 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane7Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 7 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane7WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_throttle",
                    Units = "ratio",
                    Description = "Plane 7 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7throttle",
                    Id = DataRefId.MultiplayerPositionPlane7Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 7 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane7YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 7 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane7YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 7 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane7YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_x",
                    Units = "meters",
                    Description = "Plane 8 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8x",
                    Id = DataRefId.MultiplayerPositionPlane8X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_y",
                    Units = "meters",
                    Description = "Plane 8 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8y",
                    Id = DataRefId.MultiplayerPositionPlane8Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_z",
                    Units = "meters",
                    Description = "Plane 8 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8z",
                    Id = DataRefId.MultiplayerPositionPlane8Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_the",
                    Units = "degrees",
                    Description = "Plane 8 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8the",
                    Id = DataRefId.MultiplayerPositionPlane8The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_phi",
                    Units = "degrees",
                    Description = "Plane 8 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8phi",
                    Id = DataRefId.MultiplayerPositionPlane8Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_psi",
                    Units = "degrees",
                    Description = "Plane 8 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8psi",
                    Id = DataRefId.MultiplayerPositionPlane8Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 8 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane8GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 8 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane8FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane8FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 8 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane8SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 8 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane8SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 8 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane8Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 8 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane8WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_throttle",
                    Units = "ratio",
                    Description = "Plane 8 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8throttle",
                    Id = DataRefId.MultiplayerPositionPlane8Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 8 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane8YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 8 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane8YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 8 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane8YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_x",
                    Units = "meters",
                    Description = "Plane 9 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9x",
                    Id = DataRefId.MultiplayerPositionPlane9X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_y",
                    Units = "meters",
                    Description = "Plane 9 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9y",
                    Id = DataRefId.MultiplayerPositionPlane9Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_z",
                    Units = "meters",
                    Description = "Plane 9 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9z",
                    Id = DataRefId.MultiplayerPositionPlane9Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_the",
                    Units = "degrees",
                    Description = "Plane 9 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9the",
                    Id = DataRefId.MultiplayerPositionPlane9The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_phi",
                    Units = "degrees",
                    Description = "Plane 9 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9phi",
                    Id = DataRefId.MultiplayerPositionPlane9Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_psi",
                    Units = "degrees",
                    Description = "Plane 9 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9psi",
                    Id = DataRefId.MultiplayerPositionPlane9Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 9 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane9GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 9 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane9FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane9FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 9 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane9SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 9 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane9SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 9 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane9Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 9 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane9WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_throttle",
                    Units = "ratio",
                    Description = "Plane 9 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9throttle",
                    Id = DataRefId.MultiplayerPositionPlane9Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 9 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane9YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 9 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane9YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 9 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane9YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_lat",
                    Units = "degs",
                    Description = "Plane 1 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1lat",
                    Id = DataRefId.MultiplayerPositionPlane1Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1lon",
                    Id = DataRefId.MultiplayerPositionPlane1Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1el",
                    Id = DataRefId.MultiplayerPositionPlane1El,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_v_x",
                    Units = "m/s",
                    Description = "Plane 1 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1vx",
                    Id = DataRefId.MultiplayerPositionPlane1VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1vy",
                    Id = DataRefId.MultiplayerPositionPlane1VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1vz",
                    Id = DataRefId.MultiplayerPositionPlane1VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_lat",
                    Units = "degs",
                    Description = "Plane 2 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2lat",
                    Id = DataRefId.MultiplayerPositionPlane2Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2lon",
                    Id = DataRefId.MultiplayerPositionPlane2Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2el",
                    Id = DataRefId.MultiplayerPositionPlane2El,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_v_x",
                    Units = "m/s",
                    Description = "Plane 2 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2vx",
                    Id = DataRefId.MultiplayerPositionPlane2VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2vy",
                    Id = DataRefId.MultiplayerPositionPlane2VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2vz",
                    Id = DataRefId.MultiplayerPositionPlane2VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_lat",
                    Units = "degs",
                    Description = "Plane 3 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3lat",
                    Id = DataRefId.MultiplayerPositionPlane3Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3lon",
                    Id = DataRefId.MultiplayerPositionPlane3Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3el",
                    Id = DataRefId.MultiplayerPositionPlane3El,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_v_x",
                    Units = "m/s",
                    Description = "Plane 3 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3vx",
                    Id = DataRefId.MultiplayerPositionPlane3VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3vy",
                    Id = DataRefId.MultiplayerPositionPlane3VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3vz",
                    Id = DataRefId.MultiplayerPositionPlane3VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_lat",
                    Units = "degs",
                    Description = "Plane 4 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4lat",
                    Id = DataRefId.MultiplayerPositionPlane4Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4lon",
                    Id = DataRefId.MultiplayerPositionPlane4Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4el",
                    Id = DataRefId.MultiplayerPositionPlane4El,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_v_x",
                    Units = "m/s",
                    Description = "Plane 4 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4vx",
                    Id = DataRefId.MultiplayerPositionPlane4VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4vy",
                    Id = DataRefId.MultiplayerPositionPlane4VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4vz",
                    Id = DataRefId.MultiplayerPositionPlane4VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_lat",
                    Units = "degs",
                    Description = "Plane 5 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5lat",
                    Id = DataRefId.MultiplayerPositionPlane5Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5lon",
                    Id = DataRefId.MultiplayerPositionPlane5Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5el",
                    Id = DataRefId.MultiplayerPositionPlane5El,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_v_x",
                    Units = "m/s",
                    Description = "Plane 5 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5vx",
                    Id = DataRefId.MultiplayerPositionPlane5VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5vy",
                    Id = DataRefId.MultiplayerPositionPlane5VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5vz",
                    Id = DataRefId.MultiplayerPositionPlane5VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_lat",
                    Units = "degs",
                    Description = "Plane 6 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6lat",
                    Id = DataRefId.MultiplayerPositionPlane6Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6lon",
                    Id = DataRefId.MultiplayerPositionPlane6Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6el",
                    Id = DataRefId.MultiplayerPositionPlane6El,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_v_x",
                    Units = "m/s",
                    Description = "Plane 6 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6vx",
                    Id = DataRefId.MultiplayerPositionPlane6VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6vy",
                    Id = DataRefId.MultiplayerPositionPlane6VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6vz",
                    Id = DataRefId.MultiplayerPositionPlane6VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_lat",
                    Units = "degs",
                    Description = "Plane 7 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7lat",
                    Id = DataRefId.MultiplayerPositionPlane7Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7lon",
                    Id = DataRefId.MultiplayerPositionPlane7Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7el",
                    Id = DataRefId.MultiplayerPositionPlane7El,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_v_x",
                    Units = "m/s",
                    Description = "Plane 7 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7vx",
                    Id = DataRefId.MultiplayerPositionPlane7VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7vy",
                    Id = DataRefId.MultiplayerPositionPlane7VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7vz",
                    Id = DataRefId.MultiplayerPositionPlane7VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_lat",
                    Units = "degs",
                    Description = "Plane 8 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8lat",
                    Id = DataRefId.MultiplayerPositionPlane8Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8lon",
                    Id = DataRefId.MultiplayerPositionPlane8Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8el",
                    Id = DataRefId.MultiplayerPositionPlane8El,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_v_x",
                    Units = "m/s",
                    Description = "Plane 8 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8vx",
                    Id = DataRefId.MultiplayerPositionPlane8VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8vy",
                    Id = DataRefId.MultiplayerPositionPlane8VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8vz",
                    Id = DataRefId.MultiplayerPositionPlane8VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_lat",
                    Units = "degs",
                    Description = "Plane 9 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9lat",
                    Id = DataRefId.MultiplayerPositionPlane9Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9lon",
                    Id = DataRefId.MultiplayerPositionPlane9Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9el",
                    Id = DataRefId.MultiplayerPositionPlane9El,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_v_x",
                    Units = "m/s",
                    Description = "Plane 9 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9vx",
                    Id = DataRefId.MultiplayerPositionPlane9VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9vy",
                    Id = DataRefId.MultiplayerPositionPlane9VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9vz",
                    Id = DataRefId.MultiplayerPositionPlane9VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 1 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane1BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 1 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane1LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 1 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane1NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 1 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane1StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane1TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 1 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane1taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane1TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 2 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane2BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 2 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane2LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 2 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane2NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 2 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane2StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane2TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 2 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane2taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane2TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 3 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane3BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 3 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane3LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 3 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane3NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 3 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane3StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane3TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 3 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane3taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane3TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 4 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane4BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 4 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane4LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 4 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane4NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 4 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane4StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane4TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 4 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane4taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane4TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 5 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane5BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 5 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane5LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 5 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane5NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 5 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane5StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane5TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 5 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane5taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane5TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 6 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane6BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 6 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane6LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 6 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane6NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 6 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane6StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane6TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 6 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane6taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane6TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 7 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane7BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 7 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane7LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 7 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane7NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 7 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane7StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane7TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 7 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane7taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane7TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 8 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane8BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 8 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane8LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 8 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane8NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 8 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane8StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane8TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 8 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane8taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane8TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 9 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane9BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 9 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane9LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 9 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane9NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 9 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane9StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane9TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 9 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane9taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane9TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 10 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane10BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 10 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane10LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 10 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane10NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 10 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane10StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 10 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane10TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 11 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane11BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 11 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane11LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 11 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane11NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 11 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane11StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 11 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane11TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 12 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane12BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 12 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane12LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 12 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane12NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 12 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane12StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 12 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane12TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 13 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane13BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 13 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane13LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 13 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane13NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 13 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane13StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 13 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane13TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 14 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane14BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 14 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane14LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 14 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane14NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 14 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane14StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 14 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane14TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 15 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane15BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 15 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane15LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 15 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane15NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 15 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane15StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 15 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane15TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 16 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane16BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 16 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane16LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 16 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane16NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 16 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane16StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 16 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane16TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 17 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane17BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 17 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane17LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 17 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane17NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 17 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane17StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 17 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane17TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 18 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane18BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 18 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane18LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 18 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane18NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 18 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane18StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 18 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane18TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19BeaconLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 19 Beacon Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19beacon Lights On",
                    Id = DataRefId.MultiplayerPositionPlane19BeaconLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19LandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 19 Landing Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19landing Lights On",
                    Id = DataRefId.MultiplayerPositionPlane19LandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19NavLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 19 Navigation Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19nav Lights On",
                    Id = DataRefId.MultiplayerPositionPlane19NavLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19StrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 19 Strobe Light",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19strobe Lights On",
                    Id = DataRefId.MultiplayerPositionPlane19StrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19TaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 19 Taxi Lights",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19taxi Light On",
                    Id = DataRefId.MultiplayerPositionPlane19TaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_x",
                    Units = "meters",
                    Description = "Plane 10 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10x",
                    Id = DataRefId.MultiplayerPositionPlane10X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_y",
                    Units = "meters",
                    Description = "Plane 10 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10y",
                    Id = DataRefId.MultiplayerPositionPlane10Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_z",
                    Units = "meters",
                    Description = "Plane 10 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10z",
                    Id = DataRefId.MultiplayerPositionPlane10Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_the",
                    Units = "degrees",
                    Description = "Plane 10 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10the",
                    Id = DataRefId.MultiplayerPositionPlane10The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_phi",
                    Units = "degrees",
                    Description = "Plane 10 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10phi",
                    Id = DataRefId.MultiplayerPositionPlane10Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_psi",
                    Units = "degrees",
                    Description = "Plane 10 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10psi",
                    Id = DataRefId.MultiplayerPositionPlane10Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 10 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane10GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 10 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane10FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 10 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane10FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 10 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane10SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 10 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane10SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 10 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane10Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 10 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane10WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_throttle",
                    Units = "ratio",
                    Description = "Plane 10 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10throttle",
                    Id = DataRefId.MultiplayerPositionPlane10Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 10 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane10YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 10 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane10YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 10 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane10YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_lat",
                    Units = "degs",
                    Description = "Plane 10 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10lat",
                    Id = DataRefId.MultiplayerPositionPlane10Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10lon",
                    Id = DataRefId.MultiplayerPositionPlane10Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10el",
                    Id = DataRefId.MultiplayerPositionPlane10El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_v_x",
                    Units = "m/s",
                    Description = "Plane 10 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10vx",
                    Id = DataRefId.MultiplayerPositionPlane10VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10vy",
                    Id = DataRefId.MultiplayerPositionPlane10VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane10VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane10vz",
                    Id = DataRefId.MultiplayerPositionPlane10VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_x",
                    Units = "meters",
                    Description = "Plane 11 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11x",
                    Id = DataRefId.MultiplayerPositionPlane11X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_y",
                    Units = "meters",
                    Description = "Plane 11 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11y",
                    Id = DataRefId.MultiplayerPositionPlane11Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_z",
                    Units = "meters",
                    Description = "Plane 11 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11z",
                    Id = DataRefId.MultiplayerPositionPlane11Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_the",
                    Units = "degrees",
                    Description = "Plane 11 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11the",
                    Id = DataRefId.MultiplayerPositionPlane11The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_phi",
                    Units = "degrees",
                    Description = "Plane 11 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11phi",
                    Id = DataRefId.MultiplayerPositionPlane11Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_psi",
                    Units = "degrees",
                    Description = "Plane 11 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11psi",
                    Id = DataRefId.MultiplayerPositionPlane11Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 11 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane11GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 11 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane11FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 11 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane11FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 11 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane11SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 11 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane11SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 11 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane11Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 11 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane11WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_throttle",
                    Units = "ratio",
                    Description = "Plane 11 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11throttle",
                    Id = DataRefId.MultiplayerPositionPlane11Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 11 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane11YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 11 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane11YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 11 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane11YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_lat",
                    Units = "degs",
                    Description = "Plane 11 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11lat",
                    Id = DataRefId.MultiplayerPositionPlane11Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11lon",
                    Id = DataRefId.MultiplayerPositionPlane11Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11el",
                    Id = DataRefId.MultiplayerPositionPlane11El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_v_x",
                    Units = "m/s",
                    Description = "Plane 11 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11vx",
                    Id = DataRefId.MultiplayerPositionPlane11VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11vy",
                    Id = DataRefId.MultiplayerPositionPlane11VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane11VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane11vz",
                    Id = DataRefId.MultiplayerPositionPlane11VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_x",
                    Units = "meters",
                    Description = "Plane 12 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12x",
                    Id = DataRefId.MultiplayerPositionPlane12X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_y",
                    Units = "meters",
                    Description = "Plane 12 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12y",
                    Id = DataRefId.MultiplayerPositionPlane12Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_z",
                    Units = "meters",
                    Description = "Plane 12 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12z",
                    Id = DataRefId.MultiplayerPositionPlane12Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_the",
                    Units = "degrees",
                    Description = "Plane 12 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12the",
                    Id = DataRefId.MultiplayerPositionPlane12The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_phi",
                    Units = "degrees",
                    Description = "Plane 12 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12phi",
                    Id = DataRefId.MultiplayerPositionPlane12Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_psi",
                    Units = "degrees",
                    Description = "Plane 12 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12psi",
                    Id = DataRefId.MultiplayerPositionPlane12Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 12 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane12GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 12 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane12FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 12 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane12FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 12 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane12SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 12 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane12SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 12 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane12Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 12 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane12WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_throttle",
                    Units = "ratio",
                    Description = "Plane 12 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12throttle",
                    Id = DataRefId.MultiplayerPositionPlane12Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 12 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane12YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 12 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane12YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 12 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane12YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_lat",
                    Units = "degs",
                    Description = "Plane 12 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12lat",
                    Id = DataRefId.MultiplayerPositionPlane12Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12lon",
                    Id = DataRefId.MultiplayerPositionPlane12Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12el",
                    Id = DataRefId.MultiplayerPositionPlane12El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_v_x",
                    Units = "m/s",
                    Description = "Plane 12 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12vx",
                    Id = DataRefId.MultiplayerPositionPlane12VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12vy",
                    Id = DataRefId.MultiplayerPositionPlane12VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane12VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane12vz",
                    Id = DataRefId.MultiplayerPositionPlane12VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_x",
                    Units = "meters",
                    Description = "Plane 13 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13x",
                    Id = DataRefId.MultiplayerPositionPlane13X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_y",
                    Units = "meters",
                    Description = "Plane 13 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13y",
                    Id = DataRefId.MultiplayerPositionPlane13Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_z",
                    Units = "meters",
                    Description = "Plane 13 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13z",
                    Id = DataRefId.MultiplayerPositionPlane13Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_the",
                    Units = "degrees",
                    Description = "Plane 13 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13the",
                    Id = DataRefId.MultiplayerPositionPlane13The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_phi",
                    Units = "degrees",
                    Description = "Plane 13 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13phi",
                    Id = DataRefId.MultiplayerPositionPlane13Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_psi",
                    Units = "degrees",
                    Description = "Plane 13 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13psi",
                    Id = DataRefId.MultiplayerPositionPlane13Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 13 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane13GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 13 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane13FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 13 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane13FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 13 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane13SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 13 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane13SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 13 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane13Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 13 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane13WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_throttle",
                    Units = "ratio",
                    Description = "Plane 13 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13throttle",
                    Id = DataRefId.MultiplayerPositionPlane13Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 13 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane13YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 13 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane13YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 13 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane13YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_lat",
                    Units = "degs",
                    Description = "Plane 13 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13lat",
                    Id = DataRefId.MultiplayerPositionPlane13Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13lon",
                    Id = DataRefId.MultiplayerPositionPlane13Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13el",
                    Id = DataRefId.MultiplayerPositionPlane13El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_v_x",
                    Units = "m/s",
                    Description = "Plane 13 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13vx",
                    Id = DataRefId.MultiplayerPositionPlane13VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13vy",
                    Id = DataRefId.MultiplayerPositionPlane13VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane13VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane13vz",
                    Id = DataRefId.MultiplayerPositionPlane13VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_x",
                    Units = "meters",
                    Description = "Plane 14 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14x",
                    Id = DataRefId.MultiplayerPositionPlane14X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_y",
                    Units = "meters",
                    Description = "Plane 14 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14y",
                    Id = DataRefId.MultiplayerPositionPlane14Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_z",
                    Units = "meters",
                    Description = "Plane 14 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14z",
                    Id = DataRefId.MultiplayerPositionPlane14Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_the",
                    Units = "degrees",
                    Description = "Plane 14 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14the",
                    Id = DataRefId.MultiplayerPositionPlane14The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_phi",
                    Units = "degrees",
                    Description = "Plane 14 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14phi",
                    Id = DataRefId.MultiplayerPositionPlane14Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_psi",
                    Units = "degrees",
                    Description = "Plane 14 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14psi",
                    Id = DataRefId.MultiplayerPositionPlane14Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 14 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane14GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 14 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane14FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 14 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane14FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 14 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane14SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 14 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane14SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 14 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane14Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 14 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane14WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_throttle",
                    Units = "ratio",
                    Description = "Plane 14 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14throttle",
                    Id = DataRefId.MultiplayerPositionPlane14Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 14 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane14YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 14 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane14YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 14 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane14YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_lat",
                    Units = "degs",
                    Description = "Plane 14 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14lat",
                    Id = DataRefId.MultiplayerPositionPlane14Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14lon",
                    Id = DataRefId.MultiplayerPositionPlane14Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14el",
                    Id = DataRefId.MultiplayerPositionPlane14El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_v_x",
                    Units = "m/s",
                    Description = "Plane 14 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14vx",
                    Id = DataRefId.MultiplayerPositionPlane14VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14vy",
                    Id = DataRefId.MultiplayerPositionPlane14VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane14VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane14vz",
                    Id = DataRefId.MultiplayerPositionPlane14VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_x",
                    Units = "meters",
                    Description = "Plane 15 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15x",
                    Id = DataRefId.MultiplayerPositionPlane15X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_y",
                    Units = "meters",
                    Description = "Plane 15 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15y",
                    Id = DataRefId.MultiplayerPositionPlane15Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_z",
                    Units = "meters",
                    Description = "Plane 15 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15z",
                    Id = DataRefId.MultiplayerPositionPlane15Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_the",
                    Units = "degrees",
                    Description = "Plane 15 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15the",
                    Id = DataRefId.MultiplayerPositionPlane15The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_phi",
                    Units = "degrees",
                    Description = "Plane 15 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15phi",
                    Id = DataRefId.MultiplayerPositionPlane15Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_psi",
                    Units = "degrees",
                    Description = "Plane 15 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15psi",
                    Id = DataRefId.MultiplayerPositionPlane15Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 15 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane15GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 15 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane15FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 15 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane15FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 15 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane15SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 15 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane15SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 15 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane15Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 15 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane15WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_throttle",
                    Units = "ratio",
                    Description = "Plane 15 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15throttle",
                    Id = DataRefId.MultiplayerPositionPlane15Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 15 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane15YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 15 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane15YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 15 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane15YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_lat",
                    Units = "degs",
                    Description = "Plane 15 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15lat",
                    Id = DataRefId.MultiplayerPositionPlane15Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15lon",
                    Id = DataRefId.MultiplayerPositionPlane15Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15el",
                    Id = DataRefId.MultiplayerPositionPlane15El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_v_x",
                    Units = "m/s",
                    Description = "Plane 15 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15vx",
                    Id = DataRefId.MultiplayerPositionPlane15VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15vy",
                    Id = DataRefId.MultiplayerPositionPlane15VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane15VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane15vz",
                    Id = DataRefId.MultiplayerPositionPlane15VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_x",
                    Units = "meters",
                    Description = "Plane 16 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16x",
                    Id = DataRefId.MultiplayerPositionPlane16X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_y",
                    Units = "meters",
                    Description = "Plane 16 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16y",
                    Id = DataRefId.MultiplayerPositionPlane16Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_z",
                    Units = "meters",
                    Description = "Plane 16 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16z",
                    Id = DataRefId.MultiplayerPositionPlane16Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_the",
                    Units = "degrees",
                    Description = "Plane 16 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16the",
                    Id = DataRefId.MultiplayerPositionPlane16The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_phi",
                    Units = "degrees",
                    Description = "Plane 16 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16phi",
                    Id = DataRefId.MultiplayerPositionPlane16Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_psi",
                    Units = "degrees",
                    Description = "Plane 16 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16psi",
                    Id = DataRefId.MultiplayerPositionPlane16Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 16 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane16GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 16 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane16FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 16 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane16FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 16 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane16SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 16 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane16SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 16 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane16Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 16 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane16WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_throttle",
                    Units = "ratio",
                    Description = "Plane 16 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16throttle",
                    Id = DataRefId.MultiplayerPositionPlane16Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 16 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane16YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 16 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane16YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 16 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane16YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_lat",
                    Units = "degs",
                    Description = "Plane 16 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16lat",
                    Id = DataRefId.MultiplayerPositionPlane16Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16lon",
                    Id = DataRefId.MultiplayerPositionPlane16Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16el",
                    Id = DataRefId.MultiplayerPositionPlane16El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_v_x",
                    Units = "m/s",
                    Description = "Plane 16 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16vx",
                    Id = DataRefId.MultiplayerPositionPlane16VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16vy",
                    Id = DataRefId.MultiplayerPositionPlane16VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane16VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane16vz",
                    Id = DataRefId.MultiplayerPositionPlane16VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_x",
                    Units = "meters",
                    Description = "Plane 17 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17x",
                    Id = DataRefId.MultiplayerPositionPlane17X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_y",
                    Units = "meters",
                    Description = "Plane 17 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17y",
                    Id = DataRefId.MultiplayerPositionPlane17Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_z",
                    Units = "meters",
                    Description = "Plane 17 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17z",
                    Id = DataRefId.MultiplayerPositionPlane17Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_the",
                    Units = "degrees",
                    Description = "Plane 17 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17the",
                    Id = DataRefId.MultiplayerPositionPlane17The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_phi",
                    Units = "degrees",
                    Description = "Plane 17 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17phi",
                    Id = DataRefId.MultiplayerPositionPlane17Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_psi",
                    Units = "degrees",
                    Description = "Plane 17 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17psi",
                    Id = DataRefId.MultiplayerPositionPlane17Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 17 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane17GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 17 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane17FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 17 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane17FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 17 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane17SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 17 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane17SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 17 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane17Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 17 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane17WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_throttle",
                    Units = "ratio",
                    Description = "Plane 17 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17throttle",
                    Id = DataRefId.MultiplayerPositionPlane17Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 17 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane17YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 17 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane17YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 17 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane17YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_lat",
                    Units = "degs",
                    Description = "Plane 17 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17lat",
                    Id = DataRefId.MultiplayerPositionPlane17Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17lon",
                    Id = DataRefId.MultiplayerPositionPlane17Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17el",
                    Id = DataRefId.MultiplayerPositionPlane17El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_v_x",
                    Units = "m/s",
                    Description = "Plane 17 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17vx",
                    Id = DataRefId.MultiplayerPositionPlane17VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17vy",
                    Id = DataRefId.MultiplayerPositionPlane17VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane17VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane17vz",
                    Id = DataRefId.MultiplayerPositionPlane17VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_x",
                    Units = "meters",
                    Description = "Plane 18 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18x",
                    Id = DataRefId.MultiplayerPositionPlane18X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_y",
                    Units = "meters",
                    Description = "Plane 18 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18y",
                    Id = DataRefId.MultiplayerPositionPlane18Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_z",
                    Units = "meters",
                    Description = "Plane 18 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18z",
                    Id = DataRefId.MultiplayerPositionPlane18Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_the",
                    Units = "degrees",
                    Description = "Plane 18 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18the",
                    Id = DataRefId.MultiplayerPositionPlane18The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_phi",
                    Units = "degrees",
                    Description = "Plane 18 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18phi",
                    Id = DataRefId.MultiplayerPositionPlane18Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_psi",
                    Units = "degrees",
                    Description = "Plane 18 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18psi",
                    Id = DataRefId.MultiplayerPositionPlane18Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 18 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane18GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 18 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane18FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 18 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane18FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 18 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane18SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 18 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane18SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 18 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane18Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 18 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane18WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_throttle",
                    Units = "ratio",
                    Description = "Plane 18 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18throttle",
                    Id = DataRefId.MultiplayerPositionPlane18Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 18 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane18YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 18 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane18YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 18 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane18YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_lat",
                    Units = "degs",
                    Description = "Plane 18 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18lat",
                    Id = DataRefId.MultiplayerPositionPlane18Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18lon",
                    Id = DataRefId.MultiplayerPositionPlane18Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18el",
                    Id = DataRefId.MultiplayerPositionPlane18El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_v_x",
                    Units = "m/s",
                    Description = "Plane 18 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18vx",
                    Id = DataRefId.MultiplayerPositionPlane18VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18vy",
                    Id = DataRefId.MultiplayerPositionPlane18VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane18VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane18vz",
                    Id = DataRefId.MultiplayerPositionPlane18VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19X
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_x",
                    Units = "meters",
                    Description = "Plane 19 x location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19x",
                    Id = DataRefId.MultiplayerPositionPlane19X,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19Y
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_y",
                    Units = "meters",
                    Description = "Plane 19 y location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19y",
                    Id = DataRefId.MultiplayerPositionPlane19Y,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19Z
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_z",
                    Units = "meters",
                    Description = "Plane 19 z location",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19z",
                    Id = DataRefId.MultiplayerPositionPlane19Z,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19The
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_the",
                    Units = "degrees",
                    Description = "Plane 19 theta (pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19the",
                    Id = DataRefId.MultiplayerPositionPlane19The,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19Phi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_phi",
                    Units = "degrees",
                    Description = "Plane 19 phi (roll)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19phi",
                    Id = DataRefId.MultiplayerPositionPlane19Phi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19Psi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_psi",
                    Units = "degrees",
                    Description = "Plane 19 psi (heading)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19psi",
                    Id = DataRefId.MultiplayerPositionPlane19Psi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19GearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_gear_deploy",
                    Units = "ratio",
                    Description = "Plane 19 gear deployment for 6 gear. 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19gear Deploy",
                    Id = DataRefId.MultiplayerPositionPlane19GearDeploy,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19FlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 19 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19flap Ratio",
                    Id = DataRefId.MultiplayerPositionPlane19FlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19FlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 19 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19flap Ratio2",
                    Id = DataRefId.MultiplayerPositionPlane19FlapRatio2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19SpoilerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 19 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19spoiler Ratio",
                    Id = DataRefId.MultiplayerPositionPlane19SpoilerRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19SpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 19 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19speedbrake Ratio",
                    Id = DataRefId.MultiplayerPositionPlane19SpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19Sla1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 19 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19sla1ratio",
                    Id = DataRefId.MultiplayerPositionPlane19Sla1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19WingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 19 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19wing Sweep",
                    Id = DataRefId.MultiplayerPositionPlane19WingSweep,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19Throttle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_throttle",
                    Units = "ratio",
                    Description = "Plane 19 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19throttle",
                    Id = DataRefId.MultiplayerPositionPlane19Throttle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19YolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 19 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19yolk Pitch",
                    Id = DataRefId.MultiplayerPositionPlane19YolkPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19YolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 19 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19yolk Roll",
                    Id = DataRefId.MultiplayerPositionPlane19YolkRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19YolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 19 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19yolk Yaw",
                    Id = DataRefId.MultiplayerPositionPlane19YolkYaw,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_lat",
                    Units = "degs",
                    Description = "Plane 19 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19lat",
                    Id = DataRefId.MultiplayerPositionPlane19Lat,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19lon",
                    Id = DataRefId.MultiplayerPositionPlane19Lon,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19El
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19el",
                    Id = DataRefId.MultiplayerPositionPlane19El,
                    Writable = true,
                    DataType = "double"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19VX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_v_x",
                    Units = "m/s",
                    Description = "Plane 19 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19vx",
                    Id = DataRefId.MultiplayerPositionPlane19VX,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19VY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19vy",
                    Id = DataRefId.MultiplayerPositionPlane19VY,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerPositionPlane19VZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Position Plane19vz",
                    Id = DataRefId.MultiplayerPositionPlane19VZ,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement MultiplayerCombatTeamStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/multiplayer/combat/team_status",
                    Units = "enum",
                    Description = "Is the aircraft friend or foe? (0 = neutral, 1 = friend, 2 = enemy)",
                    Frequency = DefaultFrequency,
                    Name = "Multiplayer Combat Team Status",
                    Id = DataRefId.MultiplayerCombatTeamStatus,
                    Writable = false,
                    DataType = "int[20]"
                };
            }
        }
        private DataRefElement NetworkDataoutNetworkDataRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/network_data_rate",
                    Units = "hz",
                    Description = "Rate to send data over UDP at",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Network Data Rate",
                    Id = DataRefId.NetworkDataoutNetworkDataRate,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement NetworkDataoutDataToInternet
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/data_to_internet",
                    Units = "boolean",
                    Description = "Enable data output of this data ref to internet",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Data To Internet",
                    Id = DataRefId.NetworkDataoutDataToInternet,
                    Writable = true,
                    DataType = "int[200]"
                };
            }
        }
        private DataRefElement NetworkDataoutDataToDisk
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/data_to_disk",
                    Units = "boolean",
                    Description = "Enable data output of this data ref to disk file",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Data To Disk",
                    Id = DataRefId.NetworkDataoutDataToDisk,
                    Writable = true,
                    DataType = "int[200]"
                };
            }
        }
        private DataRefElement NetworkDataoutDataToGraph
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/data_to_graph",
                    Units = "boolean",
                    Description = "Enable data output of this data ref to graph",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Data To Graph",
                    Id = DataRefId.NetworkDataoutDataToGraph,
                    Writable = true,
                    DataType = "int[200]"
                };
            }
        }
        private DataRefElement NetworkDataoutDataToScreen
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/data_to_screen",
                    Units = "boolean",
                    Description = "Enable data output of this data ref to screen",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Data To Screen",
                    Id = DataRefId.NetworkDataoutDataToScreen,
                    Writable = true,
                    DataType = "int[200]"
                };
            }
        }
        private DataRefElement NetworkDataoutDumpPartsProps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/dump_parts_props",
                    Units = "boolean",
                    Description = "Dump extra prop data to screen",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Dump Parts Props",
                    Id = DataRefId.NetworkDataoutDumpPartsProps,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement NetworkDataoutDumpPartsWings
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/dump_parts_wings",
                    Units = "boolean",
                    Description = "Dump wing prop data to screen",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Dump Parts Wings",
                    Id = DataRefId.NetworkDataoutDumpPartsWings,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement NetworkDataoutDumpPartsVstabs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/dump_parts_vstabs",
                    Units = "boolean",
                    Description = "Dump vertical stabilizer prop data to screen",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Dump Parts Vstabs",
                    Id = DataRefId.NetworkDataoutDumpPartsVstabs,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement NetworkDataoutIsExternalVisual
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/is_external_visual",
                    Units = "boolean",
                    Description = "Is this machine running as an external visual for another X-Plane machine.",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Is External Visual",
                    Id = DataRefId.NetworkDataoutIsExternalVisual,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement NetworkDataoutIsMultiplayerSession
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/is_multiplayer_session",
                    Units = "boolean",
                    Description = "Is this machine part of an x-plane built-in multiplayer session?",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Is Multiplayer Session",
                    Id = DataRefId.NetworkDataoutIsMultiplayerSession,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement NetworkDataoutMultiplayerIp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/multiplayer_ip",
                    Units = "ip",
                    Description = "IP addresses of multiplayer players (or 0 if not in used in v10)",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Multiplayer Ip",
                    Id = DataRefId.NetworkDataoutMultiplayerIp,
                    Writable = false,
                    DataType = "int[19]"
                };
            }
        }
        private DataRefElement NetworkDataoutExternalVisualIp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/external_visual_ip",
                    Units = "ip",
                    Description = "IP addresses of external visuals (or 0 if not in use in v10).  Dim 8 in v9.",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout External Visual Ip",
                    Id = DataRefId.NetworkDataoutExternalVisualIp,
                    Writable = false,
                    DataType = "int[20]"
                };
            }
        }
        private DataRefElement NetworkDataoutTrackExternalVisual
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/track_external_visual",
                    Units = "boolean",
                    Description = "True if this remote visual exists",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Track External Visual",
                    Id = DataRefId.NetworkDataoutTrackExternalVisual,
                    Writable = false,
                    DataType = "int[20]"
                };
            }
        }
        private DataRefElement NetworkDataoutExvisTracksView
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/dataout/exvis_tracks_view",
                    Units = "boolean",
                    Description = "True if this remote visual tracks the master's view changes",
                    Frequency = DefaultFrequency,
                    Name = "Network Dataout Exvis Tracks View",
                    Id = DataRefId.NetworkDataoutExvisTracksView,
                    Writable = true,
                    DataType = "int[20]"
                };
            }
        }
        private DataRefElement NetworkMiscOpentransportInited
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/misc/opentransport_inited",
                    Units = "boolean",
                    Description = "Has x-plane already inited Open Transport?  YOU SHOULD NEVER USE THIS DATAREF!!!",
                    Frequency = DefaultFrequency,
                    Name = "Network Misc Opentransport Inited",
                    Id = DataRefId.NetworkMiscOpentransportInited,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement NetworkMiscConnectionHandshake
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/misc/connection_handshake",
                    Units = "enum",
                    Description = "Status of connection, 0 = no connection, 1 = half up, 2 = all up",
                    Frequency = DefaultFrequency,
                    Name = "Network Misc Connection Handshake",
                    Id = DataRefId.NetworkMiscConnectionHandshake,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement NetworkMiscNetworkTimeSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/network/misc/network_time_sec",
                    Units = "seconds",
                    Description = "The current elapsed time synched across the network",
                    Frequency = DefaultFrequency,
                    Name = "Network Misc Network Time Sec",
                    Id = DataRefId.NetworkMiscNetworkTimeSec,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement PhysicsEarthMu
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/physics/earth_mu",
                    Units = "m^3/s^2",
                    Description = "The earth's mass-gravity constant",
                    Frequency = DefaultFrequency,
                    Name = "Physics Earth Mu",
                    Id = DataRefId.PhysicsEarthMu,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement PhysicsEarthRadiusM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/physics/earth_radius_m",
                    Units = "meters",
                    Description = "Earth's radius",
                    Frequency = DefaultFrequency,
                    Name = "Physics Earth Radius M",
                    Id = DataRefId.PhysicsEarthRadiusM,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement PhysicsEarthTempC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/physics/earth_temp_c",
                    Units = "celsius",
                    Description = "Average sea level temp, current planet",
                    Frequency = DefaultFrequency,
                    Name = "Physics Earth Temp C",
                    Id = DataRefId.PhysicsEarthTempC,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement PhysicsEarthPressureP
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/physics/earth_pressure_p",
                    Units = "pascals",
                    Description = "average pressure at sea level, current planet",
                    Frequency = DefaultFrequency,
                    Name = "Physics Earth Pressure P",
                    Id = DataRefId.PhysicsEarthPressureP,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement PhysicsRhoSeaLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/physics/rho_sea_level",
                    Units = "???",
                    Description = "rho at sea level, current planet",
                    Frequency = DefaultFrequency,
                    Name = "Physics Rho Sea Level",
                    Id = DataRefId.PhysicsRhoSeaLevel,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement PhysicsGSealevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/physics/g_sealevel",
                    Units = "???",
                    Description = "gravitational acceleration of earth AT SEA LEVEL",
                    Frequency = DefaultFrequency,
                    Name = "Physics G Sealevel",
                    Id = DataRefId.PhysicsGSealevel,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement PhysicsRhoWater
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/physics/rho_water",
                    Units = "???",
                    Description = "rho of water",
                    Frequency = DefaultFrequency,
                    Name = "Physics Rho Water",
                    Id = DataRefId.PhysicsRhoWater,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement PhysicsMetricTemp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/physics/metric_temp",
                    Units = "boolean",
                    Description = "Are we showing metric temperature indications",
                    Frequency = DefaultFrequency,
                    Name = "Physics Metric Temp",
                    Id = DataRefId.PhysicsMetricTemp,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement PhysicsMetricPress
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/physics/metric_press",
                    Units = "boolean",
                    Description = "Are we showing metric pressure indications",
                    Frequency = DefaultFrequency,
                    Name = "Physics Metric Press",
                    Id = DataRefId.PhysicsMetricPress,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresHydraulicPressureRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/hydraulic_pressure_ratio",
                    Units = "ratio",
                    Description = "Hydraulic pressure ratio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Hydraulic Pressure Ratio",
                    Id = DataRefId.OperationFailuresHydraulicPressureRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationFailuresHydraulicPressureRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/hydraulic_pressure_ratio2",
                    Units = "ratio",
                    Description = "Hydraulic pressure ratio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Hydraulic Pressure Ratio2",
                    Id = DataRefId.OperationFailuresHydraulicPressureRatio2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationFailuresOilPowerThrustRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/oil_power_thrust_ratio",
                    Units = "ratio",
                    Description = "Oil power or thrust ratio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Oil Power Thrust Ratio",
                    Id = DataRefId.OperationFailuresOilPowerThrustRatio,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement OperationFailuresEnableRandomFalures
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/enable_random_falures",
                    Units = "boolean",
                    Description = "Enable random failures based on mean time between failures",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Enable Random Falures",
                    Id = DataRefId.OperationFailuresEnableRandomFalures,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresEnableRandomFailures
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/enable_random_failures",
                    Units = "boolean",
                    Description = "Enable random failures basde on mean time between failures",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Enable Random Failures",
                    Id = DataRefId.OperationFailuresEnableRandomFailures,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresMeanTimeBetweenFailureHrs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/mean_time_between_failure_hrs",
                    Units = "hours",
                    Description = "Mean time between failures",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Mean Time Between Failure Hrs",
                    Id = DataRefId.OperationFailuresMeanTimeBetweenFailureHrs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationFailuresRamAirTurbineOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/ram_air_turbine_on",
                    Units = "boolean",
                    Description = "Ram air turbine is on?",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Ram Air Turbine On",
                    Id = DataRefId.OperationFailuresRamAirTurbineOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresFailures
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/failures",
                    Units = "enum",
                    Description = "564 separate failure codes [was 137]",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Failures",
                    Id = DataRefId.OperationFailuresFailures,
                    Writable = false,
                    DataType = "int[667]"
                };
            }
        }
        private DataRefElement OperationFailuresRelConlock
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_conlock",
                    Units = "failure_enum",
                    Description = "Controls locked",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Conlock",
                    Id = DataRefId.OperationFailuresRelConlock,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelDoorOpen
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_door_open",
                    Units = "failure_enum",
                    Description = "Door Open",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Door Open",
                    Id = DataRefId.OperationFailuresRelDoorOpen,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelExPowerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ex_power_on",
                    Units = "failure_enum",
                    Description = "External power is on",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ex Power On",
                    Id = DataRefId.OperationFailuresRelExPowerOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPassO2On
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pass_o2_on",
                    Units = "failure_enum",
                    Description = "Passenger oxygen on",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pass O2on",
                    Id = DataRefId.OperationFailuresRelPassO2On,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelcap
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelcap",
                    Units = "failure_enum",
                    Description = "Fuel Cap left off",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuelcap",
                    Id = DataRefId.OperationFailuresRelFuelcap,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelWater
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_water",
                    Units = "failure_enum",
                    Description = "Water in fuel",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Water",
                    Id = DataRefId.OperationFailuresRelFuelWater,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_type",
                    Units = "failure_enum",
                    Description = "Wrong fuel type - JetA for props or Avgas for jets!",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Type",
                    Id = DataRefId.OperationFailuresRelFuelType,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelBlock0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block0",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Block0",
                    Id = DataRefId.OperationFailuresRelFuelBlock0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelBlock1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block1",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Block1",
                    Id = DataRefId.OperationFailuresRelFuelBlock1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelBlock2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block2",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Block2",
                    Id = DataRefId.OperationFailuresRelFuelBlock2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelBlock3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block3",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Block3",
                    Id = DataRefId.OperationFailuresRelFuelBlock3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelBlock4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block4",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Block4",
                    Id = DataRefId.OperationFailuresRelFuelBlock4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelBlock5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block5",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Block5",
                    Id = DataRefId.OperationFailuresRelFuelBlock5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelBlock6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block6",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Block6",
                    Id = DataRefId.OperationFailuresRelFuelBlock6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelBlock7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block7",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Block7",
                    Id = DataRefId.OperationFailuresRelFuelBlock7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelBlock8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block8",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 9",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuel Block8",
                    Id = DataRefId.OperationFailuresRelFuelBlock8,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelVasi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vasi",
                    Units = "failure_enum",
                    Description = "VASIs Inoperative",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Vasi",
                    Id = DataRefId.OperationFailuresRelVasi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRwyLites
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_rwy_lites",
                    Units = "failure_enum",
                    Description = "Runway lites Inoperative",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Rwy Lites",
                    Id = DataRefId.OperationFailuresRelRwyLites,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBirdStrike
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bird_strike",
                    Units = "failure_enum",
                    Description = "Bird has hit the plane",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Bird Strike",
                    Id = DataRefId.OperationFailuresRelBirdStrike,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelWindShear
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wind_shear",
                    Units = "failure_enum",
                    Description = "Wind shear/microburst",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Wind Shear",
                    Id = DataRefId.OperationFailuresRelWindShear,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSmokeCpit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_smoke_cpit",
                    Units = "failure_enum",
                    Description = "Smoke in cockpit",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Smoke Cpit",
                    Id = DataRefId.OperationFailuresRelSmokeCpit,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBrownOut
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_brown_out",
                    Units = "failure_enum",
                    Description = "Induce dusty brown-out",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Brown Out",
                    Id = DataRefId.OperationFailuresRelBrownOut,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEsys
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 1)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Esys",
                    Id = DataRefId.OperationFailuresRelEsys,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEsys2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys2",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 2)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Esys2",
                    Id = DataRefId.OperationFailuresRelEsys2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEsys3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys3",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 3)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Esys3",
                    Id = DataRefId.OperationFailuresRelEsys3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEsys4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys4",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 4)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Esys4",
                    Id = DataRefId.OperationFailuresRelEsys4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEsys5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys5",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 5)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Esys5",
                    Id = DataRefId.OperationFailuresRelEsys5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEsys6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys6",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 6)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Esys6",
                    Id = DataRefId.OperationFailuresRelEsys6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelInvert0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_invert0",
                    Units = "failure_enum",
                    Description = "Inverter 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Invert0",
                    Id = DataRefId.OperationFailuresRelInvert0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelInvert1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_invert1",
                    Units = "failure_enum",
                    Description = "Inverter 2 (also in 740)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Invert1",
                    Id = DataRefId.OperationFailuresRelInvert1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGen0Lo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen0_lo",
                    Units = "failure_enum",
                    Description = "Generator 0 voltage low",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gen0lo",
                    Id = DataRefId.OperationFailuresRelGen0Lo,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGen0Hi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen0_hi",
                    Units = "failure_enum",
                    Description = "Generator 0 voltage hi",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gen0hi",
                    Id = DataRefId.OperationFailuresRelGen0Hi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGen1Lo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen1_lo",
                    Units = "failure_enum",
                    Description = "Generator 1 voltage low",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gen1lo",
                    Id = DataRefId.OperationFailuresRelGen1Lo,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGen1Hi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen1_hi",
                    Units = "failure_enum",
                    Description = "Generator 1 voltage hi",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gen1hi",
                    Id = DataRefId.OperationFailuresRelGen1Hi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBat0Lo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bat0_lo",
                    Units = "failure_enum",
                    Description = "Battery 0 voltage low",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Bat0lo",
                    Id = DataRefId.OperationFailuresRelBat0Lo,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBat0Hi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bat0_hi",
                    Units = "failure_enum",
                    Description = "Battery 0 voltage hi",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Bat0hi",
                    Id = DataRefId.OperationFailuresRelBat0Hi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBat1Lo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bat1_lo",
                    Units = "failure_enum",
                    Description = "Battery 1 voltage low",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Bat1lo",
                    Id = DataRefId.OperationFailuresRelBat1Lo,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBat1Hi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bat1_hi",
                    Units = "failure_enum",
                    Description = "Battery 1 voltage hi",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Bat1hi",
                    Id = DataRefId.OperationFailuresRelBat1Hi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLitesNav
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_nav",
                    Units = "failure_enum",
                    Description = "Nav lights",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lites Nav",
                    Id = DataRefId.OperationFailuresRelLitesNav,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLitesStrobe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_strobe",
                    Units = "failure_enum",
                    Description = "Strobe lights",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lites Strobe",
                    Id = DataRefId.OperationFailuresRelLitesStrobe,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLitesBeac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_beac",
                    Units = "failure_enum",
                    Description = "Beacon lights",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lites Beac",
                    Id = DataRefId.OperationFailuresRelLitesBeac,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLitesTaxi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_taxi",
                    Units = "failure_enum",
                    Description = "Taxi lights",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lites Taxi",
                    Id = DataRefId.OperationFailuresRelLitesTaxi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLitesLand
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_land",
                    Units = "failure_enum",
                    Description = "Landing Lights",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lites Land",
                    Id = DataRefId.OperationFailuresRelLitesLand,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLitesIns
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_ins",
                    Units = "failure_enum",
                    Description = "Instrument Lighting",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lites Ins",
                    Id = DataRefId.OperationFailuresRelLitesIns,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelClights
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clights",
                    Units = "failure_enum",
                    Description = "Cockpit Lights",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Clights",
                    Id = DataRefId.OperationFailuresRelClights,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLitesHud
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_hud",
                    Units = "failure_enum",
                    Description = "HUD lights",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lites Hud",
                    Id = DataRefId.OperationFailuresRelLitesHud,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStbaug
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_stbaug",
                    Units = "failure_enum",
                    Description = "Stability Augmentation",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Stbaug",
                    Id = DataRefId.OperationFailuresRelStbaug,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelServoRudd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_servo_rudd",
                    Units = "failure_enum",
                    Description = "autopilot servos failed - rudder/yaw damper",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Servo Rudd",
                    Id = DataRefId.OperationFailuresRelServoRudd,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOtto
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_otto",
                    Units = "failure_enum",
                    Description = "AutoPilot (Computer)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Otto",
                    Id = DataRefId.OperationFailuresRelOtto,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAutoRunaway
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_auto_runaway",
                    Units = "failure_enum",
                    Description = "AutoPilot (Runaway!!!)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Auto Runaway",
                    Id = DataRefId.OperationFailuresRelAutoRunaway,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAutoServos
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_auto_servos",
                    Units = "failure_enum",
                    Description = "AutoPilot (Servos)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Auto Servos",
                    Id = DataRefId.OperationFailuresRelAutoServos,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelServoAiln
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_servo_ailn",
                    Units = "failure_enum",
                    Description = "autopilot servos failed - ailerons",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Servo Ailn",
                    Id = DataRefId.OperationFailuresRelServoAiln,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelServoElev
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_servo_elev",
                    Units = "failure_enum",
                    Description = "autopilot servos failed - elevators",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Servo Elev",
                    Id = DataRefId.OperationFailuresRelServoElev,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelServoThro
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_servo_thro",
                    Units = "failure_enum",
                    Description = "autopilot servos failed - throttles",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Servo Thro",
                    Id = DataRefId.OperationFailuresRelServoThro,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcRudL
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_rud_L",
                    Units = "failure_enum",
                    Description = "Yaw Left Control",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc Rud L",
                    Id = DataRefId.OperationFailuresRelFcRudL,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcRudR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_rud_R",
                    Units = "failure_enum",
                    Description = "Yaw Right control",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc Rud R",
                    Id = DataRefId.OperationFailuresRelFcRudR,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcAilL
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_ail_L",
                    Units = "failure_enum",
                    Description = "Roll left control",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc Ail L",
                    Id = DataRefId.OperationFailuresRelFcAilL,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcAilR
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_ail_R",
                    Units = "failure_enum",
                    Description = "Roll Right Control",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc Ail R",
                    Id = DataRefId.OperationFailuresRelFcAilR,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcElvU
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_elv_U",
                    Units = "failure_enum",
                    Description = "Pitch Up Control",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc Elv U",
                    Id = DataRefId.OperationFailuresRelFcElvU,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcElvD
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_elv_D",
                    Units = "failure_enum",
                    Description = "Pitch Down Control",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc Elv D",
                    Id = DataRefId.OperationFailuresRelFcElvD,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTrimRud
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_trim_rud",
                    Units = "failure_enum",
                    Description = "Yaw Trim",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Trim Rud",
                    Id = DataRefId.OperationFailuresRelTrimRud,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTrimAil
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_trim_ail",
                    Units = "failure_enum",
                    Description = "roll trim",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Trim Ail",
                    Id = DataRefId.OperationFailuresRelTrimAil,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTrimElv
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_trim_elv",
                    Units = "failure_enum",
                    Description = "Pitch Trim",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Trim Elv",
                    Id = DataRefId.OperationFailuresRelTrimElv,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRudTrimRun
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_rud_trim_run",
                    Units = "failure_enum",
                    Description = "Yaw Trim Runaway",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Rud Trim Run",
                    Id = DataRefId.OperationFailuresRelRudTrimRun,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAilTrimRun
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ail_trim_run",
                    Units = "failure_enum",
                    Description = "Pitch Trim Runaway",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ail Trim Run",
                    Id = DataRefId.OperationFailuresRelAilTrimRun,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelElvTrimRun
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_elv_trim_run",
                    Units = "failure_enum",
                    Description = "Elevator Trim Runaway",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Elv Trim Run",
                    Id = DataRefId.OperationFailuresRelElvTrimRun,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcSlt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_slt",
                    Units = "failure_enum",
                    Description = "Slats",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc Slt",
                    Id = DataRefId.OperationFailuresRelFcSlt,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFlapAct
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_flap_act",
                    Units = "failure_enum",
                    Description = "Flap Actuator",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Flap Act",
                    Id = DataRefId.OperationFailuresRelFlapAct,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcLFlp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_L_flp",
                    Units = "failure_enum",
                    Description = "Left flap activate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc L Flp",
                    Id = DataRefId.OperationFailuresRelFcLFlp,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcRFlp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_R_flp",
                    Units = "failure_enum",
                    Description = "Right Flap activate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc R Flp",
                    Id = DataRefId.OperationFailuresRelFcRFlp,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLFlpOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_L_flp_off",
                    Units = "failure_enum",
                    Description = "Left flap remove",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel L Flp Off",
                    Id = DataRefId.OperationFailuresRelLFlpOff,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRFlpOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_R_flp_off",
                    Units = "failure_enum",
                    Description = "Right flap remove",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel R Flp Off",
                    Id = DataRefId.OperationFailuresRelRFlpOff,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGearAct
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gear_act",
                    Units = "failure_enum",
                    Description = "Landing Gear actuator",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gear Act",
                    Id = DataRefId.OperationFailuresRelGearAct,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGearInd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gear_ind",
                    Units = "failure_enum",
                    Description = "Landing Gear indicator",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gear Ind",
                    Id = DataRefId.OperationFailuresRelGearInd,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLbrakes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lbrakes",
                    Units = "failure_enum",
                    Description = "Left Brakes",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lbrakes",
                    Id = DataRefId.OperationFailuresRelLbrakes,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRbrakes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_rbrakes",
                    Units = "failure_enum",
                    Description = "Right Brakes",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Rbrakes",
                    Id = DataRefId.OperationFailuresRelRbrakes,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLagear1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear1",
                    Units = "failure_enum",
                    Description = "Landing Gear 1 retract",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lagear1",
                    Id = DataRefId.OperationFailuresRelLagear1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLagear2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear2",
                    Units = "failure_enum",
                    Description = "Landing Gear 2 retract",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lagear2",
                    Id = DataRefId.OperationFailuresRelLagear2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLagear3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear3",
                    Units = "failure_enum",
                    Description = "Landing Gear 3 retract",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lagear3",
                    Id = DataRefId.OperationFailuresRelLagear3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLagear4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear4",
                    Units = "failure_enum",
                    Description = "Landing Gear 4 retract",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lagear4",
                    Id = DataRefId.OperationFailuresRelLagear4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLagear5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear5",
                    Units = "failure_enum",
                    Description = "Landing Gear 5 retract",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Lagear5",
                    Id = DataRefId.OperationFailuresRelLagear5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse1",
                    Units = "failure_enum",
                    Description = "Landing gear 1 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse1",
                    Id = DataRefId.OperationFailuresRelCollapse1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse2",
                    Units = "failure_enum",
                    Description = "Landing gear 2 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse2",
                    Id = DataRefId.OperationFailuresRelCollapse2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse3",
                    Units = "failure_enum",
                    Description = "Landing gear 3 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse3",
                    Id = DataRefId.OperationFailuresRelCollapse3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse4",
                    Units = "failure_enum",
                    Description = "Landing gear 4 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse4",
                    Id = DataRefId.OperationFailuresRelCollapse4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse5",
                    Units = "failure_enum",
                    Description = "Landing gear 5 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse5",
                    Id = DataRefId.OperationFailuresRelCollapse5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse6",
                    Units = "failure_enum",
                    Description = "Landing gear 6 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse6",
                    Id = DataRefId.OperationFailuresRelCollapse6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse7",
                    Units = "failure_enum",
                    Description = "Landing gear 7 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse7",
                    Id = DataRefId.OperationFailuresRelCollapse7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse8",
                    Units = "failure_enum",
                    Description = "Landing gear 8 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse8",
                    Id = DataRefId.OperationFailuresRelCollapse8,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse9
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse9",
                    Units = "failure_enum",
                    Description = "Landing gear 9 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse9",
                    Id = DataRefId.OperationFailuresRelCollapse9,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCollapse10
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse10",
                    Units = "failure_enum",
                    Description = "Landing gear 10 gear collapse",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Collapse10",
                    Id = DataRefId.OperationFailuresRelCollapse10,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTire1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire1",
                    Units = "failure_enum",
                    Description = "Landing gear 1 tire blowout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Tire1",
                    Id = DataRefId.OperationFailuresRelTire1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTire2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire2",
                    Units = "failure_enum",
                    Description = "Landing gear 2 tire blowout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Tire2",
                    Id = DataRefId.OperationFailuresRelTire2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTire3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire3",
                    Units = "failure_enum",
                    Description = "Landing gear 3 tire blowout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Tire3",
                    Id = DataRefId.OperationFailuresRelTire3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTire4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire4",
                    Units = "failure_enum",
                    Description = "Landing gear 4 tire blowout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Tire4",
                    Id = DataRefId.OperationFailuresRelTire4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTire5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire5",
                    Units = "failure_enum",
                    Description = "Landing gear 5 tire blowout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Tire5",
                    Id = DataRefId.OperationFailuresRelTire5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHVAC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_HVAC",
                    Units = "failure_enum",
                    Description = "air conditioning failed",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel HVAC",
                    Id = DataRefId.OperationFailuresRelHVAC,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBleedAirLft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bleed_air_lft",
                    Units = "failure_enum",
                    Description = "The left engine is not providing enough pressure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Bleed Air Lft",
                    Id = DataRefId.OperationFailuresRelBleedAirLft,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBleedAirRgt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bleed_air_rgt",
                    Units = "failure_enum",
                    Description = "The right engine is not providing enough pressure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Bleed Air Rgt",
                    Id = DataRefId.OperationFailuresRelBleedAirRgt,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAPUPress
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_APU_press",
                    Units = "failure_enum",
                    Description = "APU is not providing bleed air for engine start or pressurization",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel APU Press",
                    Id = DataRefId.OperationFailuresRelAPUPress,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelDepresSlow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_depres_slow",
                    Units = "failure_enum",
                    Description = "Slow cabin leak - descend or black out",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Depres Slow",
                    Id = DataRefId.OperationFailuresRelDepresSlow,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelDepresFast
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_depres_fast",
                    Units = "failure_enum",
                    Description = "catastrophic decompression - yer dead",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Depres Fast",
                    Id = DataRefId.OperationFailuresRelDepresFast,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydpmpEle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp_ele",
                    Units = "failure_enum",
                    Description = "Hydraulic pump (electric)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydpmp Ele",
                    Id = DataRefId.OperationFailuresRelHydpmpEle,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydpmp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp",
                    Units = "failure_enum",
                    Description = "Hydraulic System 1 (pump fail)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydpmp",
                    Id = DataRefId.OperationFailuresRelHydpmp,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydpmp2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp2",
                    Units = "failure_enum",
                    Description = "Hydraulic System 2 (pump fail)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydpmp2",
                    Id = DataRefId.OperationFailuresRelHydpmp2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydpmp3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp3",
                    Units = "failure_enum",
                    Description = "Hydraulic System 3 (pump fail)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydpmp3",
                    Id = DataRefId.OperationFailuresRelHydpmp3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydpmp4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp4",
                    Units = "failure_enum",
                    Description = "Hydraulic System 4 (pump fail)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydpmp4",
                    Id = DataRefId.OperationFailuresRelHydpmp4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydpmp5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp5",
                    Units = "failure_enum",
                    Description = "Hydraulic System 5 (pump fail)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydpmp5",
                    Id = DataRefId.OperationFailuresRelHydpmp5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydpmp6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp6",
                    Units = "failure_enum",
                    Description = "Hydraulic System 6 (pump fail)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydpmp6",
                    Id = DataRefId.OperationFailuresRelHydpmp6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydpmp7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp7",
                    Units = "failure_enum",
                    Description = "Hydraulic System 7 (pump fail)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydpmp7",
                    Id = DataRefId.OperationFailuresRelHydpmp7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydpmp8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp8",
                    Units = "failure_enum",
                    Description = "Hydraulic System 8 (pump fail)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydpmp8",
                    Id = DataRefId.OperationFailuresRelHydpmp8,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydleak
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydleak",
                    Units = "failure_enum",
                    Description = "Hydraulic System 1 (leak)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydleak",
                    Id = DataRefId.OperationFailuresRelHydleak,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydleak2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydleak2",
                    Units = "failure_enum",
                    Description = "Hydraulic System 2 (leak)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydleak2",
                    Id = DataRefId.OperationFailuresRelHydleak2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydoverp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydoverp",
                    Units = "failure_enum",
                    Description = "Hydraulic System 1 (over pressure)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydoverp",
                    Id = DataRefId.OperationFailuresRelHydoverp,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHydoverp2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydoverp2",
                    Units = "failure_enum",
                    Description = "Hydraulic System 2 (over pressure)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hydoverp2",
                    Id = DataRefId.OperationFailuresRelHydoverp2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelThrotLo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_throt_lo",
                    Units = "failure_enum",
                    Description = "Throttle inop giving min thrust",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Throt Lo",
                    Id = DataRefId.OperationFailuresRelThrotLo,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelThrotHi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_throt_hi",
                    Units = "failure_enum",
                    Description = "Throttle inop giving max thrust",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Throt Hi",
                    Id = DataRefId.OperationFailuresRelThrotHi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFcThr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_thr",
                    Units = "failure_enum",
                    Description = "Throttle failure at current position",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fc Thr",
                    Id = DataRefId.OperationFailuresRelFcThr,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPropSync
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prop_sync",
                    Units = "failure_enum",
                    Description = "Prop sync",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prop Sync",
                    Id = DataRefId.OperationFailuresRelPropSync,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFeather
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_feather",
                    Units = "failure_enum",
                    Description = "Autofeather system inop",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Feather",
                    Id = DataRefId.OperationFailuresRelFeather,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTrotor
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_trotor",
                    Units = "failure_enum",
                    Description = "Tail rotor transmission",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Trotor",
                    Id = DataRefId.OperationFailuresRelTrotor,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAntice
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_antice",
                    Units = "failure_enum",
                    Description = "Anti-ice",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Antice",
                    Id = DataRefId.OperationFailuresRelAntice,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceDetect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_detect",
                    Units = "failure_enum",
                    Description = "Ice detector",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Detect",
                    Id = DataRefId.OperationFailuresRelIceDetect,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePitotHeat1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_pitot_heat1",
                    Units = "failure_enum",
                    Description = "Pitot heat 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Pitot Heat1",
                    Id = DataRefId.OperationFailuresRelIcePitotHeat1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePitotHeat2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_pitot_heat2",
                    Units = "failure_enum",
                    Description = "Pitot heat 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Pitot Heat2",
                    Id = DataRefId.OperationFailuresRelIcePitotHeat2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceStaticHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_static_heat",
                    Units = "failure_enum",
                    Description = "heat 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Static Heat",
                    Id = DataRefId.OperationFailuresRelIceStaticHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceStaticHeat2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_static_heat2",
                    Units = "failure_enum",
                    Description = "heat 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Static Heat2",
                    Id = DataRefId.OperationFailuresRelIceStaticHeat2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceAOAHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_AOA_heat",
                    Units = "failure_enum",
                    Description = "AOA indicator heat",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice AOA Heat",
                    Id = DataRefId.OperationFailuresRelIceAOAHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceAOAHeat2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_AOA_heat2",
                    Units = "failure_enum",
                    Description = "AOA indicator heat",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice AOA Heat2",
                    Id = DataRefId.OperationFailuresRelIceAOAHeat2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceWindowHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_window_heat",
                    Units = "failure_enum",
                    Description = "Window Heat",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Window Heat",
                    Id = DataRefId.OperationFailuresRelIceWindowHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceSurfBoot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_surf_boot",
                    Units = "failure_enum",
                    Description = "Surface Boot - Deprecated - Do Not Use",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Surf Boot",
                    Id = DataRefId.OperationFailuresRelIceSurfBoot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceSurfHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_surf_heat",
                    Units = "failure_enum",
                    Description = "Surface Heat",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Surf Heat",
                    Id = DataRefId.OperationFailuresRelIceSurfHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceSurfHeat2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_surf_heat2",
                    Units = "failure_enum",
                    Description = "Surface Heat",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Surf Heat2",
                    Id = DataRefId.OperationFailuresRelIceSurfHeat2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceBrakeHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_brake_heat",
                    Units = "failure_enum",
                    Description = "Brakes anti-ice",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Brake Heat",
                    Id = DataRefId.OperationFailuresRelIceBrakeHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceAltAir1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_alt_air1",
                    Units = "failure_enum",
                    Description = "Alternate Air",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Alt Air1",
                    Id = DataRefId.OperationFailuresRelIceAltAir1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceAltAir2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_alt_air2",
                    Units = "failure_enum",
                    Description = "Alternate Air",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Alt Air2",
                    Id = DataRefId.OperationFailuresRelIceAltAir2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelVacuum
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vacuum",
                    Units = "failure_enum",
                    Description = "Vacuum System 1 - Pump Failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Vacuum",
                    Id = DataRefId.OperationFailuresRelVacuum,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelVacuum2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vacuum2",
                    Units = "failure_enum",
                    Description = "Vacuum System 2 - Pump Failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Vacuum2",
                    Id = DataRefId.OperationFailuresRelVacuum2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelElecGyr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_elec_gyr",
                    Units = "failure_enum",
                    Description = "Electric gyro system 1 - gyro motor Failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Elec Gyr",
                    Id = DataRefId.OperationFailuresRelElecGyr,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelElecGyr2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_elec_gyr2",
                    Units = "failure_enum",
                    Description = "Electric gyro system 2 - gyro motor Failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Elec Gyr2",
                    Id = DataRefId.OperationFailuresRelElecGyr2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPitot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pitot",
                    Units = "failure_enum",
                    Description = "Pitot 1 - Blockage",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pitot",
                    Id = DataRefId.OperationFailuresRelPitot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPitot2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pitot2",
                    Units = "failure_enum",
                    Description = "Pitot 2 - Blockage",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pitot2",
                    Id = DataRefId.OperationFailuresRelPitot2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStatic
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_static",
                    Units = "failure_enum",
                    Description = "1 - Blockage",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Static",
                    Id = DataRefId.OperationFailuresRelStatic,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStatic2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_static2",
                    Units = "failure_enum",
                    Description = "2 - Blockage",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Static2",
                    Id = DataRefId.OperationFailuresRelStatic2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStatic1Err
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_static1_err",
                    Units = "failure_enum",
                    Description = "system 1 - Error",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Static1err",
                    Id = DataRefId.OperationFailuresRelStatic1Err,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStatic2Err
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_static2_err",
                    Units = "failure_enum",
                    Description = "system 2 - Error",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Static2err",
                    Id = DataRefId.OperationFailuresRelStatic2Err,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGOat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_oat",
                    Units = "failure_enum",
                    Description = "OAT",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Oat",
                    Id = DataRefId.OperationFailuresRelGOat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGFuel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_fuel",
                    Units = "failure_enum",
                    Description = "fuel quantity",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Fuel",
                    Id = DataRefId.OperationFailuresRelGFuel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSsAsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_asi",
                    Units = "failure_enum",
                    Description = "Airspeed Indicator (Pilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ss Asi",
                    Id = DataRefId.OperationFailuresRelSsAsi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSsAhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_ahz",
                    Units = "failure_enum",
                    Description = "Artificial Horizon (Pilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ss Ahz",
                    Id = DataRefId.OperationFailuresRelSsAhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSsAlt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_alt",
                    Units = "failure_enum",
                    Description = "Altimeter (Pilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ss Alt",
                    Id = DataRefId.OperationFailuresRelSsAlt,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSsTsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_tsi",
                    Units = "failure_enum",
                    Description = "Turn indicator (Pilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ss Tsi",
                    Id = DataRefId.OperationFailuresRelSsTsi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSsDgy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_dgy",
                    Units = "failure_enum",
                    Description = "Directional Gyro (Pilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ss Dgy",
                    Id = DataRefId.OperationFailuresRelSsDgy,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSsVvi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_vvi",
                    Units = "failure_enum",
                    Description = "Vertical Velocity Indicator (Pilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ss VVI",
                    Id = DataRefId.OperationFailuresRelSsVvi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCopAsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_asi",
                    Units = "failure_enum",
                    Description = "Airspeed Indicator (Copilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Cop Asi",
                    Id = DataRefId.OperationFailuresRelCopAsi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCopAhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_ahz",
                    Units = "failure_enum",
                    Description = "Artificial Horizon (Copilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Cop Ahz",
                    Id = DataRefId.OperationFailuresRelCopAhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCopAlt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_alt",
                    Units = "failure_enum",
                    Description = "Altimeter (Copilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Cop Alt",
                    Id = DataRefId.OperationFailuresRelCopAlt,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCopTsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_tsi",
                    Units = "failure_enum",
                    Description = "Turn indicator (Copilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Cop Tsi",
                    Id = DataRefId.OperationFailuresRelCopTsi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCopDgy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_dgy",
                    Units = "failure_enum",
                    Description = "Directional Gyro (Copilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Cop Dgy",
                    Id = DataRefId.OperationFailuresRelCopDgy,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCopVvi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_vvi",
                    Units = "failure_enum",
                    Description = "Vertical Velocity Indicator (Copilot)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Cop VVI",
                    Id = DataRefId.OperationFailuresRelCopVvi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEfis1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_efis_1",
                    Units = "failure_enum",
                    Description = "Primary EFIS",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Efis1",
                    Id = DataRefId.OperationFailuresRelEfis1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEfis2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_efis_2",
                    Units = "failure_enum",
                    Description = "Secondary EFIS",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Efis2",
                    Id = DataRefId.OperationFailuresRelEfis2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAOA
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_AOA",
                    Units = "failure_enum",
                    Description = "AOA",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel AOA",
                    Id = DataRefId.OperationFailuresRelAOA,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStallWarn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_stall_warn",
                    Units = "failure_enum",
                    Description = "Stall warning has failed",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Stall Warn",
                    Id = DataRefId.OperationFailuresRelStallWarn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGearWarning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gear_warning",
                    Units = "failure_enum",
                    Description = "gear warning audio is broken",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gear Warning",
                    Id = DataRefId.OperationFailuresRelGearWarning,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelNavcom1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_navcom1",
                    Units = "failure_enum",
                    Description = "Nav and com 1 radio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Navcom1",
                    Id = DataRefId.OperationFailuresRelNavcom1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelNavcom2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_navcom2",
                    Units = "failure_enum",
                    Description = "Nav and com 2 radio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Navcom2",
                    Id = DataRefId.OperationFailuresRelNavcom2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelNav1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_nav1",
                    Units = "failure_enum",
                    Description = "Nav-1 radio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Nav1",
                    Id = DataRefId.OperationFailuresRelNav1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelNav2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_nav2",
                    Units = "failure_enum",
                    Description = "Nav-2 radio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Nav2",
                    Id = DataRefId.OperationFailuresRelNav2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCom1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_com1",
                    Units = "failure_enum",
                    Description = "Com-1 radio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Com1",
                    Id = DataRefId.OperationFailuresRelCom1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCom2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_com2",
                    Units = "failure_enum",
                    Description = "Com-2 radio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Com2",
                    Id = DataRefId.OperationFailuresRelCom2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAdf1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_adf1",
                    Units = "failure_enum",
                    Description = "ADF 1 (only one ADF failure in 830!)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Adf1",
                    Id = DataRefId.OperationFailuresRelAdf1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAdf2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_adf2",
                    Units = "failure_enum",
                    Description = "ADF 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Adf2",
                    Id = DataRefId.OperationFailuresRelAdf2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gps",
                    Units = "failure_enum",
                    Description = "GPS",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel GPS",
                    Id = DataRefId.OperationFailuresRelGps,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGps2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gps2",
                    Units = "failure_enum",
                    Description = "GPS",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel GPS2",
                    Id = DataRefId.OperationFailuresRelGps2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_dme",
                    Units = "failure_enum",
                    Description = "DME",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Dme",
                    Id = DataRefId.OperationFailuresRelDme,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelLoc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_loc",
                    Units = "failure_enum",
                    Description = "Localizer",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Loc",
                    Id = DataRefId.OperationFailuresRelLoc,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGls
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gls",
                    Units = "failure_enum",
                    Description = "Glide Slope",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gls",
                    Id = DataRefId.OperationFailuresRelGls,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gp",
                    Units = "failure_enum",
                    Description = "WAAS GPS receiver",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gp",
                    Id = DataRefId.OperationFailuresRelGp,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelXpndr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_xpndr",
                    Units = "failure_enum",
                    Description = "Transponder failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Xpndr",
                    Id = DataRefId.OperationFailuresRelXpndr,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMarker
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_marker",
                    Units = "failure_enum",
                    Description = "Marker Beacons",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Marker",
                    Id = DataRefId.OperationFailuresRelMarker,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRPMInd0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_RPM_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - rpm engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel RPM Ind0",
                    Id = DataRefId.OperationFailuresRelRPMInd0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRPMInd1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_RPM_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - rpm engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel RPM Ind1",
                    Id = DataRefId.OperationFailuresRelRPMInd1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelN1Ind0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_N1_ind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - n1 engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel N1ind0",
                    Id = DataRefId.OperationFailuresRelN1Ind0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelN1Ind1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_N1_ind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - n1 engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel N1ind1",
                    Id = DataRefId.OperationFailuresRelN1Ind1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelN2Ind0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_N2_ind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - n2 engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel N2ind0",
                    Id = DataRefId.OperationFailuresRelN2Ind0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelN2Ind1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_N2_ind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - n2 engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel N2ind1",
                    Id = DataRefId.OperationFailuresRelN2Ind1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMPInd0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_MP_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - mp engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel MP Ind0",
                    Id = DataRefId.OperationFailuresRelMPInd0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMPInd1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_MP_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - mp engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel MP Ind1",
                    Id = DataRefId.OperationFailuresRelMPInd1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTrqind0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_TRQind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - trq engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Trqind0",
                    Id = DataRefId.OperationFailuresRelTrqind0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelTrqind1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_TRQind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - trq engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Trqind1",
                    Id = DataRefId.OperationFailuresRelTrqind1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEprind0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_EPRind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - epr engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eprind0",
                    Id = DataRefId.OperationFailuresRelEprind0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEprind1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_EPRind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - epr engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eprind1",
                    Id = DataRefId.OperationFailuresRelEprind1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCHTInd0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_CHT_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - cht engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel CHT Ind0",
                    Id = DataRefId.OperationFailuresRelCHTInd0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelCHTInd1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_CHT_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - cht engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel CHT Ind1",
                    Id = DataRefId.OperationFailuresRelCHTInd1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIttind0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ITTind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - itt engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ittind0",
                    Id = DataRefId.OperationFailuresRelIttind0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIttind1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ITTind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - itt engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ittind1",
                    Id = DataRefId.OperationFailuresRelIttind1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEGTInd0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_EGT_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - egt engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel EGT Ind0",
                    Id = DataRefId.OperationFailuresRelEGTInd0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEGTInd1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_EGT_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - egt engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel EGT Ind1",
                    Id = DataRefId.OperationFailuresRelEGTInd1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFFInd0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_FF_ind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - ff engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel FF Ind0",
                    Id = DataRefId.OperationFailuresRelFFInd0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFFInd1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_FF_ind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - ff engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel FF Ind1",
                    Id = DataRefId.OperationFailuresRelFFInd1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFpInd0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fp_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Fuel Pressure 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fp Ind0",
                    Id = DataRefId.OperationFailuresRelFpInd0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFpInd1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fp_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Fuel Pressure 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fp Ind1",
                    Id = DataRefId.OperationFailuresRelFpInd1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpInd0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilp_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Oil Pressure 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilp Ind0",
                    Id = DataRefId.OperationFailuresRelOilpInd0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpInd1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilp_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Oil Pressure 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilp Ind1",
                    Id = DataRefId.OperationFailuresRelOilpInd1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOiltInd0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilt_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Oil Temperature 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilt Ind0",
                    Id = DataRefId.OperationFailuresRelOiltInd0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOiltInd1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilt_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Oil Temperature 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilt Ind1",
                    Id = DataRefId.OperationFailuresRelOiltInd1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelG430Gps1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g430_gps1",
                    Units = "failure_enum",
                    Description = "G430 GPS 1 Inop",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G430gps1",
                    Id = DataRefId.OperationFailuresRelG430Gps1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelG430Gps2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g430_gps2",
                    Units = "failure_enum",
                    Description = "G430 GPS 2 Inop",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G430gps2",
                    Id = DataRefId.OperationFailuresRelG430Gps2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelG430Rad1Tune
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g430_rad1_tune",
                    Units = "failure_enum",
                    Description = "G430 Nav/Com Tuner 1 Inop",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G430rad1tune",
                    Id = DataRefId.OperationFailuresRelG430Rad1Tune,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelG430Rad2Tune
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g430_rad2_tune",
                    Units = "failure_enum",
                    Description = "G430 Nav/Com Tuner 2 Inop",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G430rad2tune",
                    Id = DataRefId.OperationFailuresRelG430Rad2Tune,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGGia1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gia1",
                    Units = "failure_enum",
                    Description = "GIA 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Gia1",
                    Id = DataRefId.OperationFailuresRelGGia1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGGia2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gia2",
                    Units = "failure_enum",
                    Description = "GIA 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Gia2",
                    Id = DataRefId.OperationFailuresRelGGia2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGGea
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gea",
                    Units = "failure_enum",
                    Description = "gea",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Gea",
                    Id = DataRefId.OperationFailuresRelGGea,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAdcComp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_adc_comp",
                    Units = "failure_enum",
                    Description = "air data computer",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Adc Comp",
                    Id = DataRefId.OperationFailuresRelAdcComp,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGArthorz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_arthorz",
                    Units = "failure_enum",
                    Description = "AHRS",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Arthorz",
                    Id = DataRefId.OperationFailuresRelGArthorz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGAsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_asi",
                    Units = "failure_enum",
                    Description = "airspeed",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Asi",
                    Id = DataRefId.OperationFailuresRelGAsi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGAlt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_alt",
                    Units = "failure_enum",
                    Description = "altimeter",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Alt",
                    Id = DataRefId.OperationFailuresRelGAlt,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGMagmtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_magmtr",
                    Units = "failure_enum",
                    Description = "magnetometer",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Magmtr",
                    Id = DataRefId.OperationFailuresRelGMagmtr,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGVvi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_vvi",
                    Units = "failure_enum",
                    Description = "vvi",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G VVI",
                    Id = DataRefId.OperationFailuresRelGVvi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGNavrad1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_navrad1",
                    Units = "failure_enum",
                    Description = "nav radio 1 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_nav1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Navrad1",
                    Id = DataRefId.OperationFailuresRelGNavrad1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGNavrad2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_navrad2",
                    Units = "failure_enum",
                    Description = "nav radio 2 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_nav2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Navrad2",
                    Id = DataRefId.OperationFailuresRelGNavrad2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGComrad1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_comrad1",
                    Units = "failure_enum",
                    Description = "com radio 1 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_com1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Comrad1",
                    Id = DataRefId.OperationFailuresRelGComrad1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGComrad2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_comrad2",
                    Units = "failure_enum",
                    Description = "com radio 2 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_com2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Comrad2",
                    Id = DataRefId.OperationFailuresRelGComrad2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGXpndr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_xpndr",
                    Units = "failure_enum",
                    Description = "transponder removed from 10.00 - 10.36, compatibility only in 10.40+ - DO NOT USE - use rel_xpndr",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Xpndr",
                    Id = DataRefId.OperationFailuresRelGXpndr,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGGen1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gen1",
                    Units = "failure_enum",
                    Description = "generator amperage 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Gen1",
                    Id = DataRefId.OperationFailuresRelGGen1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGGen2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gen2",
                    Units = "failure_enum",
                    Description = "generator amperage 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Gen2",
                    Id = DataRefId.OperationFailuresRelGGen2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGBat1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_bat1",
                    Units = "failure_enum",
                    Description = "battery voltage 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Bat1",
                    Id = DataRefId.OperationFailuresRelGBat1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGBat2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_bat2",
                    Units = "failure_enum",
                    Description = "battery voltage 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Bat2",
                    Id = DataRefId.OperationFailuresRelGBat2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGBus1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_bus1",
                    Units = "failure_enum",
                    Description = "bus voltage 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Bus1",
                    Id = DataRefId.OperationFailuresRelGBus1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGBus2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_bus2",
                    Units = "failure_enum",
                    Description = "bus voltage 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Bus2",
                    Id = DataRefId.OperationFailuresRelGBus2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGMfd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_mfd",
                    Units = "failure_enum",
                    Description = "MFD screen failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Mfd",
                    Id = DataRefId.OperationFailuresRelGMfd,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGPfd
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_pfd",
                    Units = "failure_enum",
                    Description = "PFD screen failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Pfd",
                    Id = DataRefId.OperationFailuresRelGPfd,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGPfd2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_pfd2",
                    Units = "failure_enum",
                    Description = "PFD2 screen failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel G Pfd2",
                    Id = DataRefId.OperationFailuresRelGPfd2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMaglft0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT0",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Maglft0",
                    Id = DataRefId.OperationFailuresRelMaglft0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMaglft1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT1",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Maglft1",
                    Id = DataRefId.OperationFailuresRelMaglft1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMaglft2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT2",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Maglft2",
                    Id = DataRefId.OperationFailuresRelMaglft2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMaglft3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT3",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Maglft3",
                    Id = DataRefId.OperationFailuresRelMaglft3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMaglft4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT4",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Maglft4",
                    Id = DataRefId.OperationFailuresRelMaglft4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMaglft5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT5",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Maglft5",
                    Id = DataRefId.OperationFailuresRelMaglft5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMaglft6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT6",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Maglft6",
                    Id = DataRefId.OperationFailuresRelMaglft6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMaglft7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT7",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Maglft7",
                    Id = DataRefId.OperationFailuresRelMaglft7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMagrgt0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT0",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Magrgt0",
                    Id = DataRefId.OperationFailuresRelMagrgt0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMagrgt1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT1",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Magrgt1",
                    Id = DataRefId.OperationFailuresRelMagrgt1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMagrgt2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT2",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Magrgt2",
                    Id = DataRefId.OperationFailuresRelMagrgt2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMagrgt3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT3",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Magrgt3",
                    Id = DataRefId.OperationFailuresRelMagrgt3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMagrgt4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT4",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Magrgt4",
                    Id = DataRefId.OperationFailuresRelMagrgt4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMagrgt5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT5",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Magrgt5",
                    Id = DataRefId.OperationFailuresRelMagrgt5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMagrgt6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT6",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Magrgt6",
                    Id = DataRefId.OperationFailuresRelMagrgt6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMagrgt7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT7",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Magrgt7",
                    Id = DataRefId.OperationFailuresRelMagrgt7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfir0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir0",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 1 Fire",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfir0",
                    Id = DataRefId.OperationFailuresRelEngfir0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfir1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir1",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 2 Fire",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfir1",
                    Id = DataRefId.OperationFailuresRelEngfir1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfir2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir2",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 3 Fire",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfir2",
                    Id = DataRefId.OperationFailuresRelEngfir2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfir3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir3",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 4 Fire",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfir3",
                    Id = DataRefId.OperationFailuresRelEngfir3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfir4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir4",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 5 Fire",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfir4",
                    Id = DataRefId.OperationFailuresRelEngfir4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfir5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir5",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 6 Fire",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfir5",
                    Id = DataRefId.OperationFailuresRelEngfir5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfir6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir6",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 7 Fire",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfir6",
                    Id = DataRefId.OperationFailuresRelEngfir6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfir7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir7",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 8 Fire",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfir7",
                    Id = DataRefId.OperationFailuresRelEngfir7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfla0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla0",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 1 Flameout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfla0",
                    Id = DataRefId.OperationFailuresRelEngfla0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfla1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla1",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 2 Flameout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfla1",
                    Id = DataRefId.OperationFailuresRelEngfla1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfla2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla2",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 3 Flameout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfla2",
                    Id = DataRefId.OperationFailuresRelEngfla2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfla3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla3",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 4 Flameout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfla3",
                    Id = DataRefId.OperationFailuresRelEngfla3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfla4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla4",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 5 Flameout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfla4",
                    Id = DataRefId.OperationFailuresRelEngfla4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfla5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla5",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 6 Flameout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfla5",
                    Id = DataRefId.OperationFailuresRelEngfla5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfla6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla6",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 7 Flameout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfla6",
                    Id = DataRefId.OperationFailuresRelEngfla6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfla7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla7",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 8 Flameout",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfla7",
                    Id = DataRefId.OperationFailuresRelEngfla7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfai0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai0",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 1 loss of power without smoke",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfai0",
                    Id = DataRefId.OperationFailuresRelEngfai0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfai1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai1",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfai1",
                    Id = DataRefId.OperationFailuresRelEngfai1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfai2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai2",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfai2",
                    Id = DataRefId.OperationFailuresRelEngfai2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfai3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai3",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfai3",
                    Id = DataRefId.OperationFailuresRelEngfai3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfai4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai4",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfai4",
                    Id = DataRefId.OperationFailuresRelEngfai4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfai5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai5",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfai5",
                    Id = DataRefId.OperationFailuresRelEngfai5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfai6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai6",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfai6",
                    Id = DataRefId.OperationFailuresRelEngfai6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngfai7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai7",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engfai7",
                    Id = DataRefId.OperationFailuresRelEngfai7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngsep0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep0",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engsep0",
                    Id = DataRefId.OperationFailuresRelEngsep0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngsep1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep1",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engsep1",
                    Id = DataRefId.OperationFailuresRelEngsep1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngsep2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep2",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engsep2",
                    Id = DataRefId.OperationFailuresRelEngsep2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngsep3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep3",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engsep3",
                    Id = DataRefId.OperationFailuresRelEngsep3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngsep4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep4",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engsep4",
                    Id = DataRefId.OperationFailuresRelEngsep4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngsep5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep5",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engsep5",
                    Id = DataRefId.OperationFailuresRelEngsep5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngsep6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep6",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engsep6",
                    Id = DataRefId.OperationFailuresRelEngsep6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngsep7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep7",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Engsep7",
                    Id = DataRefId.OperationFailuresRelEngsep7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuepmp0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp0",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 1 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuepmp0",
                    Id = DataRefId.OperationFailuresRelFuepmp0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuepmp1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp1",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 2 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuepmp1",
                    Id = DataRefId.OperationFailuresRelFuepmp1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuepmp2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp2",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 3 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuepmp2",
                    Id = DataRefId.OperationFailuresRelFuepmp2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuepmp3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp3",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 4 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuepmp3",
                    Id = DataRefId.OperationFailuresRelFuepmp3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuepmp4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp4",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 5 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuepmp4",
                    Id = DataRefId.OperationFailuresRelFuepmp4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuepmp5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp5",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 6 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuepmp5",
                    Id = DataRefId.OperationFailuresRelFuepmp5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuepmp6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp6",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 7 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuepmp6",
                    Id = DataRefId.OperationFailuresRelFuepmp6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuepmp7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp7",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 8 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuepmp7",
                    Id = DataRefId.OperationFailuresRelFuepmp7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEleFuepmp0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp0",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 1 (electric driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ele Fuepmp0",
                    Id = DataRefId.OperationFailuresRelEleFuepmp0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEleFuepmp1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp1",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 2 (electric driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ele Fuepmp1",
                    Id = DataRefId.OperationFailuresRelEleFuepmp1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEleFuepmp2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp2",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 3 (electric driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ele Fuepmp2",
                    Id = DataRefId.OperationFailuresRelEleFuepmp2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEleFuepmp3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp3",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 4 (electric driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ele Fuepmp3",
                    Id = DataRefId.OperationFailuresRelEleFuepmp3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEleFuepmp4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp4",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 5 (electric driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ele Fuepmp4",
                    Id = DataRefId.OperationFailuresRelEleFuepmp4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEleFuepmp5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp5",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 6 (electric driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ele Fuepmp5",
                    Id = DataRefId.OperationFailuresRelEleFuepmp5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEleFuepmp6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp6",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 7 (electric driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ele Fuepmp6",
                    Id = DataRefId.OperationFailuresRelEleFuepmp6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEleFuepmp7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp7",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 8 (electric driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ele Fuepmp7",
                    Id = DataRefId.OperationFailuresRelEleFuepmp7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngLo0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo0",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 1 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eng Lo0",
                    Id = DataRefId.OperationFailuresRelEngLo0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngLo1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo1",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 2 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eng Lo1",
                    Id = DataRefId.OperationFailuresRelEngLo1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngLo2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo2",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 3 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eng Lo2",
                    Id = DataRefId.OperationFailuresRelEngLo2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngLo3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo3",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 4 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eng Lo3",
                    Id = DataRefId.OperationFailuresRelEngLo3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngLo4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo4",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 5 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eng Lo4",
                    Id = DataRefId.OperationFailuresRelEngLo4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngLo5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo5",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 6 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eng Lo5",
                    Id = DataRefId.OperationFailuresRelEngLo5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngLo6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo6",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 7 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eng Lo6",
                    Id = DataRefId.OperationFailuresRelEngLo6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelEngLo7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo7",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 8 (engine driven)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Eng Lo7",
                    Id = DataRefId.OperationFailuresRelEngLo7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAirres0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres0",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Airres0",
                    Id = DataRefId.OperationFailuresRelAirres0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAirres1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres1",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Airres1",
                    Id = DataRefId.OperationFailuresRelAirres1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAirres2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres2",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Airres2",
                    Id = DataRefId.OperationFailuresRelAirres2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAirres3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres3",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Airres3",
                    Id = DataRefId.OperationFailuresRelAirres3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAirres4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres4",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Airres4",
                    Id = DataRefId.OperationFailuresRelAirres4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAirres5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres5",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Airres5",
                    Id = DataRefId.OperationFailuresRelAirres5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAirres6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres6",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Airres6",
                    Id = DataRefId.OperationFailuresRelAirres6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAirres7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres7",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Airres7",
                    Id = DataRefId.OperationFailuresRelAirres7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelfl0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl0",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuelfl0",
                    Id = DataRefId.OperationFailuresRelFuelfl0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelfl1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl1",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuelfl1",
                    Id = DataRefId.OperationFailuresRelFuelfl1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelfl2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl2",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuelfl2",
                    Id = DataRefId.OperationFailuresRelFuelfl2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelfl3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl3",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuelfl3",
                    Id = DataRefId.OperationFailuresRelFuelfl3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelfl4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl4",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuelfl4",
                    Id = DataRefId.OperationFailuresRelFuelfl4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelfl5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl5",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuelfl5",
                    Id = DataRefId.OperationFailuresRelFuelfl5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelfl6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl6",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuelfl6",
                    Id = DataRefId.OperationFailuresRelFuelfl6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFuelfl7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl7",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fuelfl7",
                    Id = DataRefId.OperationFailuresRelFuelfl7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelComsta0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta0",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Comsta0",
                    Id = DataRefId.OperationFailuresRelComsta0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelComsta1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta1",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Comsta1",
                    Id = DataRefId.OperationFailuresRelComsta1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelComsta2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta2",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Comsta2",
                    Id = DataRefId.OperationFailuresRelComsta2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelComsta3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta3",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Comsta3",
                    Id = DataRefId.OperationFailuresRelComsta3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelComsta4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta4",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Comsta4",
                    Id = DataRefId.OperationFailuresRelComsta4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelComsta5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta5",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Comsta5",
                    Id = DataRefId.OperationFailuresRelComsta5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelComsta6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta6",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Comsta6",
                    Id = DataRefId.OperationFailuresRelComsta6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelComsta7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta7",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Comsta7",
                    Id = DataRefId.OperationFailuresRelComsta7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStartr0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr0",
                    Units = "failure_enum",
                    Description = "Starter - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Startr0",
                    Id = DataRefId.OperationFailuresRelStartr0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStartr1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr1",
                    Units = "failure_enum",
                    Description = "Starter - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Startr1",
                    Id = DataRefId.OperationFailuresRelStartr1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStartr2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr2",
                    Units = "failure_enum",
                    Description = "Starter - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Startr2",
                    Id = DataRefId.OperationFailuresRelStartr2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStartr3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr3",
                    Units = "failure_enum",
                    Description = "Starter - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Startr3",
                    Id = DataRefId.OperationFailuresRelStartr3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStartr4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr4",
                    Units = "failure_enum",
                    Description = "Starter - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Startr4",
                    Id = DataRefId.OperationFailuresRelStartr4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStartr5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr5",
                    Units = "failure_enum",
                    Description = "Starter - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Startr5",
                    Id = DataRefId.OperationFailuresRelStartr5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStartr6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr6",
                    Units = "failure_enum",
                    Description = "Starter - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Startr6",
                    Id = DataRefId.OperationFailuresRelStartr6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelStartr7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr7",
                    Units = "failure_enum",
                    Description = "Starter - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Startr7",
                    Id = DataRefId.OperationFailuresRelStartr7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIgnitr0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr0",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ignitr0",
                    Id = DataRefId.OperationFailuresRelIgnitr0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIgnitr1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr1",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ignitr1",
                    Id = DataRefId.OperationFailuresRelIgnitr1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIgnitr2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr2",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ignitr2",
                    Id = DataRefId.OperationFailuresRelIgnitr2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIgnitr3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr3",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ignitr3",
                    Id = DataRefId.OperationFailuresRelIgnitr3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIgnitr4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr4",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ignitr4",
                    Id = DataRefId.OperationFailuresRelIgnitr4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIgnitr5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr5",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ignitr5",
                    Id = DataRefId.OperationFailuresRelIgnitr5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIgnitr6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr6",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ignitr6",
                    Id = DataRefId.OperationFailuresRelIgnitr6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIgnitr7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr7",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ignitr7",
                    Id = DataRefId.OperationFailuresRelIgnitr7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHunsta0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta0",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 0",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hunsta0",
                    Id = DataRefId.OperationFailuresRelHunsta0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHunsta1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta1",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hunsta1",
                    Id = DataRefId.OperationFailuresRelHunsta1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHunsta2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta2",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hunsta2",
                    Id = DataRefId.OperationFailuresRelHunsta2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHunsta3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta3",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hunsta3",
                    Id = DataRefId.OperationFailuresRelHunsta3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHunsta4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta4",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hunsta4",
                    Id = DataRefId.OperationFailuresRelHunsta4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHunsta5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta5",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hunsta5",
                    Id = DataRefId.OperationFailuresRelHunsta5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHunsta6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta6",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hunsta6",
                    Id = DataRefId.OperationFailuresRelHunsta6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHunsta7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta7",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hunsta7",
                    Id = DataRefId.OperationFailuresRelHunsta7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelClonoz0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz0",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Clonoz0",
                    Id = DataRefId.OperationFailuresRelClonoz0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelClonoz1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz1",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Clonoz1",
                    Id = DataRefId.OperationFailuresRelClonoz1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelClonoz2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz2",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Clonoz2",
                    Id = DataRefId.OperationFailuresRelClonoz2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelClonoz3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz3",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Clonoz3",
                    Id = DataRefId.OperationFailuresRelClonoz3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelClonoz4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz4",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Clonoz4",
                    Id = DataRefId.OperationFailuresRelClonoz4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelClonoz5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz5",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Clonoz5",
                    Id = DataRefId.OperationFailuresRelClonoz5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelClonoz6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz6",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Clonoz6",
                    Id = DataRefId.OperationFailuresRelClonoz6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelClonoz7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz7",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Clonoz7",
                    Id = DataRefId.OperationFailuresRelClonoz7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHotsta0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta0",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 0",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hotsta0",
                    Id = DataRefId.OperationFailuresRelHotsta0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHotsta1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta1",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hotsta1",
                    Id = DataRefId.OperationFailuresRelHotsta1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHotsta2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta2",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hotsta2",
                    Id = DataRefId.OperationFailuresRelHotsta2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHotsta3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta3",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hotsta3",
                    Id = DataRefId.OperationFailuresRelHotsta3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHotsta4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta4",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hotsta4",
                    Id = DataRefId.OperationFailuresRelHotsta4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHotsta5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta5",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hotsta5",
                    Id = DataRefId.OperationFailuresRelHotsta5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHotsta6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta6",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hotsta6",
                    Id = DataRefId.OperationFailuresRelHotsta6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHotsta7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta7",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hotsta7",
                    Id = DataRefId.OperationFailuresRelHotsta7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRunitt0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT0",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Runitt0",
                    Id = DataRefId.OperationFailuresRelRunitt0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRunitt1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT1",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Runitt1",
                    Id = DataRefId.OperationFailuresRelRunitt1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRunitt2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT2",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Runitt2",
                    Id = DataRefId.OperationFailuresRelRunitt2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRunitt3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT3",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Runitt3",
                    Id = DataRefId.OperationFailuresRelRunitt3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRunitt4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT4",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Runitt4",
                    Id = DataRefId.OperationFailuresRelRunitt4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRunitt5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT5",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Runitt5",
                    Id = DataRefId.OperationFailuresRelRunitt5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRunitt6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT6",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Runitt6",
                    Id = DataRefId.OperationFailuresRelRunitt6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRunitt7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT7",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Runitt7",
                    Id = DataRefId.OperationFailuresRelRunitt7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenera0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera0",
                    Units = "failure_enum",
                    Description = "Generator - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Genera0",
                    Id = DataRefId.OperationFailuresRelGenera0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenera1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera1",
                    Units = "failure_enum",
                    Description = "Generator - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Genera1",
                    Id = DataRefId.OperationFailuresRelGenera1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenera2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera2",
                    Units = "failure_enum",
                    Description = "Generator - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Genera2",
                    Id = DataRefId.OperationFailuresRelGenera2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenera3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera3",
                    Units = "failure_enum",
                    Description = "Generator - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Genera3",
                    Id = DataRefId.OperationFailuresRelGenera3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenera4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera4",
                    Units = "failure_enum",
                    Description = "Generator - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Genera4",
                    Id = DataRefId.OperationFailuresRelGenera4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenera5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera5",
                    Units = "failure_enum",
                    Description = "Generator - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Genera5",
                    Id = DataRefId.OperationFailuresRelGenera5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenera6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera6",
                    Units = "failure_enum",
                    Description = "Generator - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Genera6",
                    Id = DataRefId.OperationFailuresRelGenera6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenera7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera7",
                    Units = "failure_enum",
                    Description = "Generator - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Genera7",
                    Id = DataRefId.OperationFailuresRelGenera7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBatter0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter0",
                    Units = "failure_enum",
                    Description = "Battery 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Batter0",
                    Id = DataRefId.OperationFailuresRelBatter0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBatter1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter1",
                    Units = "failure_enum",
                    Description = "Battery 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Batter1",
                    Id = DataRefId.OperationFailuresRelBatter1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBatter2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter2",
                    Units = "failure_enum",
                    Description = "Battery 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Batter2",
                    Id = DataRefId.OperationFailuresRelBatter2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBatter3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter3",
                    Units = "failure_enum",
                    Description = "Battery 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Batter3",
                    Id = DataRefId.OperationFailuresRelBatter3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBatter4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter4",
                    Units = "failure_enum",
                    Description = "Battery 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Batter4",
                    Id = DataRefId.OperationFailuresRelBatter4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBatter5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter5",
                    Units = "failure_enum",
                    Description = "Battery 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Batter5",
                    Id = DataRefId.OperationFailuresRelBatter5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBatter6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter6",
                    Units = "failure_enum",
                    Description = "Battery 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Batter6",
                    Id = DataRefId.OperationFailuresRelBatter6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelBatter7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter7",
                    Units = "failure_enum",
                    Description = "Battery 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Batter7",
                    Id = DataRefId.OperationFailuresRelBatter7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGovnr0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_0",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Govnr0",
                    Id = DataRefId.OperationFailuresRelGovnr0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGovnr1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_1",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Govnr1",
                    Id = DataRefId.OperationFailuresRelGovnr1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGovnr2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_2",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Govnr2",
                    Id = DataRefId.OperationFailuresRelGovnr2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGovnr3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_3",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Govnr3",
                    Id = DataRefId.OperationFailuresRelGovnr3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGovnr4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_4",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Govnr4",
                    Id = DataRefId.OperationFailuresRelGovnr4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGovnr5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_5",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Govnr5",
                    Id = DataRefId.OperationFailuresRelGovnr5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGovnr6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_6",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Govnr6",
                    Id = DataRefId.OperationFailuresRelGovnr6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGovnr7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_7",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Govnr7",
                    Id = DataRefId.OperationFailuresRelGovnr7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFadec0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_0",
                    Units = "failure_enum",
                    Description = "Fadec - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fadec0",
                    Id = DataRefId.OperationFailuresRelFadec0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFadec1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_1",
                    Units = "failure_enum",
                    Description = "Fadec - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fadec1",
                    Id = DataRefId.OperationFailuresRelFadec1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFadec2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_2",
                    Units = "failure_enum",
                    Description = "Fadec - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fadec2",
                    Id = DataRefId.OperationFailuresRelFadec2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFadec3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_3",
                    Units = "failure_enum",
                    Description = "Fadec - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fadec3",
                    Id = DataRefId.OperationFailuresRelFadec3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFadec4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_4",
                    Units = "failure_enum",
                    Description = "Fadec - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fadec4",
                    Id = DataRefId.OperationFailuresRelFadec4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFadec5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_5",
                    Units = "failure_enum",
                    Description = "Fadec - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fadec5",
                    Id = DataRefId.OperationFailuresRelFadec5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFadec6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_6",
                    Units = "failure_enum",
                    Description = "Fadec - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fadec6",
                    Id = DataRefId.OperationFailuresRelFadec6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelFadec7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_7",
                    Units = "failure_enum",
                    Description = "Fadec - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Fadec7",
                    Id = DataRefId.OperationFailuresRelFadec7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpmp0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp0",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilpmp0",
                    Id = DataRefId.OperationFailuresRelOilpmp0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpmp1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp1",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilpmp1",
                    Id = DataRefId.OperationFailuresRelOilpmp1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpmp2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp2",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilpmp2",
                    Id = DataRefId.OperationFailuresRelOilpmp2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpmp3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp3",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilpmp3",
                    Id = DataRefId.OperationFailuresRelOilpmp3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpmp4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp4",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilpmp4",
                    Id = DataRefId.OperationFailuresRelOilpmp4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpmp5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp5",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilpmp5",
                    Id = DataRefId.OperationFailuresRelOilpmp5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpmp6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp6",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilpmp6",
                    Id = DataRefId.OperationFailuresRelOilpmp6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelOilpmp7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp7",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Oilpmp7",
                    Id = DataRefId.OperationFailuresRelOilpmp7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelChipde0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde0",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Chipde0",
                    Id = DataRefId.OperationFailuresRelChipde0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelChipde1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde1",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Chipde1",
                    Id = DataRefId.OperationFailuresRelChipde1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelChipde2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde2",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Chipde2",
                    Id = DataRefId.OperationFailuresRelChipde2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelChipde3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde3",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Chipde3",
                    Id = DataRefId.OperationFailuresRelChipde3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelChipde4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde4",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Chipde4",
                    Id = DataRefId.OperationFailuresRelChipde4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelChipde5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde5",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Chipde5",
                    Id = DataRefId.OperationFailuresRelChipde5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelChipde6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde6",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Chipde6",
                    Id = DataRefId.OperationFailuresRelChipde6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelChipde7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde7",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Chipde7",
                    Id = DataRefId.OperationFailuresRelChipde7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpfin0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin0",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpfin0",
                    Id = DataRefId.OperationFailuresRelPrpfin0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpfin1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin1",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpfin1",
                    Id = DataRefId.OperationFailuresRelPrpfin1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpfin2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin2",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpfin2",
                    Id = DataRefId.OperationFailuresRelPrpfin2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpfin3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin3",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpfin3",
                    Id = DataRefId.OperationFailuresRelPrpfin3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpfin4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin4",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpfin4",
                    Id = DataRefId.OperationFailuresRelPrpfin4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpfin5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin5",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpfin5",
                    Id = DataRefId.OperationFailuresRelPrpfin5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpfin6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin6",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpfin6",
                    Id = DataRefId.OperationFailuresRelPrpfin6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpfin7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin7",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpfin7",
                    Id = DataRefId.OperationFailuresRelPrpfin7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpcrs0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs0",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpcrs0",
                    Id = DataRefId.OperationFailuresRelPrpcrs0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpcrs1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs1",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpcrs1",
                    Id = DataRefId.OperationFailuresRelPrpcrs1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpcrs2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs2",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpcrs2",
                    Id = DataRefId.OperationFailuresRelPrpcrs2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpcrs3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs3",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpcrs3",
                    Id = DataRefId.OperationFailuresRelPrpcrs3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpcrs4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs4",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpcrs4",
                    Id = DataRefId.OperationFailuresRelPrpcrs4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpcrs5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs5",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpcrs5",
                    Id = DataRefId.OperationFailuresRelPrpcrs5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpcrs6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs6",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpcrs6",
                    Id = DataRefId.OperationFailuresRelPrpcrs6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPrpcrs7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs7",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Prpcrs7",
                    Id = DataRefId.OperationFailuresRelPrpcrs7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPshaft0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft0",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pshaft0",
                    Id = DataRefId.OperationFailuresRelPshaft0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPshaft1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft1",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pshaft1",
                    Id = DataRefId.OperationFailuresRelPshaft1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPshaft2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft2",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pshaft2",
                    Id = DataRefId.OperationFailuresRelPshaft2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPshaft3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft3",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pshaft3",
                    Id = DataRefId.OperationFailuresRelPshaft3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPshaft4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft4",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pshaft4",
                    Id = DataRefId.OperationFailuresRelPshaft4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPshaft5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft5",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pshaft5",
                    Id = DataRefId.OperationFailuresRelPshaft5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPshaft6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft6",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pshaft6",
                    Id = DataRefId.OperationFailuresRelPshaft6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPshaft7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft7",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pshaft7",
                    Id = DataRefId.OperationFailuresRelPshaft7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSeize0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_0",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Seize0",
                    Id = DataRefId.OperationFailuresRelSeize0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSeize1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_1",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Seize1",
                    Id = DataRefId.OperationFailuresRelSeize1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSeize2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_2",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Seize2",
                    Id = DataRefId.OperationFailuresRelSeize2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSeize3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_3",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Seize3",
                    Id = DataRefId.OperationFailuresRelSeize3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSeize4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_4",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Seize4",
                    Id = DataRefId.OperationFailuresRelSeize4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSeize5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_5",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Seize5",
                    Id = DataRefId.OperationFailuresRelSeize5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSeize6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_6",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Seize6",
                    Id = DataRefId.OperationFailuresRelSeize6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelSeize7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_7",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Seize7",
                    Id = DataRefId.OperationFailuresRelSeize7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevers0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers0",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revers0",
                    Id = DataRefId.OperationFailuresRelRevers0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevers1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers1",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revers1",
                    Id = DataRefId.OperationFailuresRelRevers1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevers2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers2",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revers2",
                    Id = DataRefId.OperationFailuresRelRevers2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevers3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers3",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revers3",
                    Id = DataRefId.OperationFailuresRelRevers3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevers4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers4",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revers4",
                    Id = DataRefId.OperationFailuresRelRevers4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevers5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers5",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revers5",
                    Id = DataRefId.OperationFailuresRelRevers5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevers6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers6",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revers6",
                    Id = DataRefId.OperationFailuresRelRevers6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevers7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers7",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revers7",
                    Id = DataRefId.OperationFailuresRelRevers7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevdep0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep0",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revdep0",
                    Id = DataRefId.OperationFailuresRelRevdep0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevdep1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep1",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revdep1",
                    Id = DataRefId.OperationFailuresRelRevdep1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevdep2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep2",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revdep2",
                    Id = DataRefId.OperationFailuresRelRevdep2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevdep3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep3",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revdep3",
                    Id = DataRefId.OperationFailuresRelRevdep3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevdep4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep4",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revdep4",
                    Id = DataRefId.OperationFailuresRelRevdep4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevdep5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep5",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revdep5",
                    Id = DataRefId.OperationFailuresRelRevdep5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevdep6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep6",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revdep6",
                    Id = DataRefId.OperationFailuresRelRevdep6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevdep7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep7",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revdep7",
                    Id = DataRefId.OperationFailuresRelRevdep7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevloc0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc0",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revloc0",
                    Id = DataRefId.OperationFailuresRelRevloc0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevloc1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc1",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revloc1",
                    Id = DataRefId.OperationFailuresRelRevloc1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevloc2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc2",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revloc2",
                    Id = DataRefId.OperationFailuresRelRevloc2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevloc3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc3",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revloc3",
                    Id = DataRefId.OperationFailuresRelRevloc3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevloc4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc4",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revloc4",
                    Id = DataRefId.OperationFailuresRelRevloc4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevloc5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc5",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revloc5",
                    Id = DataRefId.OperationFailuresRelRevloc5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevloc6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc6",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revloc6",
                    Id = DataRefId.OperationFailuresRelRevloc6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelRevloc7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc7",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Revloc7",
                    Id = DataRefId.OperationFailuresRelRevloc7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAftbur0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur0",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Aftbur0",
                    Id = DataRefId.OperationFailuresRelAftbur0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAftbur1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur1",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Aftbur1",
                    Id = DataRefId.OperationFailuresRelAftbur1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAftbur2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur2",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Aftbur2",
                    Id = DataRefId.OperationFailuresRelAftbur2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAftbur3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur3",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Aftbur3",
                    Id = DataRefId.OperationFailuresRelAftbur3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAftbur4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur4",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Aftbur4",
                    Id = DataRefId.OperationFailuresRelAftbur4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAftbur5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur5",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Aftbur5",
                    Id = DataRefId.OperationFailuresRelAftbur5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAftbur6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur6",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Aftbur6",
                    Id = DataRefId.OperationFailuresRelAftbur6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelAftbur7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur7",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Aftbur7",
                    Id = DataRefId.OperationFailuresRelAftbur7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceInletHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Inlet Heat",
                    Id = DataRefId.OperationFailuresRelIceInletHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceInletHeat2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat2",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Inlet Heat2",
                    Id = DataRefId.OperationFailuresRelIceInletHeat2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceInletHeat3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat3",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Inlet Heat3",
                    Id = DataRefId.OperationFailuresRelIceInletHeat3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceInletHeat4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat4",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Inlet Heat4",
                    Id = DataRefId.OperationFailuresRelIceInletHeat4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceInletHeat5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat5",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Inlet Heat5",
                    Id = DataRefId.OperationFailuresRelIceInletHeat5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceInletHeat6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat6",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Inlet Heat6",
                    Id = DataRefId.OperationFailuresRelIceInletHeat6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceInletHeat7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat7",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Inlet Heat7",
                    Id = DataRefId.OperationFailuresRelIceInletHeat7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIceInletHeat8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat8",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Inlet Heat8",
                    Id = DataRefId.OperationFailuresRelIceInletHeat8,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePropHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Prop Heat",
                    Id = DataRefId.OperationFailuresRelIcePropHeat,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePropHeat2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat2",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Prop Heat2",
                    Id = DataRefId.OperationFailuresRelIcePropHeat2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePropHeat3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat3",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Prop Heat3",
                    Id = DataRefId.OperationFailuresRelIcePropHeat3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePropHeat4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat4",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Prop Heat4",
                    Id = DataRefId.OperationFailuresRelIcePropHeat4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePropHeat5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat5",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 5",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Prop Heat5",
                    Id = DataRefId.OperationFailuresRelIcePropHeat5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePropHeat6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat6",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 6",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Prop Heat6",
                    Id = DataRefId.OperationFailuresRelIcePropHeat6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePropHeat7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat7",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 7",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Prop Heat7",
                    Id = DataRefId.OperationFailuresRelIcePropHeat7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelIcePropHeat8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat8",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 8",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Ice Prop Heat8",
                    Id = DataRefId.OperationFailuresRelIcePropHeat8,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelWing1l
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing1L",
                    Units = "failure_enum",
                    Description = "Wing separations - left wing 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Wing1l",
                    Id = DataRefId.OperationFailuresRelWing1l,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelWing1r
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing1R",
                    Units = "failure_enum",
                    Description = "Wing separations - right wing 1",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Wing1r",
                    Id = DataRefId.OperationFailuresRelWing1r,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelWing2l
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing2L",
                    Units = "failure_enum",
                    Description = "Wing separations - left wing 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Wing2l",
                    Id = DataRefId.OperationFailuresRelWing2l,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelWing2r
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing2R",
                    Units = "failure_enum",
                    Description = "Wing separations - right wing 2",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Wing2r",
                    Id = DataRefId.OperationFailuresRelWing2r,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelWing3l
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing3L",
                    Units = "failure_enum",
                    Description = "Wing separations - left wing 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Wing3l",
                    Id = DataRefId.OperationFailuresRelWing3l,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelWing3r
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing3R",
                    Units = "failure_enum",
                    Description = "Wing separations - right wing 3",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Wing3r",
                    Id = DataRefId.OperationFailuresRelWing3r,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelWing4l
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing4L",
                    Units = "failure_enum",
                    Description = "Wing separations - left wing 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Wing4l",
                    Id = DataRefId.OperationFailuresRelWing4l,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelWing4r
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing4R",
                    Units = "failure_enum",
                    Description = "Wing separations - right wing 4",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Wing4r",
                    Id = DataRefId.OperationFailuresRelWing4r,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHstbl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hstbL",
                    Units = "failure_enum",
                    Description = "Left horizontal stabilizer separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hstbl",
                    Id = DataRefId.OperationFailuresRelHstbl,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelHstbr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hstbR",
                    Units = "failure_enum",
                    Description = "Right horizontal stabilizer separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Hstbr",
                    Id = DataRefId.OperationFailuresRelHstbr,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelVstb1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vstb1",
                    Units = "failure_enum",
                    Description = "Vertical stabilizer 1 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Vstb1",
                    Id = DataRefId.OperationFailuresRelVstb1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelVstb2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vstb2",
                    Units = "failure_enum",
                    Description = "Vertical stabilizer 2 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Vstb2",
                    Id = DataRefId.OperationFailuresRelVstb2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMwing1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing1",
                    Units = "failure_enum",
                    Description = "Misc wing 1 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Mwing1",
                    Id = DataRefId.OperationFailuresRelMwing1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMwing2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing2",
                    Units = "failure_enum",
                    Description = "Misc wing 2 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Mwing2",
                    Id = DataRefId.OperationFailuresRelMwing2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMwing3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing3",
                    Units = "failure_enum",
                    Description = "Misc wing 3 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Mwing3",
                    Id = DataRefId.OperationFailuresRelMwing3,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMwing4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing4",
                    Units = "failure_enum",
                    Description = "Misc wing 4 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Mwing4",
                    Id = DataRefId.OperationFailuresRelMwing4,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMwing5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing5",
                    Units = "failure_enum",
                    Description = "Misc wing 5 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Mwing5",
                    Id = DataRefId.OperationFailuresRelMwing5,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMwing6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing6",
                    Units = "failure_enum",
                    Description = "Misc wing 6 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Mwing6",
                    Id = DataRefId.OperationFailuresRelMwing6,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMwing7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing7",
                    Units = "failure_enum",
                    Description = "Misc wing 7 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Mwing7",
                    Id = DataRefId.OperationFailuresRelMwing7,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelMwing8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing8",
                    Units = "failure_enum",
                    Description = "Misc wing 8 separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Mwing8",
                    Id = DataRefId.OperationFailuresRelMwing8,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl1a
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl1a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 1a Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl1a",
                    Id = DataRefId.OperationFailuresRelPyl1a,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl2a
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl2a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 2a Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl2a",
                    Id = DataRefId.OperationFailuresRelPyl2a,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl3a
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl3a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 3a Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl3a",
                    Id = DataRefId.OperationFailuresRelPyl3a,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl4a
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl4a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 4a Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl4a",
                    Id = DataRefId.OperationFailuresRelPyl4a,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl5a
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl5a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 5a Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl5a",
                    Id = DataRefId.OperationFailuresRelPyl5a,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl6a
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl6a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 6a Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl6a",
                    Id = DataRefId.OperationFailuresRelPyl6a,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl7a
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl7a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 7a Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl7a",
                    Id = DataRefId.OperationFailuresRelPyl7a,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl8a
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl8a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 8a Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl8a",
                    Id = DataRefId.OperationFailuresRelPyl8a,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl1b
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl1b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 1b Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl1b",
                    Id = DataRefId.OperationFailuresRelPyl1b,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl2b
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl2b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 2b Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl2b",
                    Id = DataRefId.OperationFailuresRelPyl2b,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl3b
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl3b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 3b Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl3b",
                    Id = DataRefId.OperationFailuresRelPyl3b,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl4b
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl4b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 4b Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl4b",
                    Id = DataRefId.OperationFailuresRelPyl4b,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl5b
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl5b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 5b Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl5b",
                    Id = DataRefId.OperationFailuresRelPyl5b,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl6b
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl6b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 6b Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl6b",
                    Id = DataRefId.OperationFailuresRelPyl6b,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl7b
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl7b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 7b Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl7b",
                    Id = DataRefId.OperationFailuresRelPyl7b,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelPyl8b
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl8b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 8b Separate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Pyl8b",
                    Id = DataRefId.OperationFailuresRelPyl8b,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenEsys
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen_esys",
                    Units = "failure_enum",
                    Description = "General electrical failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gen Esys",
                    Id = DataRefId.OperationFailuresRelGenEsys,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelGenAvio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen_avio",
                    Units = "failure_enum",
                    Description = "General avionics bus failure",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Gen Avio",
                    Id = DataRefId.OperationFailuresRelGenAvio,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelApu
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_apu",
                    Units = "failure_enum",
                    Description = "APU failure to start or run",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Apu",
                    Id = DataRefId.OperationFailuresRelApu,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationFailuresRelApuFire
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/failures/rel_apu_fire",
                    Units = "failure_enum",
                    Description = "APU catastrophic failure with fire",
                    Frequency = DefaultFrequency,
                    Name = "Operation Failures Rel Apu Fire",
                    Id = DataRefId.OperationFailuresRelApuFire,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationG430G430IsVloc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/g430/G430_is_vloc",
                    Units = "boolean",
                    Description = "If true, vertical guidance is a glide slope - otherwise it is a GPS vertical guidance indicator.  Comes from the physical units!",
                    Frequency = DefaultFrequency,
                    Name = "Operation G430g430is Vloc",
                    Id = DataRefId.OperationG430G430IsVloc,
                    Writable = false,
                    DataType = "int[2]"
                };
            }
        }
        private DataRefElement OperationMiscDebugNetwork
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/misc/debug_network",
                    Units = "boolean",
                    Description = "Enable logging of network data",
                    Frequency = DefaultFrequency,
                    Name = "Operation Misc Debug Network",
                    Id = DataRefId.OperationMiscDebugNetwork,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationMiscFrameRatePeriod
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/misc/frame_rate_period",
                    Units = "secs",
                    Description = "The frame rate period. Use the reciprocal to get the frame rate (e.g. 1/mnw.prd).  Writable via override_timestep in 11.10",
                    Frequency = DefaultFrequency,
                    Name = "Operation Misc Frame Rate Period",
                    Id = DataRefId.OperationMiscFrameRatePeriod,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationMiscTimeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/misc/time_ratio",
                    Units = "secs",
                    Description = "This is how close XP time matches real time. Ideal ratio is 1.  NOTE: in 930 and later time ratio is always 1.0.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Misc Time Ratio",
                    Id = DataRefId.OperationMiscTimeRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideJoystick
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_joystick",
                    Units = "boolean",
                    Description = "Override control of the joystick deflections (overrides stick, yoke, pedals, keys, mouse, and auto-coordination)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Joystick",
                    Id = DataRefId.OperationOverrideOverrideJoystick,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideArtstab
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_artstab",
                    Units = "boolean",
                    Description = "Override control of the artificial stability system",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Artstab",
                    Id = DataRefId.OperationOverrideOverrideArtstab,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideFlightcontrol
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_flightcontrol",
                    Units = "boolean",
                    Description = "Override all parts of the flight system at once",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Flightcontrol",
                    Id = DataRefId.OperationOverrideOverrideFlightcontrol,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideGearbrake
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_gearbrake",
                    Units = "boolean",
                    Description = "Override gear and brake status",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Gearbrake",
                    Id = DataRefId.OperationOverrideOverrideGearbrake,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverridePlanepath
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_planepath",
                    Units = "boolean",
                    Description = "Override position updates of this plane",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Planepath",
                    Id = DataRefId.OperationOverrideOverridePlanepath,
                    Writable = true,
                    DataType = "int[20]"
                };
            }
        }
        private DataRefElement OperationOverrideOverridePlaneAiAutopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_plane_ai_autopilot",
                    Units = "boolean",
                    Description = "Override the AI's control of the plane via the autopilot",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Plane AI Autopilot",
                    Id = DataRefId.OperationOverrideOverridePlaneAiAutopilot,
                    Writable = true,
                    DataType = "int[20]"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideNavneedles
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_navneedles",
                    Units = "boolean",
                    Description = "Override navcom radios",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Navneedles",
                    Id = DataRefId.OperationOverrideOverrideNavneedles,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideNav1Needles
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_nav1_needles",
                    Units = "boolean",
                    Description = "Override nav1 receiver",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Nav1needles",
                    Id = DataRefId.OperationOverrideOverrideNav1Needles,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideNav2Needles
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_nav2_needles",
                    Units = "boolean",
                    Description = "Override nav2 receiver",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Nav2needles",
                    Id = DataRefId.OperationOverrideOverrideNav2Needles,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideAdf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_adf",
                    Units = "boolean",
                    Description = "Override ADF radios",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Adf",
                    Id = DataRefId.OperationOverrideOverrideAdf,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_dme",
                    Units = "boolean",
                    Description = "Override DME distances",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Dme",
                    Id = DataRefId.OperationOverrideOverrideDme,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideGps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_gps",
                    Units = "boolean",
                    Description = "Override GPS computer",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override GPS",
                    Id = DataRefId.OperationOverrideOverrideGps,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideNavHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_nav_heading",
                    Units = "boolean",
                    Description = "Override raw heading flown by nav (for GPS that fly by roll commands)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Nav Heading",
                    Id = DataRefId.OperationOverrideOverrideNavHeading,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideFlightdir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_flightdir",
                    Units = "boolean",
                    Description = "Override flight director needles (both axes)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Flightdir",
                    Id = DataRefId.OperationOverrideOverrideFlightdir,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideFlightdirPtch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_flightdir_ptch",
                    Units = "boolean",
                    Description = "Override flight director needles (pitch only)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Flightdir Ptch",
                    Id = DataRefId.OperationOverrideOverrideFlightdirPtch,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideFlightdirRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_flightdir_roll",
                    Units = "boolean",
                    Description = "Override flight director needles (roll only)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Flightdir Roll",
                    Id = DataRefId.OperationOverrideOverrideFlightdirRoll,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideCamera
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_camera",
                    Units = "boolean",
                    Description = "Override camera control.  NOTE: DO NOT USE, USE XPLMCAMERA!!",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Camera",
                    Id = DataRefId.OperationOverrideOverrideCamera,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideAnnunciators
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_annunciators",
                    Units = "boolean",
                    Description = "Override annunciators",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Annunciators",
                    Id = DataRefId.OperationOverrideOverrideAnnunciators,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideAutopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_autopilot",
                    Units = "boolean",
                    Description = "Override the autopilot's brains",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Autopilot",
                    Id = DataRefId.OperationOverrideOverrideAutopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideJoystickHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_joystick_heading",
                    Units = "boolean",
                    Description = "Override just heading (yaw) control (disables auto-coordination). Use yoke_heading_ratio.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Joystick Heading",
                    Id = DataRefId.OperationOverrideOverrideJoystickHeading,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideJoystickPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_joystick_pitch",
                    Units = "boolean",
                    Description = "Override just pitch control. Use yoke_pitch_ratio.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Joystick Pitch",
                    Id = DataRefId.OperationOverrideOverrideJoystickPitch,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideJoystickRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_joystick_roll",
                    Units = "boolean",
                    Description = "Override just roll control. Use yoke_roll_ratio.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Joystick Roll",
                    Id = DataRefId.OperationOverrideOverrideJoystickRoll,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideThrottles
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_throttles",
                    Units = "boolean",
                    Description = "Override the throttles. Use ENGN_thro_use to control them.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Throttles",
                    Id = DataRefId.OperationOverrideOverrideThrottles,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverridePropPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_prop_pitch",
                    Units = "boolean",
                    Description = "Override the prop pitch.  Use POINT_pitch_deg_use to edit.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Prop Pitch",
                    Id = DataRefId.OperationOverrideOverridePropPitch,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverridePropMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_prop_mode",
                    Units = "boolean",
                    Description = "Override the prop mode.  Use ENGN_propmode to edit.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Prop Mode",
                    Id = DataRefId.OperationOverrideOverridePropMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideMixture
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_mixture",
                    Units = "boolean",
                    Description = "Override the mixture controls.  Use ENGN_mixt to edit.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Mixture",
                    Id = DataRefId.OperationOverrideOverrideMixture,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideGroundplane
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_groundplane",
                    Units = "boolean",
                    Description = "Override ground interactions (see sim/flightmodel/ground) - in v11 this was gone until 11.30.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Groundplane",
                    Id = DataRefId.OperationOverrideOverrideGroundplane,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideFmsAdvance
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_fms_advance",
                    Units = "boolean",
                    Description = "Override the FMS going to the next waypoint.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Fms Advance",
                    Id = DataRefId.OperationOverrideOverrideFmsAdvance,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideFuelFlow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_fuel_flow",
                    Units = "boolean",
                    Description = "overrides fuel flow variable sim/flightmodel/engine/ENGN_FF_",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Fuel Flow",
                    Id = DataRefId.OperationOverrideOverrideFuelFlow,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideIttEgt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_itt_egt",
                    Units = "boolean",
                    Description = "overrides engine temp vars sim/flightmodel/engine/ENGN_EGT_c and ENGN_ITT_c",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Itt Egt",
                    Id = DataRefId.OperationOverrideOverrideIttEgt,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideChtOilt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_cht_oilt",
                    Units = "boolean",
                    Description = "overrides engine temp vars sim/flightmodel/engine/ENGN_CHT_c and ENGN_oilT_c",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Cht Oilt",
                    Id = DataRefId.OperationOverrideOverrideChtOilt,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideIas
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_ias",
                    Units = "boolean",
                    Description = "overrides indicated airspeed dataref, so it is no longer update 1:1 from calibrated airspeed. Plugin can introduce installation error to indicated airspeed",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Ias",
                    Id = DataRefId.OperationOverrideOverrideIas,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideControlSurfaces
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_control_surfaces",
                    Units = "boolean",
                    Description = "overrides individual control surfaces, e.g. sim/flightmodel/controls/lail1def",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Control Surfaces",
                    Id = DataRefId.OperationOverrideOverrideControlSurfaces,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideEngines
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_engines",
                    Units = "boolean",
                    Description = "overrides all engine calculations - write to LMN and g_nrml/side/axil.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Engines",
                    Id = DataRefId.OperationOverrideOverrideEngines,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideTorqueMotors
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_torque_motors",
                    Units = "boolean",
                    Description = "overrides all engine calculations but not the prop - write the torque your motor generates while the prop will still be simulated by X-Plane",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Torque Motors",
                    Id = DataRefId.OperationOverrideOverrideTorqueMotors,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideForces
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_forces",
                    Units = "boolean",
                    Description = "overrides all force calculations - write to LMN and g_nrml/side/axil.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Forces",
                    Id = DataRefId.OperationOverrideOverrideForces,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideWingForces
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_wing_forces",
                    Units = "boolean",
                    Description = "overrides all wing calculations - write to aero LMN and g_nrml/side/axil.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Wing Forces",
                    Id = DataRefId.OperationOverrideOverrideWingForces,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideEngineForces
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_engine_forces",
                    Units = "boolean",
                    Description = "overrides all engine calculations - write to prop LMN and g_nrml/side/axil.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Engine Forces",
                    Id = DataRefId.OperationOverrideOverrideEngineForces,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideGearForces
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_gear_forces",
                    Units = "boolean",
                    Description = "overrides all gear calculations - write to gear LMN and g_nrml/side/axil.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Gear Forces",
                    Id = DataRefId.OperationOverrideOverrideGearForces,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideBoats
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_boats",
                    Units = "boolean",
                    Description = "overrides speed, heading, and rocking of boats. index 0=carrier, 1=frigate",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Boats",
                    Id = DataRefId.OperationOverrideOverrideBoats,
                    Writable = true,
                    DataType = "int[2]"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideClouds
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_clouds",
                    Units = "boolean",
                    Description = "overrides building and drawing of clouds as well as white-out-in-cloud effects",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Clouds",
                    Id = DataRefId.OperationOverrideOverrideClouds,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideWheelSteer
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_wheel_steer",
                    Units = "boolean",
                    Description = "overrides the steering of individual gear from tiller/rudder.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Wheel Steer",
                    Id = DataRefId.OperationOverrideOverrideWheelSteer,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideAirportLites
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_airport_lites",
                    Units = "boolean",
                    Description = "overrides when the airport lites go on and off.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Airport Lites",
                    Id = DataRefId.OperationOverrideOverrideAirportLites,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideFuelSystem
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_fuel_system",
                    Units = "boolean",
                    Description = "this override turns off transfer and dump and lets the plugin decide if the engine gets fuel",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Fuel System",
                    Id = DataRefId.OperationOverrideOverrideFuelSystem,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideTCAS
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_TCAS",
                    Units = "boolean",
                    Description = "this override lets third party add-ons write to the TCAS source data array so you can have plugin controlled instances as TCAS targets. Only writeable by the plugin that has the AI planes acquired.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override TCAS",
                    Id = DataRefId.OperationOverrideOverrideTCAS,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideMultiplayerMapLayer
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_multiplayer_map_layer",
                    Units = "boolean",
                    Description = "this override lets third party add-ons turn off X-Plane's map layer that shows icons for other planes. This allows the plugin to supply their own custom map layer and not conflict with X-Plane. Only writeable by the plugin that has also set override_TCAS.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Multiplayer Map Layer",
                    Id = DataRefId.OperationOverrideOverrideMultiplayerMapLayer,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideToeBrakes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_toe_brakes",
                    Units = "boolean",
                    Description = "this override gives plugins control of sim/cockpit2/controls/left_brake_ratio and right_brake_ratio",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Toe Brakes",
                    Id = DataRefId.OperationOverrideOverrideToeBrakes,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideGroundTrucks
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_ground_trucks",
                    Units = "boolean",
                    Description = "set this override to disable Austin's trucks.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Ground Trucks",
                    Id = DataRefId.OperationOverrideOverrideGroundTrucks,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideTimestep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_timestep",
                    Units = "boolean",
                    Description = "this overrides the sim's time step.  when enabled, xtim.prd_sim, sim/operation/misc/frame_rate_period is plugin-writable",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Timestep",
                    Id = DataRefId.OperationOverrideOverrideTimestep,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverridePressurization
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_pressurization",
                    Units = "boolean",
                    Description = "override the sims pressurization control, so a plugin can control cabin pressurization itself.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Pressurization",
                    Id = DataRefId.OperationOverrideOverridePressurization,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideOxygenSystem
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_oxygen_system",
                    Units = "boolean",
                    Description = "override the sims crew and passenger oxygen system, so a plugin can control the oxygen system itself",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Oxygen System",
                    Id = DataRefId.OperationOverrideOverrideOxygenSystem,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationOverrideOverrideSlungLoadSize
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/override/override_slung_load_size",
                    Units = "boolean",
                    Description = "override slung load size calculation - makes sim/flightmodel/misc/jett_size writable.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Override Override Slung Load Size",
                    Id = DataRefId.OperationOverrideOverrideSlungLoadSize,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsStartupRunning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/startup_running",
                    Units = "boolean",
                    Description = "Start up with the plane running?",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Startup Running",
                    Id = DataRefId.OperationPrefsStartupRunning,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsWarnOverspeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_overspeed",
                    Units = "boolean",
                    Description = "Warn if we exceed max airframe speed",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Warn Overspeed",
                    Id = DataRefId.OperationPrefsWarnOverspeed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsWarnOvergforce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_overgforce",
                    Units = "boolean",
                    Description = "Warn if we exceed max g-forces on aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Warn Overgforce",
                    Id = DataRefId.OperationPrefsWarnOvergforce,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsWarnOverspeedFlaps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_overspeed_flaps",
                    Units = "boolean",
                    Description = "Warn if we exceed max flap extended speed",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Warn Overspeed Flaps",
                    Id = DataRefId.OperationPrefsWarnOverspeedFlaps,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsWarnOverspeedGear
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_overspeed_gear",
                    Units = "boolean",
                    Description = "Warn if we exceed max gear deployed speed",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Warn Overspeed Gear",
                    Id = DataRefId.OperationPrefsWarnOverspeedGear,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsResetOnCrash
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/reset_on_crash",
                    Units = "boolean",
                    Description = "On crash, do we reset the AC to the nearest airport? - gone in v11, read only dref returns false for compatibility.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Reset On Crash",
                    Id = DataRefId.OperationPrefsResetOnCrash,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsWarnNonobviousStuff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_nonobvious_stuff",
                    Units = "boolean",
                    Description = "Show text warning for otherwise hard to see things like carb-icing?",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Warn Nonobvious Stuff",
                    Id = DataRefId.OperationPrefsWarnNonobviousStuff,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsTextOut
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/text_out",
                    Units = "boolean",
                    Description = "show text ATC messages?",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Text Out",
                    Id = DataRefId.OperationPrefsTextOut,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsReplayMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/replay_mode",
                    Units = "enum",
                    Description = "Are we in replay mode?",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Replay Mode",
                    Id = DataRefId.OperationPrefsReplayMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsAiFliesAircraft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/ai_flies_aircraft",
                    Units = "boolean",
                    Description = "Controls whether the AI controls the user's plane",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs AI Flies Aircraft",
                    Id = DataRefId.OperationPrefsAiFliesAircraft,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsUsingExperimentalFm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/using_experimental_fm",
                    Units = "boolean",
                    Description = "True if the user has enabled the experimental flight model.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Using Experimental Fm",
                    Id = DataRefId.OperationPrefsUsingExperimentalFm,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsMiscLanguage
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/misc/language",
                    Units = "enum",
                    Description = "Current language",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Misc Language",
                    Id = DataRefId.OperationPrefsMiscLanguage,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationPrefsMiscHasLuaAlloc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/prefs/misc/has_lua_alloc",
                    Units = "bool",
                    Description = "Returns true if the sim provides a low-mem lua allocator via inter-plugin messaging.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Prefs Misc Has Lua Alloc",
                    Id = DataRefId.OperationPrefsMiscHasLuaAlloc,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationSoundHasSound
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/has_sound",
                    Units = "boolean",
                    Description = "Does this machine have sound hardware that X-Plane understands?",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Has Sound",
                    Id = DataRefId.OperationSoundHasSound,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationSoundHasSpeechSynth
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/has_speech_synth",
                    Units = "boolean",
                    Description = "Does this machine have speech synth capabilities?",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Has Speech Synth",
                    Id = DataRefId.OperationSoundHasSpeechSynth,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationSoundSoundOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/sound_on",
                    Units = "boolean",
                    Description = "Is sound on (set by user)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Sound On",
                    Id = DataRefId.OperationSoundSoundOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationSoundSpeechOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/speech_on",
                    Units = "boolean",
                    Description = "Is speech synth on (set by user)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Speech On",
                    Id = DataRefId.OperationSoundSpeechOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationSoundMasterVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/master_volume_ratio",
                    Units = "0-1",
                    Description = "Master Volume",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Master Volume Ratio",
                    Id = DataRefId.OperationSoundMasterVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundExteriorVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/exterior_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Exterior Volume Ratio",
                    Id = DataRefId.OperationSoundExteriorVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundInteriorVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/interior_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Interior Volume Ratio",
                    Id = DataRefId.OperationSoundInteriorVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundCopilotVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/copilot_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Copilot Volume Ratio",
                    Id = DataRefId.OperationSoundCopilotVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundRadioVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/radio_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for the com radios, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Radio Volume Ratio",
                    Id = DataRefId.OperationSoundRadioVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundEnviroVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/enviro_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Enviro Volume Ratio",
                    Id = DataRefId.OperationSoundEnviroVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundUiVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/ui_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Ui Volume Ratio",
                    Id = DataRefId.OperationSoundUiVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundEngineVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/engine_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Engine Volume Ratio",
                    Id = DataRefId.OperationSoundEngineVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundPropVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/prop_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for propeller sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Prop Volume Ratio",
                    Id = DataRefId.OperationSoundPropVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundGroundVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/ground_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for ground contact effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Ground Volume Ratio",
                    Id = DataRefId.OperationSoundGroundVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundWeatherVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/weather_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for weather sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Weather Volume Ratio",
                    Id = DataRefId.OperationSoundWeatherVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundWarningVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/warning_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for warning systems, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Warning Volume Ratio",
                    Id = DataRefId.OperationSoundWarningVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundFanVolumeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/fan_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for the avionics fan, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Fan Volume Ratio",
                    Id = DataRefId.OperationSoundFanVolumeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundInsideRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/inside_ratio",
                    Units = "0-1",
                    Description = "1 if we are in this space, 0 if outside, and a fraction as we transition through the borer region",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Inside Ratio",
                    Id = DataRefId.OperationSoundInsideRatio,
                    Writable = false,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement OperationSoundInsideAny
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/inside_any",
                    Units = "boolean",
                    Description = "True if the camera is inside ANY of the defined sound volumes for the aircraft.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Inside Any",
                    Id = DataRefId.OperationSoundInsideAny,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationSoundUsersCanopyOpenRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/users_canopy_open_ratio",
                    Units = "ratio",
                    Description = "Canopy position: 0 = closed, 1 = open - these ALWAYS reflect the USER's plane (even when used on an AI) so they are appropriate for SOUND MIXING.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Users Canopy Open Ratio",
                    Id = DataRefId.OperationSoundUsersCanopyOpenRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement OperationSoundUsersDoorOpenRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/sound/users_door_open_ratio",
                    Units = "ratio",
                    Description = "How open is the door, 0 = closed, 1 = open - these ALWAYS reflect the USER's plane (even when used on an AI) so they are appropriate for SOUND MIXING.",
                    Frequency = DefaultFrequency,
                    Name = "Operation Sound Users Door Open Ratio",
                    Id = DataRefId.OperationSoundUsersDoorOpenRatio,
                    Writable = false,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement OperationWindowsSystemWindow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/windows/system_window",
                    Units = "HWND",
                    Description = "This is X-Plane's system native window as an int (either an HWND or WindowRef pre 102)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Windows System Window",
                    Id = DataRefId.OperationWindowsSystemWindow,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement OperationWindowsSystemWindow64
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/operation/windows/system_window_64",
                    Units = "HWND",
                    Description = "This is X-Plane's system native window as an array of two ints - low 32 bits first (either an HWND or WindowRef)",
                    Frequency = DefaultFrequency,
                    Name = "Operation Windows System Window64",
                    Id = DataRefId.OperationWindowsSystemWindow64,
                    Writable = false,
                    DataType = "int[2]"
                };
            }
        }
        private DataRefElement TestTestFloat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/test/test_float",
                    Units = "ratio",
                    Description = "this test dataref is used internally for testing our models",
                    Frequency = DefaultFrequency,
                    Name = "Test Test Float",
                    Id = DataRefId.TestTestFloat,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeTimerIsRunningSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/timer_is_running_sec",
                    Units = "boolean",
                    Description = "Is the timer running?",
                    Frequency = DefaultFrequency,
                    Name = "Time Timer Is Running Sec",
                    Id = DataRefId.TimeTimerIsRunningSec,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement TimeTotalRunningTimeSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/total_running_time_sec",
                    Units = "seconds",
                    Description = "Total time the sim has been up",
                    Frequency = DefaultFrequency,
                    Name = "Time Total Running Time Sec",
                    Id = DataRefId.TimeTotalRunningTimeSec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeTotalFlightTimeSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/total_flight_time_sec",
                    Units = "seconds",
                    Description = "Total time since the flight got reset by something",
                    Frequency = DefaultFrequency,
                    Name = "Time Total Flight Time Sec",
                    Id = DataRefId.TimeTotalFlightTimeSec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeTimerElapsedTimeSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/timer_elapsed_time_sec",
                    Units = "seconds",
                    Description = "Total time elapsed on the timer",
                    Frequency = DefaultFrequency,
                    Name = "Time Timer Elapsed Time Sec",
                    Id = DataRefId.TimeTimerElapsedTimeSec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeLocalTimeSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/local_time_sec",
                    Units = "seconds",
                    Description = "Local time  (seconds since midnight??)",
                    Frequency = DefaultFrequency,
                    Name = "Time Local Time Sec",
                    Id = DataRefId.TimeLocalTimeSec,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeZuluTimeSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/zulu_time_sec",
                    Units = "seconds",
                    Description = "Zulu time  (seconds since midnight??)",
                    Frequency = DefaultFrequency,
                    Name = "Time Zulu Time Sec",
                    Id = DataRefId.TimeZuluTimeSec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeLocalDateDays
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/local_date_days",
                    Units = "days",
                    Description = "Date in days since January 1st",
                    Frequency = DefaultFrequency,
                    Name = "Time Local Date Days",
                    Id = DataRefId.TimeLocalDateDays,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement TimeUseSystemTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/use_system_time",
                    Units = "boolean",
                    Description = "Use system date and time for local time",
                    Frequency = DefaultFrequency,
                    Name = "Time Use System Time",
                    Id = DataRefId.TimeUseSystemTime,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement TimePaused
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/paused",
                    Units = "boolean",
                    Description = "Is the sim paused?  Use cmd keys to change this.",
                    Frequency = DefaultFrequency,
                    Name = "Time Paused",
                    Id = DataRefId.TimePaused,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement TimeSimSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/sim_speed",
                    Units = "ratio",
                    Description = "This is the multiplier for real-time...1 = realtime, 2 = 2x, 0 = paused, etc.",
                    Frequency = DefaultFrequency,
                    Name = "Time Sim Speed",
                    Id = DataRefId.TimeSimSpeed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement TimeSimSpeedActual
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/sim_speed_actual",
                    Units = "ratio",
                    Description = "The actual time-speed increase the sim has achieved - takes into account fps limiting.",
                    Frequency = DefaultFrequency,
                    Name = "Time Sim Speed Actual",
                    Id = DataRefId.TimeSimSpeedActual,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeSimSpeedActualOgl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/sim_speed_actual_ogl",
                    Units = "ratio",
                    Description = "The actual time-speed increase the sim has achieved - takes into account fps limiting and time dilation if fps<19.",
                    Frequency = DefaultFrequency,
                    Name = "Time Sim Speed Actual Ogl",
                    Id = DataRefId.TimeSimSpeedActualOgl,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeGroundSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/ground_speed",
                    Units = "ratio",
                    Description = "This is the multiplier on ground speed, for faster travel via double-distance",
                    Frequency = DefaultFrequency,
                    Name = "Time Ground Speed",
                    Id = DataRefId.TimeGroundSpeed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement TimeGroundSpeedFlt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/ground_speed_flt",
                    Units = "ratio",
                    Description = "This is the multiplier on ground speed, as float value, for faster travel via double-distance",
                    Frequency = DefaultFrequency,
                    Name = "Time Ground Speed Flt",
                    Id = DataRefId.TimeGroundSpeedFlt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeHobbsTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/hobbs_time",
                    Units = "seconds",
                    Description = "elapsed time on the Hobbs meter",
                    Frequency = DefaultFrequency,
                    Name = "Time Hobbs Time",
                    Id = DataRefId.TimeHobbsTime,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeIsInReplay
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/is_in_replay",
                    Units = "boolean",
                    Description = "true if we are in replay mode, false if we are flying",
                    Frequency = DefaultFrequency,
                    Name = "Time Is In Replay",
                    Id = DataRefId.TimeIsInReplay,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement TimeFrameratePeriod
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/framerate_period",
                    Units = "seconds",
                    Description = "Smoothed time to draw each full sim frame in seconds.  This is 1.0 / FPS.",
                    Frequency = DefaultFrequency,
                    Name = "Time Framerate Period",
                    Id = DataRefId.TimeFrameratePeriod,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement TimeGpuTimePerFrameSecApprox
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/time/gpu_time_per_frame_sec_approx",
                    Units = "seconds",
                    Description = "This is an approximate estimate of GPU time spent per each frame in seconds.  Note that it can be RADICALLY wrong if anything is done wrong by plugins or the driver is weird.  It's for entertainment value only!!!",
                    Frequency = DefaultFrequency,
                    Name = "Time Gpu Time Per Frame Sec Approx",
                    Id = DataRefId.TimeGpuTimePerFrameSecApprox,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private StringDataRefElement VersionSimBuildString
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/version/sim_build_string",
                    StringLength = 256,
                    Frequency = DefaultFrequency,
                    Name = "Version Sim Build String",
                    Id = DataRefId.VersionSimBuildString,
                    Writable = false,
                    DataType = "byte[256]"
                };
            }
        }
        private StringDataRefElement VersionXplmBuildString
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/version/xplm_build_string",
                    StringLength = 256,
                    Frequency = DefaultFrequency,
                    Name = "Version Xplm Build String",
                    Id = DataRefId.VersionXplmBuildString,
                    Writable = false,
                    DataType = "byte[256]"
                };
            }
        }
        private DataRefElement VersionXplaneeInternalVersion
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/version/xplanee_internal_version",
                    Units = "integer",
                    Description = "This is the internal build number - it is a unique integer that always increases and is unique with each beta.  For example, 10.51b5 might be 105105.  There is no guarantee that the build numbe (last 2 digits) are in sync with the official beta number.",
                    Frequency = DefaultFrequency,
                    Name = "Version Xplanee Internal Version",
                    Id = DataRefId.VersionXplaneeInternalVersion,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement VersionXplaneInternalVersion
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/version/xplane_internal_version",
                    Units = "integer",
                    Description = "This is the internal build number - it is a unique integer that always increases and is unique with each beta.  For example, 10.51b5 might be 105105.  There is no guarantee that the build numbe (last 2 digits) are in sync with the official beta number.",
                    Frequency = DefaultFrequency,
                    Name = "Version Xplane Internal Version",
                    Id = DataRefId.VersionXplaneInternalVersion,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeaponsWeaponCount
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/weapon_count",
                    Units = "int",
                    Description = "This is the number of weapons available via datarefs.",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Weapon Count",
                    Id = DataRefId.WeaponsWeaponCount,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeaponsType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/type",
                    Units = "enum",
                    Description = "(V10 style!) For the geometry we scan right into the acf structure unused array-spaces.",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Type",
                    Id = DataRefId.WeaponsType,
                    Writable = true,
                    DataType = "int[25]"
                };
            }
        }
        private DataRefElement WeaponsFreeFlyer
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/free_flyer",
                    Units = "enum",
                    Description = "(V10 style!) Weapon can go fly free...",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Free Flyer",
                    Id = DataRefId.WeaponsFreeFlyer,
                    Writable = false,
                    DataType = "int[25]"
                };
            }
        }
        private DataRefElement WeaponsActionMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/action_mode",
                    Units = "enum",
                    Description = "(V10 style!) 0 = In carriage/still in the gun/reloaded, 1 = firing, and 2 = destroyed",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Action Mode",
                    Id = DataRefId.WeaponsActionMode,
                    Writable = false,
                    DataType = "int[25]"
                };
            }
        }
        private DataRefElement WeaponsXWpnAtt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/x_wpn_att",
                    Units = "???",
                    Description = "This allows us to use our drawing, smoothing, editing, s-t, normal-vector, plotting, etc.",
                    Frequency = DefaultFrequency,
                    Name = "Weapons X Wpn Att",
                    Id = DataRefId.WeaponsXWpnAtt,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsYWpnAtt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/y_wpn_att",
                    Units = "???",
                    Description = "Code to do the weapons as well as everything else.",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Y Wpn Att",
                    Id = DataRefId.WeaponsYWpnAtt,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsZWpnAtt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/z_wpn_att",
                    Units = "float",
                    Description = "(placeholder) ",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Z Wpn Att",
                    Id = DataRefId.WeaponsZWpnAtt,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsCgy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/cgY",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Cgy",
                    Id = DataRefId.WeaponsCgy,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsCgz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/cgZ",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Cgz",
                    Id = DataRefId.WeaponsCgz,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsLasRange
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/las_range",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Las Range",
                    Id = DataRefId.WeaponsLasRange,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsConvRange
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/conv_range",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Conv Range",
                    Id = DataRefId.WeaponsConvRange,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsBulRoundsPerSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/bul_rounds_per_sec",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Bul Rounds Per Sec",
                    Id = DataRefId.WeaponsBulRoundsPerSec,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsBulRounds
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/bul_rounds",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Bul Rounds",
                    Id = DataRefId.WeaponsBulRounds,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsBulMuzzleSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/bul_muzzle_speed",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Bul Muzzle Speed",
                    Id = DataRefId.WeaponsBulMuzzleSpeed,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsBulArea
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/bul_area",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Bul Area",
                    Id = DataRefId.WeaponsBulArea,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsAddedMass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/added_mass",
                    Units = "???",
                    Description = "Mass in addition to ammo... like the gun itself, and bomb racks.",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Added Mass",
                    Id = DataRefId.WeaponsAddedMass,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsTotalWeaponMassMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/total_weapon_mass_max",
                    Units = "???",
                    Description = "Warhead and casing, fuel and tank",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Total Weapon Mass Max",
                    Id = DataRefId.WeaponsTotalWeaponMassMax,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsFuelWarheadMassMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/fuel_warhead_mass_max",
                    Units = "???",
                    Description = "Remember we can have drop tanks",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Fuel Warhead Mass Max",
                    Id = DataRefId.WeaponsFuelWarheadMassMax,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsWarheadType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/warhead_type",
                    Units = "enum",
                    Description = "(V10 style!) Conventional or nuke",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Warhead Type",
                    Id = DataRefId.WeaponsWarheadType,
                    Writable = true,
                    DataType = "int[25]"
                };
            }
        }
        private DataRefElement WeaponsMisDragCo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_drag_co",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Drag Co",
                    Id = DataRefId.WeaponsMisDragCo,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisDragChuteS
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_drag_chute_S",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Drag Chute S",
                    Id = DataRefId.WeaponsMisDragChuteS,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisConeWidth
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_cone_width",
                    Units = "???",
                    Description = "For heat or radar-guided, you must keep the target within this cone to track him",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Cone Width",
                    Id = DataRefId.WeaponsMisConeWidth,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisCratPerDegBore
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_crat_per_deg_bore",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Crat Per Deg Bore",
                    Id = DataRefId.WeaponsMisCratPerDegBore,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisCratPerDegpersecBore
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_crat_per_degpersec_bore",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Crat Per Degpersec Bore",
                    Id = DataRefId.WeaponsMisCratPerDegpersecBore,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisCratPerDegpersec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_crat_per_degpersec",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Crat Per Degpersec",
                    Id = DataRefId.WeaponsMisCratPerDegpersec,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsGunDelPsiDegMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/gun_del_psi_deg_max",
                    Units = "???",
                    Description = "Aimable guns for c130 Spectre, etc",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Gun Del Psi Deg Max",
                    Id = DataRefId.WeaponsGunDelPsiDegMax,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsGunDelTheDegMax
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/gun_del_the_deg_max",
                    Units = "???",
                    Description = "Aimable guns for c130 Spectre, etc",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Gun Del The Deg Max",
                    Id = DataRefId.WeaponsGunDelTheDegMax,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsSFrn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/s_frn",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons S Frn",
                    Id = DataRefId.WeaponsSFrn,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsSSid
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/s_sid",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons S Sid",
                    Id = DataRefId.WeaponsSSid,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsSTop
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/s_top",
                    Units = "???",
                    Description = "Area",
                    Frequency = DefaultFrequency,
                    Name = "Weapons S Top",
                    Id = DataRefId.WeaponsSTop,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsXBodyAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/X_body_aero",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons X Body Aero",
                    Id = DataRefId.WeaponsXBodyAero,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsYBodyAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/Y_body_aero",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Y Body Aero",
                    Id = DataRefId.WeaponsYBodyAero,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsZBodyAero
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/Z_body_aero",
                    Units = "???",
                    Description = "Centroid",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Z Body Aero",
                    Id = DataRefId.WeaponsZBodyAero,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsJxxUnitmass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/Jxx_unitmass",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Jxx Unitmass",
                    Id = DataRefId.WeaponsJxxUnitmass,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsJyyUnitmass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/Jyy_unitmass",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Jyy Unitmass",
                    Id = DataRefId.WeaponsJyyUnitmass,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsJzzUnitmass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/Jzz_unitmass",
                    Units = "???",
                    Description = "MI",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Jzz Unitmass",
                    Id = DataRefId.WeaponsJzzUnitmass,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsTargetIndex
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/target_index",
                    Units = "int",
                    Description = "Target index",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Target Index",
                    Id = DataRefId.WeaponsTargetIndex,
                    Writable = true,
                    DataType = "int[25]"
                };
            }
        }
        private DataRefElement WeaponsTargLat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/targ_lat",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Targ Lat",
                    Id = DataRefId.WeaponsTargLat,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsTargLon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/targ_lon",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Targ Lon",
                    Id = DataRefId.WeaponsTargLon,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsTargH
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/targ_h",
                    Units = "???",
                    Description = "Bomb targets",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Targ H",
                    Id = DataRefId.WeaponsTargH,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsDelPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/del_psi",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Del Psi",
                    Id = DataRefId.WeaponsDelPsi,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsDelThe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/del_the",
                    Units = "???",
                    Description = "Delta to target, for data output",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Del The",
                    Id = DataRefId.WeaponsDelThe,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsRuddRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/rudd_rat",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Rudd Rat",
                    Id = DataRefId.WeaponsRuddRat,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsElevRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/elev_rat",
                    Units = "???",
                    Description = "Rudder and elevator steering inputs",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Elev Rat",
                    Id = DataRefId.WeaponsElevRat,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsVMsc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/V_msc",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons V Msc",
                    Id = DataRefId.WeaponsVMsc,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsAVMsc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/AV_msc",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons AV Msc",
                    Id = DataRefId.WeaponsAVMsc,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsDistTarg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/dist_targ",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Dist Targ",
                    Id = DataRefId.WeaponsDistTarg,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsDistPoint
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/dist_point",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Dist Point",
                    Id = DataRefId.WeaponsDistPoint,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsTimePoint
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/time_point",
                    Units = "???",
                    Description = "Speed and dist to target for data output",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Time Point",
                    Id = DataRefId.WeaponsTimePoint,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsFxAxis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/fx_axis",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Fx Axis",
                    Id = DataRefId.WeaponsFxAxis,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsFyAxis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/fy_axis",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Fy Axis",
                    Id = DataRefId.WeaponsFyAxis,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsFzAxis
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/fz_axis",
                    Units = "???",
                    Description = "Flight-status",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Fz Axis",
                    Id = DataRefId.WeaponsFzAxis,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsVx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/vx",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Vx",
                    Id = DataRefId.WeaponsVx,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsVy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/vy",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Vy",
                    Id = DataRefId.WeaponsVy,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsVz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/vz",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Vz",
                    Id = DataRefId.WeaponsVz,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/x",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons X",
                    Id = DataRefId.WeaponsX,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/y",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Y",
                    Id = DataRefId.WeaponsY,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/z",
                    Units = "???",
                    Description = "Flight-status",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Z",
                    Id = DataRefId.WeaponsZ,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsL
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/L",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons L",
                    Id = DataRefId.WeaponsL,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/M",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons M",
                    Id = DataRefId.WeaponsM,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsN
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/N",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons N",
                    Id = DataRefId.WeaponsN,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsPrad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/Prad",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Prad",
                    Id = DataRefId.WeaponsPrad,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsQrad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/Qrad",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Qrad",
                    Id = DataRefId.WeaponsQrad,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsRrad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/Rrad",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Rrad",
                    Id = DataRefId.WeaponsRrad,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsThe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/the",
                    Units = "Deg",
                    Description = "Angle relative to the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Weapons The",
                    Id = DataRefId.WeaponsThe,
                    Writable = false,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/psi",
                    Units = "Deg",
                    Description = "Angle relative to the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Psi",
                    Id = DataRefId.WeaponsPsi,
                    Writable = false,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsPhi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/phi",
                    Units = "Deg",
                    Description = "Angle relative to the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Phi",
                    Id = DataRefId.WeaponsPhi,
                    Writable = false,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsNextBullTime
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/next_bull_time",
                    Units = "???",
                    Description = "For guns, this is the next fire time",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Next Bull Time",
                    Id = DataRefId.WeaponsNextBullTime,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsTotalWeaponMassNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/total_weapon_mass_now",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Total Weapon Mass Now",
                    Id = DataRefId.WeaponsTotalWeaponMassNow,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsFuelWarheadMassNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/fuel_warhead_mass_now",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Fuel Warhead Mass Now",
                    Id = DataRefId.WeaponsFuelWarheadMassNow,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisThrust1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_thrust1",
                    Units = "???",
                    Description = "delay",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Thrust1",
                    Id = DataRefId.WeaponsMisThrust1,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisThrust2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_thrust2",
                    Units = "???",
                    Description = "boost",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Thrust2",
                    Id = DataRefId.WeaponsMisThrust2,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisThrust3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_thrust3",
                    Units = "???",
                    Description = "sustain",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Thrust3",
                    Id = DataRefId.WeaponsMisThrust3,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisDuration1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_duration1",
                    Units = "???",
                    Description = "delay",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Duration1",
                    Id = DataRefId.WeaponsMisDuration1,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisDuration2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_duration2",
                    Units = "???",
                    Description = "boost",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Duration2",
                    Id = DataRefId.WeaponsMisDuration2,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsMisDuration3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/mis_duration3",
                    Units = "???",
                    Description = "sustain",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Mis Duration3",
                    Id = DataRefId.WeaponsMisDuration3,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsQ1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/q1",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Q1",
                    Id = DataRefId.WeaponsQ1,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsQ2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/q2",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Q2",
                    Id = DataRefId.WeaponsQ2,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsQ3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/q3",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Q3",
                    Id = DataRefId.WeaponsQ3,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsQ4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/q4",
                    Units = "float",
                    Description = "(placeholder)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Q4",
                    Id = DataRefId.WeaponsQ4,
                    Writable = true,
                    DataType = "float[25]"
                };
            }
        }
        private DataRefElement WeaponsArmed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/armed",
                    Units = "enum",
                    Description = "0 = safe (will NOT explode), 1 = armed (WILL explode)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Armed",
                    Id = DataRefId.WeaponsArmed,
                    Writable = true,
                    DataType = "int[25]"
                };
            }
        }
        private DataRefElement WeaponsFiring
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/firing",
                    Units = "enum",
                    Description = "0 = not firing, 1 = firing (This is the launcher that the wpn is attached to, for actual wpn status, also check action_mode and/or next_bull_time)",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Firing",
                    Id = DataRefId.WeaponsFiring,
                    Writable = false,
                    DataType = "int[25]"
                };
            }
        }
        private DataRefElement WeaponsShellIsAttached
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/shell/is_attached",
                    Units = "V11TODO",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Shell Is Attached",
                    Id = DataRefId.WeaponsShellIsAttached,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeaponsShellThrustRat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weapons/shell/thrust_rat",
                    Units = "V11TODO",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Weapons Shell Thrust Rat",
                    Id = DataRefId.WeaponsShellThrustRat,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherCloudType0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_type[0]",
                    Units = "Cloud",
                    Description = "The type of clouds for this cloud layer. Currently there are only 3 cloud layers, 0, 1 or 2. Cloud types: Clear = 0, High Cirrus = 1, Scattered = 2, Broken = 3, Overcast = 4, Stratus = 5 (740 and newer)",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Type0",
                    Id = DataRefId.WeatherCloudType0,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeatherCloudType1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_type[1]",
                    Units = "Cloud",
                    Description = "The type of clouds for this cloud layer. Currently there are only 3 cloud layers, 0, 1 or 2. Cloud types: Clear = 0, High Cirrus = 1, Scattered = 2, Broken = 3, Overcast = 4, Stratus = 5 (740 and newer)",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Type1",
                    Id = DataRefId.WeatherCloudType1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeatherCloudType2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_type[2]",
                    Units = "Cloud",
                    Description = "The type of clouds for this cloud layer. Currently there are only 3 cloud layers, 0, 1 or 2. Cloud types: Clear = 0, High Cirrus = 1, Scattered = 2, Broken = 3, Overcast = 4, Stratus = 5 (740 and newer)",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Type2",
                    Id = DataRefId.WeatherCloudType2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeatherCloudCoverage0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_coverage[0]",
                    Units = "Coverage",
                    Description = "0..4 where 0 = Clear, 1 = Few, 2 = Scattered, 3 = Broken, 4 = Overcast",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Coverage0",
                    Id = DataRefId.WeatherCloudCoverage0,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherCloudCoverage1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_coverage[1]",
                    Units = "Coverage",
                    Description = "0..4 where 0 = Clear, 1 = Few, 2 = Scattered, 3 = Broken, 4 = Overcast",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Coverage1",
                    Id = DataRefId.WeatherCloudCoverage1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherCloudCoverage2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_coverage[2]",
                    Units = "Coverage",
                    Description = "0..4 where 0 = Clear, 1 = Few, 2 = Scattered, 3 = Broken, 4 = Overcast",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Coverage2",
                    Id = DataRefId.WeatherCloudCoverage2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherCloudBaseMslM0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_base_msl_m[0]",
                    Units = "meters",
                    Description = "MSL >= 0. The base altitude for this cloud layer.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Base Msl M0",
                    Id = DataRefId.WeatherCloudBaseMslM0,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherCloudBaseMslM1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_base_msl_m[1]",
                    Units = "meters",
                    Description = "MSL >= 0. The base altitude for this cloud layer.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Base Msl M1",
                    Id = DataRefId.WeatherCloudBaseMslM1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherCloudBaseMslM2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_base_msl_m[2]",
                    Units = "meters",
                    Description = "MSL >= 0. The base altitude for this cloud layer.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Base Msl M2",
                    Id = DataRefId.WeatherCloudBaseMslM2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherCloudTopsMslM0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_tops_msl_m[0]",
                    Units = "meters",
                    Description = ">= 0. The tops for this cloud layer.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Tops Msl M0",
                    Id = DataRefId.WeatherCloudTopsMslM0,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherCloudTopsMslM1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_tops_msl_m[1]",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Tops Msl M1",
                    Id = DataRefId.WeatherCloudTopsMslM1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherCloudTopsMslM2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/cloud_tops_msl_m[2]",
                    Units = "meters",
                    Description = ">= 0. The tops for this cloud layer.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Cloud Tops Msl M2",
                    Id = DataRefId.WeatherCloudTopsMslM2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherVisibilityReportedM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/visibility_reported_m",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency,
                    Name = "Weather Visibility Reported M",
                    Id = DataRefId.WeatherVisibilityReportedM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherRainPercent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/rain_percent",
                    Units = "[0.0",
                    Description = "- 1.0]",
                    Frequency = DefaultFrequency,
                    Name = "Weather Rain Percent",
                    Id = DataRefId.WeatherRainPercent,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherThunderstormPercent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/thunderstorm_percent",
                    Units = "[0.0",
                    Description = "- 1.0]",
                    Frequency = DefaultFrequency,
                    Name = "Weather Thunderstorm Percent",
                    Id = DataRefId.WeatherThunderstormPercent,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindTurbulencePercent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_turbulence_percent",
                    Units = "[0.0",
                    Description = "- 1.0]",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Turbulence Percent",
                    Id = DataRefId.WeatherWindTurbulencePercent,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherBarometerSealevelInhg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/barometer_sealevel_inhg",
                    Units = "29.92",
                    Description = "+- ....",
                    Frequency = DefaultFrequency,
                    Name = "Weather Barometer Sealevel Inhg",
                    Id = DataRefId.WeatherBarometerSealevelInhg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherHasRealWeatherBool
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/has_real_weather_bool",
                    Units = "0,1",
                    Description = "Whether a real weather file has been located.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Has Real Weather Bool",
                    Id = DataRefId.WeatherHasRealWeatherBool,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeatherUseRealWeatherBool
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/use_real_weather_bool",
                    Units = "0,1",
                    Description = "Whether a real weather file is in use.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Use Real Weather Bool",
                    Id = DataRefId.WeatherUseRealWeatherBool,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeatherDownloadRealWeather
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/download_real_weather",
                    Units = "0,1",
                    Description = "If true, the sim will attempt to download real weather files when real weather is enabled.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Download Real Weather",
                    Id = DataRefId.WeatherDownloadRealWeather,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeatherSigma
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/sigma",
                    Units = "???",
                    Description = "The atmospheric density as a ratio compared to sea level.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Sigma",
                    Id = DataRefId.WeatherSigma,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherRho
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/rho",
                    Units = "???",
                    Description = "The density of the air in kg/cubic meters.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Rho",
                    Id = DataRefId.WeatherRho,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherBarometerCurrentInhg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/barometer_current_inhg",
                    Units = "29.92+-....",
                    Description = "This is the barometric pressure at the point the current flight is at.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Barometer Current Inhg",
                    Id = DataRefId.WeatherBarometerCurrentInhg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherGravityMss
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/gravity_mss",
                    Units = "meters/sec^2",
                    Description = "This is the acceleration of gravity for the current planet.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Gravity Mss",
                    Id = DataRefId.WeatherGravityMss,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherSpeedSoundMs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/speed_sound_ms",
                    Units = "meters/sec",
                    Description = "This is the speed of sound in meters/second at the plane's location.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Speed Sound Ms",
                    Id = DataRefId.WeatherSpeedSoundMs,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindAltitudeMslM0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_altitude_msl_m[0]",
                    Units = "meters",
                    Description = ">= 0. The center altitude of this layer of wind in MSL meters.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Altitude Msl M0",
                    Id = DataRefId.WeatherWindAltitudeMslM0,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindAltitudeMslM1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_altitude_msl_m[1]",
                    Units = "meters",
                    Description = ">= 0. The center altitude of this layer of wind in MSL meters.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Altitude Msl M1",
                    Id = DataRefId.WeatherWindAltitudeMslM1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindAltitudeMslM2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_altitude_msl_m[2]",
                    Units = "meters",
                    Description = ">= 0. The center altitude of this layer of wind in MSL meters.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Altitude Msl M2",
                    Id = DataRefId.WeatherWindAltitudeMslM2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindDirectionDegt0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_direction_degt[0]",
                    Units = "degrees",
                    Description = "[0 - 360] The direction the wind is blowing from in degrees from true north clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Direction Degt0",
                    Id = DataRefId.WeatherWindDirectionDegt0,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindDirectionDegt1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_direction_degt[1]",
                    Units = "degrees",
                    Description = "[0 - 360] The direction the wind is blowing from in degrees from true north clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Direction Degt1",
                    Id = DataRefId.WeatherWindDirectionDegt1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindDirectionDegt2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_direction_degt[2]",
                    Units = "degrees",
                    Description = "[0 - 360] The direction the wind is blowing from in degrees from true north clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Direction Degt2",
                    Id = DataRefId.WeatherWindDirectionDegt2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindSpeedKt0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_speed_kt[0]",
                    Units = "m/s",
                    Description = ">= 0. The wind speed in meters per second (dataref name is wrong). Use new datarefs instead",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Speed Kt0",
                    Id = DataRefId.WeatherWindSpeedKt0,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindSpeedKt1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_speed_kt[1]",
                    Units = "m/s",
                    Description = ">= 0. The wind speed in meters per second (dataref name is wrong). Use new datarefs instead",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Speed Kt1",
                    Id = DataRefId.WeatherWindSpeedKt1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindSpeedKt2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_speed_kt[2]",
                    Units = "m/s",
                    Description = ">= 0. The wind speed in meters per second (dataref name is wrong). Use new datarefs instead",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Speed Kt2",
                    Id = DataRefId.WeatherWindSpeedKt2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherShearDirectionDegt0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/shear_direction_degt[0]",
                    Units = "degrees",
                    Description = "[0 - 360]. The direction for a wind shear, per above.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Shear Direction Degt0",
                    Id = DataRefId.WeatherShearDirectionDegt0,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherShearDirectionDegt1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/shear_direction_degt[1]",
                    Units = "degrees",
                    Description = "[0 - 360]. The direction for a wind shear, per above.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Shear Direction Degt1",
                    Id = DataRefId.WeatherShearDirectionDegt1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherShearDirectionDegt2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/shear_direction_degt[2]",
                    Units = "degrees",
                    Description = "[0 - 360]. The direction for a wind shear, per above.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Shear Direction Degt2",
                    Id = DataRefId.WeatherShearDirectionDegt2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherShearSpeedKt0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/shear_speed_kt[0]",
                    Units = "kts",
                    Description = ">= 0. The gain from the shear in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Shear Speed Kt0",
                    Id = DataRefId.WeatherShearSpeedKt0,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherShearSpeedKt1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/shear_speed_kt[1]",
                    Units = "kts",
                    Description = ">= 0. The gain from the shear in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Shear Speed Kt1",
                    Id = DataRefId.WeatherShearSpeedKt1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherShearSpeedKt2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/shear_speed_kt[2]",
                    Units = "kts",
                    Description = ">= 0. The gain from the shear in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Shear Speed Kt2",
                    Id = DataRefId.WeatherShearSpeedKt2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherTurbulence0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/turbulence[0]",
                    Units = "float",
                    Description = "[0 - 10] A turbulence factor, 0-10, the unit is just a scale.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Turbulence0",
                    Id = DataRefId.WeatherTurbulence0,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherTurbulence1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/turbulence[1]",
                    Units = "float",
                    Description = "[0 - 10] A turbulence factor, 0-10, the unit is just a scale.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Turbulence1",
                    Id = DataRefId.WeatherTurbulence1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherTurbulence2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/turbulence[2]",
                    Units = "float",
                    Description = "[0 - 10] A turbulence factor, 0-10, the unit is just a scale.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Turbulence2",
                    Id = DataRefId.WeatherTurbulence2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWaveAmplitude
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wave_amplitude",
                    Units = "meters",
                    Description = "Amplitude of waves in the water (height of waves)",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wave Amplitude",
                    Id = DataRefId.WeatherWaveAmplitude,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWaveLength
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wave_length",
                    Units = "meters",
                    Description = "Length of a single wave in the water",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wave Length",
                    Id = DataRefId.WeatherWaveLength,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWaveSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wave_speed",
                    Units = "meters/second",
                    Description = "Speed of water waves",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wave Speed",
                    Id = DataRefId.WeatherWaveSpeed,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWaveDir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wave_dir",
                    Units = "degrees",
                    Description = "Direction of waves.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wave Dir",
                    Id = DataRefId.WeatherWaveDir,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WeatherTemperatureSealevelC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/temperature_sealevel_c",
                    Units = "degreesC",
                    Description = "The temperature at sea level.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Temperature Sealevel C",
                    Id = DataRefId.WeatherTemperatureSealevelC,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherTemperatureTropoC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/temperature_tropo_c",
                    Units = "degreesC",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Weather Temperature Tropo C",
                    Id = DataRefId.WeatherTemperatureTropoC,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherTropoAltMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/tropo_alt_mtr",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency,
                    Name = "Weather Tropo Alt Mtr",
                    Id = DataRefId.WeatherTropoAltMtr,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherDewpoiSealevelC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/dewpoi_sealevel_c",
                    Units = "degreesC",
                    Description = "The dew point at sea level.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Dewpoi Sealevel C",
                    Id = DataRefId.WeatherDewpoiSealevelC,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherRelativeHumiditySealevelPercent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/relative_humidity_sealevel_percent",
                    Units = "percent",
                    Description = "Relative humidity at sea-level",
                    Frequency = DefaultFrequency,
                    Name = "Weather Relative Humidity Sealevel Percent",
                    Id = DataRefId.WeatherRelativeHumiditySealevelPercent,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherTemperatureAmbientC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/temperature_ambient_c",
                    Units = "degreesC",
                    Description = "The air temperature outside the aircraft (at altitude).",
                    Frequency = DefaultFrequency,
                    Name = "Weather Temperature Ambient C",
                    Id = DataRefId.WeatherTemperatureAmbientC,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherTemperatureLeC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/temperature_le_c",
                    Units = "degreesC",
                    Description = "The air temperature at the leading edge of the wings in degrees C.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Temperature Le C",
                    Id = DataRefId.WeatherTemperatureLeC,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherThermalPercent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/thermal_percent",
                    Units = "[0..1]",
                    Description = "The percentage of thermal occurance in the area.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Thermal Percent",
                    Id = DataRefId.WeatherThermalPercent,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherThermalRateMs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/thermal_rate_ms",
                    Units = "m/s",
                    Description = ">= 0",
                    Frequency = DefaultFrequency,
                    Name = "Weather Thermal Rate Ms",
                    Id = DataRefId.WeatherThermalRateMs,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherThermalAltitudeMslM
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/thermal_altitude_msl_m",
                    Units = "m",
                    Description = "MSL >= 0",
                    Frequency = DefaultFrequency,
                    Name = "Weather Thermal Altitude Msl M",
                    Id = DataRefId.WeatherThermalAltitudeMslM,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherRunwayFriction
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/runway_friction",
                    Units = "0,1,2",
                    Description = "The friction constant for runways (how wet they are).  0 = good, 1 = fair, 2 = poor",
                    Frequency = DefaultFrequency,
                    Name = "Weather Runway Friction",
                    Id = DataRefId.WeatherRunwayFriction,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherRunwayIsPatchy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/runway_is_patchy",
                    Units = "Booelan",
                    Description = "0 = uniform conditions, 1 = patchy conditions",
                    Frequency = DefaultFrequency,
                    Name = "Weather Runway Is Patchy",
                    Id = DataRefId.WeatherRunwayIsPatchy,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindDirectionDegt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_direction_degt",
                    Units = "degrees",
                    Description = "[0-359] The effective direction of the wind at the plane's location.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Direction Degt",
                    Id = DataRefId.WeatherWindDirectionDegt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindSpeedKt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_speed_kt",
                    Units = "m/s",
                    Description = ">= 0. The effective speed of the wind at the plane's location. WARNING: this dataref is in meters/second - the dataref NAME has a bug.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Speed Kt",
                    Id = DataRefId.WeatherWindSpeedKt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindNowXMsc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_now_x_msc",
                    Units = "meters/sec",
                    Description = "Wind direction vector in OpenGL coordinates, X component.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Now X Msc",
                    Id = DataRefId.WeatherWindNowXMsc,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindNowYMsc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_now_y_msc",
                    Units = "meters/sec",
                    Description = "Wind direction vector in OpenGL coordinates, Y component.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Now Y Msc",
                    Id = DataRefId.WeatherWindNowYMsc,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherWindNowZMsc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/wind_now_z_msc",
                    Units = "meters/sec",
                    Description = "Wind direction vector in OpenGL coordinates, Z component.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Wind Now Z Msc",
                    Id = DataRefId.WeatherWindNowZMsc,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WeatherPrecipitationOnAircraftRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/weather/precipitation_on_aircraft_ratio",
                    Units = "[0..1]",
                    Description = "The amount of rain on the airplane windshield as a ratio from 0 to 1.",
                    Frequency = DefaultFrequency,
                    Name = "Weather Precipitation On Aircraft Ratio",
                    Id = DataRefId.WeatherPrecipitationOnAircraftRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatVelocityMsc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/velocity_msc",
                    Units = "meters/sec",
                    Description = "Velocity of the boat in meters per second in its current direction.  Index 0=carrier,1=frigate, writable using override_boats.",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Velocity Msc",
                    Id = DataRefId.WorldBoatVelocityMsc,
                    Writable = true,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement WorldBoatXMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/x_mtr",
                    Units = "meters",
                    Description = "X Position of the boat in meters in the local coordinate OpenGL coordinate system. Index 0=carrier,1=frigate, writable using override_boats.",
                    Frequency = DefaultFrequency,
                    Name = "World Boat X Mtr",
                    Id = DataRefId.WorldBoatXMtr,
                    Writable = true,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement WorldBoatYMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/y_mtr",
                    Units = "meters",
                    Description = "Y Position of the boat in meters in the local coordinate OpenGL coordinate system. Index 0=carrier,1=frigate, writable using override_boats.",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Y Mtr",
                    Id = DataRefId.WorldBoatYMtr,
                    Writable = true,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement WorldBoatZMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/z_mtr",
                    Units = "meters",
                    Description = "Z Position of the boat in meters in the local coordinate OpenGL coordinate system. Index 0=carrier,1=frigate, writable using override_boats.",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Z Mtr",
                    Id = DataRefId.WorldBoatZMtr,
                    Writable = true,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement WorldBoatHeadingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/heading_deg",
                    Units = "degrees(true)",
                    Description = "Heading of the boat in degrees from true north. Index 0=carrier,1=frigate, writable using override_boats.",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Heading Deg",
                    Id = DataRefId.WorldBoatHeadingDeg,
                    Writable = true,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement WorldBoatPitchFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/pitch_frequency_hz",
                    Units = "hz",
                    Description = "Frequency at which the boat pitches up and down. Index 0=carrier,1=frigate, writable using override_boats.",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Pitch Frequency Hz",
                    Id = DataRefId.WorldBoatPitchFrequencyHz,
                    Writable = true,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement WorldBoatPitchAmplitudeDegMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/pitch_amplitude_deg_mtr",
                    Units = "deg/meter",
                    Description = "Degrees that the boat pitches up for each meter of wave height. Index 0=carrier,1=frigate, writable using override_boats.",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Pitch Amplitude Deg Mtr",
                    Id = DataRefId.WorldBoatPitchAmplitudeDegMtr,
                    Writable = true,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement WorldBoatRollFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/roll_frequency_hz",
                    Units = "hz",
                    Description = "Frequency at which the boat rolls from side to side.  Index 0=carrier,1=frigate, writable using override_boats.",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Roll Frequency Hz",
                    Id = DataRefId.WorldBoatRollFrequencyHz,
                    Writable = true,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement WorldBoatRollAmplitudeDegMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/roll_amplitude_deg_mtr",
                    Units = "deg/meter",
                    Description = "degrees that the boat rolls from side to side for each meter of wave height.  Index 0=carrier,1=frigate, writable using override_boats.",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Roll Amplitude Deg Mtr",
                    Id = DataRefId.WorldBoatRollAmplitudeDegMtr,
                    Writable = true,
                    DataType = "float[2]"
                };
            }
        }
        private DataRefElement WorldBoatFrigateDeckHeightMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/frigate_deck_height_mtr",
                    Units = "meters",
                    Description = "Deck height of the frigate (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Frigate Deck Height Mtr",
                    Id = DataRefId.WorldBoatFrigateDeckHeightMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatFrigateILSOffsetXMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/frigate_ILS_offset_x_mtr",
                    Units = "meters",
                    Description = "X position of the frigate ILS transmitter (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Frigate ILS Offset X Mtr",
                    Id = DataRefId.WorldBoatFrigateILSOffsetXMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatFrigateILSOffsetZMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/frigate_ILS_offset_z_mtr",
                    Units = "meters",
                    Description = "Z position of the frigate ILS transmitter (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Frigate ILS Offset Z Mtr",
                    Id = DataRefId.WorldBoatFrigateILSOffsetZMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierDeckHeightMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_deck_height_mtr",
                    Units = "meters",
                    Description = "Deck height of the carrier (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier Deck Height Mtr",
                    Id = DataRefId.WorldBoatCarrierDeckHeightMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierILSOffsetXMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_ILS_offset_x_mtr",
                    Units = "meters",
                    Description = "X position of the carrier ILS transmitter (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier ILS Offset X Mtr",
                    Id = DataRefId.WorldBoatCarrierILSOffsetXMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierILSOffsetZMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_ILS_offset_z_mtr",
                    Units = "meters",
                    Description = "Z position of the carrier ILS transmitter (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier ILS Offset Z Mtr",
                    Id = DataRefId.WorldBoatCarrierILSOffsetZMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierApproachHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_approach_heading",
                    Units = "degrees(true)",
                    Description = "Relative heading of the approach path from the carrier's heading",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier Approach Heading",
                    Id = DataRefId.WorldBoatCarrierApproachHeading,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierCatshotHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_heading",
                    Units = "degrees(true)",
                    Description = "Relative heading of the catshot relative to the carrier's heading",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier Catshot Heading",
                    Id = DataRefId.WorldBoatCarrierCatshotHeading,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierCatshotStartXMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_start_x_mtr",
                    Units = "meters",
                    Description = "X position (in model coordinates) of the start of the cat-shot track",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier Catshot Start X Mtr",
                    Id = DataRefId.WorldBoatCarrierCatshotStartXMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierCatshotStartZMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_start_z_mtr",
                    Units = "meters",
                    Description = "Z position (in model coordinates) of the start of the cat-shot track",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier Catshot Start Z Mtr",
                    Id = DataRefId.WorldBoatCarrierCatshotStartZMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierCatshotEndXMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_end_x_mtr",
                    Units = "meters",
                    Description = "X position (in model coordinates) of the end of the cat-shot track",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier Catshot End X Mtr",
                    Id = DataRefId.WorldBoatCarrierCatshotEndXMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierCatshotEndZMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_end_z_mtr",
                    Units = "meters",
                    Description = "Z position (in model coordinates) of the end of the cat-shot track",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier Catshot End Z Mtr",
                    Id = DataRefId.WorldBoatCarrierCatshotEndZMtr,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldBoatCarrierCatshotStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_status",
                    Units = "enum",
                    Description = "0=no cat shot set up,1=cat shot waiting to launch,2=in progress",
                    Frequency = DefaultFrequency,
                    Name = "World Boat Carrier Catshot Status",
                    Id = DataRefId.WorldBoatCarrierCatshotStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement WorldWinchWinchRampUpTimeSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/winch/winch_ramp_up_time_sec",
                    Units = "seconds",
                    Description = "This is how long it takes the winch to reach maximum speed for a glider winch take-off.",
                    Frequency = DefaultFrequency,
                    Name = "World Winch Winch Ramp Up Time Sec",
                    Id = DataRefId.WorldWinchWinchRampUpTimeSec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldWinchWinchSpeedKnots
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/winch/winch_speed_knots",
                    Units = "knots",
                    Description = "This is how fast the winch moves at its maximum speed.",
                    Frequency = DefaultFrequency,
                    Name = "World Winch Winch Speed Knots",
                    Id = DataRefId.WorldWinchWinchSpeedKnots,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldWinchWinchInitialLength
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/winch/winch_initial_length",
                    Units = "meters",
                    Description = "This is the initial length of cable for a winch takeoff.",
                    Frequency = DefaultFrequency,
                    Name = "World Winch Winch Initial Length",
                    Id = DataRefId.WorldWinchWinchInitialLength,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement WorldWinchWinchMaxBhp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/world/winch/winch_max_bhp",
                    Units = "bhp",
                    Description = "This is the maximum horsepower the winch can deliver reeling in the cable. Cable speed will decay with higher force on the cable to not exceed this limit.",
                    Frequency = DefaultFrequency,
                    Name = "World Winch Winch Max Bhp",
                    Id = DataRefId.WorldWinchWinchMaxBhp,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsUltralight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_ultralight",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as an ultralight, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Ultralight",
                    Id = DataRefId.Aircraft2MetadataIsUltralight,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsExperimental
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_experimental",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as experimental, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Experimental",
                    Id = DataRefId.Aircraft2MetadataIsExperimental,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsGeneralAviation
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_general_aviation",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as a general aviation aircraft, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is General Aviation",
                    Id = DataRefId.Aircraft2MetadataIsGeneralAviation,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsAirliner
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_airliner",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as an airliner, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Airliner",
                    Id = DataRefId.Aircraft2MetadataIsAirliner,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsMilitary
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_military",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as a military aircraft, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Military",
                    Id = DataRefId.Aircraft2MetadataIsMilitary,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsCargo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_cargo",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as a cargo aircraft, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Cargo",
                    Id = DataRefId.Aircraft2MetadataIsCargo,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsGlider
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_glider",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as a glider, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Glider",
                    Id = DataRefId.Aircraft2MetadataIsGlider,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsSeaplane
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_seaplane",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as a seaplane, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Seaplane",
                    Id = DataRefId.Aircraft2MetadataIsSeaplane,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsHelicopter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_helicopter",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as a helicopter, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Helicopter",
                    Id = DataRefId.Aircraft2MetadataIsHelicopter,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsVtol
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_vtol",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as a VTOL, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Vtol",
                    Id = DataRefId.Aircraft2MetadataIsVtol,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2MetadataIsSciFi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/metadata/is_sci_fi",
                    Units = "Boolean",
                    Description = "1 if the vehicle is categorized as a science fiction aircraft, 0 if it is not.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2metadata Is Sci Fi",
                    Id = DataRefId.Aircraft2MetadataIsSciFi,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Aircraft2EngineLowIdleRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/engine/low_idle_ratio",
                    Units = "multiplier",
                    Description = "This is the idle ratio for the engines at low idle.  1.0 provides default behavior; this can be any number greater than zero.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2engine Low Idle Ratio",
                    Id = DataRefId.Aircraft2EngineLowIdleRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Aircraft2EngineHighIdleRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/engine/high_idle_ratio",
                    Units = "multiplier",
                    Description = "This is the idle ratio for the engines at high idle. 1.0 provides default behavior; this can be any number greater than zero.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2engine High Idle Ratio",
                    Id = DataRefId.Aircraft2EngineHighIdleRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Aircraft2EngineMaxPowerLimitedWatts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/engine/max_power_limited_watts",
                    Units = "watts",
                    Description = "This is the maximum power output of the engine at sea level.  Note that if the engine has a waste gate this is the same as max power at critical altitude.",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2engine Max Power Limited Watts",
                    Id = DataRefId.Aircraft2EngineMaxPowerLimitedWatts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Aircraft2EngineFlapExtensionTimeSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/engine/flap_extension_time_sec",
                    Units = "second",
                    Description = "Time for flaps to go from full retraction to full extension",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2engine Flap Extension Time Sec",
                    Id = DataRefId.Aircraft2EngineFlapExtensionTimeSec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Aircraft2EngineFlapRetractionTimeSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/engine/flap_retraction_time_sec",
                    Units = "second",
                    Description = "Time for flaps to go from full extension to full retraction",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2engine Flap Retraction Time Sec",
                    Id = DataRefId.Aircraft2EngineFlapRetractionTimeSec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Aircraft2EngineExhaustDirtinessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/aircraft2/engine/exhaust_dirtiness_ratio",
                    Units = "ratio",
                    Description = "dirtiness of built-in exhaust effects, 1.0 is default, positive numbers are more dirty",
                    Frequency = DefaultFrequency,
                    Name = "Aircraft2engine Exhaust Dirtiness Ratio",
                    Id = DataRefId.Aircraft2EngineExhaustDirtinessRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsMasterCaution
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/master_caution",
                    Units = "boolean",
                    Description = "This goes off any time there is a major problem with the bird: like it is on fire or something    // array of annunciators... kept as array for UDP IO",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Master Caution",
                    Id = DataRefId.Cockpit2AnnunciatorsMasterCaution,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsMasterWarning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/master_warning",
                    Units = "boolean",
                    Description = "This goes off whenever there is some more moderate problem with the bird... maybe lo fuel pressure ot qty",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Master Warning",
                    Id = DataRefId.Cockpit2AnnunciatorsMasterWarning,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsMasterAccept
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/master_accept",
                    Units = "boolean",
                    Description = "Hit this button to CLEAR the master caution and warning: it says that you hear the buzzer and to shut it up already",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Master Accept",
                    Id = DataRefId.Cockpit2AnnunciatorsMasterAccept,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsAutopilotDisconnect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_disconnect",
                    Units = "boolean",
                    Description = "This goes off for a few moments when the autopilot disconnects.. you wanna KNOW if otto just quit on you!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Autopilot Disconnect",
                    Id = DataRefId.Cockpit2AnnunciatorsAutopilotDisconnect,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsLowVacuum
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/low_vacuum",
                    Units = "boolean",
                    Description = "The vacuum pressure, which drives the instruments in the old prop planes, is low: the artificial horizon may loose it is orientation!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Low Vacuum",
                    Id = DataRefId.Cockpit2AnnunciatorsLowVacuum,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsLowVoltage
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/low_voltage",
                    Units = "boolean",
                    Description = "The voltage os too high or low on one of the electrical buses",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Low Voltage",
                    Id = DataRefId.Cockpit2AnnunciatorsLowVoltage,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsFuelQuantity
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/fuel_quantity",
                    Units = "boolean",
                    Description = "Fuel qty. no points for guessing if it is too high or too low to trigger this one",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Fuel Quantity",
                    Id = DataRefId.Cockpit2AnnunciatorsFuelQuantity,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsHydraulicPressure
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/hydraulic_pressure",
                    Units = "boolean",
                    Description = "Hydraulic pressure. should indicate if press is lo or hi",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Hydraulic Pressure",
                    Id = DataRefId.Cockpit2AnnunciatorsHydraulicPressure,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsSpeedbrake
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/speedbrake",
                    Units = "boolean",
                    Description = "Speedbrake deployed: good to know so you do not forget it..",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Speedbrake",
                    Id = DataRefId.Cockpit2AnnunciatorsSpeedbrake,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsGPWS
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/GPWS",
                    Units = "boolean",
                    Description = "Ground proximity warning system: PULL UP! PULL UP! my lancair does this during my typical red-baron approaches!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators GPWS",
                    Id = DataRefId.Cockpit2AnnunciatorsGPWS,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsIce
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/ice",
                    Units = "boolean",
                    Description = "Ice detected on the plane.. most people agree this is NOT a good thing.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Ice",
                    Id = DataRefId.Cockpit2AnnunciatorsIce,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsLowRotor
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/low_rotor",
                    Units = "boolean",
                    Description = "Rotor rpm on the helo has dropped below normal operating: power availability will be reduced!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Low Rotor",
                    Id = DataRefId.Cockpit2AnnunciatorsLowRotor,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsHighRotor
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/high_rotor",
                    Units = "boolean",
                    Description = "Rotor rpm on the helo has exceeded normal operating: power availability will be reduced, and god knows if the blades will stay ON!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators High Rotor",
                    Id = DataRefId.Cockpit2AnnunciatorsHighRotor,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsPitotHeat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/pitot_heat",
                    Units = "boolean",
                    Description = "Pitot heat is OFF (YUP! OFF!) turn it on to heat up the pitot tube, which measures air pressure to give you air speed.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Pitot Heat",
                    Id = DataRefId.Cockpit2AnnunciatorsPitotHeat,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsTransonic
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/transonic",
                    Units = "boolean",
                    Description = "You are about to break the speed of sound when accelerating, or drop below the speed of sound if decelerating! the handling of the plane will change!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Transonic",
                    Id = DataRefId.Cockpit2AnnunciatorsTransonic,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsSlats
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/slats",
                    Units = "boolean",
                    Description = "slats deployed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Slats",
                    Id = DataRefId.Cockpit2AnnunciatorsSlats,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsFlightDirector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/flight_director",
                    Units = "boolean",
                    Description = "flight director failure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Flight Director",
                    Id = DataRefId.Cockpit2AnnunciatorsFlightDirector,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsAutopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot",
                    Units = "boolean",
                    Description = "autopilot failure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Autopilot",
                    Id = DataRefId.Cockpit2AnnunciatorsAutopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsYawDamper
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/yaw_damper",
                    Units = "boolean",
                    Description = "yaw damper failure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Yaw Damper",
                    Id = DataRefId.Cockpit2AnnunciatorsYawDamper,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsFuelPressureLow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/fuel_pressure_low",
                    Units = "boolean",
                    Description = "fuel pressure low - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Fuel Pressure Low",
                    Id = DataRefId.Cockpit2AnnunciatorsFuelPressureLow,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsOilPressureLow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/oil_pressure_low",
                    Units = "boolean",
                    Description = "fuel pressure low - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Oil Pressure Low",
                    Id = DataRefId.Cockpit2AnnunciatorsOilPressureLow,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsOilTemperatureHigh
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/oil_temperature_high",
                    Units = "boolean",
                    Description = "oil temperature high - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Oil Temperature High",
                    Id = DataRefId.Cockpit2AnnunciatorsOilTemperatureHigh,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsGeneratorOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/generator_off",
                    Units = "boolean",
                    Description = "generator off - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Generator Off",
                    Id = DataRefId.Cockpit2AnnunciatorsGeneratorOff,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsChipDetected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/chip_detected",
                    Units = "boolean",
                    Description = "chip detected - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Chip Detected",
                    Id = DataRefId.Cockpit2AnnunciatorsChipDetected,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsEngineFires
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/engine_fires",
                    Units = "boolean",
                    Description = "engine fire - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Engine Fires",
                    Id = DataRefId.Cockpit2AnnunciatorsEngineFires,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsIgniterOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/igniter_on",
                    Units = "boolean",
                    Description = "igniter on - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Igniter On",
                    Id = DataRefId.Cockpit2AnnunciatorsIgniterOn,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsReverserOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/reverser_on",
                    Units = "boolean",
                    Description = "reverser on - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Reverser On",
                    Id = DataRefId.Cockpit2AnnunciatorsReverserOn,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsBeta
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/beta",
                    Units = "boolean",
                    Description = "propeller in beta mode - per engine, double as NTS test light in fixed turboprops",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Beta",
                    Id = DataRefId.Cockpit2AnnunciatorsBeta,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsBurnerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/burner_on",
                    Units = "boolean",
                    Description = "burner on - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Burner On",
                    Id = DataRefId.Cockpit2AnnunciatorsBurnerOn,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsInverterOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/inverter_off",
                    Units = "boolean",
                    Description = "inverter off - per 2 inverters",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Inverter Off",
                    Id = DataRefId.Cockpit2AnnunciatorsInverterOff,
                    Writable = false,
                    DataType = "int[2]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsN1Low
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/N1_low",
                    Units = "boolean",
                    Description = "N1 of engine is too low for AC - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators N1low",
                    Id = DataRefId.Cockpit2AnnunciatorsN1Low,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsN1High
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/N1_high",
                    Units = "boolean",
                    Description = "N1 too high - per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators N1high",
                    Id = DataRefId.Cockpit2AnnunciatorsN1High,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsReverserNotReady
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/reverser_not_ready",
                    Units = "boolean",
                    Description = "reversers not ready",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Reverser Not Ready",
                    Id = DataRefId.Cockpit2AnnunciatorsReverserNotReady,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsIceVaneExtend
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/ice_vane_extend",
                    Units = "boolean",
                    Description = "ice vain extended (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Ice Vane Extend",
                    Id = DataRefId.Cockpit2AnnunciatorsIceVaneExtend,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsIceVaneFail
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/ice_vane_fail",
                    Units = "boolean",
                    Description = "ice vain failed (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Ice Vane Fail",
                    Id = DataRefId.Cockpit2AnnunciatorsIceVaneFail,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsBleedAirOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/bleed_air_off",
                    Units = "boolean",
                    Description = "bleed air off (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Bleed Air Off",
                    Id = DataRefId.Cockpit2AnnunciatorsBleedAirOff,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsBleedAirFail
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/bleed_air_fail",
                    Units = "boolean",
                    Description = "bleed air failed (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Bleed Air Fail",
                    Id = DataRefId.Cockpit2AnnunciatorsBleedAirFail,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsAutoFeatherArm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/auto_feather_arm",
                    Units = "boolean",
                    Description = "auto feather armed (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Auto Feather Arm",
                    Id = DataRefId.Cockpit2AnnunciatorsAutoFeatherArm,
                    Writable = false,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsFuelTransfer
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/fuel_transfer",
                    Units = "boolean",
                    Description = "fuel transfer on (per tank)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Fuel Transfer",
                    Id = DataRefId.Cockpit2AnnunciatorsFuelTransfer,
                    Writable = false,
                    DataType = "int[9]"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsHvac
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/hvac",
                    Units = "boolean",
                    Description = "duct overheated",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Hvac",
                    Id = DataRefId.Cockpit2AnnunciatorsHvac,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsBatteryChargeHi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/battery_charge_hi",
                    Units = "boolean",
                    Description = "battery is charging too rapidly - may overheat",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Battery Charge Hi",
                    Id = DataRefId.Cockpit2AnnunciatorsBatteryChargeHi,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsCabinAltitude12500
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/cabin_altitude_12500",
                    Units = "boolean",
                    Description = "cabin altitude at or above 12500",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Cabin Altitude12500",
                    Id = DataRefId.Cockpit2AnnunciatorsCabinAltitude12500,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsAutopilotTrimFail
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_trim_fail",
                    Units = "boolean",
                    Description = "autopilot trim failure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Autopilot Trim Fail",
                    Id = DataRefId.Cockpit2AnnunciatorsAutopilotTrimFail,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsElectricTrimOff
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/electric_trim_off",
                    Units = "boolean",
                    Description = "electric trim is off",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Electric Trim Off",
                    Id = DataRefId.Cockpit2AnnunciatorsElectricTrimOff,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsCrossfeedOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/crossfeed_on",
                    Units = "boolean",
                    Description = "crossfeed on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Crossfeed On",
                    Id = DataRefId.Cockpit2AnnunciatorsCrossfeedOn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsLandingTaxiLite
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/landing_taxi_lite",
                    Units = "boolean",
                    Description = "landing or taxiway light on but gear up",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Landing Taxi Lite",
                    Id = DataRefId.Cockpit2AnnunciatorsLandingTaxiLite,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsCabinDoorOpen
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/cabin_door_open",
                    Units = "boolean",
                    Description = "cabin door is open",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Cabin Door Open",
                    Id = DataRefId.Cockpit2AnnunciatorsCabinDoorOpen,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsExternalPowerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/external_power_on",
                    Units = "boolean",
                    Description = "external power is on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators External Power On",
                    Id = DataRefId.Cockpit2AnnunciatorsExternalPowerOn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsPassengerOxyOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/passenger_oxy_on",
                    Units = "boolean",
                    Description = "passenger oxygen on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Passenger Oxy On",
                    Id = DataRefId.Cockpit2AnnunciatorsPassengerOxyOn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsGearUnsafe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/gear_unsafe",
                    Units = "boolean",
                    Description = "gear is unsafe",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Gear Unsafe",
                    Id = DataRefId.Cockpit2AnnunciatorsGearUnsafe,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsAutopilotTrimDown
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_trim_down",
                    Units = "boolean",
                    Description = "autopilot trimming down",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Autopilot Trim Down",
                    Id = DataRefId.Cockpit2AnnunciatorsAutopilotTrimDown,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsAutopilotTrimUp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_trim_up",
                    Units = "boolean",
                    Description = "autopilot trimming up",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Autopilot Trim Up",
                    Id = DataRefId.Cockpit2AnnunciatorsAutopilotTrimUp,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsAutopilotBankLimit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_bank_limit",
                    Units = "boolean",
                    Description = "autopilot bank limit is turned ON, autopilot will keep bank below 12.5 degrees of bank",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Autopilot Bank Limit",
                    Id = DataRefId.Cockpit2AnnunciatorsAutopilotBankLimit,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsAutopilotSoftRide
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_soft_ride",
                    Units = "boolean",
                    Description = "autopilot soft ride is on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Autopilot Soft Ride",
                    Id = DataRefId.Cockpit2AnnunciatorsAutopilotSoftRide,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsNoInverters
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/no_inverters",
                    Units = "boolean",
                    Description = "no inverters are on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators No Inverters",
                    Id = DataRefId.Cockpit2AnnunciatorsNoInverters,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsFuelPressure
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/fuel_pressure",
                    Units = "bitfield",
                    Description = "Fuel pressure is lo, or maybe hi, for this engine    // x8",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Fuel Pressure",
                    Id = DataRefId.Cockpit2AnnunciatorsFuelPressure,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsOilPressure
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/oil_pressure",
                    Units = "bitfield",
                    Description = "Oil pressure is lo, or maybe hi, for this engine    // x8",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Oil Pressure",
                    Id = DataRefId.Cockpit2AnnunciatorsOilPressure,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsOilTemperature
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/oil_temperature",
                    Units = "bitfield",
                    Description = "Oil temperature hi for this engine    // x8",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Oil Temperature",
                    Id = DataRefId.Cockpit2AnnunciatorsOilTemperature,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsGenerator
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/generator",
                    Units = "bitfield",
                    Description = "The generator has failed! the plane cannot charge up. this may happen at lo rpm and go away as the engine revs. happens with my plane    // x8",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Generator",
                    Id = DataRefId.Cockpit2AnnunciatorsGenerator,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsChipDetect
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/chip_detect",
                    Units = "bitfield",
                    Description = "We detected chips of metal in the engine somewhere. most people agree this is not good.    // x8",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Chip Detect",
                    Id = DataRefId.Cockpit2AnnunciatorsChipDetect,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsEngineFire
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/engine_fire",
                    Units = "bitfield",
                    Description = "The engine is on FIRE! this adds to excitement    // x8",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Engine Fire",
                    Id = DataRefId.Cockpit2AnnunciatorsEngineFire,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsReverserDeployed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/reverser_deployed",
                    Units = "bitfield",
                    Description = "Thrust-reverse deployed!    // x8",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Reverser Deployed",
                    Id = DataRefId.Cockpit2AnnunciatorsReverserDeployed,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsPropBeta
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/prop_beta",
                    Units = "bitfield",
                    Description = "Propeller in beta mode    // x8",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Prop Beta",
                    Id = DataRefId.Cockpit2AnnunciatorsPropBeta,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsAfterburner
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/afterburner",
                    Units = "bitfield",
                    Description = "Afterburners on!    // x8",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Afterburner",
                    Id = DataRefId.Cockpit2AnnunciatorsAfterburner,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsInverter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/inverter",
                    Units = "bitfield",
                    Description = "The inverter has failed! the plane cannot convert ac from the generators to dc for the instruments.     // x2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Inverter",
                    Id = DataRefId.Cockpit2AnnunciatorsInverter,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsStallWarning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/stall_warning",
                    Units = "boolean",
                    Description = "Stall warning going off, yes or no.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Stall Warning",
                    Id = DataRefId.Cockpit2AnnunciatorsStallWarning,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsStallWarningRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/stall_warning_ratio",
                    Units = "0..1",
                    Description = "For aircraft with variable stall warnings, 0 = no stall, 1 = full stall",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Stall Warning Ratio",
                    Id = DataRefId.Cockpit2AnnunciatorsStallWarningRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsGearWarning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/gear_warning",
                    Units = "boolean",
                    Description = "Gear warning going off, yes or no.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Gear Warning",
                    Id = DataRefId.Cockpit2AnnunciatorsGearWarning,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsGearWarningAural
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/gear_warning_aural",
                    Units = "boolean",
                    Description = "Gear aural warning going off, yes or no.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Gear Warning Aural",
                    Id = DataRefId.Cockpit2AnnunciatorsGearWarningAural,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsNoSmoking
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/no_smoking",
                    Units = "boolean",
                    Description = "No smoking alert on, yes or no.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators No Smoking",
                    Id = DataRefId.Cockpit2AnnunciatorsNoSmoking,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsFastenSeatbelt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/fasten_seatbelt",
                    Units = "boolean",
                    Description = "Seatbelt sign on, yes or no.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Fasten Seatbelt",
                    Id = DataRefId.Cockpit2AnnunciatorsFastenSeatbelt,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsWindshearWarning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/windshear_warning",
                    Units = "boolean",
                    Description = "True if there's a windshear warning active",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Windshear Warning",
                    Id = DataRefId.Cockpit2AnnunciatorsWindshearWarning,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsPluginMasterWarning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/plugin_master_warning",
                    Units = "boolean",
                    Description = "Writeable without override. Write 1 to trigger master warning.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Plugin Master Warning",
                    Id = DataRefId.Cockpit2AnnunciatorsPluginMasterWarning,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AnnunciatorsPluginMasterCaution
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/plugin_master_caution",
                    Units = "boolean",
                    Description = "Writeable without override. Write 1 to trigger master caution.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2annunciators Plugin Master Caution",
                    Id = DataRefId.Cockpit2AnnunciatorsPluginMasterCaution,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutopilot2Avail
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot2_avail",
                    Units = "boolean",
                    Description = "Autopilot sources are hardwired to respective side, and two autopilots are available",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autopilot2avail",
                    Id = DataRefId.Cockpit2AutopilotAutopilot2Avail,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotMasterFlightDirector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/master_flight_director",
                    Units = "enum",
                    Description = "If aputopilot2_avail is true, this selects the master FD: 0 = pilot, 1 = copilot, 2 = both indipendent",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Master Flight Director",
                    Id = DataRefId.Cockpit2AutopilotMasterFlightDirector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutopilotSource
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot_source",
                    Units = "enum",
                    Description = "Autopilot source system, pilots (0) or copilots (1). With two indipendent autopilots, selects the one that is flying.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autopilot Source",
                    Id = DataRefId.Cockpit2AutopilotAutopilotSource,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutothrottleEnabled
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autothrottle_enabled",
                    Units = "enum",
                    Description = "Auto-throttle: 0=servos declutched (arm, hold), 1=airspeed hold, 2=N1 target hold, 3=retard, 4=reserved for future use",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autothrottle Enabled",
                    Id = DataRefId.Cockpit2AutopilotAutothrottleEnabled,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutothrottleOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autothrottle_on",
                    Units = "boolean",
                    Description = "Auto-throttle really working?  Takes into account failures, esys, etc.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autothrottle On",
                    Id = DataRefId.Cockpit2AutopilotAutothrottleOn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotElectricTrimOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/electric_trim_on",
                    Units = "boolean",
                    Description = "Electric pitch trim on - if off, autopilot flies with pitch servo only, and can't trim!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Electric Trim On",
                    Id = DataRefId.Cockpit2AutopilotElectricTrimOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotPitchMistrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/pitch_mistrim",
                    Units = "enum",
                    Description = "Manual trim required: 0=None, -1=Pitch down, 1=Pitch up",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Pitch Mistrim",
                    Id = DataRefId.Cockpit2AutopilotPitchMistrim,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotOttoFailWarn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/otto_fail_warn",
                    Units = "boolean",
                    Description = "fail warn all lights on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Otto Fail Warn",
                    Id = DataRefId.Cockpit2AutopilotOttoFailWarn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotOttoReady
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/otto_ready",
                    Units = "boolean",
                    Description = "whether the autopilot is ready, but not actually turned on. This is true when the autopilot has powered, has no failures, and is ready to be engaged but not engaged yet.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Otto Ready",
                    Id = DataRefId.Cockpit2AutopilotOttoReady,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotHeadingMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_mode",
                    Units = "enum",
                    Description = "Autopilot heading mode.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Heading Mode",
                    Id = DataRefId.Cockpit2AutopilotHeadingMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAltitudeMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_mode",
                    Units = "enum",
                    Description = "Autopilot altitude mode.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Altitude Mode",
                    Id = DataRefId.Cockpit2AutopilotAltitudeMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotBankAngleMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/bank_angle_mode",
                    Units = "enum",
                    Description = "Maximum bank angle mode, 0->6. Higher number is steeper allowable bank.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Bank Angle Mode",
                    Id = DataRefId.Cockpit2AutopilotBankAngleMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFlightDirectorMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director_mode",
                    Units = "enum",
                    Description = "Flight director mode, 0 is off, 1 is on, 2 is on with autopilot servos.  Good for the FD swich.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Flight Director Mode",
                    Id = DataRefId.Cockpit2AutopilotFlightDirectorMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFlightDirector2Mode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director2_mode",
                    Units = "enum",
                    Description = "Flight director 2 mode, 0 is off, 1 is on, 2 is on with autopilot servos.  Good for the FD swich.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Flight Director2mode",
                    Id = DataRefId.Cockpit2AutopilotFlightDirector2Mode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFlightDirector3Mode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director3_mode",
                    Units = "enum",
                    Description = "Autopilot 3 mode, 0 is off, 1 has no meaning, 2 is on with autopilot servos.  Good for the AP swich.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Flight Director3mode",
                    Id = DataRefId.Cockpit2AutopilotFlightDirector3Mode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutopilotOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot_on",
                    Units = "boolean",
                    Description = "Is the autopilot really on? Takes into account electrical system, failures, etc.;",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autopilot On",
                    Id = DataRefId.Cockpit2AutopilotAutopilotOn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutopilot2On
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot2_on",
                    Units = "boolean",
                    Description = "Is the autopilot 2 really on? Takes into account electrical system, failures, etc.;",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autopilot2on",
                    Id = DataRefId.Cockpit2AutopilotAutopilot2On,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutopilot3On
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot3_on",
                    Units = "boolean",
                    Description = "Is the autopilot 3 really on? Takes into account electrical system, failures, etc.;",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autopilot3on",
                    Id = DataRefId.Cockpit2AutopilotAutopilot3On,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutopilotOnOrCws
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot_on_or_cws",
                    Units = "boolean",
                    Description = "Is the autopilot really on? Like servos_on, but stays on even the servos are temporarily off for CWS.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autopilot On Or Cws",
                    Id = DataRefId.Cockpit2AutopilotAutopilotOnOrCws,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutopilot2OnOrCws
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot2_on_or_cws",
                    Units = "boolean",
                    Description = "Is the autopilot 2 really on? Like servos_on, but stays on even the servos are temporarily off for CWS.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autopilot2on Or Cws",
                    Id = DataRefId.Cockpit2AutopilotAutopilot2OnOrCws,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAutopilot3OnOrCws
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot3_on_or_cws",
                    Units = "boolean",
                    Description = "Is the autopilot 2 really on? Like servos_on, but stays on even the servos are temporarily off for CWS.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Autopilot3on Or Cws",
                    Id = DataRefId.Cockpit2AutopilotAutopilot3OnOrCws,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotServosOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/servos_on",
                    Units = "boolean",
                    Description = "Are the servos on?  Takes into account FD mode and control-wheel-steering, failures, etc.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Servos On",
                    Id = DataRefId.Cockpit2AutopilotServosOn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotServos2On
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/servos2_on",
                    Units = "boolean",
                    Description = "Are the servos on?  Takes into account FD2 mode and control-wheel-steering, failures, etc.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Servos2on",
                    Id = DataRefId.Cockpit2AutopilotServos2On,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotServos3On
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/servos3_on",
                    Units = "boolean",
                    Description = "Are the servos on?  Takes into account AP3 mode and control-wheel-steering, failures, etc.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Servos3on",
                    Id = DataRefId.Cockpit2AutopilotServos3On,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAirspeedIsMach
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/airspeed_is_mach",
                    Units = "boolean",
                    Description = "Autopilot airspeed is Mach number rather than knots.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Airspeed Is Mach",
                    Id = DataRefId.Cockpit2AutopilotAirspeedIsMach,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAltVviIsShowingVvi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/alt_vvi_is_showing_vvi",
                    Units = "boolean",
                    Description = "Is the combined alt/vvi selector showing VVI?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Alt VVI Is Showing VVI",
                    Id = DataRefId.Cockpit2AutopilotAltVviIsShowingVvi,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotVnavArmed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/vnav_armed",
                    Units = "boolean",
                    Description = "Vnav is armed, 0 or 1 - this is different from the \"FMS\" button - it is used ONLY for a physical G1000 connected by ethernet.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Vnav Armed",
                    Id = DataRefId.Cockpit2AutopilotVnavArmed,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAltitudeHoldArmed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_hold_armed",
                    Units = "boolean",
                    Description = "Altitude is armed, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Altitude Hold Armed",
                    Id = DataRefId.Cockpit2AutopilotAltitudeHoldArmed,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotHnavArmed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/hnav_armed",
                    Units = "boolean",
                    Description = "Localizer is armed, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Hnav Armed",
                    Id = DataRefId.Cockpit2AutopilotHnavArmed,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotGlideslopeArmed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/glideslope_armed",
                    Units = "boolean",
                    Description = "Glideslope is armed, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Glideslope Armed",
                    Id = DataRefId.Cockpit2AutopilotGlideslopeArmed,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotBackcourseOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/backcourse_on",
                    Units = "boolean",
                    Description = "Back course is armed, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Backcourse On",
                    Id = DataRefId.Cockpit2AutopilotBackcourseOn,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAirspeedDialKtsMach
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/airspeed_dial_kts_mach",
                    Units = "knots/mach",
                    Description = "Airspeed hold value, knots or Mach depending on km_is_mach.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Airspeed Dial Kts Mach",
                    Id = DataRefId.Cockpit2AutopilotAirspeedDialKtsMach,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAirspeedDialKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/airspeed_dial_kts",
                    Units = "Knots",
                    Description = "Airspeed hold bug, always in knots, even if the AP is in mach-hold mode.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Airspeed Dial Kts",
                    Id = DataRefId.Cockpit2AutopilotAirspeedDialKts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotHeadingDialDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_dial_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Heading hold commanded, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Heading Dial Deg Mag Pilot",
                    Id = DataRefId.Cockpit2AutopilotHeadingDialDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotHeadingDialDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_dial_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Heading hold commanded, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Heading Dial Deg Mag Copilot",
                    Id = DataRefId.Cockpit2AutopilotHeadingDialDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotHeadingIsGpss
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_is_gpss",
                    Units = "boolean",
                    Description = "0 = Heading bug supplies HDG to autopilot, 1 = GPSS supplies heading to autopilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Heading Is GPSs",
                    Id = DataRefId.Cockpit2AutopilotHeadingIsGpss,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotTrkFpa
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/trk_fpa",
                    Units = "boolean",
                    Description = "0 = HDG/VS, 1 = TRK/FPA",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Trk Fpa",
                    Id = DataRefId.Cockpit2AutopilotTrkFpa,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotVviDialFpm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/vvi_dial_fpm",
                    Units = "feet/minute",
                    Description = "VVI commanded in FPM.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot VVI Dial Fpm",
                    Id = DataRefId.Cockpit2AutopilotVviDialFpm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFpa
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/fpa",
                    Units = "degrees",
                    Description = "FPA commanded in degrees.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Fpa",
                    Id = DataRefId.Cockpit2AutopilotFpa,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAltitudeDialFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_dial_ft",
                    Units = "feet",
                    Description = "VVI commanded in FPM.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Altitude Dial Ft",
                    Id = DataRefId.Cockpit2AutopilotAltitudeDialFt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAltitudeHoldFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_hold_ft",
                    Units = "feet",
                    Description = "Altitude hold commanded in feet indicated.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Altitude Hold Ft",
                    Id = DataRefId.Cockpit2AutopilotAltitudeHoldFt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAltitudeVnavFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_vnav_ft",
                    Units = "feet",
                    Description = "Target altitude hold in VNAV mode.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Altitude Vnav Ft",
                    Id = DataRefId.Cockpit2AutopilotAltitudeVnavFt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotBarometerSettingInHgAltPreselector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/barometer_setting_in_hg_alt_preselector",
                    Units = "inHg",
                    Description = "baro setting of the altitude preselector",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Barometer Setting In Hg Alt Preselector",
                    Id = DataRefId.Cockpit2AutopilotBarometerSettingInHgAltPreselector,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAltitudeReadoutPreselector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_readout_preselector",
                    Units = "feet",
                    Description = "current barometric altitude sensed by the altitude preselector",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Altitude Readout Preselector",
                    Id = DataRefId.Cockpit2AutopilotAltitudeReadoutPreselector,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotClimbAdjust
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/climb_adjust",
                    Units = "knots",
                    Description = "climb mode adjust base speed knots (by default 150KIAS below 10.000ft)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Climb Adjust",
                    Id = DataRefId.Cockpit2AutopilotClimbAdjust,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotDesAdjust
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/des_adjust",
                    Units = "feet/minute",
                    Description = "descend mode adjust target vertical speed (by default -1500ft/min)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Des Adjust",
                    Id = DataRefId.Cockpit2AutopilotDesAdjust,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotSyncHoldPitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/sync_hold_pitch_deg",
                    Units = "degrees",
                    Description = "Pitch-hold commanded in degrees up.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Sync Hold Pitch Deg",
                    Id = DataRefId.Cockpit2AutopilotSyncHoldPitchDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotSyncHoldRollDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/sync_hold_roll_deg",
                    Units = "degrees",
                    Description = "Roll-hold commanded in degrees right.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Sync Hold Roll Deg",
                    Id = DataRefId.Cockpit2AutopilotSyncHoldRollDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotSetRollDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/set_roll_deg",
                    Units = "degrees",
                    Description = "Roll-hold command in degrees right, turn knob that won't turn with other modes",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Set Roll Deg",
                    Id = DataRefId.Cockpit2AutopilotSetRollDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotTurnRateDegSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/turn_rate_deg_sec",
                    Units = "deg/sec",
                    Description = "Turn rate commanded in degrees per second, positive right",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Turn Rate Deg Sec",
                    Id = DataRefId.Cockpit2AutopilotTurnRateDegSec,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFlightDirectorPitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director_pitch_deg",
                    Units = "degrees",
                    Description = "Flight director pitch deflection in degrees, pos up.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Flight Director Pitch Deg",
                    Id = DataRefId.Cockpit2AutopilotFlightDirectorPitchDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFlightDirectorRollDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director_roll_deg",
                    Units = "degrees",
                    Description = "Flight director roll deflection in degrees, pos right.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Flight Director Roll Deg",
                    Id = DataRefId.Cockpit2AutopilotFlightDirectorRollDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFlightDirector2PitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director2_pitch_deg",
                    Units = "degrees",
                    Description = "Flight director 2 pitch deflection in degrees, pos up.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Flight Director2pitch Deg",
                    Id = DataRefId.Cockpit2AutopilotFlightDirector2PitchDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFlightDirector2RollDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director2_roll_deg",
                    Units = "degrees",
                    Description = "Flight director 2 roll deflection in degrees, pos right.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Flight Director2roll Deg",
                    Id = DataRefId.Cockpit2AutopilotFlightDirector2RollDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotTOGAPitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/TOGA_pitch_deg",
                    Units = "degrees",
                    Description = "Nose-up pitch to hold when TOGA operations are in effect.  Set this back when your aircraft unloads!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot TOGA Pitch Deg",
                    Id = DataRefId.Cockpit2AutopilotTOGAPitchDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotRollStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/roll_status",
                    Units = "enum",
                    Description = "Autopilot Roll-Hold Status. 0=off,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Roll Status",
                    Id = DataRefId.Cockpit2AutopilotRollStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotRateStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/rate_status",
                    Units = "enum",
                    Description = "Autopilot turn rate hold status: 0=off, 2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Rate Status",
                    Id = DataRefId.Cockpit2AutopilotRateStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotHeadingStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_status",
                    Units = "enum",
                    Description = "Autopilot Heading Select Status. 0=off,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Heading Status",
                    Id = DataRefId.Cockpit2AutopilotHeadingStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotHeadingHoldStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_hold_status",
                    Units = "enum",
                    Description = "Autopilot Heading Hold Status. 0=off,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Heading Hold Status",
                    Id = DataRefId.Cockpit2AutopilotHeadingHoldStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotTrackStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/track_status",
                    Units = "enum",
                    Description = "Autopilot Track Select Status: 0=off,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Track Status",
                    Id = DataRefId.Cockpit2AutopilotTrackStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotNavStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/nav_status",
                    Units = "enum",
                    Description = "Autopilot Nav Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Nav Status",
                    Id = DataRefId.Cockpit2AutopilotNavStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotGpssStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/gpss_status",
                    Units = "enum",
                    Description = "Autopilot GPSS Status. 0=off, 2=active",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot GPSs Status",
                    Id = DataRefId.Cockpit2AutopilotGpssStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotRolloutStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/rollout_status",
                    Units = "enum",
                    Description = "Autopilot Rollout Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Rollout Status",
                    Id = DataRefId.Cockpit2AutopilotRolloutStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFlareStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flare_status",
                    Units = "enum",
                    Description = "Autopilot Flare Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Flare Status",
                    Id = DataRefId.Cockpit2AutopilotFlareStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotBackcourseStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/backcourse_status",
                    Units = "enum",
                    Description = "Autopilot Back-course Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Backcourse Status",
                    Id = DataRefId.Cockpit2AutopilotBackcourseStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotTOGALateralStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/TOGA_lateral_status",
                    Units = "enum",
                    Description = "Autopilot Lateral TOGA mode: 0=off,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot TOGA Lateral Status",
                    Id = DataRefId.Cockpit2AutopilotTOGALateralStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotPitchStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/pitch_status",
                    Units = "enum",
                    Description = "Autopilot Pitch-Hold Status. 0=off,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Pitch Status",
                    Id = DataRefId.Cockpit2AutopilotPitchStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotVviStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/vvi_status",
                    Units = "enum",
                    Description = "Autopilot VVI Status. 0=off,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot VVI Status",
                    Id = DataRefId.Cockpit2AutopilotVviStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFpaStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/fpa_status",
                    Units = "enum",
                    Description = "Autopilot FPA Status. 0=off,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Fpa Status",
                    Id = DataRefId.Cockpit2AutopilotFpaStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotSpeedStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/speed_status",
                    Units = "enum",
                    Description = "Autopilot Speed-hold (via pitch) status. 0=off,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Speed Status",
                    Id = DataRefId.Cockpit2AutopilotSpeedStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotAltitudeHoldStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_hold_status",
                    Units = "enum",
                    Description = "Autopilot Altitude hold status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Altitude Hold Status",
                    Id = DataRefId.Cockpit2AutopilotAltitudeHoldStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotGlideslopeStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/glideslope_status",
                    Units = "enum",
                    Description = "Autopilot glideslope status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Glideslope Status",
                    Id = DataRefId.Cockpit2AutopilotGlideslopeStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotVnavStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/vnav_status",
                    Units = "enum",
                    Description = "Autopilot VNAV status. 0=off,1=armed,2=captured - for a physical hardware g1000 connected by Ethernet only!!!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Vnav Status",
                    Id = DataRefId.Cockpit2AutopilotVnavStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotFmsVnav
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/fms_vnav",
                    Units = "boolean",
                    Description = "Enables the FMS to take over vertical control of the autopilot.   This matches the command \"sim/autopilot/FMS\".\"",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Fms Vnav",
                    Id = DataRefId.Cockpit2AutopilotFmsVnav,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotTOGAStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/TOGA_status",
                    Units = "enum",
                    Description = "Autopilot TOGA vertical (go-around) status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot TOGA Status",
                    Id = DataRefId.Cockpit2AutopilotTOGAStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotApproachStatus
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/approach_status",
                    Units = "enum",
                    Description = "Autopilot approach status.  0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Approach Status",
                    Id = DataRefId.Cockpit2AutopilotApproachStatus,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2AutopilotDeadReckoning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/dead_reckoning",
                    Units = "boolean",
                    Description = "Whether the autopilot is using dead-reckoning to fly over a VOR station",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2autopilot Dead Reckoning",
                    Id = DataRefId.Cockpit2AutopilotDeadReckoning,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2CameraCameraOffsetPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/camera/camera_offset_pitch",
                    Units = "degrees",
                    Description = "In-cockpit camera angular offset relative to airplane orientation (Pitch)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2camera Camera Offset Pitch",
                    Id = DataRefId.Cockpit2CameraCameraOffsetPitch,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2CameraCameraOffsetHeading
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/camera/camera_offset_heading",
                    Units = "degrees",
                    Description = "In-cockpit camera angular offset relative to airplane orientation (Heading)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2camera Camera Offset Heading",
                    Id = DataRefId.Cockpit2CameraCameraOffsetHeading,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2CameraCameraOffsetRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/camera/camera_offset_roll",
                    Units = "degrees",
                    Description = "In-cockpit camera angular offset relative to airplane orientation (Roll)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2camera Camera Offset Roll",
                    Id = DataRefId.Cockpit2CameraCameraOffsetRoll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2CameraCameraFieldOfView
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/camera/camera_field_of_view",
                    Units = "degrees",
                    Description = "In-cockpit camera field of view",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2camera Camera Field Of View",
                    Id = DataRefId.Cockpit2CameraCameraFieldOfView,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerElapsedTimeHours
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/elapsed_time_hours",
                    Units = "hours",
                    Description = "Elapsed time on the timer, hours",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Elapsed Time Hours",
                    Id = DataRefId.Cockpit2ClockTimerElapsedTimeHours,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerElapsedTimeMinutes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/elapsed_time_minutes",
                    Units = "minutes",
                    Description = "Elapsed time on the timer, minutes",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Elapsed Time Minutes",
                    Id = DataRefId.Cockpit2ClockTimerElapsedTimeMinutes,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerElapsedTimeSeconds
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/elapsed_time_seconds",
                    Units = "seconds",
                    Description = "Elapsed time on the timer, seconds",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Elapsed Time Seconds",
                    Id = DataRefId.Cockpit2ClockTimerElapsedTimeSeconds,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerZuluTimeHours
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/zulu_time_hours",
                    Units = "hours",
                    Description = "Zulu time, hours",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Zulu Time Hours",
                    Id = DataRefId.Cockpit2ClockTimerZuluTimeHours,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerZuluTimeMinutes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/zulu_time_minutes",
                    Units = "minutes",
                    Description = "Zulu time, minutes",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Zulu Time Minutes",
                    Id = DataRefId.Cockpit2ClockTimerZuluTimeMinutes,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerZuluTimeSeconds
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/zulu_time_seconds",
                    Units = "seconds",
                    Description = "Zulu time, seconds",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Zulu Time Seconds",
                    Id = DataRefId.Cockpit2ClockTimerZuluTimeSeconds,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerLocalTimeHours
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/local_time_hours",
                    Units = "hours",
                    Description = "Local time, hours",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Local Time Hours",
                    Id = DataRefId.Cockpit2ClockTimerLocalTimeHours,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerLocalTimeMinutes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/local_time_minutes",
                    Units = "minutes",
                    Description = "Local time, minutes",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Local Time Minutes",
                    Id = DataRefId.Cockpit2ClockTimerLocalTimeMinutes,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerLocalTimeSeconds
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/local_time_seconds",
                    Units = "seconds",
                    Description = "Local time, seconds",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Local Time Seconds",
                    Id = DataRefId.Cockpit2ClockTimerLocalTimeSeconds,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerHobbsTimeHours
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/hobbs_time_hours",
                    Units = "hours",
                    Description = "Hobbs meter time, hours",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Hobbs Time Hours",
                    Id = DataRefId.Cockpit2ClockTimerHobbsTimeHours,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerHobbsTimeMinutes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/hobbs_time_minutes",
                    Units = "minutes",
                    Description = "Hobbs meter time, minutes",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Hobbs Time Minutes",
                    Id = DataRefId.Cockpit2ClockTimerHobbsTimeMinutes,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerHobbsTimeSeconds
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/hobbs_time_seconds",
                    Units = "seconds",
                    Description = "Hobbs meter time, seconds",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Hobbs Time Seconds",
                    Id = DataRefId.Cockpit2ClockTimerHobbsTimeSeconds,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerTimerRunning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/timer_running",
                    Units = "boolean",
                    Description = "True if timer is running",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Timer Running",
                    Id = DataRefId.Cockpit2ClockTimerTimerRunning,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerTimerIsGMT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/timer_is_GMT",
                    Units = "boolean",
                    Description = "True if time shown is GMT",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Timer Is GMT",
                    Id = DataRefId.Cockpit2ClockTimerTimerIsGMT,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerDateIsShowing
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/date_is_showing",
                    Units = "boolean",
                    Description = "True if date is showing (date button pressed recently)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Date Is Showing",
                    Id = DataRefId.Cockpit2ClockTimerDateIsShowing,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerCurrentDay
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/current_day",
                    Units = "day",
                    Description = "Numeric day of month",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Current Day",
                    Id = DataRefId.Cockpit2ClockTimerCurrentDay,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerCurrentMonth
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/current_month",
                    Units = "month",
                    Description = "Numeric month of the year",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Current Month",
                    Id = DataRefId.Cockpit2ClockTimerCurrentMonth,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ClockTimerTimerMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/timer_mode",
                    Units = "enum",
                    Description = "TODO",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2clock Timer Timer Mode",
                    Id = DataRefId.Cockpit2ClockTimerTimerMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ControlsYokePitchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/yoke_pitch_ratio",
                    Units = "-1..1",
                    Description = "This is how much the user input has deflected the yoke in the cockpit, in ratio, where -1.0 is full down, and 1.0 is full up.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Yoke Pitch Ratio",
                    Id = DataRefId.Cockpit2ControlsYokePitchRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsYokeRollRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/yoke_roll_ratio",
                    Units = "-1..1",
                    Description = "This is how much the user input has deflected the yoke in the cockpit, in ratio, where -1.0 is full left, and 1.0 is full right.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Yoke Roll Ratio",
                    Id = DataRefId.Cockpit2ControlsYokeRollRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsYokeHeadingRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/yoke_heading_ratio",
                    Units = "-1..1",
                    Description = "This is how much the user input has deflected the rudder in the cockpit, in ratio, where -1.0 is full left, and 1.0 is full right.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Yoke Heading Ratio",
                    Id = DataRefId.Cockpit2ControlsYokeHeadingRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsTotalHeadingRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/total_heading_ratio",
                    Units = "[-1..1]",
                    Description = "Total rudder control input (sum of user pedal plus autopilot servo plus artificial stability)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Total Heading Ratio",
                    Id = DataRefId.Cockpit2ControlsTotalHeadingRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsTotalPitchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/total_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "Total pitch control input (sum of user yoke plus autopilot servo plus artificial stability)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Total Pitch Ratio",
                    Id = DataRefId.Cockpit2ControlsTotalPitchRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsTotalRollRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/total_roll_ratio",
                    Units = "[-1..1]",
                    Description = "Total roll control input (sum of user yoke plus autopilot servo plus artificial stability)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Total Roll Ratio",
                    Id = DataRefId.Cockpit2ControlsTotalRollRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsSpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/speedbrake_ratio",
                    Units = "ratio",
                    Description = "This is how much the speebrake HANDLE is deflected, in ratio, where 0.0 is fully retracted, 0.5 is halfway down, and 1.0 is fully down, and -0.5 is speedbrakes ARMED.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Speedbrake Ratio",
                    Id = DataRefId.Cockpit2ControlsSpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsWingsweepRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/wingsweep_ratio",
                    Units = "ratio",
                    Description = "Requested sweep, in ratio. 0.0 is no sweep requested, 1 is max sweep requested.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Wingsweep Ratio",
                    Id = DataRefId.Cockpit2ControlsWingsweepRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsThrustVectorRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/thrust_vector_ratio",
                    Units = "ratio",
                    Description = "Requested thrust vector, in ratio. 0.0 is no thrust vector requested, 1 is max thrust vector requested.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Thrust Vector Ratio",
                    Id = DataRefId.Cockpit2ControlsThrustVectorRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsDihedralRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/dihedral_ratio",
                    Units = "ratio",
                    Description = "Requested dihedral, in ratio. 0.0 is no dihedral requested, 1 is max dihedral requested.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Dihedral Ratio",
                    Id = DataRefId.Cockpit2ControlsDihedralRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsIncidenceRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/incidence_ratio",
                    Units = "ratio",
                    Description = "Requested incidence, in ratio. 0.0 is no incidence requested, 1 is max incidence requested.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Incidence Ratio",
                    Id = DataRefId.Cockpit2ControlsIncidenceRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsWingRetractionRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/wing_retraction_ratio",
                    Units = "ratio",
                    Description = "Requested wing-retraction, in ratio. 0.0 is no wing-retraction requested, 1 is max wing-retraction requested.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Wing Retraction Ratio",
                    Id = DataRefId.Cockpit2ControlsWingRetractionRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsFlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/flap_ratio",
                    Units = "ratio",
                    Description = "This is the flap HANDLE location, in ratio, where 0.0 is handle fully retracted, and 1.0 is handle fully extended.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Flap Ratio",
                    Id = DataRefId.Cockpit2ControlsFlapRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsParkingBrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/parking_brake_ratio",
                    Units = "ratio",
                    Description = "This is the overall brake requested by the parking brake button... 0.0 is none, 1.0 is complete.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Parking Brake Ratio",
                    Id = DataRefId.Cockpit2ControlsParkingBrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsLeftBrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/left_brake_ratio",
                    Units = "ratio",
                    Description = "This is additional left brake requested by pedal deflection, 0.0 to 1.0.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Left Brake Ratio",
                    Id = DataRefId.Cockpit2ControlsLeftBrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsRightBrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/right_brake_ratio",
                    Units = "ratio",
                    Description = "This is additional right brake requested by pedal deflection, 0.0 to 1.0.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Right Brake Ratio",
                    Id = DataRefId.Cockpit2ControlsRightBrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsGearHandleDown
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/gear_handle_down",
                    Units = "boolean",
                    Description = "Gear handle position. 0 is up. 1 is down.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Gear Handle Down",
                    Id = DataRefId.Cockpit2ControlsGearHandleDown,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ControlsNosewheelSteerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/nosewheel_steer_on",
                    Units = "boolean",
                    Description = "Is the nosewheel steering turned on? 0 or 1.  This must be off AND the tail wheel must be unlocked to free castor.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Nosewheel Steer On",
                    Id = DataRefId.Cockpit2ControlsNosewheelSteerOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ControlsTailwheelLockRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/tailwheel_lock_ratio",
                    Units = "ratio",
                    Description = "Tail-wheel lockig ratio. 0 for free-castoring, 1 for totally locked.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Tailwheel Lock Ratio",
                    Id = DataRefId.Cockpit2ControlsTailwheelLockRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsAileronTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/aileron_trim",
                    Units = "-1..1",
                    Description = "Aileron trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the aileron trim is deflected enough to move the ailerons through 30% of their travel, then that is an aileron trim of 0.3. -1=left 1=right",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Aileron Trim",
                    Id = DataRefId.Cockpit2ControlsAileronTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsElevatorTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/elevator_trim",
                    Units = "-1..1",
                    Description = "Elevator trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the elevator trim is deflected enough to move the elevators through 30% of their travel, then that is an elevator trim of 0.3. -1=down 1=up",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Elevator Trim",
                    Id = DataRefId.Cockpit2ControlsElevatorTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsRudderTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/rudder_trim",
                    Units = "-1..1",
                    Description = "Rudder trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rudder trim is deflected enough to move the rudders through 30% of their travel, then that is an rudder trim of 0.3. -1=left 1=right",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Rudder Trim",
                    Id = DataRefId.Cockpit2ControlsRudderTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsRotorTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/rotor_trim",
                    Units = "-1..1",
                    Description = "Rotor trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rotor trim is deflected enough to move the rotor through 30% of its travel, then that is a rotor trim of 0.3. -1=down 1=up",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Rotor Trim",
                    Id = DataRefId.Cockpit2ControlsRotorTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsWaterRudderHandleRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/water_rudder_handle_ratio",
                    Units = "ratio",
                    Description = "Deployment of the water rudder, 0 is none, 1 is max",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Water Rudder Handle Ratio",
                    Id = DataRefId.Cockpit2ControlsWaterRudderHandleRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ControlsFlapHandleDeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/controls/flap_handle_deploy_ratio",
                    Units = "ratio",
                    Description = "This is how far the indicator of flap deployment has moved in the cockpit.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2controls Flap Handle Deploy Ratio",
                    Id = DataRefId.Cockpit2ControlsFlapHandleDeployRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2EFISMapMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/map_mode",
                    Units = "enum",
                    Description = "Map mode. 0=approach, 1=vor,2=map,3=nav,4=plan",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efis Map Mode",
                    Id = DataRefId.Cockpit2EFISMapMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISMapModeIsHSI
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/map_mode_is_HSI",
                    Units = "boolean",
                    Description = "Map is in HSI mode, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efis Map Mode Is HSI",
                    Id = DataRefId.Cockpit2EFISMapModeIsHSI,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISMapRange
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/map_range",
                    Units = "enum",
                    Description = "Map range, 1->6, where 6 is the longest range.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efis Map Range",
                    Id = DataRefId.Cockpit2EFISMapRange,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISArgusMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/argus_mode",
                    Units = "enum",
                    Description = "Argus mode, 7=departure,8=enroute,9=approach,10=radar_on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efis Argus Mode",
                    Id = DataRefId.Cockpit2EFISArgusMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEcamMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/ecam_mode",
                    Units = "enum",
                    Description = "ECAM mode, 0=engine,1=fuel,2=controls,3=hydraulics,4=failures",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efis Ecam Mode",
                    Id = DataRefId.Cockpit2EFISEcamMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFISWeatherOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_weather_on",
                    Units = "boolean",
                    Description = "On the moving map, show the weather or not.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis Weather On",
                    Id = DataRefId.Cockpit2EFISEFISWeatherOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFISTcasOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_tcas_on",
                    Units = "boolean",
                    Description = "On the moving map, show the TCAS or not.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis Tcas On",
                    Id = DataRefId.Cockpit2EFISEFISTcasOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFISAirportOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_airport_on",
                    Units = "boolean",
                    Description = "On the moving map, show the airports or not.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis Airport On",
                    Id = DataRefId.Cockpit2EFISEFISAirportOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFISFixOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_fix_on",
                    Units = "boolean",
                    Description = "On the moving map, show the fixes or not.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis Fix On",
                    Id = DataRefId.Cockpit2EFISEFISFixOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFISVorOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_vor_on",
                    Units = "boolean",
                    Description = "On the moving map, show the VORs or not.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis Vor On",
                    Id = DataRefId.Cockpit2EFISEFISVorOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFISNdbOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_ndb_on",
                    Units = "boolean",
                    Description = "On the moving map, show the NDBs or not.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis Ndb On",
                    Id = DataRefId.Cockpit2EFISEFISNdbOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFIS1SelectionPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_1_selection_pilot",
                    Units = "enum",
                    Description = "EFIS waypoint 1 is showing: 0=ADF1, 1=OFF, or 2=VOR1 -- Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis1selection Pilot",
                    Id = DataRefId.Cockpit2EFISEFIS1SelectionPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFIS1SelectionCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_1_selection_copilot",
                    Units = "enum",
                    Description = "EFIS waypoint 2 is showing: 0=ADF1, 1=OFF, or 2=VOR1 -- Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis1selection Copilot",
                    Id = DataRefId.Cockpit2EFISEFIS1SelectionCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFIS2SelectionPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_2_selection_pilot",
                    Units = "enum",
                    Description = "EFIS waypoint 1 is showing: 0=ADF2, 1=OFF, or 2=VOR2 -- Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis2selection Pilot",
                    Id = DataRefId.Cockpit2EFISEFIS2SelectionPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFIS2SelectionCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_2_selection_copilot",
                    Units = "enum",
                    Description = "EFIS waypoint 2 is showing: 0=ADF2, 1=OFF, or 2=VOR2 -- Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis2selection Copilot",
                    Id = DataRefId.Cockpit2EFISEFIS2SelectionCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2EFISEFISPage
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_page",
                    Units = "boolean",
                    Description = "An array of EFIS page switches for selecting which EFIS page is visible.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2efisefis Page",
                    Id = DataRefId.Cockpit2EFISEFISPage,
                    Writable = true,
                    DataType = "int[6]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalInverterOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/inverter_on",
                    Units = "boolean",
                    Description = "Inverter turned on, 0 or 1. (Was 8, but should be 2 total.)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Inverter On",
                    Id = DataRefId.Cockpit2ElectricalInverterOn,
                    Writable = true,
                    DataType = "int[2]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalBatteryOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/battery_on",
                    Units = "boolean",
                    Description = "Battery turned on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Battery On",
                    Id = DataRefId.Cockpit2ElectricalBatteryOn,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalBatteryAmps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/battery_amps",
                    Units = "amps",
                    Description = "Battery amperage, in (surprisingly) amps.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Battery Amps",
                    Id = DataRefId.Cockpit2ElectricalBatteryAmps,
                    Writable = true,
                    DataType = "float[8]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalBatteryVoltageActualVolts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/battery_voltage_actual_volts",
                    Units = "volts",
                    Description = "Actual battery voltage in, umm, volts?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Battery Voltage Actual Volts",
                    Id = DataRefId.Cockpit2ElectricalBatteryVoltageActualVolts,
                    Writable = true,
                    DataType = "float[8]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalBatteryVoltageIndicatedVolts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/battery_voltage_indicated_volts",
                    Units = "volts",
                    Description = "Indicated battery voltage in, umm, volts? ...The indication may be different than the actual voltage!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Battery Voltage Indicated Volts",
                    Id = DataRefId.Cockpit2ElectricalBatteryVoltageIndicatedVolts,
                    Writable = true,
                    DataType = "float[8]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalGeneratorOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/generator_on",
                    Units = "boolean",
                    Description = "Generator turned on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Generator On",
                    Id = DataRefId.Cockpit2ElectricalGeneratorOn,
                    Writable = true,
                    DataType = "int[8]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalGeneratorAmps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/generator_amps",
                    Units = "amps",
                    Description = "Generator amperage.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Generator Amps",
                    Id = DataRefId.Cockpit2ElectricalGeneratorAmps,
                    Writable = false,
                    DataType = "float[8]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalAPUGeneratorOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_generator_on",
                    Units = "boolean",
                    Description = "APU generator is turned on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical APU Generator On",
                    Id = DataRefId.Cockpit2ElectricalAPUGeneratorOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalAPUGeneratorAmps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_generator_amps",
                    Units = "amps",
                    Description = "APU generator amperage.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical APU Generator Amps",
                    Id = DataRefId.Cockpit2ElectricalAPUGeneratorAmps,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalAPUStarterSwitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_starter_switch",
                    Units = "enum",
                    Description = "APU power switch, 0 is off, 1 is on, 2 is start-er-up!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical APU Starter Switch",
                    Id = DataRefId.Cockpit2ElectricalAPUStarterSwitch,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalAPUN1Percent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_N1_percent",
                    Units = "percent",
                    Description = "N1 of the APU",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Apun1percent",
                    Id = DataRefId.Cockpit2ElectricalAPUN1Percent,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalAPUEGTC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_EGT_c",
                    Units = "celsius",
                    Description = "EGT of the APU",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical APUEGTC",
                    Id = DataRefId.Cockpit2ElectricalAPUEGTC,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalAPUDoor
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_door",
                    Units = "ratio",
                    Description = "APU door open ratio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical APU Door",
                    Id = DataRefId.Cockpit2ElectricalAPUDoor,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalAPURunning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_running",
                    Units = "boolean",
                    Description = "APU actually running, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical APU Running",
                    Id = DataRefId.Cockpit2ElectricalAPURunning,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalCrossTie
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/cross_tie",
                    Units = "boolean",
                    Description = "Switch to connect the two busses together - power from one feeds the other.  0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Cross Tie",
                    Id = DataRefId.Cockpit2ElectricalCrossTie,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalDcVoltmeterSelection
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/dc_voltmeter_selection",
                    Units = "enum",
                    Description = "Volt-meter selection (0=external,1=ctr,2=lft,3=rgt,4=tpl,5=bat - use cmnds to set!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Dc Voltmeter Selection",
                    Id = DataRefId.Cockpit2ElectricalDcVoltmeterSelection,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalDcVoltmeterValue
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/dc_voltmeter_value",
                    Units = "voltage",
                    Description = "volt-meter value",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Dc Voltmeter Value",
                    Id = DataRefId.Cockpit2ElectricalDcVoltmeterValue,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalBusVolts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/bus_volts",
                    Units = "voltage",
                    Description = "Bus voltage for given bus - dim 4 until 1030",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Bus Volts",
                    Id = DataRefId.Cockpit2ElectricalBusVolts,
                    Writable = true,
                    DataType = "float[6]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalBusLoadAmps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/bus_load_amps",
                    Units = "amps",
                    Description = "Bus load in amps per bus - dim 4 until 1030",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Bus Load Amps",
                    Id = DataRefId.Cockpit2ElectricalBusLoadAmps,
                    Writable = true,
                    DataType = "float[6]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalPluginBusLoadAmps
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/plugin_bus_load_amps",
                    Units = "amps",
                    Description = "Add additional load to this dataref to create additional custom bus loads.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Plugin Bus Load Amps",
                    Id = DataRefId.Cockpit2ElectricalPluginBusLoadAmps,
                    Writable = true,
                    DataType = "float[6]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalPanelBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/panel_brightness_ratio",
                    Units = "ratio",
                    Description = "This is the actual panel brightness, taking into account failures",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Panel Brightness Ratio",
                    Id = DataRefId.Cockpit2ElectricalPanelBrightnessRatio,
                    Writable = false,
                    DataType = "float[4]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalPanelBrightnessRatioAuto
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/panel_brightness_ratio_auto",
                    Units = "ratio",
                    Description = "This is the actual panel brightness, taking into account failures",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Panel Brightness Ratio Auto",
                    Id = DataRefId.Cockpit2ElectricalPanelBrightnessRatioAuto,
                    Writable = false,
                    DataType = "float[4]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalPanelBrightnessRatioManual
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/panel_brightness_ratio_manual",
                    Units = "ratio",
                    Description = "This is the actual panel brightness, taking into account failures",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Panel Brightness Ratio Manual",
                    Id = DataRefId.Cockpit2ElectricalPanelBrightnessRatioManual,
                    Writable = false,
                    DataType = "float[4]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalInstrumentBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/instrument_brightness_ratio",
                    Units = "ratio",
                    Description = "Actual instrument brightness, taking into account failures - was [16] until 11.10",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Instrument Brightness Ratio",
                    Id = DataRefId.Cockpit2ElectricalInstrumentBrightnessRatio,
                    Writable = false,
                    DataType = "float[32]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalInstrumentBrightnessRatioAuto
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/instrument_brightness_ratio_auto",
                    Units = "ratio",
                    Description = "Actual instrument brightness, taking into account failures - was [16] until 11.10",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Instrument Brightness Ratio Auto",
                    Id = DataRefId.Cockpit2ElectricalInstrumentBrightnessRatioAuto,
                    Writable = false,
                    DataType = "float[32]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalInstrumentBrightnessRatioManual
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/instrument_brightness_ratio_manual",
                    Units = "ratio",
                    Description = "Actual instrument brightness, taking into account failures - was [16] until 11.10",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical Instrument Brightness Ratio Manual",
                    Id = DataRefId.Cockpit2ElectricalInstrumentBrightnessRatioManual,
                    Writable = false,
                    DataType = "float[32]"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalHUDBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/HUD_brightness_ratio",
                    Units = "ratio",
                    Description = "Actual HUD brightness, taking into account failures",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical HUD Brightness Ratio",
                    Id = DataRefId.Cockpit2ElectricalHUDBrightnessRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalHUDBrightnessRatioAuto
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/HUD_brightness_ratio_auto",
                    Units = "ratio",
                    Description = "Actual HUD brightness, taking into account failures",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical HUD Brightness Ratio Auto",
                    Id = DataRefId.Cockpit2ElectricalHUDBrightnessRatioAuto,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2ElectricalHUDBrightnessRatioManual
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/HUD_brightness_ratio_manual",
                    Units = "ratio",
                    Description = "Actual HUD brightness, taking into account failures",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2electrical HUD Brightness Ratio Manual",
                    Id = DataRefId.Cockpit2ElectricalHUDBrightnessRatioManual,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsCyclicElevatorDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/cyclic_elevator_deg",
                    Units = "degrees",
                    Description = "This is the longitudinal cyclic COMMAND, in degrees. Positive forwards cyclic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Cyclic Elevator Deg",
                    Id = DataRefId.Cockpit2EngineActuatorsCyclicElevatorDeg,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsCyclicAileronDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/cyclic_aileron_deg",
                    Units = "degrees",
                    Description = "This is the lateral cyclic COMMAND, in degrees. Positive right cyclic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Cyclic Aileron Deg",
                    Id = DataRefId.Cockpit2EngineActuatorsCyclicAileronDeg,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsThrottleRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/throttle_ratio",
                    Units = "ratio",
                    Description = "Throttle position of the handle itself, from 0.0 (idle) to 1.0 (max normal).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Throttle Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsThrottleRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsThrottleBetaRevRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/throttle_beta_rev_ratio",
                    Units = "ratio",
                    Description = "Throttle position of the handle as a ratio with reverse and beta, -2..-1 = rev, -1..0=beta, 0..1=alpha",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Throttle Beta Rev Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsThrottleBetaRevRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsThrottleJetRevRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/throttle_jet_rev_ratio",
                    Units = "ratio",
                    Description = "Throttle position of the handle as a ratio with reverse, -1..0 = rev, 0..1=fwd",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Throttle Jet Rev Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsThrottleJetRevRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsBetaRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/beta_ratio",
                    Units = "ratio",
                    Description = "Throttle position of the handle as a ratio, 0.0 is minimum beta, 1.0 = maximum beta.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Beta Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsBetaRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsThrottleRatioAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/throttle_ratio_all",
                    Units = "ratio",
                    Description = "Throttle position of the handle itself - this controls all the handles at once.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Throttle Ratio All",
                    Id = DataRefId.Cockpit2EngineActuatorsThrottleRatioAll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsThrottleBetaRevRatioAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/throttle_beta_rev_ratio_all",
                    Units = "ratio",
                    Description = "Controls the throttle handle position, but includes beta and reverse.  -2..-1 is reverse, -1..0 is beta, 0..1 is alpha.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Throttle Beta Rev Ratio All",
                    Id = DataRefId.Cockpit2EngineActuatorsThrottleBetaRevRatioAll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsThrottleJetRevRatioAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/throttle_jet_rev_ratio_all",
                    Units = "ratio",
                    Description = "Controls the throttle handle position, but includes reverse.  -1..0 is reverse, 0..1 is fwd.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Throttle Jet Rev Ratio All",
                    Id = DataRefId.Cockpit2EngineActuatorsThrottleJetRevRatioAll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPropRotationSpeedRadSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_rotation_speed_rad_sec",
                    Units = "radians/second",
                    Description = "Prop handle position, in radians per second of requested prop rpm.  Use this if your plane has a constant speed prop.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Prop Rotation Speed Rad Sec",
                    Id = DataRefId.Cockpit2EngineActuatorsPropRotationSpeedRadSec,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPropRotationSpeedRadSecAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_rotation_speed_rad_sec_all",
                    Units = "radians/second",
                    Description = "Prop handle position, this controls all props at once.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Prop Rotation Speed Rad Sec All",
                    Id = DataRefId.Cockpit2EngineActuatorsPropRotationSpeedRadSecAll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPropAngleDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_angle_degrees",
                    Units = "degrees",
                    Description = "Prop handle position, in degrees.  Use this if your plane has a manual-adjust prop.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Prop Angle Degrees",
                    Id = DataRefId.Cockpit2EngineActuatorsPropAngleDegrees,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPropAngleDegreesAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_angle_degrees_all",
                    Units = "degrees",
                    Description = "Prop handle position, in degrees, set all at once.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Prop Angle Degrees All",
                    Id = DataRefId.Cockpit2EngineActuatorsPropAngleDegreesAll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPropRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_ratio",
                    Units = "ratio",
                    Description = "Prop handle position, in ratio. NOTE: This is also used for helicopter collective!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Prop Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsPropRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPropRatioAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_ratio_all",
                    Units = "ratio",
                    Description = "Prop handle position, in ratio. This controls all handles at once. NOTE: This is also used for helicopter collective!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Prop Ratio All",
                    Id = DataRefId.Cockpit2EngineActuatorsPropRatioAll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsMixtureRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/mixture_ratio",
                    Units = "ratio",
                    Description = "Mixture handle position, 0.0 (cutoff) to 1.0 (full rich).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Mixture Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsMixtureRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsMixtureRatioAll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/mixture_ratio_all",
                    Units = "ratio",
                    Description = "Mixture handle position, this controls all at once.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Mixture Ratio All",
                    Id = DataRefId.Cockpit2EngineActuatorsMixtureRatioAll,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsCarbHeatRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/carb_heat_ratio",
                    Units = "ratio",
                    Description = "Carb-heat handle position, 0.0 (none) to 1.0 (full).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Carb Heat Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsCarbHeatRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsCowlFlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/cowl_flap_ratio",
                    Units = "ratio",
                    Description = "Cowl-flap handle position, 0.0 (none) to 1.0 (full open).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Cowl Flap Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsCowlFlapRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPrimerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/primer_ratio",
                    Units = "ratio",
                    Description = "Primer handle position, 0.0 (none) to 1.0 (on).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Primer Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsPrimerRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsAfterburnerEnabled
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/afterburner_enabled",
                    Units = "boolean",
                    Description = "Afterburner enabled, on or off.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Afterburner Enabled",
                    Id = DataRefId.Cockpit2EngineActuatorsAfterburnerEnabled,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsIgniterOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/igniter_on",
                    Units = "boolean",
                    Description = "Igniter, on or off.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Igniter On",
                    Id = DataRefId.Cockpit2EngineActuatorsIgniterOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsAutoIgniteOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/auto_ignite_on",
                    Units = "boolean",
                    Description = "Auto-igniter switch, 0 or 1. Auto-ignition. This switch turns on a continuous ignition source in the engine to automatically relight it if there is a flameout.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Auto Ignite On",
                    Id = DataRefId.Cockpit2EngineActuatorsAutoIgniteOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsIgnitionOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/ignition_on",
                    Units = "enum",
                    Description = "0 = off, 1 = left, 2 = right, 3 = both",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Ignition On",
                    Id = DataRefId.Cockpit2EngineActuatorsIgnitionOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsIgnitionKey
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/ignition_key",
                    Units = "enum",
                    Description = "0 = off, 1 = left, 2 = right, 3 = both, 4 = starting",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Ignition Key",
                    Id = DataRefId.Cockpit2EngineActuatorsIgnitionKey,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsStarterHit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/starter_hit",
                    Units = "boolean",
                    Description = "True while the starter motor is engaged",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Starter Hit",
                    Id = DataRefId.Cockpit2EngineActuatorsStarterHit,
                    Writable = false,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsFadecOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/fadec_on",
                    Units = "boolean",
                    Description = "Fadec, ok or off.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Fadec On",
                    Id = DataRefId.Cockpit2EngineActuatorsFadecOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPrimerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/primer_on",
                    Units = "boolean",
                    Description = "Primer button, on or off.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Primer On",
                    Id = DataRefId.Cockpit2EngineActuatorsPrimerOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsFuelPumpOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/fuel_pump_on",
                    Units = "boolean",
                    Description = "Fuel pump, on or off.  This is the electric per-engine fuel pump!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Fuel Pump On",
                    Id = DataRefId.Cockpit2EngineActuatorsFuelPumpOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsIdleSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/idle_speed",
                    Units = "boolean",
                    Description = "Idle speed, hi=1 or lo=0.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Idle Speed",
                    Id = DataRefId.Cockpit2EngineActuatorsIdleSpeed,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsIdleSpeedRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/idle_speed_ratio",
                    Units = "[0..1]",
                    Description = "Idle speed, hi=1 or lo=0 - continuous control",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Idle Speed Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsIdleSpeedRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPropMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_mode",
                    Units = "enum",
                    Description = "This is the propeller and engine operation mode. It is used for props and jets. Mode 0 is feathered, 1 is normal, 2 is in beta, and reverse (prop or jet) is mode 3.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Prop Mode",
                    Id = DataRefId.Cockpit2EngineActuatorsPropMode,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsPropPitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_pitch_deg",
                    Units = "degrees",
                    Description = "This is the REQUESTED pitch of the prop in degrees from its flat-pitch setting.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Prop Pitch Deg",
                    Id = DataRefId.Cockpit2EngineActuatorsPropPitchDeg,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsStartLockEngaged
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/start_lock_engaged",
                    Units = "boolean",
                    Description = "Start lock to lock prop into fine pitch position so it doesn't feather on loss of oil pressure, for fixed turbofan engines.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Start Lock Engaged",
                    Id = DataRefId.Cockpit2EngineActuatorsStartLockEngaged,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsUnfeatherPumpRunning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/unfeather_pump_running",
                    Units = "boolean",
                    Description = "Manual unfeather pump can provide oil pressure to the governor, to unfeather a stopped prop when the startlocks weren't engaged. Running the pump first unfeathers the prop and then engages the startlock",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Unfeather Pump Running",
                    Id = DataRefId.Cockpit2EngineActuatorsUnfeatherPumpRunning,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsGovernorOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/governor_on",
                    Units = "boolean",
                    Description = "Governor on-off switch.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Governor On",
                    Id = DataRefId.Cockpit2EngineActuatorsGovernorOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsFireExtinguisherOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/fire_extinguisher_on",
                    Units = "boolean",
                    Description = "Fire extinguisher on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Fire Extinguisher On",
                    Id = DataRefId.Cockpit2EngineActuatorsFireExtinguisherOn,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsClutchEngage
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/clutch_engage",
                    Units = "boolean",
                    Description = "XP10: the on/off status of the clutch, either per engine or per prop, depending on voodoo, dim 8. XP11: there is only ONE clutch for the whle airplane.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Clutch Engage",
                    Id = DataRefId.Cockpit2EngineActuatorsClutchEngage,
                    Writable = true,
                    DataType = "float[1]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsClutchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/clutch_ratio",
                    Units = "ratio",
                    Description = "XP10: the ratio of the clutch, either per engine or per prop, depending on voodoo, dim 8. XP11: there is only ONE clutch for the whole airplane.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Clutch Ratio",
                    Id = DataRefId.Cockpit2EngineActuatorsClutchRatio,
                    Writable = true,
                    DataType = "float[1]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsManualFeatherProp
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/manual_feather_prop",
                    Units = "boolean",
                    Description = "override and activate the feather, no matter what any auto-feather logic does.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators Manual Feather Prop",
                    Id = DataRefId.Cockpit2EngineActuatorsManualFeatherProp,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsN1TargetBug
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/N1_target_bug",
                    Units = "percent",
                    Description = "N1 bug (target for thrust reference), %",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators N1target Bug",
                    Id = DataRefId.Cockpit2EngineActuatorsN1TargetBug,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineActuatorsEPRTargetBug
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/EPR_target_bug",
                    Units = "percent",
                    Description = "EPR bug (target for thrust reference), %",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Actuators EPR Target Bug",
                    Id = DataRefId.Cockpit2EngineActuatorsEPRTargetBug,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsN1Percent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/N1_percent",
                    Units = "percent",
                    Description = "N1, %.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators N1percent",
                    Id = DataRefId.Cockpit2EngineIndicatorsN1Percent,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsN2Percent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/N2_percent",
                    Units = "percent",
                    Description = "N2, %.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators N2percent",
                    Id = DataRefId.Cockpit2EngineIndicatorsN2Percent,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsMPRInHg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/MPR_in_hg",
                    Units = "inches_hg",
                    Description = "Manifold pressure, inches HG.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators MPR In Hg",
                    Id = DataRefId.Cockpit2EngineIndicatorsMPRInHg,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsEPRRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/EPR_ratio",
                    Units = "ratio",
                    Description = "EPR, ratio.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators EPR Ratio",
                    Id = DataRefId.Cockpit2EngineIndicatorsEPRRatio,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsTorqueNMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/torque_n_mtr",
                    Units = "newton_meters",
                    Description = "Torque, NM.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Torque N Mtr",
                    Id = DataRefId.Cockpit2EngineIndicatorsTorqueNMtr,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsFuelFlowKgSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/fuel_flow_kg_sec",
                    Units = "kilograms/second",
                    Description = "total fuel flow, kilograms per second.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Fuel Flow Kg Sec",
                    Id = DataRefId.Cockpit2EngineIndicatorsFuelFlowKgSec,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsFuelFlowDryKgSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/fuel_flow_dry_kg_sec",
                    Units = "kilograms/second",
                    Description = "dry fuel flow, kilograms per second.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Fuel Flow Dry Kg Sec",
                    Id = DataRefId.Cockpit2EngineIndicatorsFuelFlowDryKgSec,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsITTDegC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/ITT_deg_C",
                    Units = "degrees_C_or_F",
                    Description = "ITT, deg.  Dataref label is wrong, units vary by plane.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators ITT Deg C",
                    Id = DataRefId.Cockpit2EngineIndicatorsITTDegC,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsEGTDegC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/EGT_deg_C",
                    Units = "degrees_C_or_F",
                    Description = "EGT, deg.  Dataref label is wrong, units vary by plane.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators EGT Deg C",
                    Id = DataRefId.Cockpit2EngineIndicatorsEGTDegC,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsCHTDegC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/CHT_deg_C",
                    Units = "degrees_C_or_F",
                    Description = "CHT, deg.  Dataref label is wrong, units vary by plane.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators CHT Deg C",
                    Id = DataRefId.Cockpit2EngineIndicatorsCHTDegC,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsFuelPressurePsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/fuel_pressure_psi",
                    Units = "pounds/square_inch",
                    Description = "Fuel pressure, psi.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Fuel Pressure Psi",
                    Id = DataRefId.Cockpit2EngineIndicatorsFuelPressurePsi,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsOilPressurePsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/oil_pressure_psi",
                    Units = "pounds/square_inch",
                    Description = "Oil pressure, psi.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Oil Pressure Psi",
                    Id = DataRefId.Cockpit2EngineIndicatorsOilPressurePsi,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsOilTemperatureDegC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/oil_temperature_deg_C",
                    Units = "degrees_C_or_F",
                    Description = "Oil temp, deg.    Dataref label is wrong, units vary by plane.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Oil Temperature Deg C",
                    Id = DataRefId.Cockpit2EngineIndicatorsOilTemperatureDegC,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsOilQuantityRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/oil_quantity_ratio",
                    Units = "ratio",
                    Description = "Oil quantity, 0.0 to 1.0.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Oil Quantity Ratio",
                    Id = DataRefId.Cockpit2EngineIndicatorsOilQuantityRatio,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsPowerWatts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/power_watts",
                    Units = "watts",
                    Description = "Actual engine power output.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Power Watts",
                    Id = DataRefId.Cockpit2EngineIndicatorsPowerWatts,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsThrustN
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/thrust_n",
                    Units = "newtons",
                    Description = "Total engine thrust in Newtons",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Thrust N",
                    Id = DataRefId.Cockpit2EngineIndicatorsThrustN,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsThrustDryN
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/thrust_dry_n",
                    Units = "newtons",
                    Description = "Dry engine thrust in Newtons",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Thrust Dry N",
                    Id = DataRefId.Cockpit2EngineIndicatorsThrustDryN,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsEngineSpeedRpm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/engine_speed_rpm",
                    Units = "revolutions/minute",
                    Description = "Engine speed, radians per second",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Engine Speed Rpm",
                    Id = DataRefId.Cockpit2EngineIndicatorsEngineSpeedRpm,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsPropSpeedRpm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/prop_speed_rpm",
                    Units = "revolutions/minute",
                    Description = "Prop speed, radians per second                                                                                                                                                                                                         boolean",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Prop Speed Rpm",
                    Id = DataRefId.Cockpit2EngineIndicatorsPropSpeedRpm,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsCarburetorTemperatureC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/carburetor_temperature_C",
                    Units = "degrees_C",
                    Description = "Carburator temperature in degrees C",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Carburetor Temperature C",
                    Id = DataRefId.Cockpit2EngineIndicatorsCarburetorTemperatureC,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsIgniterSparking
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/igniter_sparking",
                    Units = "boolean",
                    Description = "Whether igniters are sparking, either because the pilot or system logic turned them on, power is available and they are not failed",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Igniter Sparking",
                    Id = DataRefId.Cockpit2EngineIndicatorsIgniterSparking,
                    Writable = false,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2EngineIndicatorsIgniterVolt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/engine/indicators/igniter_volt",
                    Units = "volt",
                    Description = "Voltage we have to charge the ignition, useful for sound effects",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2engine Indicators Igniter Volt",
                    Id = DataRefId.Cockpit2EngineIndicatorsIgniterVolt,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelTankSelectorLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_selector_left",
                    Units = "enum",
                    Description = "This is the left-engine fuel-tank selector.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Tank Selector Left",
                    Id = DataRefId.Cockpit2FuelFuelTankSelectorLeft,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelTankSelectorRight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_selector_right",
                    Units = "enum",
                    Description = "This is the right-engine fuel-tank selector.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Tank Selector Right",
                    Id = DataRefId.Cockpit2FuelFuelTankSelectorRight,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelTankSelector
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_selector",
                    Units = "enum",
                    Description = "0=none,1=left,2=center,3=right,4=all",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Tank Selector",
                    Id = DataRefId.Cockpit2FuelFuelTankSelector,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelTankTransferTo
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_transfer_to",
                    Units = "enum",
                    Description = "0=none,1=left,2=center,3=right,5=aft",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Tank Transfer To",
                    Id = DataRefId.Cockpit2FuelFuelTankTransferTo,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelTankTransferFrom
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_transfer_from",
                    Units = "enum",
                    Description = "0=none,1=left,2=center,3=right,5=aft",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Tank Transfer From",
                    Id = DataRefId.Cockpit2FuelFuelTankTransferFrom,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelTankPumpOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_pump_on",
                    Units = "bool",
                    Description = "True if the pump for this tank is on.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Tank Pump On",
                    Id = DataRefId.Cockpit2FuelFuelTankPumpOn,
                    Writable = true,
                    DataType = "int[9]"
                };
            }
        }
        private DataRefElement Cockpit2FuelShowingAux
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/showing_aux",
                    Units = "bool",
                    Description = "True if user is holding down the aux-tank button.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Showing Aux",
                    Id = DataRefId.Cockpit2FuelShowingAux,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelQuantity
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_quantity",
                    Units = "kgs",
                    Description = "Indicated fuel level per tank",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Quantity",
                    Id = DataRefId.Cockpit2FuelFuelQuantity,
                    Writable = false,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelTotalizerInitKg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_totalizer_init_kg",
                    Units = "kg",
                    Description = "Total fuel on board the fuel totalizer was initialized with",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Totalizer Init Kg",
                    Id = DataRefId.Cockpit2FuelFuelTotalizerInitKg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelTotalizerSumKg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_totalizer_sum_kg",
                    Units = "kg",
                    Description = "Total accumulated fuel used by all engines since totalizer initialization",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Totalizer Sum Kg",
                    Id = DataRefId.Cockpit2FuelFuelTotalizerSumKg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2FuelTransferPumpLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/transfer_pump_left",
                    Units = "enum",
                    Description = "Transfer from left AUXes to left FEEDers: 0: Off, 1: Auto, 2: On/Override ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Transfer Pump Left",
                    Id = DataRefId.Cockpit2FuelTransferPumpLeft,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelTransferPumpRight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/transfer_pump_right",
                    Units = "enum",
                    Description = "Transfer from right AUXes to right FEEDers: 0: Off, 1: Auto, 2: On/Override",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Transfer Pump Right",
                    Id = DataRefId.Cockpit2FuelTransferPumpRight,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelTransferPumpActivation
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/transfer_pump_activation",
                    Units = "kg",
                    Description = "Automatically transfer from AUXes to FEEDers in auto mode when feeder has more than X kg left to full",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Transfer Pump Activation",
                    Id = DataRefId.Cockpit2FuelTransferPumpActivation,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelLevelIndicatedLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_level_indicated_left",
                    Units = "kg",
                    Description = "Indicated fuel level left, shows total or only nacelle tanks depending if user is holding down the aux-tank button.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Level Indicated Left",
                    Id = DataRefId.Cockpit2FuelFuelLevelIndicatedLeft,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2FuelFuelLevelIndicatedRight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_level_indicated_right",
                    Units = "kg",
                    Description = "Indicated fuel level right, shows total or only nacelle tanks depending if user is holding down the aux-tank button.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Fuel Level Indicated Right",
                    Id = DataRefId.Cockpit2FuelFuelLevelIndicatedRight,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2FuelFirewallClosedLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/firewall_closed_left",
                    Units = "boolean",
                    Description = "Firewall valve closed, left",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Firewall Closed Left",
                    Id = DataRefId.Cockpit2FuelFirewallClosedLeft,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelFirewallClosedRight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/firewall_closed_right",
                    Units = "boolean",
                    Description = "Firewall valve closed, right",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Firewall Closed Right",
                    Id = DataRefId.Cockpit2FuelFirewallClosedRight,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelAutoCrossfeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/auto_crossfeed",
                    Units = "enum",
                    Description = "0=Off 1=Auto 2=On - If fuel pressure on one side is low, due to fuel pump failure for example, cross-feed is opened to allow one pump to supply pressure to both engines.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Auto Crossfeed",
                    Id = DataRefId.Cockpit2FuelAutoCrossfeed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelNoTransferLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/no_transfer_left",
                    Units = "boolean",
                    Description = "Warning light, will illuminate when transfer from aux to feeder is requested, but aux tank is empty",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel No Transfer Left",
                    Id = DataRefId.Cockpit2FuelNoTransferLeft,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelNoTransferRight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/no_transfer_right",
                    Units = "boolean",
                    Description = "Warning light, will illuminate when transfer from aux to feeder is requested, but aux tank is empty",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel No Transfer Right",
                    Id = DataRefId.Cockpit2FuelNoTransferRight,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelTransferTest
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/transfer_test",
                    Units = "boolean",
                    Description = "Transfer test switch. 0 = normal, -1 = test left, +1 = test right",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Transfer Test",
                    Id = DataRefId.Cockpit2FuelTransferTest,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2FuelTankPumpPressurePsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/tank_pump_pressure_psi",
                    Units = "psi",
                    Description = "Pressure generated by the fuel pump per tank. If multiple tanks are accesible per the fuel selector, fuel will be consumed from the tanks in order of pump pressure",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2fuel Tank Pump Pressure Psi",
                    Id = DataRefId.Cockpit2FuelTankPumpPressurePsi,
                    Writable = true,
                    DataType = "float[9]"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsBarometerSettingInHgPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/barometer_setting_in_hg_pilot",
                    Units = "inches_hg",
                    Description = "Barometric pressure setting, inches HG.  Pilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Barometer Setting In Hg Pilot",
                    Id = DataRefId.Cockpit2GaugesActuatorsBarometerSettingInHgPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsBarometerSettingInHgCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/barometer_setting_in_hg_copilot",
                    Units = "inches_hg",
                    Description = "Barometric pressure setting, inches HG.  Copilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Barometer Setting In Hg Copilot",
                    Id = DataRefId.Cockpit2GaugesActuatorsBarometerSettingInHgCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsBarometerSettingInHgStby
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/barometer_setting_in_hg_stby",
                    Units = "inches_hg",
                    Description = "Barometric pressure setting, inches HG.  Standby instrument.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Barometer Setting In Hg Stby",
                    Id = DataRefId.Cockpit2GaugesActuatorsBarometerSettingInHgStby,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsRadioAltimeterBugFtPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/radio_altimeter_bug_ft_pilot",
                    Units = "feet",
                    Description = "Radio altitude bug entered into the radio altimeter. Pilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Radio Altimeter Bug Ft Pilot",
                    Id = DataRefId.Cockpit2GaugesActuatorsRadioAltimeterBugFtPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsRadioAltimeterBugFtCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/radio_altimeter_bug_ft_copilot",
                    Units = "feet",
                    Description = "Radio altitude bug entered into the radio altimeter. Copilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Radio Altimeter Bug Ft Copilot",
                    Id = DataRefId.Cockpit2GaugesActuatorsRadioAltimeterBugFtCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsBaroAltimeterBugFtPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/baro_altimeter_bug_ft_pilot",
                    Units = "feet",
                    Description = "Baro altitude bug. Pilot side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Baro Altimeter Bug Ft Pilot",
                    Id = DataRefId.Cockpit2GaugesActuatorsBaroAltimeterBugFtPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsBaroAltimeterBugFtCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/baro_altimeter_bug_ft_copilot",
                    Units = "feet",
                    Description = "Baro altitude bug. Copilot side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Baro Altimeter Bug Ft Copilot",
                    Id = DataRefId.Cockpit2GaugesActuatorsBaroAltimeterBugFtCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsArtificialHorizonAdjustDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/artificial_horizon_adjust_deg_pilot",
                    Units = "degrees",
                    Description = "Artificial horizon pitch-reference adjustment. Pilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Artificial Horizon Adjust Deg Pilot",
                    Id = DataRefId.Cockpit2GaugesActuatorsArtificialHorizonAdjustDegPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsArtificialHorizonAdjustDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/artificial_horizon_adjust_deg_copilot",
                    Units = "degrees",
                    Description = "Artificial horizon pitch-reference adjustment. Copilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Artificial Horizon Adjust Deg Copilot",
                    Id = DataRefId.Cockpit2GaugesActuatorsArtificialHorizonAdjustDegCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesActuatorsAirspeedBugDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/airspeed_bug_deg",
                    Units = "degrees",
                    Description = "ASI bug location on the dial, in degrees, 0 straight up, positive clockwise.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Actuators Airspeed Bug Deg",
                    Id = DataRefId.Cockpit2GaugesActuatorsAirspeedBugDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsSlipDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/slip_deg",
                    Units = "degrees",
                    Description = "Slip indication, in degrees of ball deflection from centered.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Slip Deg",
                    Id = DataRefId.Cockpit2GaugesIndicatorsSlipDeg,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsCompassHeadingDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/compass_heading_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated heading of the wet compass, in degrees.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Compass Heading Deg Mag",
                    Id = DataRefId.Cockpit2GaugesIndicatorsCompassHeadingDegMag,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/airspeed_acceleration_kts_sec_pilot",
                    Units = "knots/second",
                    Description = "acceleration of airspeed (ASI trend)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Airspeed Acceleration Kts Sec Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/airspeed_acceleration_kts_sec_copilot",
                    Units = "knots/second",
                    Description = "acceleration of airspeed (ASI trend)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Airspeed Acceleration Kts Sec Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsAirspeedKtsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/airspeed_kts_pilot",
                    Units = "knots",
                    Description = "Indicated airspeed in knots, pilot. Writeable with override_IAS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Airspeed Kts Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsAirspeedKtsPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsAirspeedKtsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/airspeed_kts_copilot",
                    Units = "knots",
                    Description = "Indicated airspeed in knots, copilot. Writeable with override_IAS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Airspeed Kts Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsAirspeedKtsCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsAirspeedKtsStby
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/airspeed_kts_stby",
                    Units = "knots",
                    Description = "Indicated airspeed in knots, standby instrument. Writeable with override_IAS ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Airspeed Kts Stby",
                    Id = DataRefId.Cockpit2GaugesIndicatorsAirspeedKtsStby,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsCalibratedAirspeedKtsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/calibrated_airspeed_kts_pilot",
                    Units = "knots",
                    Description = "Calibrated airspeed in knots, pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Calibrated Airspeed Kts Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsCalibratedAirspeedKtsPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsCalibratedAirspeedKtsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/calibrated_airspeed_kts_copilot",
                    Units = "knots",
                    Description = "Calibrated airspeed in knots, copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Calibrated Airspeed Kts Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsCalibratedAirspeedKtsCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsCalibratedAirspeedKtsStby
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/calibrated_airspeed_kts_stby",
                    Units = "knots",
                    Description = "Calibrated airspeed in knots, standby instrument ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Calibrated Airspeed Kts Stby",
                    Id = DataRefId.Cockpit2GaugesIndicatorsCalibratedAirspeedKtsStby,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsAltitudeFtPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/altitude_ft_pilot",
                    Units = "feet",
                    Description = "Indicated height, MSL, in feet, primary system, based on pilots barometric pressure input.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Altitude Ft Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsAltitudeFtPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsAltitudeFtCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/altitude_ft_copilot",
                    Units = "feet",
                    Description = "Indicated height, MSL, in feet, primary system, based on co-pilots barometric pressure input.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Altitude Ft Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsAltitudeFtCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsAltitudeFtStby
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/altitude_ft_stby",
                    Units = "feet",
                    Description = "Indicated height, MSL, in feet, primary system, based on standby instrument barometric pressure input.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Altitude Ft Stby",
                    Id = DataRefId.Cockpit2GaugesIndicatorsAltitudeFtStby,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsVviFpmPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/vvi_fpm_pilot",
                    Units = "feet/minute",
                    Description = "Indicated vertical speed in feet per minute, pilot system.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators VVI Fpm Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsVviFpmPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsVviFpmCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/vvi_fpm_copilot",
                    Units = "feet/minute",
                    Description = "Indicated vertical speed in feet per minute, copilot system.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators VVI Fpm Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsVviFpmCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsTurnRateRollDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/turn_rate_roll_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated rate-of-turn, in degrees deflection, for newer roll-augmented turn-indicators.  Pilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Turn Rate Roll Deg Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsTurnRateRollDegPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsTrueAirspeedKtsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/true_airspeed_kts_pilot",
                    Units = "knots",
                    Description = "True airspeed in knots, for pilot pitot/static, calculated by ADC, requires pitot, static, oat sensor and ADC all to work correctly to give correct value",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators True Airspeed Kts Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsTrueAirspeedKtsPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsTrueAirspeedKtsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/true_airspeed_kts_copilot",
                    Units = "knots",
                    Description = "True airspeed in knots, for copilot pitot/static, calculated by ADC, requires pitot, static, oat sensor and ADC all to work correctly to give correct value",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators True Airspeed Kts Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsTrueAirspeedKtsCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsMachPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/mach_pilot",
                    Units = "mach",
                    Description = "number",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Mach Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsMachPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsMachCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/mach_copilot",
                    Units = "mach",
                    Description = "number",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Mach Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsMachCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsTurnRateRollDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/turn_rate_roll_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated rate-of-turn, in degrees deflection, for newer roll-augmented turn-indicators.  Copilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Turn Rate Roll Deg Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsTurnRateRollDegCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsTurnRateHeadingDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/turn_rate_heading_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated rate-of-turn, in degrees deflection, for old-style turn-indicators.  Pilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Turn Rate Heading Deg Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsTurnRateHeadingDegPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsTurnRateHeadingDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/turn_rate_heading_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated rate-of-turn, in degrees deflection, for old-style turn-indicators.  Copilot side.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Turn Rate Heading Deg Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsTurnRateHeadingDegCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsHeadingAHARSDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_AHARS_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: AHARS.  Side: Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Heading AHARS Deg Mag Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsHeadingAHARSDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsHeadingAHARSDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_AHARS_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: AHARS.  Side: Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Heading AHARS Deg Mag Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsHeadingAHARSDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsHeadingElectricDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_electric_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: electric gyro.  Side: Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Heading Electric Deg Mag Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsHeadingElectricDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsHeadingElectricDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_electric_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: electric gyro.  Side: Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Heading Electric Deg Mag Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsHeadingElectricDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsHeadingVacuumDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_vacuum_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: vacuum gyro.  Side: Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Heading Vacuum Deg Mag Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsHeadingVacuumDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsHeadingVacuumDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_vacuum_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: vacuum gyro.  Side: Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Heading Vacuum Deg Mag Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsHeadingVacuumDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsPitchAHARSDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: AHARS.  Side: Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Pitch AHARS Deg Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsPitchAHARSDegPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsPitchAHARSDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: AHARS.  Side: Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Pitch AHARS Deg Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsPitchAHARSDegCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsPitchElectricDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_electric_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: electric gyro.  Side: Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Pitch Electric Deg Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsPitchElectricDegPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsPitchElectricDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_electric_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: electric gyro.  Side: Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Pitch Electric Deg Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsPitchElectricDegCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsPitchVacuumDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: vacuum gyro.  Side: Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Pitch Vacuum Deg Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsPitchVacuumDegPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsPitchVacuumDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: vacuum gyro.  Side: Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Pitch Vacuum Deg Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsPitchVacuumDegCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRadioAltimeterHeightFtPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/radio_altimeter_height_ft_pilot",
                    Units = "feet",
                    Description = "Radio-altimeter indicated height in feet, pilot-side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Radio Altimeter Height Ft Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRadioAltimeterHeightFtPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRadioAltimeterHeightFtCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/radio_altimeter_height_ft_copilot",
                    Units = "feet",
                    Description = "Radio-altimeter indicated height in feet, copilot-side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Radio Altimeter Height Ft Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRadioAltimeterHeightFtCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRadioAltimeterDhLitPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/radio_altimeter_dh_lit_pilot",
                    Units = "boolean",
                    Description = "Radio-altimeter decision warning light, pilot-side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Radio Altimeter Dh Lit Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRadioAltimeterDhLitPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRadioAltimeterDhLitCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/radio_altimeter_dh_lit_copilot",
                    Units = "boolean",
                    Description = "Radio-altimeter decision warning light, copilot-side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Radio Altimeter Dh Lit Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRadioAltimeterDhLitCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsBaroAltimeterMdaLitPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/baro_altimeter_mda_lit_pilot",
                    Units = "boolean",
                    Description = "Baro-altimeter decision warning light, pilot-side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Baro Altimeter Mda Lit Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsBaroAltimeterMdaLitPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsBaroAltimeterMdaLitCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/baro_altimeter_mda_lit_copilot",
                    Units = "boolean",
                    Description = "Baro-altimeter decision warning light, copilot-side",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Baro Altimeter Mda Lit Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsBaroAltimeterMdaLitCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsBaroAltimeterAlertLitPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/baro_altimeter_alert_lit_pilot",
                    Units = "enum",
                    Description = "Baro-altimeter altitude alert light, as per autopilot altitude warn configuration, pilot. 0 = off, 1 = lit, 2 = blinking",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Baro Altimeter Alert Lit Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsBaroAltimeterAlertLitPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsBaroAltimeterAlertLitCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/baro_altimeter_alert_lit_copilot",
                    Units = "enum",
                    Description = "Baro-altimeter altitude alert light, as per autopilot altitude warn configuration, copilot. 0 = off, 1 = lit, 2 = blinking",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Baro Altimeter Alert Lit Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsBaroAltimeterAlertLitCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRollAHARSDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: AHARS.  Side: Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Roll AHARS Deg Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRollAHARSDegPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRollAHARSDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: AHARS.  Side: Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Roll AHARS Deg Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRollAHARSDegCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRollElectricDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_electric_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: electric gyro.  Side: Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Roll Electric Deg Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRollElectricDegPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRollElectricDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_electric_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: electric gyro.  Side: Copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Roll Electric Deg Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRollElectricDegCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRollVacuumDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: vacuum gyro.  Side: Pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Roll Vacuum Deg Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRollVacuumDegPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsRollVacuumDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Roll Vacuum Deg Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsRollVacuumDegCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsWindHeadingDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/wind_heading_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Wind direction currently acting on the plane, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Wind Heading Deg Mag",
                    Id = DataRefId.Cockpit2GaugesIndicatorsWindHeadingDegMag,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsWindSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/wind_speed_kts",
                    Units = "knots",
                    Description = "Wind speed currently acting on the plane, in knots true.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Wind Speed Kts",
                    Id = DataRefId.Cockpit2GaugesIndicatorsWindSpeedKts,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsSuction1Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/suction_1_ratio",
                    Units = "ratio",
                    Description = "Vacuum system 1 suction as ratio of max available in plane.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Suction1ratio",
                    Id = DataRefId.Cockpit2GaugesIndicatorsSuction1Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsSuction2Ratio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/suction_2_ratio",
                    Units = "ratio",
                    Description = "Vacuum system 2 suction as ratio of max available in plane.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Suction2ratio",
                    Id = DataRefId.Cockpit2GaugesIndicatorsSuction2Ratio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsTotalEnergyFpm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/total_energy_fpm",
                    Units = "feet/minute",
                    Description = "Total energy in feet/minute",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Total Energy Fpm",
                    Id = DataRefId.Cockpit2GaugesIndicatorsTotalEnergyFpm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsWaterRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/water_ratio",
                    Units = "ratio",
                    Description = "Ratio of releasable water still in the tank, 0..1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Water Ratio",
                    Id = DataRefId.Cockpit2GaugesIndicatorsWaterRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsSideslipDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/sideslip_degrees",
                    Units = "degrees",
                    Description = "Sideslip in degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Sideslip Degrees",
                    Id = DataRefId.Cockpit2GaugesIndicatorsSideslipDegrees,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsPropSyncDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/prop_sync_degrees",
                    Units = "degrees",
                    Description = "Degrees difference between two prop.  Can be used for prop sync display.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Prop Sync Degrees",
                    Id = DataRefId.Cockpit2GaugesIndicatorsPropSyncDegrees,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsCGIndicator
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/CG_indicator",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators CG Indicator",
                    Id = DataRefId.Cockpit2GaugesIndicatorsCGIndicator,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsGroundTrackMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/ground_track_mag_pilot",
                    Units = "degrees",
                    Description = "The ground track of the aircraft in degrees magnetic",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Ground Track Mag Pilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsGroundTrackMagPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsGroundTrackMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/ground_track_mag_copilot",
                    Units = "degrees",
                    Description = "The ground track of the aircraft in degrees magnetic",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Ground Track Mag Copilot",
                    Id = DataRefId.Cockpit2GaugesIndicatorsGroundTrackMagCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsMaxMachNumberInKias
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/max_mach_number_in_kias",
                    Units = "knots",
                    Description = "For planes with a max mach number, this is the max mach number converted to KIAS for the current plane altitude, etc. - useful for adaptive needles and limit markers on tapes",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Max Mach Number In Kias",
                    Id = DataRefId.Cockpit2GaugesIndicatorsMaxMachNumberInKias,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2GaugesIndicatorsMaxMachNumberOrSpeedKias
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/max_mach_number_or_speed_kias",
                    Units = "knots",
                    Description = "For planes with a max mach number, this is the lesser of the max mach number converted to KIAS for the current plane altitude and V-never-exceed.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2gauges Indicators Max Mach Number Or Speed Kias",
                    Id = DataRefId.Cockpit2GaugesIndicatorsMaxMachNumberOrSpeedKias,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2HydraulicsIndicatorsHydraulicPressure1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/hydraulics/indicators/hydraulic_pressure_1",
                    Units = "any",
                    Description = "Hydraulic system 1 pressure, units set by Plane-Maker.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2hydraulics Indicators Hydraulic Pressure1",
                    Id = DataRefId.Cockpit2HydraulicsIndicatorsHydraulicPressure1,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2HydraulicsIndicatorsHydraulicPressure2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/hydraulics/indicators/hydraulic_pressure_2",
                    Units = "any",
                    Description = "Hydraulic system 2 pressure, units set by Plane-Maker.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2hydraulics Indicators Hydraulic Pressure2",
                    Id = DataRefId.Cockpit2HydraulicsIndicatorsHydraulicPressure2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2HydraulicsIndicatorsHydraulicFluidRatio1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/hydraulics/indicators/hydraulic_fluid_ratio_1",
                    Units = "ratio",
                    Description = "Hydraulic fluid quantity, ratio of max, system 1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2hydraulics Indicators Hydraulic Fluid Ratio1",
                    Id = DataRefId.Cockpit2HydraulicsIndicatorsHydraulicFluidRatio1,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2HydraulicsIndicatorsHydraulicFluidRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/hydraulics/indicators/hydraulic_fluid_ratio_2",
                    Units = "ratio",
                    Description = "Hydraulic fluid quantity, ratio of max, system 2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2hydraulics Indicators Hydraulic Fluid Ratio2",
                    Id = DataRefId.Cockpit2HydraulicsIndicatorsHydraulicFluidRatio2,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2IceIceAllOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_all_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice All On",
                    Id = DataRefId.Cockpit2IceIceAllOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceInletHeatOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_inlet_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - inlet heat. This switch turns on de-icing heat in the engine air inlet keep ice from choking your engine. Engine 1 only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Inlet Heat On",
                    Id = DataRefId.Cockpit2IceIceInletHeatOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIcePropHeatOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_prop_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - prop heat. This switch turns on de-icing of the propeller(s) to keep ice from building up on your prop. Engine 1 only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Prop Heat On",
                    Id = DataRefId.Cockpit2IceIcePropHeatOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceInletHeatOnPerEngine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_inlet_heat_on_per_engine",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - inlet heat. This switch turns on de-icing heat in the engine air inlet keep ice from choking your engine.  Per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Inlet Heat On Per Engine",
                    Id = DataRefId.Cockpit2IceIceInletHeatOnPerEngine,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2IceIcePropHeatOnPerEngine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_prop_heat_on_per_engine",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - prop heat. This switch turns on de-icing of the propeller(s) to keep ice from building up on your prop.  Per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Prop Heat On Per Engine",
                    Id = DataRefId.Cockpit2IceIcePropHeatOnPerEngine,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2IceIceWindowHeatOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_window_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - windshield heat. This switch turns on windshield de-icing to keep ice from blocking your vision.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Window Heat On",
                    Id = DataRefId.Cockpit2IceIceWindowHeatOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIcePitotHeatOnPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_pitot_heat_on_pilot",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - pitot tube heat. This switch turns on de-icing heat in the pitot tube. If it freezes up your airspeed indicator and altimeter stop working. Airspeed and altitude related autopilot functions are also affected.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Pitot Heat On Pilot",
                    Id = DataRefId.Cockpit2IceIcePitotHeatOnPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIcePitotHeatOnCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_pitot_heat_on_copilot",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  Pitot tube heat, co-pilot. This switch turns on de-icing heat in the co-pilot side pitot tube. If it freezes up your airspeed indicator and altimeter stop working. Airspeed and altitude related autopilot functions are also affected.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Pitot Heat On Copilot",
                    Id = DataRefId.Cockpit2IceIcePitotHeatOnCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceAOAHeatOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_AOA_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  AOA sensor heat. This switch turns on de-icing heat for the AOA sensor. If it freezes up your AOA indicator stops working. AOA sensor failure will also affect the aircraft's artificial stability system if it has one.  Pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice AOA Heat On",
                    Id = DataRefId.Cockpit2IceIceAOAHeatOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceAOAHeatOnCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_AOA_heat_on_copilot",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  AOA sensor heat. This switch turns on de-icing heat for the AOA sensor. If it freezes up your AOA indicator stops working. AOA sensor failure will also affect the aircraft's artificial stability system if it has one.  Copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice AOA Heat On Copilot",
                    Id = DataRefId.Cockpit2IceIceAOAHeatOnCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceStaticHeatOnPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_static_heat_on_pilot",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  port heat. This switch turns on de-icing heat for the sensor. If it freezes up your altimeter, vvi and airspeed indicator stop working. Pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Static Heat On Pilot",
                    Id = DataRefId.Cockpit2IceIceStaticHeatOnPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceStaticHeatOnCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_static_heat_on_copilot",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  port heat. This switch turns on de-icing heat for the sensor. If it freezes up your altimeter, vvi and airspeed indicator stop working. Copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Static Heat On Copilot",
                    Id = DataRefId.Cockpit2IceIceStaticHeatOnCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfceHeatOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surfce_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - electric heat. This switch engages electrically heated leading edges. (All wings)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surfce Heat On",
                    Id = DataRefId.Cockpit2IceIceSurfceHeatOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfceHeatLeftOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surfce_heat_left_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - electric heat. This switch engages electrically heated leading edges. (Left wing)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surfce Heat Left On",
                    Id = DataRefId.Cockpit2IceIceSurfceHeatLeftOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfceHeatRightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surfce_heat_right_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - electric heat. This switch engages electrically heated leading edges. (Right wing)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surfce Heat Right On",
                    Id = DataRefId.Cockpit2IceIceSurfceHeatRightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfaceBootOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_boot_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - pneumatic. This switch inflates flexible bladders on the wing leading edges to pop off accumulated ice. (All wings)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surface Boot On",
                    Id = DataRefId.Cockpit2IceIceSurfaceBootOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfaceBootLeftOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_boot_left_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - pneumatic. This switch inflates flexible bladders on the wing leading edges to pop off accumulated ice. (Left wing)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surface Boot Left On",
                    Id = DataRefId.Cockpit2IceIceSurfaceBootLeftOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfaceBootRightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_boot_right_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - pneumatic. This switch inflates flexible bladders on the wing leading edges to pop off accumulated ice. (Right wing)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surface Boot Right On",
                    Id = DataRefId.Cockpit2IceIceSurfaceBootRightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfaceHotBleedAirOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_hot_bleed_air_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - bleed air. This switch directs warm air from the engines into the wing leading edges to keep them free of ice. (All wings)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surface Hot Bleed Air On",
                    Id = DataRefId.Cockpit2IceIceSurfaceHotBleedAirOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfaceHotBleedAirLeftOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_hot_bleed_air_left_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - bleed air. This switch directs warm air from the engines into the wing leading edges to keep them free of ice. (Left wing)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surface Hot Bleed Air Left On",
                    Id = DataRefId.Cockpit2IceIceSurfaceHotBleedAirLeftOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfaceHotBleedAirRightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_hot_bleed_air_right_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - bleed air. This switch directs warm air from the engines into the wing leading edges to keep them free of ice. (Right wing)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surface Hot Bleed Air Right On",
                    Id = DataRefId.Cockpit2IceIceSurfaceHotBleedAirRightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfaceTksOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_tks_on",
                    Units = "enum",
                    Description = "De-ice switch, 0, 1, or 2.  De-ice - TKS fluid. This switch activates the pump for the weeping wing, dissipating TKS fluid on the leading edges to keep them free of ice. 0 = Off, 1 = Norm, 2 = High. (All wings)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surface Tks On",
                    Id = DataRefId.Cockpit2IceIceSurfaceTksOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfaceTksLeftOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_tks_left_on",
                    Units = "enum",
                    Description = "De-ice switch, 0, 1, or 2.  De-ice - TKS fluid. This switch activates the pump for the weeping wing, dissipating TKS fluid on the leading edges to keep them free of ice. 0 = Off, 1 = Norm, 2 = High. (Left wing)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surface Tks Left On",
                    Id = DataRefId.Cockpit2IceIceSurfaceTksLeftOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceSurfaceTksRightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_tks_right_on",
                    Units = "enum",
                    Description = "De-ice switch, 0, 1, or 2.  De-ice - TKS fluid. This switch activates the pump for the weeping wing, dissipating TKS fluid on the leading edges to keep them free of ice. 0 = Off, 1 = Norm, 2 = High. (Right wing)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Surface Tks Right On",
                    Id = DataRefId.Cockpit2IceIceSurfaceTksRightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceCowlingThermalAntiIcePerEngine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/cowling_thermal_anti_ice_per_engine",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - inlet heat. This switch turns on thermal anti ice of the engine cowling and inlet. This takes hot bleed air from the HP compressor.  Per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Cowling Thermal Anti Ice Per Engine",
                    Id = DataRefId.Cockpit2IceCowlingThermalAntiIcePerEngine,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2IceIcePropTksOnPerEngine
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_prop_tks_on_per_engine",
                    Units = "enum",
                    Description = "De-ice switch, 0, 1, or 2.  De-ice - prop TKS. This switch turns on de-icing of the propeller(s) with TKS fluid to keep ice from building up on your prop. 0 = Off, 1 = Norm, 2 = High. Per engine",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Prop Tks On Per Engine",
                    Id = DataRefId.Cockpit2IceIcePropTksOnPerEngine,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2IceAntiIceEngineAir
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/anti_ice_engine_air",
                    Units = "ratio",
                    Description = "De-Ice ratio.  (Description needed)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Anti Ice Engine Air",
                    Id = DataRefId.Cockpit2IceAntiIceEngineAir,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2IceAntiIceEngineAirB
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/anti_ice_engine_air_b",
                    Units = "ratio",
                    Description = "De-Ice ratio.  (Description needed)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Anti Ice Engine Air B",
                    Id = DataRefId.Cockpit2IceAntiIceEngineAirB,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2IceIceAutoIgniteOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_auto_ignite_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - auto-ignition. This switch turns on a continuous ignition source in the engine to automatically relight it if there is a flameout.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Auto Ignite On",
                    Id = DataRefId.Cockpit2IceIceAutoIgniteOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceDetectOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_detect_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  Ice-detection: Turn this switch on to enable ice-detection... if the system detects ice, it will light up the ICE annunciator.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Detect On",
                    Id = DataRefId.Cockpit2IceIceDetectOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2IceIceTksFluidLiter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_tks_fluid_liter",
                    Units = "liter",
                    Description = "TKS de-icing fluid reserve. See sim/aircraft/specialcontrols/acf_tks_cap_liter for the plane's total capacity.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2ice Ice Tks Fluid Liter",
                    Id = DataRefId.Cockpit2IceIceTksFluidLiter,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationActuatorsBleedAirMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/bleed_air_mode",
                    Units = "enum",
                    Description = "Bleed air mode, 0=of, 1=left,2=both,3=right,4=apu,5=auto",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Actuators Bleed Air Mode",
                    Id = DataRefId.Cockpit2PressurizationActuatorsBleedAirMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationActuatorsDumpAllOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/dump_all_on",
                    Units = "boolean",
                    Description = "Dump all pressurization, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Actuators Dump All On",
                    Id = DataRefId.Cockpit2PressurizationActuatorsDumpAllOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationActuatorsDumpToAltitudeOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/dump_to_altitude_on",
                    Units = "feet",
                    Description = "Dump pressurization to the current altitude, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Actuators Dump To Altitude On",
                    Id = DataRefId.Cockpit2PressurizationActuatorsDumpToAltitudeOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationActuatorsCabinAltitudeFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/cabin_altitude_ft",
                    Units = "feet",
                    Description = "Cabin altitude commanded, feet.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Actuators Cabin Altitude Ft",
                    Id = DataRefId.Cockpit2PressurizationActuatorsCabinAltitudeFt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationActuatorsCabinVviFpm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/cabin_vvi_fpm",
                    Units = "feet/minute",
                    Description = "Cabin VVI commanded, feet.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Actuators Cabin VVI Fpm",
                    Id = DataRefId.Cockpit2PressurizationActuatorsCabinVviFpm,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationActuatorsMaxAllowableAltitudeFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/max_allowable_altitude_ft",
                    Units = "feet",
                    Description = "Maximum allowable altitude for this airplane to maintain the requested cabin altitude.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Actuators Max Allowable Altitude Ft",
                    Id = DataRefId.Cockpit2PressurizationActuatorsMaxAllowableAltitudeFt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationActuatorsAirCondOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/air_cond_on",
                    Units = "boolean",
                    Description = "Electrical air conditioning compressor on, consuming all the amps of rel_HVAC - not needed on airplanes with air cycle machines that drive the air conditioner off the bleed air power itself.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Actuators Air Cond On",
                    Id = DataRefId.Cockpit2PressurizationActuatorsAirCondOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationActuatorsHeaterOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/heater_on",
                    Units = "boolean",
                    Description = "Electrical heater grid on, 0 = off, 1 = flight max (consumes rel_HVAC amps), 2 = ground max (consumes 2x rel_HVAC amps, turned off by weight-off-wheels) - not needed on airplanes that are using hot bleed air and have no heaters",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Actuators Heater On",
                    Id = DataRefId.Cockpit2PressurizationActuatorsHeaterOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationActuatorsFanSetting
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/fan_setting",
                    Units = "enum",
                    Description = "Electric fan (vent blower) setting, consuming 0.1 of rel_HVAVC amps when running. 0 = Auto (Runs whenever air_cond_on or heater_on is on), 1 = Low, 2 = High",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Actuators Fan Setting",
                    Id = DataRefId.Cockpit2PressurizationActuatorsFanSetting,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationIndicatorsCabinAltitudeFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/indicators/cabin_altitude_ft",
                    Units = "feet",
                    Description = "Cabin altitude actually occurring, feet.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Indicators Cabin Altitude Ft",
                    Id = DataRefId.Cockpit2PressurizationIndicatorsCabinAltitudeFt,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationIndicatorsCabinVviFpm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/indicators/cabin_vvi_fpm",
                    Units = "feet/minute",
                    Description = "Cabin VVI actually occurring, fpm.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Indicators Cabin VVI Fpm",
                    Id = DataRefId.Cockpit2PressurizationIndicatorsCabinVviFpm,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationIndicatorsPressureDiffentialPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/indicators/pressure_diffential_psi",
                    Units = "pounds/square_inch",
                    Description = "Cabin differential pressure, psi.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Indicators Pressure Diffential Psi",
                    Id = DataRefId.Cockpit2PressurizationIndicatorsPressureDiffentialPsi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationIndicatorsOutflowValve
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/indicators/outflow_valve",
                    Units = "ratio",
                    Description = "Pressurization outflow valve ratio. 0 for fully closed, 1 for fully open. Writeable with override_pressurization",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Indicators Outflow Valve",
                    Id = DataRefId.Cockpit2PressurizationIndicatorsOutflowValve,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2PressurizationIndicatorsFanSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/indicators/fan_speed",
                    Units = "ratio",
                    Description = "Electric fan speed, will be 1.0 or 2.0 depending on fan setting or 0 when there's no power or the fan is turned off. Writeable with override_pressurization",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2pressurization Indicators Fan Speed",
                    Id = DataRefId.Cockpit2PressurizationIndicatorsFanSpeed,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2BleedairActuatorsEngineBleedSov
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/actuators/engine_bleed_sov",
                    Units = "boolean",
                    Description = "Engine bleed air shut off valve, close or open",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Actuators Engine Bleed Sov",
                    Id = DataRefId.Cockpit2BleedairActuatorsEngineBleedSov,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Cockpit2BleedairActuatorsApuBleed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/actuators/apu_bleed",
                    Units = "boolean",
                    Description = "APU bleed air valve, close or open. APU must be running at 100%N1 to provide bleed air",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Actuators Apu Bleed",
                    Id = DataRefId.Cockpit2BleedairActuatorsApuBleed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2BleedairActuatorsGpuBleed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/actuators/gpu_bleed",
                    Units = "boolean",
                    Description = "GPU bleed air valve, close or open. A GPU is supposed to be always available.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Actuators Gpu Bleed",
                    Id = DataRefId.Cockpit2BleedairActuatorsGpuBleed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2BleedairActuatorsIsolValveLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/actuators/isol_valve_left",
                    Units = "boolean",
                    Description = "Isolation Valve for left duct, close or open. This separates all engines on the left side of the plane, the left wing, and the left pack from the rest of the system",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Actuators Isol Valve Left",
                    Id = DataRefId.Cockpit2BleedairActuatorsIsolValveLeft,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2BleedairActuatorsIsolValveRight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/actuators/isol_valve_right",
                    Units = "boolean",
                    Description = "Isolation Valve for right duct, close or open. This separates all engines on the right side of the plane, the right wing, and the right pack from the rest of the system",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Actuators Isol Valve Right",
                    Id = DataRefId.Cockpit2BleedairActuatorsIsolValveRight,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2BleedairActuatorsPackLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/actuators/pack_left",
                    Units = "boolean",
                    Description = "Left pressurization pack, off or on. The left pack is supplied from the left side of the plane or through the left isolation valve and only available for airplanes made for 11.35 or newer",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Actuators Pack Left",
                    Id = DataRefId.Cockpit2BleedairActuatorsPackLeft,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2BleedairActuatorsPackCenter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/actuators/pack_center",
                    Units = "boolean",
                    Description = "Center pressurization pack, off or on. The center pack is supplied from center duct, which can be supplied from a center engine, APU, GPU, or, via the isolation valves, the left and/or right ducts. This pack is the only pack available for airplanes made for X-Plane 11.33 or older",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Actuators Pack Center",
                    Id = DataRefId.Cockpit2BleedairActuatorsPackCenter,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2BleedairActuatorsPackRight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/actuators/pack_right",
                    Units = "boolean",
                    Description = "Right pressurization pack, off or on. The right pack is supplied from the right side of the plane or through the right isolation valve and only available for airplanes made for 11.35 or newer",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Actuators Pack Right",
                    Id = DataRefId.Cockpit2BleedairActuatorsPackRight,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2BleedairIndicatorsBleedAvailableLeft
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/indicators/bleed_available_left",
                    Units = "ratio",
                    Description = "Bleed air available in the left duct, which can come from left engines or through the left isolation valve. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Indicators Bleed Available Left",
                    Id = DataRefId.Cockpit2BleedairIndicatorsBleedAvailableLeft,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2BleedairIndicatorsBleedAvailableCenter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/indicators/bleed_available_center",
                    Units = "ratio",
                    Description = "Bleed air available in the center duct, which can come from a center engine, APU, GPU, or, via the isolation valves, the left and/or right ducts.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Indicators Bleed Available Center",
                    Id = DataRefId.Cockpit2BleedairIndicatorsBleedAvailableCenter,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2BleedairIndicatorsBleedAvailableRight
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/indicators/bleed_available_right",
                    Units = "ratio",
                    Description = "Bleed air available in the right duct, which can come from right engines or through the right isolation valve. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Indicators Bleed Available Right",
                    Id = DataRefId.Cockpit2BleedairIndicatorsBleedAvailableRight,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2BleedairIndicatorsEngineLossFromBleedAirRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/indicators/engine_loss_from_bleed_air_ratio",
                    Units = "ratio",
                    Description = "Bleed air being sapped from the engine, stealing efficiency from the compressor. Writeable only with override_pressurization set",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Indicators Engine Loss From Bleed Air Ratio",
                    Id = DataRefId.Cockpit2BleedairIndicatorsEngineLossFromBleedAirRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2BleedairIndicatorsAPULossFromBleedAirRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/bleedair/indicators/APU_loss_from_bleed_air_ratio",
                    Units = "ratio",
                    Description = "Bleed air being sapped from the APU, stealing efficiency from the compressor. Writeable only with override_pressurization set",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2bleedair Indicators APU Loss From Bleed Air Ratio",
                    Id = DataRefId.Cockpit2BleedairIndicatorsAPULossFromBleedAirRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2OxygenActuatorsO2ValveOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/oxygen/actuators/o2_valve_on",
                    Units = "boolean",
                    Description = "crew oxygen valve open",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2oxygen Actuators O2valve On",
                    Id = DataRefId.Cockpit2OxygenActuatorsO2ValveOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2OxygenActuatorsDemandFlowSetting
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/oxygen/actuators/demand_flow_setting",
                    Units = "enum",
                    Description = "0 = off, 1 = unregulated, 2 = now/night, 3 = day/delay 5, 4 = day/delay 10, 5 = fat/face mask 1, 6 = fat/face mask 2, 7 = fat/face mask 3, 8 = fat/face mask 4",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2oxygen Actuators Demand Flow Setting",
                    Id = DataRefId.Cockpit2OxygenActuatorsDemandFlowSetting,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2OxygenActuatorsNumPluggedInO2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/oxygen/actuators/num_plugged_in_o2",
                    Units = "int",
                    Description = "number of people plugged into the bottle O2 system - note that airliners usually have a chemical oxygen system, so this is for the two pilots, while the PAX a served by a chemical oxygenator",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2oxygen Actuators Num Plugged In O2",
                    Id = DataRefId.Cockpit2OxygenActuatorsNumPluggedInO2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2OxygenIndicatorsO2BottleRemLiter
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/oxygen/indicators/o2_bottle_rem_liter",
                    Units = "liter",
                    Description = "liters of O2 remaining in the crew bottle. Writeable with override_oxygen_system",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2oxygen Indicators O2bottle Rem Liter",
                    Id = DataRefId.Cockpit2OxygenIndicatorsO2BottleRemLiter,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2OxygenIndicatorsO2BottlePressurePsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/oxygen/indicators/o2_bottle_pressure_psi",
                    Units = "lb/in2",
                    Description = "pressure in the O2 bottle. Writeable with override_oxygen_system",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2oxygen Indicators O2bottle Pressure Psi",
                    Id = DataRefId.Cockpit2OxygenIndicatorsO2BottlePressurePsi,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2OxygenIndicatorsPilotFeltAltitudeFt
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/oxygen/indicators/pilot_felt_altitude_ft",
                    Units = "feet",
                    Description = "pressure altitude felt by the pilot's body. Will be lower than cabin pressure altitude when on oxygen. This is what triggers the hypoxia black-out effect. Writeable with override_oxygen_system",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2oxygen Indicators Pilot Felt Altitude Ft",
                    Id = DataRefId.Cockpit2OxygenIndicatorsPilotFeltAltitudeFt,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2OxygenIndicatorsPassOxygenatorWorking
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/oxygen/indicators/pass_oxygenator_working",
                    Units = "boolean",
                    Description = "passenger chemical oxygen generator on and supplying passengers' O2 masks. Note that the dataref to drop the masks manually is sim/operation/failures/rel_pass_o2_on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2oxygen Indicators Pass Oxygenator Working",
                    Id = DataRefId.Cockpit2OxygenIndicatorsPassOxygenatorWorking,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2OxygenIndicatorsPassOxygenatorMinRem
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/oxygen/indicators/pass_oxygenator_min_rem",
                    Units = "minutes",
                    Description = "the chemical oxygen generator can still supply the passenger oxygen masks with O2 for this many minutes",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2oxygen Indicators Pass Oxygenator Min Rem",
                    Id = DataRefId.Cockpit2OxygenIndicatorsPassOxygenatorMinRem,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1Power
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_power",
                    Units = "boolean",
                    Description = "Nav radio 1 off or on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1power",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1Power,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2Power
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_power",
                    Units = "boolean",
                    Description = "Nav radio 2 off or on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2power",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2Power,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavPower
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_power",
                    Units = "boolean",
                    Description = "Nav radio N off or on, 0 or 1. Was 0-10 pre-11.10. Radios 11 and 12 are WAAS/EGNOS receivers",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Power",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavPower,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1Power
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_power",
                    Units = "boolean",
                    Description = "Com radio 1 off or on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1power",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1Power,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2Power
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_power",
                    Units = "boolean",
                    Description = "Com radio 2 off or on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2power",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2Power,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf1Power
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_power",
                    Units = "enum",
                    Description = "ADF radio 1 off or on, 0 = off, 1 = antenna, 2 = on, 3 = tone, 4 = test",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf1power",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf1Power,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf2Power
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_power",
                    Units = "enum",
                    Description = "ADF radio 2 off or on, 0 = off, 1 = antenna, 2 = on, 3 = tone, 4 = test",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf2power",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf2Power,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsGpsPower
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/gps_power",
                    Units = "boolean",
                    Description = "GPS 1 off or on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators GPS Power",
                    Id = DataRefId.Cockpit2RadiosActuatorsGpsPower,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsGps2Power
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/gps2_power",
                    Units = "boolean",
                    Description = "GPS 2 off or on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators GPS2power",
                    Id = DataRefId.Cockpit2RadiosActuatorsGps2Power,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsDmePower
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_power",
                    Units = "boolean",
                    Description = "DME radio 1 off or on, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Dme Power",
                    Id = DataRefId.Cockpit2RadiosActuatorsDmePower,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1FrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio 1 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1FrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1FrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Nav radio 1 frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1FrequencyMhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1FrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_frequency_khz",
                    Units = "khz",
                    Description = "Nav radio 1 frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1FrequencyKhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2FrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio 2 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2FrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2FrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Nav radio 2 frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2FrequencyMhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2FrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_frequency_khz",
                    Units = "khz",
                    Description = "Nav radio 2 frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2FrequencyKhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio N frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavFrequencyHz,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavFrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Nav radio N frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavFrequencyMhz,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavFrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_frequency_khz",
                    Units = "khz",
                    Description = "Nav radio N frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavFrequencyKhz,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavDmeHold
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_dme_hold",
                    Units = "boolean",
                    Description = "Nav radio N in DME hold, stops slaving DME frequency to NAV frequency",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Dme Hold",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavDmeHold,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavDmeFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_dme_frequency_hz",
                    Units = "10hertz",
                    Description = "DME radio N frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Dme Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavDmeFrequencyHz,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavDmeFrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_dme_frequency_Mhz",
                    Units = "Mhz",
                    Description = "DME radio N frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Dme Frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavDmeFrequencyMhz,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavDmeFrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_dme_frequency_khz",
                    Units = "khz",
                    Description = "DME radio N frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Dme Frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavDmeFrequencyKhz,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1FrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_frequency_hz",
                    Units = "10hertz",
                    Description = "Com radio 1 frequency, 10 hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1FrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1FrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Com radio 1 frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1FrequencyMhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1FrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_frequency_khz",
                    Units = "khz",
                    Description = "Com radio 1 frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1FrequencyKhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1FrequencyHz833
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_frequency_hz_833",
                    Units = "hertz",
                    Description = "Com radio 1 frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1frequency Hz833",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1FrequencyHz833,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2FrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_frequency_hz",
                    Units = "10hertz",
                    Description = "Com radio 2 frequency, 10 hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2FrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2FrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Com radio 2 frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2FrequencyMhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2FrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_frequency_khz",
                    Units = "khz",
                    Description = "Com radio 2 frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2FrequencyKhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2FrequencyHz833
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_frequency_hz_833",
                    Units = "hertz",
                    Description = "Com radio 2 frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2frequency Hz833",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2FrequencyHz833,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf1FrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_frequency_hz",
                    Units = "10hertz",
                    Description = "ADF radio 1 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf1frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf1FrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf2FrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_frequency_hz",
                    Units = "10hertz",
                    Description = "ADF radio 2 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf2frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf2FrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsDmeFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_frequency_hz",
                    Units = "10hertz",
                    Description = "DME radio frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Dme Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsDmeFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1StandbyFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio 1 standby frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1standby Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1StandbyFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1StandbyFrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_standby_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Standby Nav radio 1 frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1standby Frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1StandbyFrequencyMhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1StandbyFrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_standby_frequency_khz",
                    Units = "khz",
                    Description = "Standby Nav radio 1 frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1standby Frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1StandbyFrequencyKhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2StandbyFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio 2 standby frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2standby Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2StandbyFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2StandbyFrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_standby_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Standby Nav radio 2 frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2standby Frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2StandbyFrequencyMhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2StandbyFrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_standby_frequency_khz",
                    Units = "khz",
                    Description = "Standby Nav radio 2 frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2standby Frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2StandbyFrequencyKhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavStandbyFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio N standby frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Standby Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavStandbyFrequencyHz,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavStandbyFrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_standby_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Standby Nav radio N frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Standby Frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavStandbyFrequencyMhz,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavStandbyFrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_standby_frequency_khz",
                    Units = "khz",
                    Description = "Standby Nav radio N frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Standby Frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavStandbyFrequencyKhz,
                    Writable = true,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1StandbyFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "Com radio 1 standby frequency, 10 hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1standby Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1StandbyFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1StandbyFrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_standby_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Standby Com radio 1 frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1standby Frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1StandbyFrequencyMhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1StandbyFrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_standby_frequency_khz",
                    Units = "khz",
                    Description = "Standby Com radio 1 frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1standby Frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1StandbyFrequencyKhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1StandbyFrequencyHz833
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_standby_frequency_hz_833",
                    Units = "hertz",
                    Description = "Com radio 1 standby frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1standby Frequency Hz833",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1StandbyFrequencyHz833,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2StandbyFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "Com radio 2 standby frequency, 10 hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2standby Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2StandbyFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2StandbyFrequencyMhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_standby_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Standby Com radio 2 frequency, Mhz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2standby Frequency Mhz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2StandbyFrequencyMhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2StandbyFrequencyKhz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_standby_frequency_khz",
                    Units = "khz",
                    Description = "Standby com radio 2 frequency, khz component only",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2standby Frequency Khz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2StandbyFrequencyKhz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2StandbyFrequencyHz833
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_standby_frequency_hz_833",
                    Units = "hertz",
                    Description = "Com radio 2 standby frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2standby Frequency Hz833",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2StandbyFrequencyHz833,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf1StandbyFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "ADF radio 1 standby frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf1standby Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf1StandbyFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf2StandbyFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "ADF radio 2 standby frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf2standby Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf2StandbyFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsDmeStandbyFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "DME radio standby frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Dme Standby Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsDmeStandbyFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1ObsDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_obs_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "OBS 1 (pilot side) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1obs Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1ObsDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2ObsDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_obs_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "OBS 2 (pilot isde) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2obs Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2ObsDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavObsDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_obs_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "OBS N (pilot isde) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Obs Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavObsDegMagPilot,
                    Writable = true,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1ObsDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_obs_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "OBS 1 (copilot side) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1obs Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1ObsDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2ObsDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_obs_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "OBS 2 (copilot isde) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2obs Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2ObsDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavObsDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_obs_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "OBS N (copilot isde) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Obs Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavObsDegMagCopilot,
                    Writable = true,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf1CardHeadingDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_card_heading_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "CARD selection for ADF 1, pilot side, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf1card Heading Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf1CardHeadingDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf2CardHeadingDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_card_heading_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "CARD selection for ADF 2, pilot side, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf2card Heading Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf2CardHeadingDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf1CardHeadingDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_card_heading_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "CARD selection for ADF 1, copilot side, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf1card Heading Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf1CardHeadingDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf2CardHeadingDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_card_heading_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "CARD selection for ADF 2, copilot side, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf2card Heading Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf2CardHeadingDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1CourseDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_course_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on nav1, pilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1course Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1CourseDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2CourseDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_course_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on nav2, pilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2course Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2CourseDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavCourseDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_course_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on navN, pilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Course Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavCourseDegMagPilot,
                    Writable = true,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1CourseDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_course_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on nav1, copilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1course Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1CourseDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2CourseDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_course_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on nav2, copilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2course Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2CourseDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavCourseDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_course_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on navN, copilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Course Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavCourseDegMagCopilot,
                    Writable = true,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsHSISourceSelectPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/HSI_source_select_pilot",
                    Units = "enum",
                    Description = "HSI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators HSI Source Select Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsHSISourceSelectPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsHSISourceSelectCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/HSI_source_select_copilot",
                    Units = "enum",
                    Description = "HSI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators HSI Source Select Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsHSISourceSelectCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsRMISourceSelectPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_source_select_pilot",
                    Units = "enum",
                    Description = "RMI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators RMI Source Select Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsRMISourceSelectPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsRMISourceSelectCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_source_select_copilot",
                    Units = "enum",
                    Description = "RMI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators RMI Source Select Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsRMISourceSelectCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsRMILeftUseAdfPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_left_use_adf_pilot",
                    Units = "enum",
                    Description = "RMI is taking ADF (1) or VOR (0).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators RMI Left Use Adf Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsRMILeftUseAdfPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsRMILeftUseAdfCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_left_use_adf_copilot",
                    Units = "enum",
                    Description = "RMI is taking ADF (1) or VOR (0).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators RMI Left Use Adf Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsRMILeftUseAdfCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsRMIRightUseAdfPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_right_use_adf_pilot",
                    Units = "enum",
                    Description = "RMI is taking ADF (1) or VOR (0).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators RMI Right Use Adf Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsRMIRightUseAdfPilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsRMIRightUseAdfCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_right_use_adf_copilot",
                    Units = "enum",
                    Description = "RMI is taking ADF (1) or VOR (0).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators RMI Right Use Adf Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsRMIRightUseAdfCopilot,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsDMEMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/DME_mode",
                    Units = "enum",
                    Description = "DME display mode, where 0 is remote, 1 is frequency, and 2 is groundspeed-time.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators DME Mode",
                    Id = DataRefId.Cockpit2RadiosActuatorsDMEMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsDMESlaveSource
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/DME_slave_source",
                    Units = "enum",
                    Description = "DME display selection of what NAV radio to display. 0 for Nav1, 1for Nav2.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators DME Slave Source",
                    Id = DataRefId.Cockpit2RadiosActuatorsDMESlaveSource,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNavComAdfMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_com_adf_mode",
                    Units = "enum",
                    Description = "Frequency-to-change selection for the all-in-one radio, 0->5 are Nav1, Nav2, Com1, Com2, ADF1, ADF2.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav Com Adf Mode",
                    Id = DataRefId.Cockpit2RadiosActuatorsNavComAdfMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsTransponderCode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/transponder_code",
                    Units = "transponder_code",
                    Description = "Current Transponder code (0000-7777)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Transponder Code",
                    Id = DataRefId.Cockpit2RadiosActuatorsTransponderCode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsFlightId
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/flight_id",
                    Units = "byte[8]",
                    Description = "Flight ID, as transmitted in Mode-S. Up to 7 characters, like N844X or KLM511. This is NOT the Mode-S hexcode!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Flight Id",
                    Id = DataRefId.Cockpit2RadiosActuatorsFlightId,
                    Writable = true,
                    DataType = "byte[8]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsTransponderMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/transponder_mode",
                    Units = "enum",
                    Description = "Transponder mode (off=0,stdby=1,on=2,test=3)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Transponder Mode",
                    Id = DataRefId.Cockpit2RadiosActuatorsTransponderMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioComSelection
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_com_selection",
                    Units = "enum",
                    Description = "6=com1,7=com2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Com Selection",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioComSelection,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioNavSelection
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_nav_selection",
                    Units = "enum",
                    Description = "0=nav1,1=nav2,2=adf1,3=adf2,9=none",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Nav Selection",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioNavSelection,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioComSelectionMan
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_com_selection_man",
                    Units = "enum",
                    Description = "6=com1,7=com2 - this is for old audio panels that do not automatically select the listener as well",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Com Selection Man",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioComSelectionMan,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioSelectionComAuto
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_com_auto",
                    Units = "boolean",
                    Description = "is com automatically selected for listening (selects the same as the transmit selector)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Selection Com Auto",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioSelectionComAuto,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioSelectionCom1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_com1",
                    Units = "boolean",
                    Description = "is com1 selected for listening",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Selection Com1",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioSelectionCom1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioSelectionCom2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_com2",
                    Units = "boolean",
                    Description = "is com2 selected for listening",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Selection Com2",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioSelectionCom2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioSelectionNav1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_nav1",
                    Units = "boolean",
                    Description = "is nav1 selected for listening",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Selection Nav1",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioSelectionNav1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioSelectionNav2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_nav2",
                    Units = "boolean",
                    Description = "is nav2 selected for listening",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Selection Nav2",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioSelectionNav2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioSelectionAdf1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_adf1",
                    Units = "boolean",
                    Description = "is adf1 selected for listening",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Selection Adf1",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioSelectionAdf1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioSelectionAdf2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_adf2",
                    Units = "boolean",
                    Description = "is adf2 selected for listening",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Selection Adf2",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioSelectionAdf2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioDmeEnabled
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_dme_enabled",
                    Units = "boolean",
                    Description = "Is DME audio enabled?  This only listens to the dedicated DME receiver",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Dme Enabled",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioDmeEnabled,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioSelectionDme1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_dme1",
                    Units = "boolean",
                    Description = "Is DME portion on NAV1 selected for listening",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Selection Dme1",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioSelectionDme1,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioSelectionDme2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_dme2",
                    Units = "boolean",
                    Description = "Is DME portion on NAV2 selected for listening",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Selection Dme2",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioSelectionDme2,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioMarkerEnabled
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_marker_enabled",
                    Units = "boolean",
                    Description = "Is audio for the marker beacons enabled?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Marker Enabled",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioMarkerEnabled,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeCom1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_com1",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for com1 audio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Com1",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeCom1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeCom2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_com2",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for com2 audio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Com2",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeCom2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeNav1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_nav1",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for nav1 audio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Nav1",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeNav1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeNav2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_nav2",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for nav2 audio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Nav2",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeNav2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeAdf1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_adf1",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for adf1 audio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Adf1",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeAdf1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeAdf2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_adf2",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for adf2 audio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Adf2",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeAdf2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_dme",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for dme audio on standalone DME receiver",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Dme",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeDme,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeDme1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_dme1",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for dme audio on NAV1 receiver",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Dme1",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeDme1,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeDme2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_dme2",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for dme audio on NAV2 receiver",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Dme2",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeDme2,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAudioVolumeMark
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_mark",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for marker beacon audio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Audio Volume Mark",
                    Id = DataRefId.Cockpit2RadiosActuatorsAudioVolumeMark,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsHsiObsDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/hsi_obs_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "HSI OBS (pilot side) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Hsi Obs Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsHsiObsDegMagPilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsHsiObsDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/hsi_obs_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "HSI OBS (copilot side) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Hsi Obs Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosActuatorsHsiObsDegMagCopilot,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1LeftFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left Nav radio 1 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1left Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1LeftFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2LeftFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left Nav radio 2 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2left Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2LeftFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1LeftFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left Com radio 1 frequency, 10 hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1left Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1LeftFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1LeftFrequencyHz833
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_left_frequency_hz_833",
                    Units = "hertz",
                    Description = "Left Nav radio 1 frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1left Frequency Hz833",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1LeftFrequencyHz833,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2LeftFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left Com radio 2 frequency, 10 hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2left Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2LeftFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2LeftFrequencyHz833
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_left_frequency_hz_833",
                    Units = "hertz",
                    Description = "Left Nav radio 2 frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2left Frequency Hz833",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2LeftFrequencyHz833,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf1LeftFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left ADF radio 1 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf1left Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf1LeftFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf2LeftFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left ADF radio 2 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf2left Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf2LeftFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsDmeLeftFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left DME radio frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Dme Left Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsDmeLeftFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1RightFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right Nav radio 1 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1right Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1RightFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2RightFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right Nav radio 2 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2right Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2RightFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1RightFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right Com radio 1 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1right Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1RightFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2RightFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right Com radio 2 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2right Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2RightFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf1RightFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right ADF radio 1 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf1right Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf1RightFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf2RightFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right ADF radio 2 frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf2right Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf2RightFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsDmeRightFrequencyHz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right DME radio frequency, hz",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Dme Right Frequency Hz",
                    Id = DataRefId.Cockpit2RadiosActuatorsDmeRightFrequencyHz,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav1RightIsSelected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right nav 1 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav1right Is Selected",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav1RightIsSelected,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsNav2RightIsSelected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right nav 2 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Nav2right Is Selected",
                    Id = DataRefId.Cockpit2RadiosActuatorsNav2RightIsSelected,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom1RightIsSelected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right com 1 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com1right Is Selected",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom1RightIsSelected,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsCom2RightIsSelected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right com 2 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Com2right Is Selected",
                    Id = DataRefId.Cockpit2RadiosActuatorsCom2RightIsSelected,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf1RightIsSelected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right adf 1 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf1right Is Selected",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf1RightIsSelected,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsAdf2RightIsSelected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right adf 2 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Adf2right Is Selected",
                    Id = DataRefId.Cockpit2RadiosActuatorsAdf2RightIsSelected,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsDmeRightIsSelected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right DME radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Dme Right Is Selected",
                    Id = DataRefId.Cockpit2RadiosActuatorsDmeRightIsSelected,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosActuatorsMarkerSens
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/marker_sens",
                    Units = "enum",
                    Description = "0 = Hi Sens, 1 = Low sens",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Actuators Marker Sens",
                    Id = DataRefId.Cockpit2RadiosActuatorsMarkerSens,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1BearingDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the nav1 navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1bearing Deg Mag",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1BearingDegMag,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2BearingDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the nav2 navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2bearing Deg Mag",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2BearingDegMag,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavBearingDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the nav N navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Bearing Deg Mag",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavBearingDegMag,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf1BearingDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the adf1 navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf1bearing Deg Mag",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf1BearingDegMag,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf2BearingDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the adf2 navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf2bearing Deg Mag",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf2BearingDegMag,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsBearingDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the selected GPS 1 destination",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Bearing Deg Mag",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsBearingDegMag,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2BearingDegMag
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the selected GPS 2 destination",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2bearing Deg Mag",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2BearingDegMag,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1RelativeBearingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the nav1 navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1relative Bearing Deg",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1RelativeBearingDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2RelativeBearingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the nav2 navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2relative Bearing Deg",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2RelativeBearingDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavRelativeBearingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the nav N navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Relative Bearing Deg",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavRelativeBearingDeg,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf1RelativeBearingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the adf1 navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf1relative Bearing Deg",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf1RelativeBearingDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf2RelativeBearingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the adf2 navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf2relative Bearing Deg",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf2RelativeBearingDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsRelativeBearingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the selected GPS 1 destination",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Relative Bearing Deg",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsRelativeBearingDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2RelativeBearingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the selected GPS 2 destination",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2relative Bearing Deg",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2RelativeBearingDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1FlagFromToPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_flag_from_to_pilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav1, pilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1flag From To Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1FlagFromToPilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2FlagFromToPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_flag_from_to_pilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav2, pilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2flag From To Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2FlagFromToPilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavFlagFromToPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_flag_from_to_pilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, navN, pilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Flag From To Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavFlagFromToPilot,
                    Writable = false,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1FlagFromToCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_flag_from_to_copilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav1, copilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1flag From To Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1FlagFromToCopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2FlagFromToCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_flag_from_to_copilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav2, copilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2flag From To Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2FlagFromToCopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavFlagFromToCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_flag_from_to_copilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, navN, copilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Flag From To Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavFlagFromToCopilot,
                    Writable = false,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1FlagGlideslope
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_flag_glideslope",
                    Units = "boolean",
                    Description = "Glide slope flag, nav1 - EFIS style flag that shows when glideslope is expected, but not received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1flag Glideslope",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1FlagGlideslope,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2FlagGlideslope
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_flag_glideslope",
                    Units = "boolean",
                    Description = "Glide slope flag, nav2 - EFIS style flag that shows when glideslope is expected, but not received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2flag Glideslope",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2FlagGlideslope,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavFlagGlideslope
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_flag_glideslope",
                    Units = "boolean",
                    Description = "Glide slope flag, nav N - EFIS style flag that shows when glideslope is expected, but not received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Flag Glideslope",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavFlagGlideslope,
                    Writable = false,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1FlagGlideslopeMech
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_flag_glideslope_mech",
                    Units = "boolean",
                    Description = "Glide slope flag, nav1 - mechanical instrument flag that shows whenever no glideslope signal is received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1flag Glideslope Mech",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1FlagGlideslopeMech,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2FlagGlideslopeMech
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_flag_glideslope_mech",
                    Units = "boolean",
                    Description = "Glide slope flag, nav2 - mechanical instrument flag that shows whenever no glideslope signal is received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2flag Glideslope Mech",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2FlagGlideslopeMech,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavFlagGlideslopeMech
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_flag_glideslope_mech",
                    Units = "boolean",
                    Description = "Glide slope flag, nav N - mechanical instrument flag that shows whenever no glideslope signal is received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Flag Glideslope Mech",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavFlagGlideslopeMech,
                    Writable = false,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1DisplayHorizontal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_display_horizontal",
                    Units = "boolean",
                    Description = "Is there some kind of horizontal signal on nav1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1display Horizontal",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1DisplayHorizontal,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2DisplayHorizontal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_display_horizontal",
                    Units = "boolean",
                    Description = "Is there some kind of horizontal signal on nav2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2display Horizontal",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2DisplayHorizontal,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavDisplayHorizontal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_display_horizontal",
                    Units = "boolean",
                    Description = "Is there some kind of horizontal signal on nav N",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Display Horizontal",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavDisplayHorizontal,
                    Writable = false,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1DisplayVertical
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_display_vertical",
                    Units = "boolean",
                    Description = "Is there some kind of vertical signal on nav1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1display Vertical",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1DisplayVertical,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2DisplayVertical
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_display_vertical",
                    Units = "boolean",
                    Description = "Is there some kind of vertical signal on nav2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2display Vertical",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2DisplayVertical,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavDisplayVertical
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_display_vertical",
                    Units = "boolean",
                    Description = "Is there some kind of vertical signal on nav N",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Display Vertical",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavDisplayVertical,
                    Writable = false,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1HdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav1, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1hdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1HdefDotsPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2HdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav2, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2hdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2HdefDotsPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavHdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, navN, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Hdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavHdefDotsPilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsHdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, gps 1, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Hdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsHdefDotsPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2HdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, gps 2, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2hdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2HdefDotsPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1HdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav1, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1hdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1HdefDotsCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2HdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav2, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2hdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2HdefDotsCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavHdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, navN, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Hdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavHdefDotsCopilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsHdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, gps, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Hdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsHdefDotsCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2HdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, gps 2, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2hdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2HdefDotsCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1VdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_vdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav1, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1vdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1VdefDotsPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2VdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_vdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav2, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2vdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2VdefDotsPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavVdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_vdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, navN, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Vdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavVdefDotsPilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1VdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_vdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav1, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1vdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1VdefDotsCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2VdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_vdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav2, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2vdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2VdefDotsCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavVdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_vdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, navN, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Vdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavVdefDotsCopilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from nav1's DME?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1has Dme",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1HasDme,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from nav2's DME?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2has Dme",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2HasDme,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavHasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from navN's DME?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Has Dme",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavHasDme,
                    Writable = false,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf1HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from ADF1's DME?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf1has Dme",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf1HasDme,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf2HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from ADF2's DME?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf2has Dme",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf2HasDme,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsHasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from GPS 1?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Has Dme",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsHasDme,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2HasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from GPS 2?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2has Dme",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2HasDme,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsDmeHasDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from standalone DME?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Dme Has Dme",
                    Id = DataRefId.Cockpit2RadiosIndicatorsDmeHasDme,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1DmeDistanceNm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "nav1 DME distance in nautical miles.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1dme Distance Nm",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1DmeDistanceNm,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2DmeDistanceNm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "nav2 DME distance in nautical miles.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2dme Distance Nm",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2DmeDistanceNm,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavDmeDistanceNm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "navN DME distance in nautical miles.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Dme Distance Nm",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavDmeDistanceNm,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf1DmeDistanceNm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "adf1 DME distance in nautical miles.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf1dme Distance Nm",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf1DmeDistanceNm,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf2DmeDistanceNm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "adf2 DME distance in nautical miles.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf2dme Distance Nm",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf2DmeDistanceNm,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsDmeDistanceNm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "gps 1 DME distance in nautical miles.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Dme Distance Nm",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsDmeDistanceNm,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2DmeDistanceNm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "gps 2 DME distance in nautical miles.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2dme Distance Nm",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2DmeDistanceNm,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsDmeDmeDistanceNm
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "standalone dme DME distance in nautical miles.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Dme Dme Distance Nm",
                    Id = DataRefId.Cockpit2RadiosIndicatorsDmeDmeDistanceNm,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_dme_speed_kts",
                    Units = "knots",
                    Description = "nav1 DME speed in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1dme Speed Kts",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1DmeSpeedKts,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_dme_speed_kts",
                    Units = "knots",
                    Description = "nav2 DME speed in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2dme Speed Kts",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2DmeSpeedKts,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavDmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_dme_speed_kts",
                    Units = "knots",
                    Description = "navN DME speed in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Dme Speed Kts",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavDmeSpeedKts,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf1DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_dme_speed_kts",
                    Units = "knots",
                    Description = "adf1 DME speed in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf1dme Speed Kts",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf1DmeSpeedKts,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf2DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_dme_speed_kts",
                    Units = "knots",
                    Description = "adf2 DME speed in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf2dme Speed Kts",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf2DmeSpeedKts,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsDmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_dme_speed_kts",
                    Units = "knots",
                    Description = "gps 1 DME speed in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Dme Speed Kts",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsDmeSpeedKts,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2DmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_dme_speed_kts",
                    Units = "knots",
                    Description = "gps 2 DME speed in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2dme Speed Kts",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2DmeSpeedKts,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsDmeDmeSpeedKts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_dme_speed_kts",
                    Units = "knots",
                    Description = "standalone dme DME speed in knots.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Dme Dme Speed Kts",
                    Id = DataRefId.Cockpit2RadiosIndicatorsDmeDmeSpeedKts,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1DmeTimeMin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_dme_time_min",
                    Units = "minutes",
                    Description = "nav1 DME time in minutes.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1dme Time Min",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1DmeTimeMin,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2DmeTimeMin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_dme_time_min",
                    Units = "minutes",
                    Description = "nav2 DME time in minutes.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2dme Time Min",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2DmeTimeMin,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavDmeTimeMin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_dme_time_min",
                    Units = "minutes",
                    Description = "navN DME time in minutes.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Dme Time Min",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavDmeTimeMin,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf1DmeTimeMin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_dme_time_min",
                    Units = "minutes",
                    Description = "adf1 DME time in minutes.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf1dme Time Min",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf1DmeTimeMin,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsAdf2DmeTimeMin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_dme_time_min",
                    Units = "minutes",
                    Description = "adf2 DME time in minutes.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf2dme Time Min",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf2DmeTimeMin,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsDmeTimeMin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_dme_time_min",
                    Units = "minutes",
                    Description = "gps 1 DME time in minutes.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Dme Time Min",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsDmeTimeMin,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2DmeTimeMin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_dme_time_min",
                    Units = "minutes",
                    Description = "gps 2 DME time in minutes.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2dme Time Min",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2DmeTimeMin,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsDmeDmeTimeMin
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_dme_time_min",
                    Units = "minutes",
                    Description = "standalone dme DME time in minutes.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Dme Dme Time Min",
                    Id = DataRefId.Cockpit2RadiosIndicatorsDmeDmeTimeMin,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav1NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav2NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsAdf1NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf1nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf1NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsAdf2NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Adf2nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsAdf2NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsGpsNavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsNavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsGps2NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsDmeNavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Dme Nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsDmeNavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav3NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav3_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav3nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav3NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav4NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav4_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav4nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav4NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav5NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav5_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav5nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav5NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav6NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav6_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav6nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav6NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav7NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav7_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav7nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav7NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav8NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav8_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav8nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav8NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav9NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav9_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav9nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav9NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav10NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav10_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav10nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav10NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav11NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav11_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav11nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav11NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav12NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav12_nav_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav12nav Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav12NavId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav1DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav2DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav3DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav3_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav3dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav3DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav4DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav4_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav4dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav4DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav5DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav5_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav5dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav5DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav6DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav6_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav6dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav6DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav7DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav7_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav7dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav7DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav8DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav8_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav8dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav8DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav9DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav9_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav9dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav9DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private StringDataRefElement Cockpit2RadiosIndicatorsNav10DmeId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav10_dme_id",
                    StringLength = 150,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav10dme Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav10DmeId,
                    Writable = false,
                    DataType = "byte[150]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1Type
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_type",
                    Units = "enum",
                    Description = "Type of navaid that's currently tuned in and being received - nav1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1type",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1Type,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2Type
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_type",
                    Units = "enum",
                    Description = "Type of navaid that's currently tuned in and being received - nav2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2type",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2Type,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_type",
                    Units = "enum",
                    Description = "Type of navaid that's currently tuned in and being received - any nav receiver",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Type",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavType,
                    Writable = false,
                    DataType = "int[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsOverOuterMarker
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/over_outer_marker",
                    Units = "boolean",
                    Description = "Over the marker, 0 or 1.  This stays on when over the marker",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Over Outer Marker",
                    Id = DataRefId.Cockpit2RadiosIndicatorsOverOuterMarker,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsOverMiddleMarker
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/over_middle_marker",
                    Units = "boolean",
                    Description = "Over the marker, 0 or 1.  This stays on when over the marker",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Over Middle Marker",
                    Id = DataRefId.Cockpit2RadiosIndicatorsOverMiddleMarker,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsOverInnerMarker
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/over_inner_marker",
                    Units = "boolean",
                    Description = "Over the marker, 0 or 1.  This stays on when over the marker",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Over Inner Marker",
                    Id = DataRefId.Cockpit2RadiosIndicatorsOverInnerMarker,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsOuterMarkerSignalRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/outer_marker_signal_ratio",
                    Units = "ratio",
                    Description = "Received signal strength of the marker. 0 when not receiving, 1 when at max strength",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Outer Marker Signal Ratio",
                    Id = DataRefId.Cockpit2RadiosIndicatorsOuterMarkerSignalRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsMiddleMarkerSignalRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/middle_marker_signal_ratio",
                    Units = "ratio",
                    Description = "Received signal strength of the marker. 0 when not receiving, 1 when at max strength",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Middle Marker Signal Ratio",
                    Id = DataRefId.Cockpit2RadiosIndicatorsMiddleMarkerSignalRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsInnerMarkerSignalRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/inner_marker_signal_ratio",
                    Units = "ratio",
                    Description = "Received signal strength of the marker. 0 when not receiving, 1 when at max strength",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Inner Marker Signal Ratio",
                    Id = DataRefId.Cockpit2RadiosIndicatorsInnerMarkerSignalRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsOuterMarkerLit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/outer_marker_lit",
                    Units = "boolean",
                    Description = "Marker light actually lit, 0 or 1.  This flashes as we go over.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Outer Marker Lit",
                    Id = DataRefId.Cockpit2RadiosIndicatorsOuterMarkerLit,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsMiddleMarkerLit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/middle_marker_lit",
                    Units = "boolean",
                    Description = "Marker light actually lit, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Middle Marker Lit",
                    Id = DataRefId.Cockpit2RadiosIndicatorsMiddleMarkerLit,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsInnerMarkerLit
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/inner_marker_lit",
                    Units = "boolean",
                    Description = "Marker light actually lit, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Inner Marker Lit",
                    Id = DataRefId.Cockpit2RadiosIndicatorsInnerMarkerLit,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsMorseIdToneNav1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/morse_id_tone_nav1",
                    Units = "enum",
                    Description = "The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Morse Id Tone Nav1",
                    Id = DataRefId.Cockpit2RadiosIndicatorsMorseIdToneNav1,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsMorseIdToneNav2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/morse_id_tone_nav2",
                    Units = "enum",
                    Description = "The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Morse Id Tone Nav2",
                    Id = DataRefId.Cockpit2RadiosIndicatorsMorseIdToneNav2,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsMorseIdToneAdf1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/morse_id_tone_adf1",
                    Units = "enum",
                    Description = "The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Morse Id Tone Adf1",
                    Id = DataRefId.Cockpit2RadiosIndicatorsMorseIdToneAdf1,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsMorseIdToneAdf2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/morse_id_tone_adf2",
                    Units = "enum",
                    Description = "The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Morse Id Tone Adf2",
                    Id = DataRefId.Cockpit2RadiosIndicatorsMorseIdToneAdf2,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsMorseIdToneDme
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/morse_id_tone_dme",
                    Units = "enum",
                    Description = "The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Morse Id Tone Dme",
                    Id = DataRefId.Cockpit2RadiosIndicatorsMorseIdToneDme,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsMorseIdToneDme1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/morse_id_tone_dme1",
                    Units = "enum",
                    Description = "The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Morse Id Tone Dme1",
                    Id = DataRefId.Cockpit2RadiosIndicatorsMorseIdToneDme1,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsMorseIdToneDme2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/morse_id_tone_dme2",
                    Units = "enum",
                    Description = "The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Morse Id Tone Dme2",
                    Id = DataRefId.Cockpit2RadiosIndicatorsMorseIdToneDme2,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiBearingDegMagPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_bearing_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the pilot's HSI-selected navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Bearing Deg Mag Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiBearingDegMagPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiBearingDegMagCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_bearing_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the copilot's HSI-selected navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Bearing Deg Mag Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiBearingDegMagCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiRelativeBearingDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_bearing_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the pilot's HSI-selected navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Relative Bearing Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiRelativeBearingDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiRelativeBearingDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_bearing_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the copilot's HSI-selected navaid",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Relative Bearing Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiRelativeBearingDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiFlagFromToPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_from_to_pilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav1, pilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Flag From To Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiFlagFromToPilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiFlagFromToCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_from_to_copilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav1, copilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Flag From To Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiFlagFromToCopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiHdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav1, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Hdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiHdefDotsPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiHdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav1, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Hdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiHdefDotsCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiVdefDotsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_vdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav1, pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Vdef Dots Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiVdefDotsPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiVdefDotsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_vdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav1, copilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Vdef Dots Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiVdefDotsCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiHasDmePilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_has_dme_pilot",
                    Units = "boolean",
                    Description = "Is there a DME signal from nav1's DME?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Has Dme Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiHasDmePilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiHasDmeCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_has_dme_copilot",
                    Units = "boolean",
                    Description = "Is there a DME signal from nav1's DME?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Has Dme Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiHasDmeCopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDmeDistanceNmPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_distance_nm_pilot",
                    Units = "nautical_miles",
                    Description = "nav1 DME distance in nautical miles, pilot HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Dme Distance Nm Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDmeDistanceNmPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDmeDistanceNmCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_distance_nm_copilot",
                    Units = "nautical_miles",
                    Description = "nav1 DME distance in nautical miles. copilot HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Dme Distance Nm Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDmeDistanceNmCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDmeSpeedKtsPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_speed_kts_pilot",
                    Units = "knots",
                    Description = "nav1 DME speed in knots. pilot HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Dme Speed Kts Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDmeSpeedKtsPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDmeSpeedKtsCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_speed_kts_copilot",
                    Units = "knots",
                    Description = "nav1 DME speed in knots. copilot HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Dme Speed Kts Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDmeSpeedKtsCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDmeTimeMinPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_time_min_pilot",
                    Units = "minutes",
                    Description = "nav1 DME time in minutes. pilot HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Dme Time Min Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDmeTimeMinPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDmeTimeMinCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_time_min_copilot",
                    Units = "minutes",
                    Description = "nav1 DME time in minutes. copilot HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Dme Time Min Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDmeTimeMinCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiFlagGlideslopePilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_glideslope_pilot",
                    Units = "boolean",
                    Description = "Glide slope flag, pilot side HSI - EFIS style flag that shows when glideslope is expected, but not received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Flag Glideslope Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiFlagGlideslopePilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiFlagGlideslopeCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_glideslope_copilot",
                    Units = "boolean",
                    Description = "Glide slope flag, copilot side HSI - EFIS style flag that shows when glideslope is expected, but not received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Flag Glideslope Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiFlagGlideslopeCopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiFlagGlideslopePilotMech
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_glideslope_pilot_mech",
                    Units = "boolean",
                    Description = "Glide slope flag, pilot side HSI - mechanical instrument flag that shows whenever no glideslope signal is received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Flag Glideslope Pilot Mech",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiFlagGlideslopePilotMech,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiFlagGlideslopeCopilotMech
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_glideslope_copilot_mech",
                    Units = "boolean",
                    Description = "Glide slope flag, copilot side HSI - mechanical instrument flag that shows whenever no glideslope signal is received",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Flag Glideslope Copilot Mech",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiFlagGlideslopeCopilotMech,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDisplayHorizontalPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_display_horizontal_pilot",
                    Units = "boolean",
                    Description = "Is there some kind of horizontal signal on pilot side HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Display Horizontal Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDisplayHorizontalPilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDisplayHorizontalCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_display_horizontal_copilot",
                    Units = "boolean",
                    Description = "Is there some kind of horizontal signal on copilot side HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Display Horizontal Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDisplayHorizontalCopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDisplayVerticalPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_display_vertical_pilot",
                    Units = "boolean",
                    Description = "Is there some kind of vertical signal on pilot side HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Display Vertical Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDisplayVerticalPilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiDisplayVerticalCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_display_vertical_copilot",
                    Units = "boolean",
                    Description = "Is there some kind of vertical signal on copilot side HSI",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Display Vertical Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiDisplayVerticalCopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsTransponderId
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/transponder_id",
                    Units = "bool",
                    Description = "Whether we are squawking ident right now.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Transponder Id",
                    Id = DataRefId.Cockpit2RadiosIndicatorsTransponderId,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsTransponderBrightness
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/transponder_brightness",
                    Units = "ratio",
                    Description = "Transponder light brightness ratio from 0 to 1",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Transponder Brightness",
                    Id = DataRefId.Cockpit2RadiosIndicatorsTransponderBrightness,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1relative Heading Vacuum Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1relative Heading Vacuum Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1relative Heading Electric Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1relative Heading Electric Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1relative Heading AHARS Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to AHARS for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav1relative Heading AHARS Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2relative Heading Vacuum Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2relative Heading Vacuum Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2relative Heading Electric Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2relative Heading Electric Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2relative Heading AHARS Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to AHARS for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav2relative Heading AHARS Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavRelativeHeadingVacuumDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav N OBS to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Relative Heading Vacuum Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavRelativeHeadingVacuumDegPilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavRelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav N OBS to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Relative Heading Vacuum Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavRelativeHeadingVacuumDegCopilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavRelativeHeadingElectricDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav N OBS to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Relative Heading Electric Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavRelativeHeadingElectricDegPilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavRelativeHeadingElectricDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav N OBS to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Relative Heading Electric Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavRelativeHeadingElectricDegCopilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavRelativeHeadingAHARSDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav N OBS to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Relative Heading AHARS Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavRelativeHeadingAHARSDegPilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsNavRelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav N OBS to AHARS for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Nav Relative Heading AHARS Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsNavRelativeHeadingAHARSDegCopilot,
                    Writable = false,
                    DataType = "float[12]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Relative Heading Vacuum Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Relative Heading Vacuum Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Relative Heading Electric Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Relative Heading Electric Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Relative Heading AHARS Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to AHARS for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS Relative Heading AHARS Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2relative Heading Vacuum Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2relative Heading Vacuum Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2relative Heading Electric Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2relative Heading Electric Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2relative Heading AHARS Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to AHARS for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators GPS2relative Heading AHARS Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Relative Heading Vacuum Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Relative Heading Vacuum Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Relative Heading Electric Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Relative Heading Electric Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Relative Heading AHARS Deg Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to AHARS for the copilot.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Hsi Relative Heading AHARS Deg Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegCopilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsExecLightPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_exec_light_pilot",
                    Units = "Boolean",
                    Description = "Is the exec FMS light/warning lit for the pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Exec Light Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsExecLightPilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsExecLightCopilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_exec_light_copilot",
                    Units = "Boolean",
                    Description = "Is the exec FMS light/warning lit for the co-pilot",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Exec Light Copilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsExecLightCopilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsFptaPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_fpta_pilot",
                    Units = "Feet",
                    Description = "FMS Flight Plan Target Altitude",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Fpta Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsFptaPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsVpaPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_vpa_pilot",
                    Units = "Degrees",
                    Description = "FMS Vertical Path Angle",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Vpa Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsVpaPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsVtkPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_vtk_pilot",
                    Units = "Degrees",
                    Description = "FMS Vertical Track Error",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Vtk Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsVtkPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsDistanceToTodPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_distance_to_tod_pilot",
                    Units = "nm",
                    Description = "FMS Distance to Top of Descent",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Distance To Tod Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsDistanceToTodPilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsTodBeforeIndexPilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_tod_before_index_pilot",
                    Units = "index",
                    Description = "Index of waypoint in flightplan before which top of descent is located",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Tod Before Index Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsTodBeforeIndexPilot,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsTodBeforeDistancePilot
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_tod_before_distance_pilot",
                    Units = "nm",
                    Description = "Distance from top of descent to Nth waypoint (wayoint found via fms_tod_before_index_pilot)",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Tod Before Distance Pilot",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsTodBeforeDistancePilot,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line0",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line0",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine0,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line1",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line1",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine1,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line2",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line2",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine2,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line3",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line3",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine3,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line4",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line4",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine4,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line5",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line5",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine5,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line6",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line6",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine6,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line7",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line7",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine7,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line8",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line8",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine8,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine9
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line9",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line9",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine9,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine10
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line10",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line10",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine10,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine11
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line11",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line11",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine11,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine12
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line12",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line12",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine12,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine13
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line13",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line13",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine13,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine14
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line14",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line14",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine14,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1TextLine15
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_text_line15",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1text Line15",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1TextLine15,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line0",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line0",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine0,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line1",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line1",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine1,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line2",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line2",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine2,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line3",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line3",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine3,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line4",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line4",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine4,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line5",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line5",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine5,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line6",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line6",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine6,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line7",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line7",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine7,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line8",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line8",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine8,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine9
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line9",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line9",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine9,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine10
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line10",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line10",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine10,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine11
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line11",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line11",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine11,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine12
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line12",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line12",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine12,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine13
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line13",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line13",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine13,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine14
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line14",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line14",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine14,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu1StyleLine15
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu1_style_line15",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu1style Line15",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu1StyleLine15,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line0",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line0",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine0,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line1",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line1",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine1,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line2",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line2",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine2,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line3",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line3",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine3,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line4",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line4",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine4,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line5",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line5",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine5,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line6",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line6",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine6,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line7",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line7",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine7,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line8",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line8",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine8,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine9
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line9",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line9",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine9,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine10
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line10",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line10",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine10,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine11
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line11",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line11",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine11,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine12
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line12",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line12",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine12,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine13
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line13",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line13",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine13,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine14
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line14",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line14",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine14,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2TextLine15
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_text_line15",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2text Line15",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2TextLine15,
                    Writable = false,
                    DataType = "byte[96]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine0
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line0",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line0",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine0,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine1
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line1",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line1",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine1,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line2",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line2",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine2,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine3
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line3",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line3",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine3,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine4
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line4",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line4",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine4,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine5
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line5",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line5",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine5,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine6
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line6",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line6",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine6,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine7
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line7",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line7",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine7,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine8
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line8",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line8",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine8,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine9
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line9",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line9",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine9,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine10
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line10",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line10",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine10,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine11
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line11",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line11",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine11,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine12
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line12",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line12",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine12,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine13
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line13",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line13",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine13,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine14
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line14",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line14",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine14,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2RadiosIndicatorsFmsCdu2StyleLine15
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_cdu2_style_line15",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2radios Indicators Fms Cdu2style Line15",
                    Id = DataRefId.Cockpit2RadiosIndicatorsFmsCdu2StyleLine15,
                    Writable = false,
                    DataType = "byte[24]"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesAvionicsPowerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/avionics_power_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Avionics Power On",
                    Id = DataRefId.Cockpit2SwitchesAvionicsPowerOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesNavigationLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/navigation_lights_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Navigation Lights On",
                    Id = DataRefId.Cockpit2SwitchesNavigationLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesBeaconOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/beacon_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Beacon On",
                    Id = DataRefId.Cockpit2SwitchesBeaconOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesStrobeLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/strobe_lights_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Strobe Lights On",
                    Id = DataRefId.Cockpit2SwitchesStrobeLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesLandingLightsOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/landing_lights_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.  This affects the first landing light.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Landing Lights On",
                    Id = DataRefId.Cockpit2SwitchesLandingLightsOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesLandingLightsSwitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/landing_lights_switch",
                    Units = "ratio",
                    Description = "Switch, 0 is off, 0.5 is half-intensity, etc. for any of the landing lights.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Landing Lights Switch",
                    Id = DataRefId.Cockpit2SwitchesLandingLightsSwitch,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesGenericLightsSwitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/generic_lights_switch",
                    Units = "ratio",
                    Description = "Switch, 0 is off, 0.5 is half-intensity, etc. for any of the generic lights.  Was [64] until 11.10",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Generic Lights Switch",
                    Id = DataRefId.Cockpit2SwitchesGenericLightsSwitch,
                    Writable = true,
                    DataType = "float[128]"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesTaxiLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/taxi_light_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Taxi Light On",
                    Id = DataRefId.Cockpit2SwitchesTaxiLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesSpotLightOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/spot_light_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Spot Light On",
                    Id = DataRefId.Cockpit2SwitchesSpotLightOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesDumpFuel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/dump_fuel",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Dump Fuel",
                    Id = DataRefId.Cockpit2SwitchesDumpFuel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesPuffersOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/puffers_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Puffers On",
                    Id = DataRefId.Cockpit2SwitchesPuffersOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesPropSyncOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/prop_sync_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Prop Sync On",
                    Id = DataRefId.Cockpit2SwitchesPropSyncOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesJetSyncMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/jet_sync_mode",
                    Units = "enum",
                    Description = "Switch, 0 or 1. fan=0, off=1, turbine=2#WHAT ARE THESE?",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Jet Sync Mode",
                    Id = DataRefId.Cockpit2SwitchesJetSyncMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesElectricHydraulicPumpOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/electric_hydraulic_pump_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Electric Hydraulic Pump On",
                    Id = DataRefId.Cockpit2SwitchesElectricHydraulicPumpOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesRamAirTurbineOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/ram_air_turbine_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Ram Air Turbine On",
                    Id = DataRefId.Cockpit2SwitchesRamAirTurbineOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesYawDamperOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/yaw_damper_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Yaw Damper On",
                    Id = DataRefId.Cockpit2SwitchesYawDamperOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesArtificialStabilityOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/artificial_stability_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Artificial Stability On",
                    Id = DataRefId.Cockpit2SwitchesArtificialStabilityOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesArtificialStabilityPitchOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/artificial_stability_pitch_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Artificial Stability Pitch On",
                    Id = DataRefId.Cockpit2SwitchesArtificialStabilityPitchOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesArtificialStabilityRollOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/artificial_stability_roll_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Artificial Stability Roll On",
                    Id = DataRefId.Cockpit2SwitchesArtificialStabilityRollOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesHUDOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/HUD_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches HUD On",
                    Id = DataRefId.Cockpit2SwitchesHUDOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesParachuteDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/parachute_deploy",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Parachute Deploy",
                    Id = DataRefId.Cockpit2SwitchesParachuteDeploy,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesJatoOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/jato_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Jato On",
                    Id = DataRefId.Cockpit2SwitchesJatoOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesTailhookDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/tailhook_deploy",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Tailhook Deploy",
                    Id = DataRefId.Cockpit2SwitchesTailhookDeploy,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesCanopyOpen
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/canopy_open",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Canopy Open",
                    Id = DataRefId.Cockpit2SwitchesCanopyOpen,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesDoorOpen
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/door_open",
                    Units = "boolean",
                    Description = "Switch, 0 or 1. 0 is closed, 1 is open",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Door Open",
                    Id = DataRefId.Cockpit2SwitchesDoorOpen,
                    Writable = true,
                    DataType = "int[20]"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesWaterScoopDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/water_scoop_deploy",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Water Scoop Deploy",
                    Id = DataRefId.Cockpit2SwitchesWaterScoopDeploy,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesDumpWater
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/dump_water",
                    Units = "boolean",
                    Description = "This will be set to true when water is in the process of dumping out of a water-bomber.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Dump Water",
                    Id = DataRefId.Cockpit2SwitchesDumpWater,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesNoSmoking
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/no_smoking",
                    Units = "boolean",
                    Description = "No Smoking",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches No Smoking",
                    Id = DataRefId.Cockpit2SwitchesNoSmoking,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesFastenSeatBelts
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/fasten_seat_belts",
                    Units = "boolean",
                    Description = "Fasten Seat Belts",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Fasten Seat Belts",
                    Id = DataRefId.Cockpit2SwitchesFastenSeatBelts,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesTotalEnergyAudio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/total_energy_audio",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Total Energy Audio",
                    Id = DataRefId.Cockpit2SwitchesTotalEnergyAudio,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesHSIIsArc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/HSI_is_arc",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches HSI Is Arc",
                    Id = DataRefId.Cockpit2SwitchesHSIIsArc,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesAutoBrakeLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/auto_brake_level",
                    Units = "enum",
                    Description = "Switch, 0 is RTO (Rejected Take-Off), 1 is off, 2->5 are increasing auto-brake levels.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Auto Brake Level",
                    Id = DataRefId.Cockpit2SwitchesAutoBrakeLevel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesAutoReverseOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/auto_reverse_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Auto Reverse On",
                    Id = DataRefId.Cockpit2SwitchesAutoReverseOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesPropFeatherMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/prop_feather_mode",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Prop Feather Mode",
                    Id = DataRefId.Cockpit2SwitchesPropFeatherMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesPreRotateLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/pre_rotate_level",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Pre Rotate Level",
                    Id = DataRefId.Cockpit2SwitchesPreRotateLevel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesClutchEngage
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/clutch_engage",
                    Units = "boolean",
                    Description = "Switch, 0 or 1 - engage/disengage rotor clutch",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Clutch Engage",
                    Id = DataRefId.Cockpit2SwitchesClutchEngage,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesRotorBrake
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/rotor_brake",
                    Units = "boolean",
                    Description = "Switch, 0 or 1 - turns on the rotor brake.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Rotor Brake",
                    Id = DataRefId.Cockpit2SwitchesRotorBrake,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesHotelMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/hotel_mode",
                    Units = "boolean",
                    Description = "Switch, 0 or 1 - turns on hotel mode on free turbines.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Hotel Mode",
                    Id = DataRefId.Cockpit2SwitchesHotelMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesRotorBrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/rotor_brake_ratio",
                    Units = "ratio",
                    Description = "This is the relative strength of the rotor brake compared to X-Plane default.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Rotor Brake Ratio",
                    Id = DataRefId.Cockpit2SwitchesRotorBrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesHotelModeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/hotel_mode_ratio",
                    Units = "ratio",
                    Description = "This is the relative strength of the hotel mode brake compared to X-Plane default.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Hotel Mode Ratio",
                    Id = DataRefId.Cockpit2SwitchesHotelModeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesClutchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/clutch_ratio",
                    Units = "ratio",
                    Description = "Current clutch ratio, 0.0 is off, 1.0 is on - follows clutch engage with some lag.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Clutch Ratio",
                    Id = DataRefId.Cockpit2SwitchesClutchRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesRocketMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/rocket_mode",
                    Units = "enum",
                    Description = "This will have an enumeration based on the direction of fire of any maneuvering rockets.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Rocket Mode",
                    Id = DataRefId.Cockpit2SwitchesRocketMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesBurnerLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/burner_level",
                    Units = "enum",
                    Description = "This can be 0 (half-power afterburners) or 1 (full-power burner).",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Burner Level",
                    Id = DataRefId.Cockpit2SwitchesBurnerLevel,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesAlternateStaticAirRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/alternate_static_air_ratio",
                    Units = "ratio",
                    Description = "Alternate air ratio, 0.0 is off, 1,.0 is on.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Alternate Static Air Ratio",
                    Id = DataRefId.Cockpit2SwitchesAlternateStaticAirRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesStandbyVacuumPump
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/standby_vacuum_pump",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Standby Vacuum Pump",
                    Id = DataRefId.Cockpit2SwitchesStandbyVacuumPump,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesWiperSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/wiper_speed",
                    Units = "enum",
                    Description = "0=off,1=25%speed,2=50%speed,3=100%speed.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Wiper Speed",
                    Id = DataRefId.Cockpit2SwitchesWiperSpeed,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesCustomSliderOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/custom_slider_on",
                    Units = "boolean",
                    Description = "custom sliders.  When flipped, slider moves based on timing in planemaker.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Custom Slider On",
                    Id = DataRefId.Cockpit2SwitchesCustomSliderOn,
                    Writable = true,
                    DataType = "int[24]"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesPanelBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/panel_brightness_ratio",
                    Units = "ratio",
                    Description = "Rheostat controlling panel brightness.  0 = flood, 1-3 = spot lights.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Panel Brightness Ratio",
                    Id = DataRefId.Cockpit2SwitchesPanelBrightnessRatio,
                    Writable = true,
                    DataType = "float[4]"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesInstrumentBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/instrument_brightness_ratio",
                    Units = "ratio",
                    Description = "Rheostat controlling instruments brightnesss.  0 = default pilot, 1 = default copilot, 2-15 = custom - was [16] until 11.10",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Instrument Brightness Ratio",
                    Id = DataRefId.Cockpit2SwitchesInstrumentBrightnessRatio,
                    Writable = true,
                    DataType = "float[32]"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesHUDBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/HUD_brightness_ratio",
                    Units = "ratio",
                    Description = "Rheostat controlling HUD brightness.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches HUD Brightness Ratio",
                    Id = DataRefId.Cockpit2SwitchesHUDBrightnessRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesCameraPowerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/camera_power_on",
                    Units = "boolean",
                    Description = "Camera power on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Camera Power On",
                    Id = DataRefId.Cockpit2SwitchesCameraPowerOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2SwitchesTotalEnergyAudioOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/switches/total_energy_audio_on",
                    Units = "boolean",
                    Description = "Variometer audio on",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2switches Total Energy Audio On",
                    Id = DataRefId.Cockpit2SwitchesTotalEnergyAudioOn,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2TcasIndicatorsRelativeBearingDegs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/indicators/relative_bearing_degs",
                    Units = "degrees",
                    Description = "Relative bearing of each other plane in degrees for TCAS - relative to sim/flightmodel/position/true_psi not ground track or anything else",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Indicators Relative Bearing Degs",
                    Id = DataRefId.Cockpit2TcasIndicatorsRelativeBearingDegs,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasIndicatorsRelativeDistanceMtrs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/indicators/relative_distance_mtrs",
                    Units = "meters",
                    Description = "Distance to each other plane in meters for TCAS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Indicators Relative Distance Mtrs",
                    Id = DataRefId.Cockpit2TcasIndicatorsRelativeDistanceMtrs,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasIndicatorsRelativeAltitudeMtrs
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/indicators/relative_altitude_mtrs",
                    Units = "meters",
                    Description = "Relative altitude (positive means above us) for TCAS",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Indicators Relative Altitude Mtrs",
                    Id = DataRefId.Cockpit2TcasIndicatorsRelativeAltitudeMtrs,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasIndicatorsTcasAlert
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/indicators/tcas_alert",
                    Units = "boolean",
                    Description = "True if a TCAS alert is currently issued.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Indicators Tcas Alert",
                    Id = DataRefId.Cockpit2TcasIndicatorsTcasAlert,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2TcasIndicatorsTcasNumAcf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/indicators/tcas_num_acf",
                    Units = "integer",
                    Description = "If TCAS is not overriden by plgugin, returns the number of planes in X-Plane, which might be under plugin control or X-Plane control. If TCAS is overriden, returns how many targets are actually being written to with the override. These are not necessarily consecutive entries in the TCAS arrays. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Indicators Tcas Num ACF",
                    Id = DataRefId.Cockpit2TcasIndicatorsTcasNumAcf,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsModesId
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/modeS_id",
                    Units = "integer",
                    Description = "24bit (0-16777215 or 0 - 0xFFFFFF) unique ID of the airframe. This is also known as the ADS-B \"hexcode\".",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Modes Id",
                    Id = DataRefId.Cockpit2TcasTargetsModesId,
                    Writable = true,
                    DataType = "int[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsModecCode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/modeC_code",
                    Units = "integer",
                    Description = "Mode C transponder code 0000 to 7777. This is not really an integer, this is an octal number.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Modec Code",
                    Id = DataRefId.Cockpit2TcasTargetsModecCode,
                    Writable = true,
                    DataType = "int[64]"
                };
            }
        }
        private StringDataRefElement Cockpit2TcasTargetsFlightId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/flight_id",
                    StringLength = 512,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Flight Id",
                    Id = DataRefId.Cockpit2TcasTargetsFlightId,
                    Writable = true,
                    DataType = "byte[512]"
                };
            }
        }
        private StringDataRefElement Cockpit2TcasTargetsIcaoType
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/icao_type",
                    StringLength = 512,
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Icao Type",
                    Id = DataRefId.Cockpit2TcasTargetsIcaoType,
                    Writable = true,
                    DataType = "byte[512]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/x",
                    Units = "meter",
                    Description = "local X coordinate, meter. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position X",
                    Id = DataRefId.Cockpit2TcasTargetsPositionX,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/y",
                    Units = "meter",
                    Description = "local Y coordinate, meter. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Y",
                    Id = DataRefId.Cockpit2TcasTargetsPositionY,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/z",
                    Units = "meter",
                    Description = "local Z coordinate, meter. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Z",
                    Id = DataRefId.Cockpit2TcasTargetsPositionZ,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionLat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionLat,
                    Writable = false,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionLon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionLon,
                    Writable = false,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionEle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/ele",
                    Units = "meter",
                    Description = "global coordinate, meter.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionEle,
                    Writable = false,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionVx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/vx",
                    Units = "meter/s",
                    Description = "local X velocity. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Vx",
                    Id = DataRefId.Cockpit2TcasTargetsPositionVx,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionVy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/vy",
                    Units = "meter/s",
                    Description = "local Y velocity. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Vy",
                    Id = DataRefId.Cockpit2TcasTargetsPositionVy,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionVz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/vz",
                    Units = "meter/s",
                    Description = "local Z velocity. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Vz",
                    Id = DataRefId.Cockpit2TcasTargetsPositionVz,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionVerticalSpeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/vertical_speed",
                    Units = "feet/min",
                    Description = "absolute vertical speed feet per minute. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Vertical Speed",
                    Id = DataRefId.Cockpit2TcasTargetsPositionVerticalSpeed,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionHpath
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/hpath",
                    Units = "degrees",
                    Description = "ground track in true degrees. Derived from velocity vector.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Hpath",
                    Id = DataRefId.Cockpit2TcasTargetsPositionHpath,
                    Writable = false,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionVpath
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/vpath",
                    Units = "degrees",
                    Description = "flight path angle in degrees. Derived from velocity vector.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Vpath",
                    Id = DataRefId.Cockpit2TcasTargetsPositionVpath,
                    Writable = false,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionVMsc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/V_msc",
                    Units = "meter/s",
                    Description = "total true speed, norm of local velocity vector. That means it includes vertical speed!",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position V Msc",
                    Id = DataRefId.Cockpit2TcasTargetsPositionVMsc,
                    Writable = false,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/psi",
                    Units = "degrees",
                    Description = "true heading orientation. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Psi",
                    Id = DataRefId.Cockpit2TcasTargetsPositionPsi,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionThe
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/the",
                    Units = "degrees",
                    Description = "pitch angle. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position The",
                    Id = DataRefId.Cockpit2TcasTargetsPositionThe,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionPhi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/phi",
                    Units = "degrees",
                    Description = "bank angle. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Phi",
                    Id = DataRefId.Cockpit2TcasTargetsPositionPhi,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionWeightOnWheels
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/weight_on_wheels",
                    Units = "boolean",
                    Description = "ground/flight logic. Writeable only when override_TCAS is set.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Weight On Wheels",
                    Id = DataRefId.Cockpit2TcasTargetsPositionWeightOnWheels,
                    Writable = true,
                    DataType = "int[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionGearDeploy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/gear_deploy",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_gear_deploy[0]",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Gear Deploy",
                    Id = DataRefId.Cockpit2TcasTargetsPositionGearDeploy,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionFlapRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/flap_ratio",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_flap_ratio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Flap Ratio",
                    Id = DataRefId.Cockpit2TcasTargetsPositionFlapRatio,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionFlapRatio2
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/flap_ratio2",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_flap_ratio2",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Flap Ratio2",
                    Id = DataRefId.Cockpit2TcasTargetsPositionFlapRatio2,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionSpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/speedbrake_ratio",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_speedbrake_ratio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Speedbrake Ratio",
                    Id = DataRefId.Cockpit2TcasTargetsPositionSpeedbrakeRatio,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionSlatRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/slat_ratio",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_slat_ratio",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Slat Ratio",
                    Id = DataRefId.Cockpit2TcasTargetsPositionSlatRatio,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionWingSweep
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/wing_sweep",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_wing_sweep",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Wing Sweep",
                    Id = DataRefId.Cockpit2TcasTargetsPositionWingSweep,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionThrottle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/throttle",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_throttle[0]",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Throttle",
                    Id = DataRefId.Cockpit2TcasTargetsPositionThrottle,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionYolkPitch
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/yolk_pitch",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_yolk_pitch ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Yolk Pitch",
                    Id = DataRefId.Cockpit2TcasTargetsPositionYolkPitch,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionYolkRoll
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/yolk_roll",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_yolk_roll",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Yolk Roll",
                    Id = DataRefId.Cockpit2TcasTargetsPositionYolkRoll,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionYolkYaw
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/yolk_yaw",
                    Units = "ratio",
                    Description = "mirror of sim/multiplayer/position/planeN_yolk_yaw",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Yolk Yaw",
                    Id = DataRefId.Cockpit2TcasTargetsPositionYolkYaw,
                    Writable = true,
                    DataType = "float[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionLights
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/lights",
                    Units = "bitfield",
                    Description = "beacon=1, land=2, nav=4, strobe=8, taxi=16",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Lights",
                    Id = DataRefId.Cockpit2TcasTargetsPositionLights,
                    Writable = true,
                    DataType = "int[64]"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane1Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane1_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane1lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane1Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane1Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane1_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane1lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane1Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane1Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane1_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane1ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane1Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane2Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane2_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane2lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane2Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane2Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane2_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane2lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane2Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane2Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane2_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane2ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane2Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane3Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane3_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane3lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane3Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane3Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane3_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane3lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane3Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane3Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane3_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane3ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane3Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane4Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane4_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane4lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane4Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane4Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane4_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane4lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane4Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane4Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane4_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane4ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane4Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane5Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane5_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane5lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane5Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane5Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane5_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane5lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane5Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane5Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane5_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane5ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane5Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane6Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane6_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane6lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane6Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane6Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane6_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane6lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane6Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane6Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane6_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane6ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane6Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane7Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane7_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane7lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane7Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane7Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane7_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane7lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane7Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane7Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane7_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane7ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane7Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane8Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane8_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane8lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane8Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane8Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane8_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane8lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane8Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane8Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane8_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane8ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane8Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane9Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane9_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane9lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane9Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane9Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane9_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane9lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane9Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane9Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane9_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane9ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane9Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane10Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane10_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane10lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane10Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane10Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane10_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane10lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane10Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane10Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane10_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane10ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane10Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane11Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane11_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane11lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane11Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane11Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane11_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane11lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane11Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane11Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane11_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane11ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane11Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane12Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane12_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane12lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane12Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane12Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane12_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane12lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane12Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane12Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane12_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane12ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane12Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane13Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane13_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane13lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane13Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane13Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane13_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane13lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane13Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane13Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane13_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane13ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane13Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane14Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane14_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane14lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane14Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane14Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane14_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane14lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane14Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane14Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane14_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane14ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane14Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane15Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane15_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane15lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane15Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane15Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane15_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane15lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane15Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane15Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane15_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane15ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane15Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane16Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane16_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane16lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane16Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane16Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane16_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane16lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane16Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane16Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane16_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane16ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane16Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane17Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane17_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane17lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane17Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane17Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane17_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane17lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane17Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane17Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane17_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane17ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane17Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane18Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane18_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane18lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane18Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane18Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane18_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane18lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane18Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane18Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane18_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane18ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane18Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane19Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane19_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane19lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane19Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane19Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane19_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane19lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane19Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane19Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane19_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane19ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane19Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane20Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane20_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane20lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane20Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane20Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane20_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane20lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane20Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane20Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane20_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane20ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane20Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane21Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane21_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane21lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane21Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane21Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane21_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane21lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane21Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane21Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane21_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane21ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane21Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane22Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane22_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane22lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane22Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane22Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane22_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane22lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane22Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane22Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane22_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane22ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane22Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane23Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane23_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane23lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane23Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane23Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane23_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane23lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane23Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane23Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane23_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane23ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane23Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane24Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane24_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane24lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane24Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane24Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane24_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane24lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane24Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane24Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane24_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane24ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane24Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane25Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane25_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane25lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane25Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane25Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane25_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane25lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane25Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane25Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane25_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane25ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane25Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane26Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane26_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane26lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane26Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane26Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane26_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane26lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane26Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane26Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane26_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane26ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane26Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane27Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane27_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane27lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane27Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane27Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane27_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane27lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane27Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane27Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane27_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane27ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane27Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane28Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane28_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane28lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane28Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane28Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane28_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane28lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane28Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane28Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane28_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane28ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane28Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane29Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane29_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane29lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane29Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane29Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane29_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane29lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane29Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane29Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane29_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane29ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane29Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane30Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane30_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane30lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane30Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane30Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane30_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane30lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane30Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane30Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane30_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane30ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane30Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane31Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane31_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane31lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane31Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane31Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane31_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane31lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane31Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane31Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane31_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane31ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane31Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane32Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane32_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane32lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane32Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane32Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane32_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane32lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane32Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane32Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane32_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane32ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane32Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane33Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane33_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane33lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane33Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane33Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane33_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane33lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane33Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane33Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane33_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane33ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane33Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane34Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane34_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane34lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane34Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane34Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane34_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane34lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane34Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane34Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane34_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane34ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane34Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane35Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane35_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane35lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane35Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane35Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane35_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane35lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane35Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane35Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane35_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane35ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane35Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane36Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane36_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane36lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane36Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane36Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane36_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane36lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane36Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane36Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane36_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane36ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane36Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane37Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane37_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane37lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane37Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane37Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane37_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane37lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane37Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane37Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane37_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane37ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane37Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane38Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane38_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane38lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane38Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane38Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane38_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane38lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane38Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane38Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane38_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane38ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane38Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane39Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane39_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane39lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane39Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane39Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane39_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane39lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane39Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane39Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane39_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane39ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane39Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane40Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane40_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane40lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane40Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane40Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane40_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane40lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane40Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane40Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane40_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane40ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane40Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane41Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane41_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane41lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane41Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane41Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane41_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane41lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane41Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane41Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane41_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane41ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane41Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane42Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane42_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane42lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane42Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane42Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane42_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane42lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane42Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane42Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane42_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane42ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane42Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane43Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane43_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane43lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane43Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane43Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane43_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane43lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane43Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane43Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane43_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane43ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane43Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane44Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane44_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane44lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane44Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane44Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane44_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane44lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane44Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane44Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane44_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane44ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane44Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane45Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane45_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane45lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane45Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane45Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane45_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane45lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane45Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane45Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane45_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane45ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane45Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane46Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane46_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane46lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane46Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane46Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane46_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane46lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane46Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane46Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane46_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane46ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane46Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane47Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane47_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane47lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane47Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane47Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane47_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane47lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane47Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane47Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane47_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane47ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane47Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane48Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane48_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane48lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane48Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane48Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane48_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane48lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane48Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane48Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane48_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane48ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane48Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane49Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane49_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane49lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane49Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane49Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane49_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane49lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane49Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane49Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane49_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane49ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane49Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane50Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane50_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane50lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane50Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane50Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane50_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane50lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane50Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane50Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane50_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane50ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane50Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane51Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane51_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane51lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane51Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane51Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane51_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane51lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane51Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane51Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane51_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane51ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane51Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane52Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane52_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane52lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane52Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane52Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane52_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane52lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane52Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane52Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane52_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane52ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane52Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane53Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane53_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane53lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane53Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane53Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane53_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane53lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane53Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane53Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane53_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane53ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane53Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane54Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane54_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane54lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane54Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane54Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane54_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane54lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane54Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane54Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane54_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane54ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane54Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane55Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane55_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane55lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane55Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane55Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane55_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane55lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane55Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane55Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane55_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane55ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane55Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane56Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane56_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane56lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane56Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane56Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane56_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane56lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane56Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane56Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane56_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane56ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane56Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane57Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane57_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane57lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane57Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane57Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane57_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane57lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane57Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane57Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane57_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane57ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane57Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane58Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane58_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane58lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane58Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane58Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane58_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane58lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane58Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane58Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane58_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane58ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane58Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane59Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane59_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane59lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane59Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane59Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane59_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane59lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane59Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane59Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane59_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane59ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane59Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane60Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane60_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane60lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane60Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane60Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane60_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane60lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane60Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane60Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane60_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane60ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane60Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane61Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane61_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane61lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane61Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane61Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane61_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane61lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane61Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane61Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane61_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane61ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane61Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane62Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane62_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane62lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane62Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane62Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane62_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane62lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane62Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane62Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane62_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane62ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane62Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane63Lat
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane63_lat",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane63lat",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane63Lat,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane63Lon
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane63_lon",
                    Units = "degrees",
                    Description = "global coordinate, degrees",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane63lon",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane63Lon,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TcasTargetsPositionDoublePlane63Ele
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/tcas/targets/position/double/plane63_ele",
                    Units = "meter",
                    Description = "global coordinate, meter. ",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2tcas Targets Position Double Plane63ele",
                    Id = DataRefId.Cockpit2TcasTargetsPositionDoublePlane63Ele,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Cockpit2TemperatureOutsideAirTempDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_temp_deg",
                    Units = "degrees",
                    Description = "outside air temperature, pilot selects units",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2temperature Outside Air Temp Deg",
                    Id = DataRefId.Cockpit2TemperatureOutsideAirTempDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2TemperatureOutsideAirTempDegc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_temp_degc",
                    Units = "degreesC",
                    Description = "outside air temperature, celsius",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2temperature Outside Air Temp Degc",
                    Id = DataRefId.Cockpit2TemperatureOutsideAirTempDegc,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2TemperatureOutsideAirTempDegf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_temp_degf",
                    Units = "degreesF",
                    Description = "outside air temperature, fahrenheit",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2temperature Outside Air Temp Degf",
                    Id = DataRefId.Cockpit2TemperatureOutsideAirTempDegf,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2TemperatureOutsideAirLETempDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_LE_temp_deg",
                    Units = "degrees",
                    Description = "outside air temperature with leading edge, pilot selects units",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2temperature Outside Air LE Temp Deg",
                    Id = DataRefId.Cockpit2TemperatureOutsideAirLETempDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2TemperatureOutsideAirLETempDegc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_LE_temp_degc",
                    Units = "degreesC",
                    Description = "outside air temperature with leading edge, celsius",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2temperature Outside Air LE Temp Degc",
                    Id = DataRefId.Cockpit2TemperatureOutsideAirLETempDegc,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2TemperatureOutsideAirLETempDegf
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_LE_temp_degf",
                    Units = "degreesF",
                    Description = "outside air temperature with leading edge, fahrenheit",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2temperature Outside Air LE Temp Degf",
                    Id = DataRefId.Cockpit2TemperatureOutsideAirLETempDegf,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2TemperatureOutsideAirTempIsMetric
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_temp_is_metric",
                    Units = "boolean",
                    Description = "1 if thermo is metric, 0 if fahrenheit.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2temperature Outside Air Temp Is Metric",
                    Id = DataRefId.Cockpit2TemperatureOutsideAirTempIsMetric,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2TransmissionsIndicatorsOilTemperature
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/transmissions/indicators/oil_temperature",
                    Units = "any",
                    Description = "Transmission oil temperature.  Units are the same as the max oil temperature in ACF file.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2transmissions Indicators Oil Temperature",
                    Id = DataRefId.Cockpit2TransmissionsIndicatorsOilTemperature,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2TransmissionsIndicatorsOilPressure
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/transmissions/indicators/oil_pressure",
                    Units = "any",
                    Description = "Transmission oil pressure.  Units are the same as the max oil pressure in ACF file.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2transmissions Indicators Oil Pressure",
                    Id = DataRefId.Cockpit2TransmissionsIndicatorsOilPressure,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2WeaponsWeaponSelectConsoleIndex
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/weapon_select_console_index",
                    Units = "index",
                    Description = "(V10 style!) Weapon index selected on the weapon console.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2weapons Weapon Select Console Index",
                    Id = DataRefId.Cockpit2WeaponsWeaponSelectConsoleIndex,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2WeaponsWeaponSelectConsoleName
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/weapon_select_console_name",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2weapons Weapon Select Console Name",
                    Id = DataRefId.Cockpit2WeaponsWeaponSelectConsoleName,
                    Writable = false,
                    DataType = "byte[1024]"
                };
            }
        }
        private DataRefElement Cockpit2WeaponsFireMode
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/fire_mode",
                    Units = "enum",
                    Description = "Weapon fire-mode, 0=single, 1=pair, 2=ripple, 3=salvo.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2weapons Fire Mode",
                    Id = DataRefId.Cockpit2WeaponsFireMode,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2WeaponsFireRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/fire_rate",
                    Units = "enum",
                    Description = "Weapon fire-rate, 0, 1, 2, 3 depending on fire rate.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2weapons Fire Rate",
                    Id = DataRefId.Cockpit2WeaponsFireRate,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2WeaponsWeaponSelected
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/weapon_selected",
                    Units = "enum",
                    Description = "Switch position for each weapon-arming switch (there can be several). These are the rotaries that can be dialed up or down to select various systems.",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2weapons Weapon Selected",
                    Id = DataRefId.Cockpit2WeaponsWeaponSelected,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Cockpit2WeaponsGunOffsetHeadingRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/gun_offset_heading_ratio",
                    Units = "ratio",
                    Description = "Heading offset of the gun from within its maximum heading range",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2weapons Gun Offset Heading Ratio",
                    Id = DataRefId.Cockpit2WeaponsGunOffsetHeadingRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Cockpit2WeaponsGunOffsetPitchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/gun_offset_pitch_ratio",
                    Units = "ratio",
                    Description = "Pitch offset of the gun from within its maximum pitch range",
                    Frequency = DefaultFrequency,
                    Name = "Cockpit2weapons Gun Offset Pitch Ratio",
                    Id = DataRefId.Cockpit2WeaponsGunOffsetPitchRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsPitchRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/pitch_ratio",
                    Units = "ratio",
                    Description = "This is how much the flight controls are deflected in pitch after any stability augmentation, in ratio, where -1.0 is full down, and 1.0 is full up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Pitch Ratio",
                    Id = DataRefId.Flightmodel2ControlsPitchRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsRollRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/roll_ratio",
                    Units = "ratio",
                    Description = "This is how much the flight controls are deflected in roll after any stability augmentation, in ratio, where -1.0 is full left, and 1.0 is full right.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Roll Ratio",
                    Id = DataRefId.Flightmodel2ControlsRollRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsHeadingRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/heading_ratio",
                    Units = "ratio",
                    Description = "This is how much the flight controls are deflected in heading after any stability augmentation, where -1.0 is full left, and 1.0 is full right.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Heading Ratio",
                    Id = DataRefId.Flightmodel2ControlsHeadingRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsSpeedbrakeRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/speedbrake_ratio",
                    Units = "ratio",
                    Description = "This is how much the speedbrakes surfaces are extended, in ratio, where 0.0 is fully retracted, and 1.0 is fully extended.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Speedbrake Ratio",
                    Id = DataRefId.Flightmodel2ControlsSpeedbrakeRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsWingsweepRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/wingsweep_ratio",
                    Units = "ratio",
                    Description = "Actual sweep, in ratio. 0.0 is no sweep deployment, 1 is max sweep deployment.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Wingsweep Ratio",
                    Id = DataRefId.Flightmodel2ControlsWingsweepRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsThrustVectorRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/thrust_vector_ratio",
                    Units = "ratio",
                    Description = "Actual thrust vector, in ratio. 0.0 is no thrust vector deployment, 1 is max thrust vector deployment.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Thrust Vector Ratio",
                    Id = DataRefId.Flightmodel2ControlsThrustVectorRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsDihedralRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/dihedral_ratio",
                    Units = "ratio",
                    Description = "Actual dihedral, in ratio. 0.0 is no dihedral deployment, 1 is max dihedral deployment.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Dihedral Ratio",
                    Id = DataRefId.Flightmodel2ControlsDihedralRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsIncidenceRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/incidence_ratio",
                    Units = "ratio",
                    Description = "Actual incidence, in ratio. 0.0 is no incidence deployment, 1 is max incidence deployment.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Incidence Ratio",
                    Id = DataRefId.Flightmodel2ControlsIncidenceRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsWingRetractionRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/wing_retraction_ratio",
                    Units = "ratio",
                    Description = "Actual wing-retraction, in ratio. 0.0 is no wing-retraction deployment, 1 is max wing-retraction deployment.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Wing Retraction Ratio",
                    Id = DataRefId.Flightmodel2ControlsWingRetractionRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsFlapHandleDeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/flap_handle_deploy_ratio",
                    Units = "ratio",
                    Description = "This is the ACTUAL FLAP deployment for overall flap system, in ratio, where 0.0 is flaps fully retracted, and 1.0 is flaps fully extended. You should probably use the deployment for flap set 1 or flap set 2 to deflect the surfaces though.  This takes into account that flaps deploy slowly, not instantaneously as the handle is dragged.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Flap Handle Deploy Ratio",
                    Id = DataRefId.Flightmodel2ControlsFlapHandleDeployRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsSlat1DeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/slat1_deploy_ratio",
                    Units = "ratio",
                    Description = "Slat deployment, where 0.0 is slats fully retracted, 1.0 is slats fully extended. This variable applies to lading-edge flaps as well.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Slat1deploy Ratio",
                    Id = DataRefId.Flightmodel2ControlsSlat1DeployRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsSlat2DeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/slat2_deploy_ratio",
                    Units = "ratio",
                    Description = "Slat deployment, where 0.0 is slats fully retracted, 1.0 is slats fully extended. This variable applies to lading-edge flaps as well.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Slat2deploy Ratio",
                    Id = DataRefId.Flightmodel2ControlsSlat2DeployRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsFlap1DeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/flap1_deploy_ratio",
                    Units = "ratio",
                    Description = "This is the ACTUAL FLAP deployment for flap-set #1, in ratio, where 0.0 is flaps fully retracted, and 1.0 is flaps fully extended.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Flap1deploy Ratio",
                    Id = DataRefId.Flightmodel2ControlsFlap1DeployRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsFlap2DeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/flap2_deploy_ratio",
                    Units = "ratio",
                    Description = "This is the ACTUAL FLAP deployment for flap-set #2, in ratio, where 0.0 is flaps fully retracted, and 1.0 is flaps fully extended.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Flap2deploy Ratio",
                    Id = DataRefId.Flightmodel2ControlsFlap2DeployRatio,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsStabilizerDeflectionDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/stabilizer_deflection_degrees",
                    Units = "degrees",
                    Description = "This is the actual stabilizer deflection with trim for all-moving horizontal stabilizers. This is the deflection you can see visually on airliners. This is in degrees, positive for leading-edge nose up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Stabilizer Deflection Degrees",
                    Id = DataRefId.Flightmodel2ControlsStabilizerDeflectionDegrees,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsAileronTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/aileron_trim",
                    Units = "ratio",
                    Description = "Aileron trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the aileron trim is deflected enough to move the ailerons through 30% of their travel, then that is an aileron trim of 0.3.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Aileron Trim",
                    Id = DataRefId.Flightmodel2ControlsAileronTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsElevatorTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/elevator_trim",
                    Units = "ratio",
                    Description = "Elevator trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the elevator trim is deflected enough to move the elevators through 30% of their travel, then that is an elevator trim of 0.3.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Elevator Trim",
                    Id = DataRefId.Flightmodel2ControlsElevatorTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsRudderTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/rudder_trim",
                    Units = "ratio",
                    Description = "Rudder trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rudder trim is deflected enough to move the rudders through 30% of their travel, then that is an rudder trim of 0.3.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Rudder Trim",
                    Id = DataRefId.Flightmodel2ControlsRudderTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsRotorTrim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/rotor_trim",
                    Units = "ratio",
                    Description = "Rotor trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rotor trim is deflected enough to move the rotor through 30% of its travel, then that is a rotor trim of 0.3.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Rotor Trim",
                    Id = DataRefId.Flightmodel2ControlsRotorTrim,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2ControlsWaterRudderDeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/water_rudder_deploy_ratio",
                    Units = "ratio",
                    Description = "Deployment of the water rudder, 0 is none, 1 is max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2controls Water Rudder Deploy Ratio",
                    Id = DataRefId.Flightmodel2ControlsWaterRudderDeployRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2DoorsType
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/doors/type",
                    Units = "enumeration",
                    Description = "0=unused (plane does not use this door) 1=standard (opens before gear goes down) 2=attached to strut (cycles with door), 3=closed (opens before gear goes down, then closes again)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2doors Type",
                    Id = DataRefId.Flightmodel2DoorsType,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Flightmodel2DoorsAngleNowDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/doors/angle_now_deg",
                    Units = "degrees",
                    Description = "Current angle about the axis of rotation of this gear door, degrees.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2doors Angle Now Deg",
                    Id = DataRefId.Flightmodel2DoorsAngleNowDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesLocationXMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/location_x_mtr",
                    Units = "meters",
                    Description = "Engine location, meters x, y, z, with respect to the default center of gravity.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Location X Mtr",
                    Id = DataRefId.Flightmodel2EnginesLocationXMtr,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesLocationYMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/location_y_mtr",
                    Units = "meters",
                    Description = "Engine location, meters x, y, z, with respect to the default center of gravity.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Location Y Mtr",
                    Id = DataRefId.Flightmodel2EnginesLocationYMtr,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesLocationZMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/location_z_mtr",
                    Units = "meters",
                    Description = "Engine location, meters x, y, z, with respect to the default center of gravity.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Location Z Mtr",
                    Id = DataRefId.Flightmodel2EnginesLocationZMtr,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesThrottleUsedRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/throttle_used_ratio",
                    Units = "ratio",
                    Description = "Throttle that is actually going to the engine, which could be different than the commanded throttle due to FADEC throttle adjustments.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Throttle Used Ratio",
                    Id = DataRefId.Flightmodel2EnginesThrottleUsedRatio,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesHasFuelFlowBeforeMixture
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/has_fuel_flow_before_mixture",
                    Units = "boolean",
                    Description = "Engine has fuel making to the mixture control, yes or no.  Writable if override_fuel_system is true.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Has Fuel Flow Before Mixture",
                    Id = DataRefId.Flightmodel2EnginesHasFuelFlowBeforeMixture,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesHasFuelFlowAfterMixture
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/has_fuel_flow_after_mixture",
                    Units = "boolean",
                    Description = "Engine has fuel making to the combustion process, yes or no.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Has Fuel Flow After Mixture",
                    Id = DataRefId.Flightmodel2EnginesHasFuelFlowAfterMixture,
                    Writable = false,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesEngineIsBurningFuel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/engine_is_burning_fuel",
                    Units = "boolean",
                    Description = "Engine is currently burning fuel, yes or no.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Engine Is Burning Fuel",
                    Id = DataRefId.Flightmodel2EnginesEngineIsBurningFuel,
                    Writable = false,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesEngineFuelInIntake
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/engine_fuel_in_intake",
                    Units = "ratio",
                    Description = "How much fuel has been primed into the intake port (fuel-injected engine) 0..1",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Engine Fuel In Intake",
                    Id = DataRefId.Flightmodel2EnginesEngineFuelInIntake,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesAfterburnerOn
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/afterburner_on",
                    Units = "boolean",
                    Description = "Afterburner on, yes or no.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Afterburner On",
                    Id = DataRefId.Flightmodel2EnginesAfterburnerOn,
                    Writable = false,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesAfterburnerRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/afterburner_ratio",
                    Units = "ratio",
                    Description = "Afterburner engaged ratio, 0.0 to 1.0.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Afterburner Ratio",
                    Id = DataRefId.Flightmodel2EnginesAfterburnerRatio,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesEngineRotationSpeedRadSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/engine_rotation_speed_rad_sec",
                    Units = "radians/second",
                    Description = "Rotational speed of the engine, in radians per second.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Engine Rotation Speed Rad Sec",
                    Id = DataRefId.Flightmodel2EnginesEngineRotationSpeedRadSec,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesEngineRotationAngleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/engine_rotation_angle_deg",
                    Units = "degrees",
                    Description = "This is the angle of the engine as it turns over, running 0 to 360 over and over again in normal operation. Engine speed can be different than prop rotation speed in clutched designs. This is radians per second.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Engine Rotation Angle Deg",
                    Id = DataRefId.Flightmodel2EnginesEngineRotationAngleDeg,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropRotationSpeedRadSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_rotation_speed_rad_sec",
                    Units = "radians/second",
                    Description = "Radians per second rotation speed of the prop.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Rotation Speed Rad Sec",
                    Id = DataRefId.Flightmodel2EnginesPropRotationSpeedRadSec,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropRotationAngleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_rotation_angle_deg",
                    Units = "degrees",
                    Description = "This is the angle of the prop or engine-fan as it rotates. You will see this value circulate 0 to 360 degrees over and over as the engine runs and the prop or fan turns.  Override witih /prop_disc/override per engine!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Rotation Angle Deg",
                    Id = DataRefId.Flightmodel2EnginesPropRotationAngleDeg,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropNoDiscRotationAngleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_no_disc_rotation_angle_deg",
                    Units = "degrees",
                    Description = "This is the angle of the prop or engine-fan as it rotates. You will see this value circulate 0 to 360 degrees over and over as the engine runs and the prop or fan turns. This dataref NEVER shows the speed of the prop disc if it happens to be showing. This always tracks the actual prop.  Override witih /prop_disc/override per engine!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop No Disc Rotation Angle Deg",
                    Id = DataRefId.Flightmodel2EnginesPropNoDiscRotationAngleDeg,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropPitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_pitch_deg",
                    Units = "degrees",
                    Description = "This is the ACTUAL pitch of the prop in degrees from its flat-pitch setting.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Pitch Deg",
                    Id = DataRefId.Flightmodel2EnginesPropPitchDeg,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropConeAngleRad
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_cone_angle_rad",
                    Units = "radians",
                    Description = "This is the coning angle of the disc, in radians. Typically close to 0.0.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Cone Angle Rad",
                    Id = DataRefId.Flightmodel2EnginesPropConeAngleRad,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesRotorVerticalVectorDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/rotor_vertical_vector_deg",
                    Units = "degrees",
                    Description = "This engine rotor-disc vertical vector, in degrees, where 0 is straight forwards, 90 is straight up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Rotor Vertical Vector Deg",
                    Id = DataRefId.Flightmodel2EnginesRotorVerticalVectorDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesRotorVerticalCyclicDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/rotor_vertical_cyclic_deg",
                    Units = "degrees",
                    Description = "This engine rotor-disc longitudinal cyclic, in degrees, where -10 is 10 degrees forwards, 10 is 10 degrees aft.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Rotor Vertical Cyclic Deg",
                    Id = DataRefId.Flightmodel2EnginesRotorVerticalCyclicDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesRotorSideCyclicDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/rotor_side_cyclic_deg",
                    Units = "degrees",
                    Description = "This engine rotor-disc lateral cyclic, in degrees, where -10 is 10 degrees left, 10 is 10 degrees right.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Rotor Side Cyclic Deg",
                    Id = DataRefId.Flightmodel2EnginesRotorSideCyclicDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesRotorCyclicElevatorTiltDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/rotor_cyclic_elevator_tilt_deg",
                    Units = "degrees",
                    Description = "Longitudinal disc tilt from cyclic deflection.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Rotor Cyclic Elevator Tilt Deg",
                    Id = DataRefId.Flightmodel2EnginesRotorCyclicElevatorTiltDeg,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesRotorCyclicAileronTiltDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/rotor_cyclic_aileron_tilt_deg",
                    Units = "degrees",
                    Description = "Lateral disc tilt from cyclic deflection.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Rotor Cyclic Aileron Tilt Deg",
                    Id = DataRefId.Flightmodel2EnginesRotorCyclicAileronTiltDeg,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesNacelleVerticalAngleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/nacelle_vertical_angle_deg",
                    Units = "degrees",
                    Description = "This engine nacelle vertical vector, in degrees, where 0 is straight forwards, 90 is straight up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Nacelle Vertical Angle Deg",
                    Id = DataRefId.Flightmodel2EnginesNacelleVerticalAngleDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesThrustReverserDeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/thrust_reverser_deploy_ratio",
                    Units = "ratio",
                    Description = "How far the reverser doors/mechanism have traveled.  0 = fully stowed, 1.0 = fully deployed.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Thrust Reverser Deploy Ratio",
                    Id = DataRefId.Flightmodel2EnginesThrustReverserDeployRatio,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropIsDisc
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_is_disc",
                    Units = "boolean",
                    Description = "Is the prop a disc now?  Override with /prop_disc/override per engine!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Is Disc",
                    Id = DataRefId.Flightmodel2EnginesPropIsDisc,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropTipDeflectionDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_tip_deflection_degrees",
                    Units = "degrees",
                    Description = "Degrees of deflection of a line from the crank shaft to the prop tip.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Tip Deflection Degrees",
                    Id = DataRefId.Flightmodel2EnginesPropTipDeflectionDegrees,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesFuelPumpSpinning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/fuel_pump_spinning",
                    Units = "0..1",
                    Description = "Is the electric fuel pump for this engine spinning?  1 = yes, 0 = no.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Fuel Pump Spinning",
                    Id = DataRefId.Flightmodel2EnginesFuelPumpSpinning,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesStarterIsRunning
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/starter_is_running",
                    Units = "boolean",
                    Description = "Is this starter running at all",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Starter Is Running",
                    Id = DataRefId.Flightmodel2EnginesStarterIsRunning,
                    Writable = false,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesStarterMakingTorque
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/starter_making_torque",
                    Units = "boolean",
                    Description = "Is this starter applying torque to the engine",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Starter Making Torque",
                    Id = DataRefId.Flightmodel2EnginesStarterMakingTorque,
                    Writable = false,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesIsOnFire
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/is_on_fire",
                    Units = "0..1",
                    Description = "Engine fire, 0 means none, 1 means max.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Is On Fire",
                    Id = DataRefId.Flightmodel2EnginesIsOnFire,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesSideSign
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/side_sign",
                    Units = "-1,0,1",
                    Description = "Sign of the side of the ACF for this engine: -1 for left side, 0 for inline, 1 for right side",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Side Sign",
                    Id = DataRefId.Flightmodel2EnginesSideSign,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesN1Percent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/N1_percent",
                    Units = "percent",
                    Description = "N1 speed as percent of max (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines N1percent",
                    Id = DataRefId.Flightmodel2EnginesN1Percent,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesN2Percent
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/N2_percent",
                    Units = "percent",
                    Description = "N2 speed as percent of max (per engine)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines N2percent",
                    Id = DataRefId.Flightmodel2EnginesN2Percent,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesITTDegC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/ITT_deg_C",
                    Units = "degrees",
                    Description = "ITT (per engine) in degrees C",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines ITT Deg C",
                    Id = DataRefId.Flightmodel2EnginesITTDegC,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesEGTDegC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/EGT_deg_C",
                    Units = "degrees",
                    Description = "EGT (per engine) in degrees C",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines EGT Deg C",
                    Id = DataRefId.Flightmodel2EnginesEGTDegC,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesCHTDegC
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/CHT_deg_C",
                    Units = "degrees",
                    Description = "CHT (per engine) in degrees C",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines CHT Deg C",
                    Id = DataRefId.Flightmodel2EnginesCHTDegC,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesJetwashMtrSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/jetwash_mtr_sec",
                    Units = "meters/second",
                    Description = "Speed of propwash/jetwash behind the prop disc/engine exhaust in meters/second",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Jetwash Mtr Sec",
                    Id = DataRefId.Flightmodel2EnginesJetwashMtrSec,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscOverride
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/override",
                    Units = "boolean",
                    Description = "Set to 1 to control the prop disc from a plugin.  Overrides all other variables in this section.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Override",
                    Id = DataRefId.Flightmodel2EnginesPropDiscOverride,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscDiscWidth
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/disc_width",
                    Units = "meters",
                    Description = "If larger than zero, the prop disc is actually two discs, with this separation at the root and no separation at the tip.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Disc Width",
                    Id = DataRefId.Flightmodel2EnginesPropDiscDiscWidth,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscDiscLengthRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/disc_length_ratio",
                    Units = "ratio",
                    Description = "Ratio to scale the length of the side image.  1.0 = the real length of the prop.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Disc Length Ratio",
                    Id = DataRefId.Flightmodel2EnginesPropDiscDiscLengthRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscDiscS
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/disc_s",
                    Units = "offset",
                    Description = "Offset from left (in \"slots\") for the prop disc texture.  Fractions blend horizontal images.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Disc S",
                    Id = DataRefId.Flightmodel2EnginesPropDiscDiscS,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscDiscT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/disc_t",
                    Units = "offset",
                    Description = "Offset from bottom (in \"slots\") for the prop disc texture",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Disc T",
                    Id = DataRefId.Flightmodel2EnginesPropDiscDiscT,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscDiscSDim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/disc_s_dim",
                    Units = "count",
                    Description = "Number of horizontal slots for the prop disc in the prop disc texture",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Disc S Dim",
                    Id = DataRefId.Flightmodel2EnginesPropDiscDiscSDim,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscDiscTDim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/disc_t_dim",
                    Units = "count",
                    Description = "Number of vertical slots for the prop disc in the prop disc texture",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Disc T Dim",
                    Id = DataRefId.Flightmodel2EnginesPropDiscDiscTDim,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscDiscAlphaFront
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/disc_alpha_front",
                    Units = "ratio",
                    Description = "Alpha of prop disc when viewed from front.  X-Plane interpolates as the view angle moves.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Disc Alpha Front",
                    Id = DataRefId.Flightmodel2EnginesPropDiscDiscAlphaFront,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscDiscAlphaSide
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/disc_alpha_side",
                    Units = "ratio",
                    Description = "Alpha of prop disc when viewed of side.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Disc Alpha Side",
                    Id = DataRefId.Flightmodel2EnginesPropDiscDiscAlphaSide,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscDiscAlphaInside
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/disc_alpha_inside",
                    Units = "ratio",
                    Description = "Ratio to multiply disc alpha when view is inside the airplane.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Disc Alpha Inside",
                    Id = DataRefId.Flightmodel2EnginesPropDiscDiscAlphaInside,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideWidth
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_width",
                    Units = "meters",
                    Description = "Width of prop side image in meters.  Height comes from prop radius.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side Width",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideWidth,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideLengthRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_length_ratio",
                    Units = "ratio",
                    Description = "Ratio to scale the length of the side image.  1.0 = the real length of the prop.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side Length Ratio",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideLengthRatio,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideAngle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_angle",
                    Units = "degrees",
                    Description = "Rotation angle of the side images now - allows side to rotate independently of disc, perhaps faster.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side Angle",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideAngle,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideNumberOfBlades
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_number_of_blades",
                    Units = "count",
                    Description = "Number of side blades to draw.  Should be at least 2!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side Number Of Blades",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideNumberOfBlades,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideIsBillboard
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_is_billboard",
                    Units = "boolean",
                    Description = "If true, prop side angle comes from billboarding logic - if false, it comes from side_angle dataref.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side Is Billboard",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideIsBillboard,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideS
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_s",
                    Units = "offset",
                    Description = "Offset from left (in \"slots\") for the prop disc texture.  Fractions blend horizontal images.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side S",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideS,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideT
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_t",
                    Units = "offset",
                    Description = "Offset from bottom (in \"slots\") for the prop disc texture",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side T",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideT,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideSDim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_s_dim",
                    Units = "count",
                    Description = "Number of horizontal slots for the prop side in the prop disc texture",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side S Dim",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideSDim,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideTDim
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_t_dim",
                    Units = "count",
                    Description = "Number of vertical slots for the prop side in the prop disc texture",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side T Dim",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideTDim,
                    Writable = true,
                    DataType = "int[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideAlphaFront
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_alpha_front",
                    Units = "ratio",
                    Description = "Alpha of prop side when viewed from front.  X-Plane interpolates as the view angle moves.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side Alpha Front",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideAlphaFront,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideAlphaSide
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_alpha_side",
                    Units = "ratio",
                    Description = "Alpha of prop side when viewed of side.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side Alpha Side",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideAlphaSide,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideAlphaInside
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_alpha_inside",
                    Units = "ratio",
                    Description = "Ratio to multiply side alpha when view is inside the airplane.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side Alpha Inside",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideAlphaInside,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2EnginesPropDiscSideAlphaToCamera
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/engines/prop_disc/side_alpha_to_camera",
                    Units = "ratio",
                    Description = "A ratio to multiply side alpha when the rotor is extending toward the camera.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2engines Prop Disc Side Alpha To Camera",
                    Id = DataRefId.Flightmodel2EnginesPropDiscSideAlphaToCamera,
                    Writable = true,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2GearGearHeadingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/gear_heading_deg",
                    Units = "degrees",
                    Description = "Current gear heading angle, degrees.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Gear Heading Deg",
                    Id = DataRefId.Flightmodel2GearGearHeadingDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2GearGearPitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/gear_pitch_deg",
                    Units = "degrees",
                    Description = "Current gear pitch angle, degrees.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Gear Pitch Deg",
                    Id = DataRefId.Flightmodel2GearGearPitchDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2GearGearRollDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/gear_roll_deg",
                    Units = "degrees",
                    Description = "Current gear roll angle, degrees.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Gear Roll Deg",
                    Id = DataRefId.Flightmodel2GearGearRollDeg,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2GearTireSteerCommandDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/tire_steer_command_deg",
                    Units = "degrees",
                    Description = "Steering command being sent to this gear, degrees positive right.  This takes into account steering algorithms for big planes like 747, but does not free castoring and springiness.  Writable in 1030.  Override via override_wheel_steer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Tire Steer Command Deg",
                    Id = DataRefId.Flightmodel2GearTireSteerCommandDeg,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearTireSteerActualDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/tire_steer_actual_deg",
                    Units = "degrees",
                    Description = "Steering command actually enacted by the gear, degrees positive right.  Writable in 1030.  Override via override_wheel_steer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Tire Steer Actual Deg",
                    Id = DataRefId.Flightmodel2GearTireSteerActualDeg,
                    Writable = true,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearTireVerticalDeflectionMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/tire_vertical_deflection_mtr",
                    Units = "meters",
                    Description = "Vertical deflection of this gear, meters.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Tire Vertical Deflection Mtr",
                    Id = DataRefId.Flightmodel2GearTireVerticalDeflectionMtr,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearTireVerticalForceNMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/tire_vertical_force_n_mtr",
                    Units = "newton_meters",
                    Description = "Vertical force on this gear, newtons.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Tire Vertical Force N Mtr",
                    Id = DataRefId.Flightmodel2GearTireVerticalForceNMtr,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearTireRotationSpeedRadSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/tire_rotation_speed_rad_sec",
                    Units = "radians/second",
                    Description = "Rotational speed of this tire, radians per second.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Tire Rotation Speed Rad Sec",
                    Id = DataRefId.Flightmodel2GearTireRotationSpeedRadSec,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearTireRotationAngleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/tire_rotation_angle_deg",
                    Units = "degrees",
                    Description = "Tire rotation in degrees, running 0 to 360 over and over as it rolls.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Tire Rotation Angle Deg",
                    Id = DataRefId.Flightmodel2GearTireRotationAngleDeg,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearDeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/deploy_ratio",
                    Units = "ratio",
                    Description = "This is how far down the landing gear is.  0=up, 1= down",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Deploy Ratio",
                    Id = DataRefId.Flightmodel2GearDeployRatio,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearEagleClawAngleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/eagle_claw_angle_deg",
                    Units = "degrees",
                    Description = "Angle of eagle-claw landing gear now, degrees, per gear.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Eagle Claw Angle Deg",
                    Id = DataRefId.Flightmodel2GearEagleClawAngleDeg,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearTireSkidRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/tire_skid_ratio",
                    Units = "0..1",
                    Description = "Ratio of how much this tire is in a skid - 0 = full traction, 1 = completely skidding",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Tire Skid Ratio",
                    Id = DataRefId.Flightmodel2GearTireSkidRatio,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearTotalDeflectionRate
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/total_deflection_rate",
                    Units = "meters/second",
                    Description = "Rate at which the tires are deflecting, positive means shocks are contracting",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Total Deflection Rate",
                    Id = DataRefId.Flightmodel2GearTotalDeflectionRate,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearOnGround
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/on_ground",
                    Units = "boolean",
                    Description = "Is this wheel on the ground",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear On Ground",
                    Id = DataRefId.Flightmodel2GearOnGround,
                    Writable = false,
                    DataType = "int[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearOnGrass
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/on_grass",
                    Units = "boolean",
                    Description = "Is this wheel on grass",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear On Grass",
                    Id = DataRefId.Flightmodel2GearOnGrass,
                    Writable = false,
                    DataType = "int[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearOnNoisy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/on_noisy",
                    Units = "boolean",
                    Description = "Is this wheel on some kind of noisy surface like gravel",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear On Noisy",
                    Id = DataRefId.Flightmodel2GearOnNoisy,
                    Writable = false,
                    DataType = "int[10]"
                };
            }
        }
        private DataRefElement Flightmodel2GearTireSkidSpeedMtrSec
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/gear/tire_skid_speed_mtr_sec",
                    Units = "meters/second",
                    Description = "This is how fast the skidding part of the tire is dragged across the surface it is skidding on in meters/second.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2gear Tire Skid Speed Mtr Sec",
                    Id = DataRefId.Flightmodel2GearTireSkidSpeedMtrSec,
                    Writable = false,
                    DataType = "float[10]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsLandingLightsBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/landing_lights_brightness_ratio",
                    Units = "ratio",
                    Description = "Ratio of the brightness of the landing lights, 0 is off, 1 is max.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Landing Lights Brightness Ratio",
                    Id = DataRefId.Flightmodel2LightsLandingLightsBrightnessRatio,
                    Writable = false,
                    DataType = "float[16]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsGenericLightsBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/generic_lights_brightness_ratio",
                    Units = "ratio",
                    Description = "Ratio of the brightness of the landing lights, 0 is off, 1 is max.  Was dim [64] until 11.10",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Generic Lights Brightness Ratio",
                    Id = DataRefId.Flightmodel2LightsGenericLightsBrightnessRatio,
                    Writable = false,
                    DataType = "float[128]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsTaxiLightsBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/taxi_lights_brightness_ratio",
                    Units = "ratio",
                    Description = "Ratio of the brightness of the taxi light, 0 is off, 1 is max.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Taxi Lights Brightness Ratio",
                    Id = DataRefId.Flightmodel2LightsTaxiLightsBrightnessRatio,
                    Writable = false,
                    DataType = "float[1]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsSpotLightsBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/spot_lights_brightness_ratio",
                    Units = "ratio",
                    Description = "Ratio of the brightness of the spot light, 0 is off, 1 is max.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Spot Lights Brightness Ratio",
                    Id = DataRefId.Flightmodel2LightsSpotLightsBrightnessRatio,
                    Writable = false,
                    DataType = "float[1]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsNavLightsBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/nav_lights_brightness_ratio",
                    Units = "ratio",
                    Description = "Ratio of the brightness of the nav lights, 0 is off, 1 is max.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Nav Lights Brightness Ratio",
                    Id = DataRefId.Flightmodel2LightsNavLightsBrightnessRatio,
                    Writable = false,
                    DataType = "float[1]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsBeaconBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/beacon_brightness_ratio",
                    Units = "ratio",
                    Description = "Ratio of the brightness of the beacon, 0 is off, 1 is max.  Use override_beacons_and_strobes",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Beacon Brightness Ratio",
                    Id = DataRefId.Flightmodel2LightsBeaconBrightnessRatio,
                    Writable = true,
                    DataType = "float[4]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsStrobeBrightnessRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/strobe_brightness_ratio",
                    Units = "ratio",
                    Description = "Ratio of the brightness of the strobe, 0 is off, 1 is max.  Use override_beacons_and_strobes",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Strobe Brightness Ratio",
                    Id = DataRefId.Flightmodel2LightsStrobeBrightnessRatio,
                    Writable = true,
                    DataType = "float[4]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsSpotLightHeadingDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/spot_light_heading_deg",
                    Units = "degrees",
                    Description = "Heading offset in degrees of the spot light from its default position, positive is right.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Spot Light Heading Deg",
                    Id = DataRefId.Flightmodel2LightsSpotLightHeadingDeg,
                    Writable = true,
                    DataType = "float[1]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsSpotLightPitchDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/spot_light_pitch_deg",
                    Units = "degrees",
                    Description = "Pitch offset in degrees of the spot light from its default position, positive is up.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Spot Light Pitch Deg",
                    Id = DataRefId.Flightmodel2LightsSpotLightPitchDeg,
                    Writable = true,
                    DataType = "float[1]"
                };
            }
        }
        private DataRefElement Flightmodel2LightsStrobeFlashNow
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/strobe_flash_now",
                    Units = "boolean",
                    Description = "Is any strobe flashing right now?",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Strobe Flash Now",
                    Id = DataRefId.Flightmodel2LightsStrobeFlashNow,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Flightmodel2LightsOverrideBeaconsAndStrobes
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/override_beacons_and_strobes",
                    Units = "boolean",
                    Description = "override beacon and strobe control",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2lights Override Beacons and Strobes",
                    Id = DataRefId.Flightmodel2LightsOverrideBeaconsAndStrobes,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Flightmodel2MiscCanopyOpenRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/canopy_open_ratio",
                    Units = "ratio",
                    Description = "Canopy position: 0 = closed, 1 = open",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Canopy Open Ratio",
                    Id = DataRefId.Flightmodel2MiscCanopyOpenRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscDoorOpenRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/door_open_ratio",
                    Units = "ratio",
                    Description = "How open is the door, 0 = closed, 1 = open",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Door Open Ratio",
                    Id = DataRefId.Flightmodel2MiscDoorOpenRatio,
                    Writable = false,
                    DataType = "float[20]"
                };
            }
        }
        private DataRefElement Flightmodel2MiscTailhookDeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/tailhook_deploy_ratio",
                    Units = "ratio",
                    Description = "Tailhook position: 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Tailhook Deploy Ratio",
                    Id = DataRefId.Flightmodel2MiscTailhookDeployRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscWaterScoopDeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/water_scoop_deploy_ratio",
                    Units = "ratio",
                    Description = "Water scoop position: 0 = up, 1 = down",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Water Scoop Deploy Ratio",
                    Id = DataRefId.Flightmodel2MiscWaterScoopDeployRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscWaterDropDeployRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/water_drop_deploy_ratio",
                    Units = "ratio",
                    Description = "Water drop door position: 0 = up, 1=  down",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Water Drop Deploy Ratio",
                    Id = DataRefId.Flightmodel2MiscWaterDropDeployRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscWiperAngleDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/wiper_angle_deg",
                    Units = "degrees",
                    Description = "current angle of the wiper.  range of motion is set in PlaneMaker.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Wiper Angle Deg",
                    Id = DataRefId.Flightmodel2MiscWiperAngleDeg,
                    Writable = false,
                    DataType = "float[4]"
                };
            }
        }
        private DataRefElement Flightmodel2MiscCustomSliderRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/custom_slider_ratio",
                    Units = "ratio",
                    Description = "Misc. traveling items for your use.  You define the meaning.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Custom Slider Ratio",
                    Id = DataRefId.Flightmodel2MiscCustomSliderRatio,
                    Writable = false,
                    DataType = "float[24]"
                };
            }
        }
        private DataRefElement Flightmodel2MiscPressureOutflowRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/pressure_outflow_ratio",
                    Units = "ratio",
                    Description = "How far is the pressure-outflow valve open?  0=closed, 1=open",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Pressure Outflow Ratio",
                    Id = DataRefId.Flightmodel2MiscPressureOutflowRatio,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscAoaAngleDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/AoA_angle_degrees",
                    Units = "degrees",
                    Description = "Angle of attack probe.  Positive means aircracft nose is above the flight path in aircraft coordinates.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Aoa Angle Degrees",
                    Id = DataRefId.Flightmodel2MiscAoaAngleDegrees,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscYawStringAngle
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/yaw_string_angle",
                    Units = "degrees",
                    Description = "desc",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Yaw String Angle",
                    Id = DataRefId.Flightmodel2MiscYawStringAngle,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscYawStringAirspeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/yaw_string_airspeed",
                    Units = "kias",
                    Description = "desc",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Yaw String Airspeed",
                    Id = DataRefId.Flightmodel2MiscYawStringAirspeed,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscGforceNormal
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/gforce_normal",
                    Units = "todo",
                    Description = "desc",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Gforce Normal",
                    Id = DataRefId.Flightmodel2MiscGforceNormal,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscGforceAxil
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/gforce_axil",
                    Units = "todo",
                    Description = "desc",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Gforce Axil",
                    Id = DataRefId.Flightmodel2MiscGforceAxil,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscGforceSide
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/gforce_side",
                    Units = "todo",
                    Description = "desc",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Gforce Side",
                    Id = DataRefId.Flightmodel2MiscGforceSide,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscBouncerX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/bouncer_x",
                    Units = "meters",
                    Description = "lateral offset in meters from default for this bouncer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Bouncer X",
                    Id = DataRefId.Flightmodel2MiscBouncerX,
                    Writable = false,
                    DataType = "float[14]"
                };
            }
        }
        private DataRefElement Flightmodel2MiscBouncerY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/bouncer_y",
                    Units = "meters",
                    Description = "vertical offset in meters from default for this bouncer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Bouncer Y",
                    Id = DataRefId.Flightmodel2MiscBouncerY,
                    Writable = false,
                    DataType = "float[14]"
                };
            }
        }
        private DataRefElement Flightmodel2MiscBouncerZ
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/bouncer_z",
                    Units = "meters",
                    Description = "longitudinal offset in meters from default for this bouncer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Bouncer Z",
                    Id = DataRefId.Flightmodel2MiscBouncerZ,
                    Writable = false,
                    DataType = "float[14]"
                };
            }
        }
        private DataRefElement Flightmodel2MiscBouncerVx
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/bouncer_vx",
                    Units = "meters",
                    Description = "lateral offset in meters from default for this bouncer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Bouncer Vx",
                    Id = DataRefId.Flightmodel2MiscBouncerVx,
                    Writable = false,
                    DataType = "float[14]"
                };
            }
        }
        private DataRefElement Flightmodel2MiscBouncerVy
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/bouncer_vy",
                    Units = "meters",
                    Description = "vertical offset in meters from default for this bouncer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Bouncer Vy",
                    Id = DataRefId.Flightmodel2MiscBouncerVy,
                    Writable = false,
                    DataType = "float[14]"
                };
            }
        }
        private DataRefElement Flightmodel2MiscBouncerVz
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/bouncer_vz",
                    Units = "meters",
                    Description = "longitudinal offset in meters from default for this bouncer",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Bouncer Vz",
                    Id = DataRefId.Flightmodel2MiscBouncerVz,
                    Writable = false,
                    DataType = "float[14]"
                };
            }
        }
        private DataRefElement Flightmodel2MiscAutoStartInProgress
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/auto_start_in_progress",
                    Units = "boolean",
                    Description = "True while the auto-start sequence is happening.  Plugins that override the auto-start sequence should set this to 1 during the sequence and clear it when done.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Auto Start In Progress",
                    Id = DataRefId.Flightmodel2MiscAutoStartInProgress,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Flightmodel2MiscAutoBoardInProgress
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/auto_board_in_progress",
                    Units = "boolean",
                    Description = "True while the auto-board sequence is happening.  Plugins that override the auto-board sequence should set this to 1 during the sequence and clear it when done.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Auto Board In Progress",
                    Id = DataRefId.Flightmodel2MiscAutoBoardInProgress,
                    Writable = true,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Flightmodel2MiscTailhookAngleDegrees
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/tailhook_angle_degrees",
                    Units = "degrees",
                    Description = "Angle of the tailhook",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Tailhook Angle Degrees",
                    Id = DataRefId.Flightmodel2MiscTailhookAngleDegrees,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2MiscTowInProgress
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/tow_in_progress",
                    Units = "boolean",
                    Description = "True while a tow operation is currently taking place. ",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Tow In Progress",
                    Id = DataRefId.Flightmodel2MiscTowInProgress,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Flightmodel2MiscHasCrashed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/has_crashed",
                    Units = "boolean",
                    Description = "True if the aircraft is in a crashed state",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2misc Has Crashed",
                    Id = DataRefId.Flightmodel2MiscHasCrashed,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement Flightmodel2PositionTrueTheta
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/true_theta",
                    Units = "degrees",
                    Description = "The pitch of the aircraft relative to the earth precisely below the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position True Theta",
                    Id = DataRefId.Flightmodel2PositionTrueTheta,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionTruePhi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/true_phi",
                    Units = "degrees",
                    Description = "The roll of the aircraft relative to the earth precisely below the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position True Phi",
                    Id = DataRefId.Flightmodel2PositionTruePhi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionTruePsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/true_psi",
                    Units = "degrees",
                    Description = "The heading of the aircraft relative to the earth precisely below the aircraft - true degrees north, always",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position True Psi",
                    Id = DataRefId.Flightmodel2PositionTruePsi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionMagPsi
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/mag_psi",
                    Units = "degrees",
                    Description = "The real magnetic heading of the aircraft - the old magpsi dataref was FUBAR",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position Mag Psi",
                    Id = DataRefId.Flightmodel2PositionMagPsi,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionAlpha
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/alpha",
                    Units = "degrees",
                    Description = "The pitch relative to the flown path (angle of attack)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position Alpha",
                    Id = DataRefId.Flightmodel2PositionAlpha,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionBeta
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/beta",
                    Units = "degrees",
                    Description = "The heading relative to the flown path (yaw)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position Beta",
                    Id = DataRefId.Flightmodel2PositionBeta,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionPressureAltitude
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/pressure_altitude",
                    Units = "feet",
                    Description = "User airplane altitude as pressure altitude in standard atmosphere",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position Pressure Altitude",
                    Id = DataRefId.Flightmodel2PositionPressureAltitude,
                    Writable = false,
                    DataType = "double"
                };
            }
        }
        private DataRefElement Flightmodel2PositionVpath
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/vpath",
                    Units = "degrees",
                    Description = "The pitch the aircraft actually flies.  (vpath+alpha=theta)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position Vpath",
                    Id = DataRefId.Flightmodel2PositionVpath,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionHpath
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/hpath",
                    Units = "degrees",
                    Description = "The heading the aircraft actually flies.  (hpath+beta=psi)",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position Hpath",
                    Id = DataRefId.Flightmodel2PositionHpath,
                    Writable = true,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionGroundspeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/groundspeed",
                    Units = "meters/sec",
                    Description = "The ground speed of the aircraft",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position Groundspeed",
                    Id = DataRefId.Flightmodel2PositionGroundspeed,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionTrueAirspeed
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/true_airspeed",
                    Units = "meters/sec",
                    Description = "Air speed true - this does not take into account air density at altitude!",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position True Airspeed",
                    Id = DataRefId.Flightmodel2PositionTrueAirspeed,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2PositionYAgl
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/position/y_agl",
                    Units = "",
                    Description = "",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2position Y Agl",
                    Id = DataRefId.Flightmodel2PositionYAgl,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement Flightmodel2WingAileron1Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/aileron1_deg",
                    Units = "degrees",
                    Description = "Deflection of the aileron from set #1 on this wing. Degrees, positive is trailing-edge down.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Aileron1deg",
                    Id = DataRefId.Flightmodel2WingAileron1Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingAileron2Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/aileron2_deg",
                    Units = "degrees",
                    Description = "Deflection of the aileron from set #2 on this wing. Degrees, positive is trailing-edge down.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Aileron2deg",
                    Id = DataRefId.Flightmodel2WingAileron2Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingSpoiler1Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/spoiler1_deg",
                    Units = "degrees",
                    Description = "Deflection of the roll-spoilerfrom set #1 on this wing. Degrees, positive is trailing-edge down.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Spoiler1deg",
                    Id = DataRefId.Flightmodel2WingSpoiler1Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingSpoiler2Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/spoiler2_deg",
                    Units = "degrees",
                    Description = "Deflection of the roll-spoilerfrom set #1 on this wing. Degrees, positive is trailing-edge down.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Spoiler2deg",
                    Id = DataRefId.Flightmodel2WingSpoiler2Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingYawbrakeDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/yawbrake_deg",
                    Units = "degrees",
                    Description = "Deflection of the yaw-brake on this wing. A yaw-brake is a set of spoilers on the top and bottom of the wing that split open symmetrically to drag that wing aft and yaw the plane. They are used on the B-2, for example.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Yawbrake Deg",
                    Id = DataRefId.Flightmodel2WingYawbrakeDeg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingElevator1Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/elevator1_deg",
                    Units = "degrees",
                    Description = "Deflection of the elevator from set #1 on this wing. Degrees, positive is trailing-edge down.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Elevator1deg",
                    Id = DataRefId.Flightmodel2WingElevator1Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingElevator2Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/elevator2_deg",
                    Units = "degrees",
                    Description = "Deflection of the elevator from set #2 on this wing. Degrees, positive is trailing-edge down.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Elevator2deg",
                    Id = DataRefId.Flightmodel2WingElevator2Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingRudder1Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/rudder1_deg",
                    Units = "degrees",
                    Description = "Deflection of the rudder from set #1 on this wing. Degrees, positive is trailing-edge right.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Rudder1deg",
                    Id = DataRefId.Flightmodel2WingRudder1Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingRudder2Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/rudder2_deg",
                    Units = "degrees",
                    Description = "Deflection of the rudder from set #2 on this wing. Degrees, positive is trailing-edge right.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Rudder2deg",
                    Id = DataRefId.Flightmodel2WingRudder2Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingFlap1Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/flap1_deg",
                    Units = "degrees",
                    Description = "Deflection of the flap from set #1 on this wing. Degrees, positive is trailing-edge down.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Flap1deg",
                    Id = DataRefId.Flightmodel2WingFlap1Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingFlap2Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/flap2_deg",
                    Units = "degrees",
                    Description = "Deflection of the flap from set #2 on this wing. Degrees, positive is trailing-edge down.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Flap2deg",
                    Id = DataRefId.Flightmodel2WingFlap2Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingSpeedbrake1Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/speedbrake1_deg",
                    Units = "degrees",
                    Description = "Deflection of the speedbrakes from set #1 on this wing.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Speedbrake1deg",
                    Id = DataRefId.Flightmodel2WingSpeedbrake1Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingSpeedbrake2Deg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/speedbrake2_deg",
                    Units = "degrees",
                    Description = "Deflection of the speedbrakes from set #2 on this wing.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Speedbrake2deg",
                    Id = DataRefId.Flightmodel2WingSpeedbrake2Deg,
                    Writable = true,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingWingTipDeflectionDeg
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/wing_tip_deflection_deg",
                    Units = "degrees",
                    Description = "Degrees of deflection of a line from the wing root (extended to the plane centerline) to the tip.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Wing Tip Deflection Deg",
                    Id = DataRefId.Flightmodel2WingWingTipDeflectionDeg,
                    Writable = false,
                    DataType = "float[32]"
                };
            }
        }
        private DataRefElement Flightmodel2WingWingCondensationRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/wing_condensation_ratio",
                    Units = "ratio",
                    Description = "Strength of wing condensation for this wing, 0 is none, 1 = max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Wing Condensation Ratio",
                    Id = DataRefId.Flightmodel2WingWingCondensationRatio,
                    Writable = false,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingWingTipCondensationRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/wing_tip_condensation_ratio",
                    Units = "ratio",
                    Description = "Strength of wing tip vapor trail for this wing, 0 is none, 1 = max",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Wing Tip Condensation Ratio",
                    Id = DataRefId.Flightmodel2WingWingTipCondensationRatio,
                    Writable = false,
                    DataType = "float[48]"
                };
            }
        }
        private DataRefElement Flightmodel2WingElementsElementMACMtr
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/elements/element_MAC_mtr",
                    Units = "meters",
                    Description = "Width of chord at the MAC.",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Elements Element MAC Mtr",
                    Id = DataRefId.Flightmodel2WingElementsElementMACMtr,
                    Writable = false,
                    DataType = "float[480]"
                };
            }
        }
        private DataRefElement Flightmodel2WingElementsElementSurfaceAreaMtrSq
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/elements/element_surface_area_mtr_sq",
                    Units = "square_meters",
                    Description = "per element surface area",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Elements Element Surface Area Mtr Sq",
                    Id = DataRefId.Flightmodel2WingElementsElementSurfaceAreaMtrSq,
                    Writable = false,
                    DataType = "float[480]"
                };
            }
        }
        private DataRefElement Flightmodel2WingElementsElementCondensationRatio
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/elements/element_condensation_ratio",
                    Units = "ratio",
                    Description = "Per element condensation ratio",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Elements Element Condensation Ratio",
                    Id = DataRefId.Flightmodel2WingElementsElementCondensationRatio,
                    Writable = false,
                    DataType = "float[480]"
                };
            }
        }
        private DataRefElement Flightmodel2WingElementsElementIsStalled
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/flightmodel2/wing/elements/element_is_stalled",
                    Units = "boolean",
                    Description = "Per element - is this element stalled?",
                    Frequency = DefaultFrequency,
                    Name = "Flightmodel2wing Elements Element Is Stalled",
                    Id = DataRefId.Flightmodel2WingElementsElementIsStalled,
                    Writable = false,
                    DataType = "float[480]"
                };
            }
        }
        private DataRefElement GraphicsVRButtonAxisX
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/VR/button_axis_x",
                    Units = "Ratio",
                    Description = "For OBJs used to draw VR controllers: the X deflection (or axis deflection) of each axis on the controller.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics VR Button Axis X",
                    Id = DataRefId.GraphicsVRButtonAxisX,
                    Writable = false,
                    DataType = "float[5]"
                };
            }
        }
        private DataRefElement GraphicsVRButtonAxisY
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/VR/button_axis_y",
                    Units = "Ratio",
                    Description = "For OBJs used to draw VR controllers: for 2-d thumb sticks or dpads, this is the second axis.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics VR Button Axis Y",
                    Id = DataRefId.GraphicsVRButtonAxisY,
                    Writable = false,
                    DataType = "float[5]"
                };
            }
        }
        private DataRefElement GraphicsVRButtonDown
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/VR/button_down",
                    Units = "Boolean",
                    Description = "For OBJs used to draw VR controllers: button status of each button on the controller.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics VR Button Down",
                    Id = DataRefId.GraphicsVRButtonDown,
                    Writable = false,
                    DataType = "int[64]"
                };
            }
        }
        private DataRefElement GraphicsVRBacklightLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/VR/backlight_level",
                    Units = "Ratio",
                    Description = "For OBJs used to draw VR controllers: Level of back lighting on the controller.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics VR Backlight Level",
                    Id = DataRefId.GraphicsVRBacklightLevel,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsVRSeekerLightLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/VR/seeker_light_level",
                    Units = "Ratio",
                    Description = "For OBJs used to draw VR controllers: Level of lighting on the tip of the controller.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics VR Seeker Light Level",
                    Id = DataRefId.GraphicsVRSeekerLightLevel,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsVRTouchSpotLightLevel
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/VR/touch_spot_light_level",
                    Units = "Ratio",
                    Description = "For OBJs used to draw VR controllers: Level of lighting on the D-Pad/joystick part of the controller.",
                    Frequency = DefaultFrequency,
                    Name = "Graphics VR Touch Spot Light Level",
                    Id = DataRefId.GraphicsVRTouchSpotLightLevel,
                    Writable = false,
                    DataType = "float"
                };
            }
        }
        private DataRefElement GraphicsVREnabled
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/VR/enabled",
                    Units = "Boolean",
                    Description = "True if VR is enabled, false if it is disabled",
                    Frequency = DefaultFrequency,
                    Name = "Graphics VR Enabled",
                    Id = DataRefId.GraphicsVREnabled,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsVRUsing3DMouse
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/VR/using_3d_mouse",
                    Units = "Boolean",
                    Description = "True if the 3-d VR mouse is in use",
                    Frequency = DefaultFrequency,
                    Name = "Graphics VR Using3d Mouse",
                    Id = DataRefId.GraphicsVRUsing3DMouse,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
        private DataRefElement GraphicsVRTeleportOnGround
        {
            get
            {
                return new DataRefElement
                {
                    DataRef = "sim/graphics/VR/teleport_on_ground",
                    Units = "Boolean",
                    Description = "True if the user is teleporting outside the aircraft.  In this case the pilot's head position is not reliable - use the regular camera location",
                    Frequency = DefaultFrequency,
                    Name = "Graphics VR Teleport On Ground",
                    Id = DataRefId.GraphicsVRTeleportOnGround,
                    Writable = false,
                    DataType = "int"
                };
            }
        }
    }
}
